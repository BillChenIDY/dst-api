{
    "组件.GetDebugString:": {
        "prefix": "components.yotc_racestats:GetDebugString",
        "body": "components.yotc_racestats:GetDebugString()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnFX:": {
        "prefix": "components.burnable:SpawnFX",
        "body": "components.burnable:SpawnFX(${1:immediate})",
        "description": " ※参数: \n   (immediate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInfused:": {
        "prefix": "components.acidinfusible:IsInfused",
        "body": "components.acidinfusible:IsInfused()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.KillFX:": {
        "prefix": "components.burnable:KillFX",
        "body": "components.burnable:KillFX()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoveFromEntity:": {
        "prefix": "components.yotc_racestart:OnRemoveFromEntity",
        "body": "components.yotc_racestart:OnRemoveFromEntity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMultipliers:": {
        "prefix": "components.foodmemory:SetMultipliers",
        "body": "components.foodmemory:SetMultipliers(${1:mults})",
        "description": " ※参数: \n   (mults)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnInfusedDirty:": {
        "prefix": "components.acidinfusible:OnInfusedDirty",
        "body": "components.acidinfusible:OnInfusedDirty(${1:acidraining},${2:hasrainimmunity})",
        "description": " ※参数: \n   (acidraining)<>[] \n   (hasrainimmunity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDamageTakenMultiplier:": {
        "prefix": "components.acidinfusible:SetDamageTakenMultiplier",
        "body": "components.acidinfusible:SetDamageTakenMultiplier(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDamageMultiplier:": {
        "prefix": "components.acidinfusible:SetDamageMultiplier",
        "body": "components.acidinfusible:SetDamageMultiplier(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnInfuse:": {
        "prefix": "components.acidinfusible:OnInfuse",
        "body": "components.acidinfusible:OnInfuse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUninfuseFn:": {
        "prefix": "components.acidinfusible:SetOnUninfuseFn",
        "body": "components.acidinfusible:SetOnUninfuseFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFXLevel:": {
        "prefix": "components.burnable:SetFXLevel",
        "body": "components.burnable:SetFXLevel(${1:level},${2:percent})",
        "description": " ※参数: \n   (level)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnInfuseFn:": {
        "prefix": "components.acidinfusible:SetOnInfuseFn",
        "body": "components.acidinfusible:SetOnInfuseFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUseRainImmunity:": {
        "prefix": "components.acidinfusible:SetUseRainImmunity",
        "body": "components.acidinfusible:SetUseRainImmunity(${1:userainimmunity})",
        "description": " ※参数: \n   (userainimmunity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnUninfuse:": {
        "prefix": "components.acidinfusible:OnUninfuse",
        "body": "components.acidinfusible:OnUninfuse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpeedMultiplier:": {
        "prefix": "components.acidinfusible:SetSpeedMultiplier",
        "body": "components.acidinfusible:SetSpeedMultiplier(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoDelta:": {
        "prefix": "components.wereness:DoDelta",
        "body": "components.wereness:DoDelta(${1:delta},${2:overtime})",
        "description": " ※参数: \n   (delta)<>[] \n   (overtime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPercent:": {
        "prefix": "components.wereness:SetPercent",
        "body": "components.wereness:SetPercent(${1:percent},${2:overtime})",
        "description": " ※参数: \n   (percent)<>[] \n   (overtime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOverrideAcidRainTickFn:": {
        "prefix": "components.acidlevel:GetOverrideAcidRainTickFn",
        "body": "components.acidlevel:GetOverrideAcidRainTickFn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartIsAcidRainingFn:": {
        "prefix": "components.acidlevel:SetOnStartIsAcidRainingFn",
        "body": "components.acidlevel:SetOnStartIsAcidRainingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSave:": {
        "prefix": "components.yotc_racestats:OnSave",
        "body": "components.yotc_racestats:OnSave()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIgnoreAcidRainTicks:": {
        "prefix": "components.acidlevel:SetIgnoreAcidRainTicks",
        "body": "components.acidlevel:SetIgnoreAcidRainTicks(${1:ignoreacidrainticks})",
        "description": " ※参数: \n   (ignoreacidrainticks)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOverrideAcidRainTickFn:": {
        "prefix": "components.acidlevel:SetOverrideAcidRainTickFn",
        "body": "components.acidlevel:SetOverrideAcidRainTickFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPercent:": {
        "prefix": "components.wereness:GetPercent",
        "body": "components.wereness:GetPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartIsRainingFn:": {
        "prefix": "components.acidlevel:SetOnStartIsRainingFn",
        "body": "components.acidlevel:SetOnStartIsRainingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopIsAcidRainingFn:": {
        "prefix": "components.acidlevel:SetOnStopIsAcidRainingFn",
        "body": "components.acidlevel:SetOnStopIsAcidRainingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnIsRaining:": {
        "prefix": "components.acidlevel:OnIsRaining",
        "body": "components.acidlevel:OnIsRaining(${1:israining})",
        "description": " ※参数: \n   (israining)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLoad:": {
        "prefix": "components.yotc_racestats:OnLoad",
        "body": "components.yotc_racestats:OnLoad(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopIsRainingFn:": {
        "prefix": "components.acidlevel:SetOnStopIsRainingFn",
        "body": "components.acidlevel:SetOnStopIsRainingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnIsAcidRaining:": {
        "prefix": "components.acidlevel:OnIsAcidRaining",
        "body": "components.acidlevel:OnIsAcidRaining(${1:isacidraining})",
        "description": " ※参数: \n   (isacidraining)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanActivate:": {
        "prefix": "components.remoteteleporter:CanActivate",
        "body": "components.remoteteleporter:CanActivate(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoActivate:": {
        "prefix": "components.activatable:DoActivate",
        "body": "components.activatable:DoActivate(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelPeriodicSync:": {
        "prefix": "components.age:CancelPeriodicSync",
        "body": "components.age:CancelPeriodicSync()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAge:": {
        "prefix": "components.age:GetAge",
        "body": "components.age:GetAge()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAgeInDays:": {
        "prefix": "components.age:GetAgeInDays",
        "body": "components.age:GetAgeInDays()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LongUpdate:": {
        "prefix": "components.yotb_sewer:LongUpdate",
        "body": "components.yotb_sewer:LongUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PauseAging:": {
        "prefix": "components.age:PauseAging",
        "body": "components.age:PauseAging()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResumeAging:": {
        "prefix": "components.age:ResumeAging",
        "body": "components.age:ResumeAging()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RestartPeriodicSync:": {
        "prefix": "components.age:RestartPeriodicSync",
        "body": "components.age:RestartPeriodicSync()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDisplayAgeInDays:": {
        "prefix": "components.age:GetDisplayAgeInDays",
        "body": "components.age:GetDisplayAgeInDays()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MorphToForm:": {
        "prefix": "components.amorphous:MorphToForm",
        "body": "components.amorphous:MorphToForm(${1:form},${2:instant})",
        "description": " ※参数: \n   (form)<>[] \n   (instant)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LoadPostPass:": {
        "prefix": "components.yotb_stager:LoadPostPass",
        "body": "components.yotb_stager:LoadPostPass(${1:ents},${2:data})",
        "description": " ※参数: \n   (ents)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentForm:": {
        "prefix": "components.amorphous:GetCurrentForm",
        "body": "components.amorphous:GetCurrentForm()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddForm:": {
        "prefix": "components.amorphous:AddForm",
        "body": "components.amorphous:AddForm(${1:form})",
        "description": " ※参数: \n   (form)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForMorph:": {
        "prefix": "components.amorphous:CheckForMorph",
        "body": "components.amorphous:CheckForMorph()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindForm:": {
        "prefix": "components.amorphous:FindForm",
        "body": "components.amorphous:FindForm(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetExitWaterFn:": {
        "prefix": "components.amphibiouscreature:SetExitWaterFn",
        "body": "components.amphibiouscreature:SetExitWaterFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnUpdate:": {
        "prefix": "components.yotc_racecompetitor:OnUpdate",
        "body": "components.yotc_racecompetitor:OnUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnEntityWake:": {
        "prefix": "components.vanish_on_sleep:OnEntityWake",
        "body": "components.vanish_on_sleep:OnEntityWake()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEnterWaterFn:": {
        "prefix": "components.amphibiouscreature:SetEnterWaterFn",
        "body": "components.amphibiouscreature:SetEnterWaterFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnEntitySleep:": {
        "prefix": "components.yotc_racecompetitor:OnEntitySleep",
        "body": "components.yotc_racecompetitor:OnEntitySleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldTransition:": {
        "prefix": "components.amphibiouscreature:ShouldTransition",
        "body": "components.amphibiouscreature:ShouldTransition(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnExitOcean:": {
        "prefix": "components.amphibiouscreature:OnExitOcean",
        "body": "components.amphibiouscreature:OnExitOcean()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBanks:": {
        "prefix": "components.amphibiouscreature:SetBanks",
        "body": "components.amphibiouscreature:SetBanks(${1:land},${2:ocean})",
        "description": " ※参数: \n   (land)<>[] \n   (ocean)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnEnterOcean:": {
        "prefix": "components.amphibiouscreature:OnEnterOcean",
        "body": "components.amphibiouscreature:OnEnterOcean()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartRaisingAnchor:": {
        "prefix": "components.anchor:StartRaisingAnchor",
        "body": "components.anchor:StartRaisingAnchor()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsAnchorLowered:": {
        "prefix": "components.anchor:SetIsAnchorLowered",
        "body": "components.anchor:SetIsAnchorLowered(${1:is_lowered})",
        "description": " ※参数: \n   (is_lowered)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBoat:": {
        "prefix": "components.steeringwheeluser:GetBoat",
        "body": "components.steeringwheeluser:GetBoat()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AnchorRaised:": {
        "prefix": "components.anchor:AnchorRaised",
        "body": "components.anchor:AnchorRaised()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AnchorLowered:": {
        "prefix": "components.anchor:AnchorLowered",
        "body": "components.anchor:AnchorLowered()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddAnchorRaiser:": {
        "prefix": "components.anchor:AddAnchorRaiser",
        "body": "components.anchor:AddAnchorRaiser(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetVelocityMod:": {
        "prefix": "components.mast:SetVelocityMod",
        "body": "components.mast:SetVelocityMod(${1:set})",
        "description": " ※参数: \n   (set)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAnchorRaiser:": {
        "prefix": "components.anchor:RemoveAnchorRaiser",
        "body": "components.anchor:RemoveAnchorRaiser(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartLoweringAnchor:": {
        "prefix": "components.anchor:StartLoweringAnchor",
        "body": "components.anchor:StartLoweringAnchor()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentDepth:": {
        "prefix": "components.winch:GetCurrentDepth",
        "body": "components.winch:GetCurrentDepth()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpellFn:": {
        "prefix": "components.spellcaster:SetSpellFn",
        "body": "components.spellcaster:SetSpellFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CastSpell:": {
        "prefix": "components.spellcaster:CastSpell",
        "body": "components.spellcaster:CastSpell(${1:target},${2:pos},${3:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (pos)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanCast:": {
        "prefix": "components.pocketwatch:CanCast",
        "body": "components.pocketwatch:CanCast(${1:doer},${2:target},${3:pos})",
        "description": " ※参数: \n   (doer)<>[] \n   (target)<>[] \n   (pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDeployRadius:": {
        "prefix": "components.aoetargeting:SetDeployRadius",
        "body": "components.aoetargeting:SetDeployRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRange:": {
        "prefix": "components.aoetargeting:GetRange",
        "body": "components.aoetargeting:GetRange()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEnabled:": {
        "prefix": "components.setbonus:IsEnabled",
        "body": "components.setbonus:IsEnabled(${1:setname})",
        "description": " ※参数: \n   (setname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAllowWater:": {
        "prefix": "components.aoetargeting:SetAllowWater",
        "body": "components.aoetargeting:SetAllowWater(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTargeting:": {
        "prefix": "components.aoetargeting:StartTargeting",
        "body": "components.aoetargeting:StartTargeting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanRepeatCast:": {
        "prefix": "components.aoetargeting:CanRepeatCast",
        "body": "components.aoetargeting:CanRepeatCast()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldRepeatCast:": {
        "prefix": "components.aoetargeting:ShouldRepeatCast",
        "body": "components.aoetargeting:ShouldRepeatCast(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTargeting:": {
        "prefix": "components.aoetargeting:StopTargeting",
        "body": "components.aoetargeting:StopTargeting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnTargetFXAt:": {
        "prefix": "components.aoetargeting:SpawnTargetFXAt",
        "body": "components.aoetargeting:SpawnTargetFXAt(${1:pos})",
        "description": " ※参数: \n   (pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldRepeatCastFn:": {
        "prefix": "components.aoetargeting:SetShouldRepeatCastFn",
        "body": "components.aoetargeting:SetShouldRepeatCastFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTargetFX:": {
        "prefix": "components.aoetargeting:SetTargetFX",
        "body": "components.aoetargeting:SetTargetFX(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRange:": {
        "prefix": "components.wardrobe:SetRange",
        "body": "components.wardrobe:SetRange(${1:range})",
        "description": " ※参数: \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAllowRiding:": {
        "prefix": "components.aoetargeting:SetAllowRiding",
        "body": "components.aoetargeting:SetAllowRiding(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAlwaysValid:": {
        "prefix": "components.aoetargeting:SetAlwaysValid",
        "body": "components.aoetargeting:SetAlwaysValid(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEnabled:": {
        "prefix": "components.worldmigrator:SetEnabled",
        "body": "components.worldmigrator:SetEnabled(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPreHitFn:": {
        "prefix": "components.projectile:SetOnPreHitFn",
        "body": "components.projectile:SetOnPreHitFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNoTags:": {
        "prefix": "components.aoeweapon_base:SetNoTags",
        "body": "components.aoeweapon_base:SetNoTags(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._CombineTags:": {
        "prefix": "components.aoeweapon_base:_CombineTags",
        "body": "components.aoeweapon_base:_CombineTags()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnToss:": {
        "prefix": "components.aoeweapon_base:OnToss",
        "body": "components.aoeweapon_base:OnToss(${1:doer},${2:target},${3:sourceposition},${4:basespeed},${5:startradius})",
        "description": " ※参数: \n   (doer)<>[] \n   (target)<>[] \n   (sourceposition)<>[] \n   (basespeed)<>[] \n   (startradius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTags:": {
        "prefix": "components.armor:SetTags",
        "body": "components.armor:SetTags(${1:tags})",
        "description": " ※参数: \n   (tags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnHit:": {
        "prefix": "components.aoeweapon_base:OnHit",
        "body": "components.aoeweapon_base:OnHit(${1:doer},${2:target})",
        "description": " ※参数: \n   (doer)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnMissFn:": {
        "prefix": "components.projectile:SetOnMissFn",
        "body": "components.projectile:SetOnMissFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDamage:": {
        "prefix": "components.aoeweapon_base:SetDamage",
        "body": "components.aoeweapon_base:SetDamage(${1:dmg})",
        "description": " ※参数: \n   (dmg)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWorkActions:": {
        "prefix": "components.aoeweapon_base:SetWorkActions",
        "body": "components.aoeweapon_base:SetWorkActions(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStimuli:": {
        "prefix": "components.projectile:SetStimuli",
        "body": "components.projectile:SetStimuli(${1:stimuli})",
        "description": " ※参数: \n   (stimuli)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnHitFn:": {
        "prefix": "components.projectile:SetOnHitFn",
        "body": "components.projectile:SetOnHitFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoLeap:": {
        "prefix": "components.aoeweapon_leap:DoLeap",
        "body": "components.aoeweapon_leap:DoLeap(${1:doer},${2:startingpos},${3:targetpos})",
        "description": " ※参数: \n   (doer)<>[] \n   (startingpos)<>[] \n   (targetpos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLeaptFn:": {
        "prefix": "components.aoeweapon_leap:SetOnLeaptFn",
        "body": "components.aoeweapon_leap:SetOnLeaptFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPreLeapFn:": {
        "prefix": "components.aoeweapon_leap:SetOnPreLeapFn",
        "body": "components.aoeweapon_leap:SetOnPreLeapFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAOERadius:": {
        "prefix": "components.aoeweapon_leap:SetAOERadius",
        "body": "components.aoeweapon_leap:SetAOERadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTrailFX:": {
        "prefix": "components.aoeweapon_lunge:SetTrailFX",
        "body": "components.aoeweapon_lunge:SetTrailFX(${1:prefab},${2:spacing})",
        "description": " ※参数: \n   (prefab)<>[] \n   (spacing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSideRange:": {
        "prefix": "components.aoeweapon_lunge:SetSideRange",
        "body": "components.aoeweapon_lunge:SetSideRange(${1:range})",
        "description": " ※参数: \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoLunge:": {
        "prefix": "components.aoeweapon_lunge:DoLunge",
        "body": "components.aoeweapon_lunge:DoLunge(${1:doer},${2:startingpos},${3:targetpos})",
        "description": " ※参数: \n   (doer)<>[] \n   (startingpos)<>[] \n   (targetpos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSound:": {
        "prefix": "components.aoeweapon_lunge:SetSound",
        "body": "components.aoeweapon_lunge:SetSound(${1:path})",
        "description": " ※参数: \n   (path)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLungedFn:": {
        "prefix": "components.aoeweapon_lunge:SetOnLungedFn",
        "body": "components.aoeweapon_lunge:SetOnLungedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPreLungeFn:": {
        "prefix": "components.aoeweapon_lunge:SetOnPreLungeFn",
        "body": "components.aoeweapon_lunge:SetOnPreLungeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAppraise:": {
        "prefix": "components.appraisable:CanAppraise",
        "body": "components.appraisable:CanAppraise(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Appraise:": {
        "prefix": "components.appraisable:Appraise",
        "body": "components.appraisable:Appraise(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUpdateDist:": {
        "prefix": "components.areaaware:SetUpdateDist",
        "body": "components.areaaware:SetUpdateDist(${1:dist})",
        "description": " ※参数: \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentArea:": {
        "prefix": "components.areaaware:GetCurrentArea",
        "body": "components.areaaware:GetCurrentArea()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartWatchingTile:": {
        "prefix": "components.areaaware:StartWatchingTile",
        "body": "components.areaaware:StartWatchingTile(${1:tile_id})",
        "description": " ※参数: \n   (tile_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdatePosition:": {
        "prefix": "components.reticule:UpdatePosition",
        "body": "components.reticule:UpdatePosition(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartCheckingPosition:": {
        "prefix": "components.areaaware:StartCheckingPosition",
        "body": "components.areaaware:StartCheckingPosition(${1:checkinterval})",
        "description": " ※参数: \n   (checkinterval)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CurrentlyInTag:": {
        "prefix": "components.areaaware:CurrentlyInTag",
        "body": "components.areaaware:CurrentlyInTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._TestArea:": {
        "prefix": "components.areaaware:_TestArea",
        "body": "components.areaaware:_TestArea(${1:pt_x},${2:pt_z},${3:on_land},${4:r})",
        "description": " ※参数: \n   (pt_x)<>[] \n   (pt_z)<>[] \n   (on_land)<>[] \n   (r)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopWatchingTile:": {
        "prefix": "components.areaaware:StopWatchingTile",
        "body": "components.areaaware:StopWatchingTile(${1:tile_id})",
        "description": " ※参数: \n   (tile_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCondition:": {
        "prefix": "components.armor:SetCondition",
        "body": "components.armor:SetCondition(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddWeakness:": {
        "prefix": "components.armor:AddWeakness",
        "body": "components.armor:AddWeakness(${1:tag},${2:bonus_damage})",
        "description": " ※参数: \n   (tag)<>[] \n   (bonus_damage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveWeakness:": {
        "prefix": "components.armor:RemoveWeakness",
        "body": "components.armor:RemoveWeakness(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBonusDamage:": {
        "prefix": "components.saddler:GetBonusDamage",
        "body": "components.saddler:GetBonusDamage(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InitCondition:": {
        "prefix": "components.armor:InitCondition",
        "body": "components.armor:InitCondition(${1:amount},${2:absorb_percent})",
        "description": " ※参数: \n   (amount)<>[] \n   (absorb_percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnFinished:": {
        "prefix": "components.finiteuses:SetOnFinished",
        "body": "components.finiteuses:SetOnFinished(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDamaged:": {
        "prefix": "components.armor:IsDamaged",
        "body": "components.armor:IsDamaged()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Repair:": {
        "prefix": "components.repairable:Repair",
        "body": "components.repairable:Repair(${1:doer},${2:repair_item})",
        "description": " ※参数: \n   (doer)<>[] \n   (repair_item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeDamage:": {
        "prefix": "components.stunnable:TakeDamage",
        "body": "components.stunnable:TakeDamage(${1:damage})",
        "description": " ※参数: \n   (damage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanResist:": {
        "prefix": "components.armor:CanResist",
        "body": "components.armor:CanResist(${1:attacker},${2:weapon})",
        "description": " ※参数: \n   (attacker)<>[] \n   (weapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetKeepOnFinished:": {
        "prefix": "components.armor:SetKeepOnFinished",
        "body": "components.armor:SetKeepOnFinished(${1:keep})",
        "description": " ※参数: \n   (keep)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InitIndestructible:": {
        "prefix": "components.armor:InitIndestructible",
        "body": "components.armor:InitIndestructible(${1:absorb_percent})",
        "description": " ※参数: \n   (absorb_percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAbsorption:": {
        "prefix": "components.saddler:GetAbsorption",
        "body": "components.saddler:GetAbsorption()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsIndestructible:": {
        "prefix": "components.armor:IsIndestructible",
        "body": "components.armor:IsIndestructible()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAbsorption:": {
        "prefix": "components.saddler:SetAbsorption",
        "body": "components.saddler:SetAbsorption(${1:percent})",
        "description": " ※参数: \n   (percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCooldownTime:": {
        "prefix": "components.roseinspectableuser:SetCooldownTime",
        "body": "components.roseinspectableuser:SetCooldownTime(${1:cooldowntime})",
        "description": " ※参数: \n   (cooldowntime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanDodgeFn:": {
        "prefix": "components.attackdodger:SetCanDodgeFn",
        "body": "components.attackdodger:SetCanDodgeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Dodge:": {
        "prefix": "components.attackdodger:Dodge",
        "body": "components.attackdodger:Dodge(${1:attacker})",
        "description": " ※参数: \n   (attacker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDodge:": {
        "prefix": "components.attackdodger:CanDodge",
        "body": "components.attackdodger:CanDodge(${1:attacker})",
        "description": " ※参数: \n   (attacker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAttune:": {
        "prefix": "components.attunable:CanAttune",
        "body": "components.attunable:CanAttune(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoveEntity:": {
        "prefix": "components.yotc_racecompetitor:OnRemoveEntity",
        "body": "components.yotc_racecompetitor:OnRemoveEntity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LinkToPlayer:": {
        "prefix": "components.possessedaxe:LinkToPlayer",
        "body": "components.possessedaxe:LinkToPlayer(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAttunableTag:": {
        "prefix": "components.attunable:GetAttunableTag",
        "body": "components.attunable:GetAttunableTag()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUnlinkFn:": {
        "prefix": "components.attunable:SetOnUnlinkFn",
        "body": "components.attunable:SetOnUnlinkFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnlinkFromPlayer:": {
        "prefix": "components.attunable:UnlinkFromPlayer",
        "body": "components.attunable:UnlinkFromPlayer(${1:player},${2:isloading})",
        "description": " ※参数: \n   (player)<>[] \n   (isloading)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnAttuneCostFn:": {
        "prefix": "components.attunable:SetOnAttuneCostFn",
        "body": "components.attunable:SetOnAttuneCostFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLinkFn:": {
        "prefix": "components.attunable:SetOnLinkFn",
        "body": "components.attunable:SetOnLinkFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAttunableTag:": {
        "prefix": "components.attunable:SetAttunableTag",
        "body": "components.attunable:SetAttunableTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAttuned:": {
        "prefix": "components.attunable:IsAttuned",
        "body": "components.attunable:IsAttuned(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterAttunedSource:": {
        "prefix": "components.attuner:RegisterAttunedSource",
        "body": "components.attuner:RegisterAttunedSource(${1:proxy})",
        "description": " ※参数: \n   (proxy)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasAttunement:": {
        "prefix": "components.attuner:HasAttunement",
        "body": "components.attuner:HasAttunement(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAttunedTarget:": {
        "prefix": "components.attuner:GetAttunedTarget",
        "body": "components.attuner:GetAttunedTarget(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAttunedTo:": {
        "prefix": "components.attuner:IsAttunedTo",
        "body": "components.attuner:IsAttunedTo(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnregisterAttunedSource:": {
        "prefix": "components.attuner:UnregisterAttunedSource",
        "body": "components.attuner:UnregisterAttunedSource(${1:proxy})",
        "description": " ※参数: \n   (proxy)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TransferComponent:": {
        "prefix": "components.touchstonetracker:TransferComponent",
        "body": "components.touchstonetracker:TransferComponent(${1:newinst})",
        "description": " ※参数: \n   (newinst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Enable:": {
        "prefix": "components.witherable:Enable",
        "body": "components.witherable:Enable(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnTick:": {
        "prefix": "components.aura:OnTick",
        "body": "components.aura:OnTick()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTerraforming:": {
        "prefix": "components.autoterraformer:StartTerraforming",
        "body": "components.autoterraformer:StartTerraforming()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTerraforming:": {
        "prefix": "components.autoterraformer:StopTerraforming",
        "body": "components.autoterraformer:StopTerraforming()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishTerraforming:": {
        "prefix": "components.autoterraformer:FinishTerraforming",
        "body": "components.autoterraformer:FinishTerraforming(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoTerraform:": {
        "prefix": "components.autoterraformer:DoTerraform",
        "body": "components.autoterraformer:DoTerraform(${1:px},${2:py},${3:pz},${4:x},${5:y})",
        "description": " ※参数: \n   (px)<>[] \n   (py)<>[] \n   (pz)<>[] \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFree:": {
        "prefix": "components.trap:IsFree",
        "body": "components.trap:IsFree()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeBalloon:": {
        "prefix": "components.balloonmaker:MakeBalloon",
        "body": "components.balloonmaker:MakeBalloon(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnBathBombed:": {
        "prefix": "components.bathbombable:OnBathBombed",
        "body": "components.bathbombable:OnBathBombed(${1:item},${2:doer})",
        "description": " ※参数: \n   (item)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DisableBathBombing:": {
        "prefix": "components.bathbombable:DisableBathBombing",
        "body": "components.bathbombable:DisableBathBombing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnBathBombedFn:": {
        "prefix": "components.bathbombable:SetOnBathBombedFn",
        "body": "components.bathbombable:SetOnBathBombedFn(${1:new_fn})",
        "description": " ※参数: \n   (new_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Reset:": {
        "prefix": "components.trap:Reset",
        "body": "components.trap:Reset(${1:sprung})",
        "description": " ※参数: \n   (sprung)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxBats:": {
        "prefix": "components.batspawner:SetMaxBats",
        "body": "components.batspawner:SetMaxBats(${1:max})",
        "description": " ※参数: \n   (max)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpawnTimes:": {
        "prefix": "components.batspawner:SetSpawnTimes",
        "body": "components.batspawner:SetSpawnTimes(${1:times})",
        "description": " ※参数: \n   (times)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpawnPoint:": {
        "prefix": "components.batspawner:GetSpawnPoint",
        "body": "components.batspawner:GetSpawnPoint(${1:pt})",
        "description": " ※参数: \n   (pt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTracking:": {
        "prefix": "components.rider:StartTracking",
        "body": "components.rider:StartTracking(${1:mount})",
        "description": " ※参数: \n   (mount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeUsed:": {
        "prefix": "components.battery:CanBeUsed",
        "body": "components.battery:CanBeUsed(${1:user})",
        "description": " ※参数: \n   (user)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnUsed:": {
        "prefix": "components.key:OnUsed",
        "body": "components.key:OnUsed(${1:lock},${2:doer})",
        "description": " ※参数: \n   (lock)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChargeFrom:": {
        "prefix": "components.batteryuser:ChargeFrom",
        "body": "components.batteryuser:ChargeFrom(${1:charge_target})",
        "description": " ※参数: \n   (charge_target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTriggerFn:": {
        "prefix": "components.battleborn:SetOnTriggerFn",
        "body": "components.battleborn:SetOnTriggerFn(${1:ontriggerfn})",
        "description": " ※参数: \n   (ontriggerfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStoreTime:": {
        "prefix": "components.battleborn:SetStoreTime",
        "body": "components.battleborn:SetStoreTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTriggerThreshold:": {
        "prefix": "components.battleborn:SetTriggerThreshold",
        "body": "components.battleborn:SetTriggerThreshold(${1:threshold})",
        "description": " ※参数: \n   (threshold)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHealthEnabled:": {
        "prefix": "components.battleborn:SetHealthEnabled",
        "body": "components.battleborn:SetHealthEnabled(${1:enabled})",
        "description": " ※参数: \n   (enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDecayTime:": {
        "prefix": "components.projectedeffects:SetDecayTime",
        "body": "components.projectedeffects:SetDecayTime(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBattlebornBonus:": {
        "prefix": "components.battleborn:SetBattlebornBonus",
        "body": "components.battleborn:SetBattlebornBonus(${1:bonus})",
        "description": " ※参数: \n   (bonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSanityEnabled:": {
        "prefix": "components.battleborn:SetSanityEnabled",
        "body": "components.battleborn:SetSanityEnabled(${1:enabled})",
        "description": " ※参数: \n   (enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetClampMin:": {
        "prefix": "components.battleborn:SetClampMin",
        "body": "components.battleborn:SetClampMin(${1:min})",
        "description": " ※参数: \n   (min)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetValidVictimFn:": {
        "prefix": "components.singinginspiration:SetValidVictimFn",
        "body": "components.singinginspiration:SetValidVictimFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnAttack:": {
        "prefix": "components.lunarplant_tentacle_weapon:OnAttack",
        "body": "components.lunarplant_tentacle_weapon:OnAttack(${1:owner},${2:attack_data})",
        "description": " ※参数: \n   (owner)<>[] \n   (attack_data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnDeath:": {
        "prefix": "components.mast:OnDeath",
        "body": "components.mast:OnDeath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetClampMax:": {
        "prefix": "components.battleborn:SetClampMax",
        "body": "components.battleborn:SetClampMax(${1:max})",
        "description": " ※参数: \n   (max)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBeardSkinAndLength:": {
        "prefix": "components.beard:GetBeardSkinAndLength",
        "body": "components.beard:GetBeardSkinAndLength()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableGrowth:": {
        "prefix": "components.beard:EnableGrowth",
        "body": "components.beard:EnableGrowth(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetInsulation:": {
        "prefix": "components.temperature:GetInsulation",
        "body": "components.temperature:GetInsulation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldTryToShave:": {
        "prefix": "components.beard:ShouldTryToShave",
        "body": "components.beard:ShouldTryToShave(${1:who},${2:whithwhat})",
        "description": " ※参数: \n   (who)<>[] \n   (whithwhat)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateBeardInventory:": {
        "prefix": "components.beard:UpdateBeardInventory",
        "body": "components.beard:UpdateBeardInventory()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSkin:": {
        "prefix": "components.yotb_skinunlocker:SetSkin",
        "body": "components.yotb_skinunlocker:SetSkin(${1:skin})",
        "description": " ※参数: \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddCallback:": {
        "prefix": "components.beard:AddCallback",
        "body": "components.beard:AddCallback(${1:day},${2:cb})",
        "description": " ※参数: \n   (day)<>[] \n   (cb)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Shave:": {
        "prefix": "components.shaveable:Shave",
        "body": "components.shaveable:Shave(${1:shaver},${2:shaving_implement})",
        "description": " ※参数: \n   (shaver)<>[] \n   (shaving_implement)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTimeEffectMultiplier:": {
        "prefix": "components.beaverness:SetTimeEffectMultiplier",
        "body": "components.beaverness:SetTimeEffectMultiplier(${1:multiplier})",
        "description": " ※参数: \n   (multiplier)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsStarving:": {
        "prefix": "components.hunger:IsStarving",
        "body": "components.hunger:IsStarving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTimeEffect:": {
        "prefix": "components.beaverness:StopTimeEffect",
        "body": "components.beaverness:StopTimeEffect()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTimeEffect:": {
        "prefix": "components.beaverness:StartTimeEffect",
        "body": "components.beaverness:StartTimeEffect(${1:dt},${2:delta_b})",
        "description": " ※参数: \n   (dt)<>[] \n   (delta_b)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Stop:": {
        "prefix": "components.worldwind:Stop",
        "body": "components.worldwind:Stop()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PacifySpiders:": {
        "prefix": "components.bedazzlement:PacifySpiders",
        "body": "components.bedazzlement:PacifySpiders()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Start:": {
        "prefix": "components.worldwind:Start",
        "body": "components.worldwind:Start()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBedazzle:": {
        "prefix": "components.bedazzler:CanBedazzle",
        "body": "components.bedazzler:CanBedazzle(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Bedazzle:": {
        "prefix": "components.bedazzler:Bedazzle",
        "body": "components.bedazzler:Bedazzle(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUseAmount:": {
        "prefix": "components.repellent:SetUseAmount",
        "body": "components.repellent:SetUseAmount(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLastDomesticator:": {
        "prefix": "components.beefalometrics:SetLastDomesticator",
        "body": "components.beefalometrics:SetLastDomesticator(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLastDomesticator:": {
        "prefix": "components.beefalometrics:GetLastDomesticator",
        "body": "components.beefalometrics:GetLastDomesticator()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnEffect:": {
        "prefix": "components.blinkstaff:SpawnEffect",
        "body": "components.blinkstaff:SpawnEffect(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetSoundFX:": {
        "prefix": "components.blinkstaff:ResetSoundFX",
        "body": "components.blinkstaff:ResetSoundFX()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Blink:": {
        "prefix": "components.blinkstaff:Blink",
        "body": "components.blinkstaff:Blink(${1:pt},${2:caster})",
        "description": " ※参数: \n   (pt)<>[] \n   (caster)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFX:": {
        "prefix": "components.blinkstaff:SetFX",
        "body": "components.blinkstaff:SetFX(${1:front},${2:back})",
        "description": " ※参数: \n   (front)<>[] \n   (back)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSoundFX:": {
        "prefix": "components.blinkstaff:SetSoundFX",
        "body": "components.blinkstaff:SetSoundFX(${1:presound},${2:postsound})",
        "description": " ※参数: \n   (presound)<>[] \n   (postsound)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentFxAndPriority:": {
        "prefix": "components.bloomer:GetCurrentFxAndPriority",
        "body": "components.bloomer:GetCurrentFxAndPriority()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopBloom:": {
        "prefix": "components.bloomer:PopBloom",
        "body": "components.bloomer:PopBloom(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSetBloomEffectHandle:": {
        "prefix": "components.bloomer:OnSetBloomEffectHandle",
        "body": "components.bloomer:OnSetBloomEffectHandle(${1:fx},${2:priority})",
        "description": " ※参数: \n   (fx)<>[] \n   (priority)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushBloom:": {
        "prefix": "components.bloomer:PushBloom",
        "body": "components.bloomer:PushBloom(${1:source},${2:fx},${3:priority})",
        "description": " ※参数: \n   (source)<>[] \n   (fx)<>[] \n   (priority)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DetachChild:": {
        "prefix": "components.colouradder:DetachChild",
        "body": "components.colouradder:DetachChild(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnClearBloomEffectHandle:": {
        "prefix": "components.bloomer:OnClearBloomEffectHandle",
        "body": "components.bloomer:OnClearBloomEffectHandle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentFX:": {
        "prefix": "components.bloomer:GetCurrentFX",
        "body": "components.bloomer:GetCurrentFX()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AttachChild:": {
        "prefix": "components.colouradder:AttachChild",
        "body": "components.colouradder:AttachChild(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateRate:": {
        "prefix": "components.bloomness:UpdateRate",
        "body": "components.bloomness:UpdateRate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLevel:": {
        "prefix": "components.friendlevels:GetLevel",
        "body": "components.friendlevels:GetLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Fertilize:": {
        "prefix": "components.pickable:Fertilize",
        "body": "components.pickable:Fertilize(${1:fertilizer},${2:doer})",
        "description": " ※参数: \n   (fertilizer)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDurations:": {
        "prefix": "components.bloomness:SetDurations",
        "body": "components.bloomness:SetDurations(${1:stage},${2:full})",
        "description": " ※参数: \n   (stage)<>[] \n   (full)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLevel:": {
        "prefix": "components.shatterfx:SetLevel",
        "body": "components.shatterfx:SetLevel(${1:level})",
        "description": " ※参数: \n   (level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSoundLoop:": {
        "prefix": "components.blowinwind:StopSoundLoop",
        "body": "components.blowinwind:StopSoundLoop()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpeed:": {
        "prefix": "components.circler:GetSpeed",
        "body": "components.circler:GetSpeed(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxSpeedMult:": {
        "prefix": "components.blowinwind:SetMaxSpeedMult",
        "body": "components.blowinwind:SetMaxSpeedMult(${1:spd})",
        "description": " ※参数: \n   (spd)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMinSpeedMult:": {
        "prefix": "components.blowinwind:SetMinSpeedMult",
        "body": "components.blowinwind:SetMinSpeedMult(${1:spd})",
        "description": " ※参数: \n   (spd)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartSoundLoop:": {
        "prefix": "components.blowinwind:StartSoundLoop",
        "body": "components.blowinwind:StartSoundLoop()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAverageSpeed:": {
        "prefix": "components.blowinwind:SetAverageSpeed",
        "body": "components.blowinwind:SetAverageSpeed(${1:spd})",
        "description": " ※参数: \n   (spd)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeDirection:": {
        "prefix": "components.blowinwind:ChangeDirection",
        "body": "components.blowinwind:ChangeDirection(${1:ang},${2:vel})",
        "description": " ※参数: \n   (ang)<>[] \n   (vel)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Shoot:": {
        "prefix": "components.carnivalgameshooter:Shoot",
        "body": "components.carnivalgameshooter:Shoot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartAiming:": {
        "prefix": "components.boatcannon:StartAiming",
        "body": "components.boatcannon:StartAiming(${1:operator})",
        "description": " ※参数: \n   (operator)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartAimingFn:": {
        "prefix": "components.boatcannon:SetOnStartAimingFn",
        "body": "components.boatcannon:SetOnStartAimingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopAiming:": {
        "prefix": "components.boatcannon:StopAiming",
        "body": "components.boatcannon:StopAiming()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LoadAmmo:": {
        "prefix": "components.boatcannon:LoadAmmo",
        "body": "components.boatcannon:LoadAmmo(${1:projectileprefab})",
        "description": " ※参数: \n   (projectileprefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAmmoLoaded:": {
        "prefix": "components.boatcannon:IsAmmoLoaded",
        "body": "components.boatcannon:IsAmmoLoaded()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopAimingFn:": {
        "prefix": "components.boatcannon:SetOnStopAimingFn",
        "body": "components.boatcannon:SetOnStopAimingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetReticule:": {
        "prefix": "components.boatcannonuser:GetReticule",
        "body": "components.boatcannonuser:GetReticule()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetClassified:": {
        "prefix": "components.boatcannonuser:SetClassified",
        "body": "components.boatcannonuser:SetClassified(${1:classified})",
        "description": " ※参数: \n   (classified)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCannon:": {
        "prefix": "components.boatcannonuser:GetCannon",
        "body": "components.boatcannonuser:GetCannon()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AttachClassified:": {
        "prefix": "components.playervoter:AttachClassified",
        "body": "components.playervoter:AttachClassified(${1:classified})",
        "description": " ※参数: \n   (classified)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DetachClassified:": {
        "prefix": "components.playervoter:DetachClassified",
        "body": "components.playervoter:DetachClassified()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelAimingStateInternal:": {
        "prefix": "components.boatcannonuser:CancelAimingStateInternal",
        "body": "components.boatcannonuser:CancelAimingStateInternal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnWallUpdate:": {
        "prefix": "components.updatelooper:OnWallUpdate",
        "body": "components.updatelooper:OnWallUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCannonChanged:": {
        "prefix": "components.boatcannonuser:OnCannonChanged",
        "body": "components.boatcannonuser:OnCannonChanged(${1:cannon})",
        "description": " ※参数: \n   (cannon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAimPos:": {
        "prefix": "components.boatcannonuser:GetAimPos",
        "body": "components.boatcannonuser:GetAimPos()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCannon:": {
        "prefix": "components.boatcannonuser:SetCannon",
        "body": "components.boatcannonuser:SetCannon(${1:cannon})",
        "description": " ※参数: \n   (cannon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CrewCheer:": {
        "prefix": "components.boatcrew:CrewCheer",
        "body": "components.boatcrew:CrewCheer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHeadingNormal:": {
        "prefix": "components.boatracecrew:GetHeadingNormal",
        "body": "components.boatracecrew:GetHeadingNormal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestForLootToSteal:": {
        "prefix": "components.boatcrew:TestForLootToSteal",
        "body": "components.boatcrew:TestForLootToSteal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMemberTag:": {
        "prefix": "components.herd:SetMemberTag",
        "body": "components.herd:SetMemberTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.removeinkertarget:": {
        "prefix": "components.boatcrew:removeinkertarget",
        "body": "components.boatcrew:removeinkertarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestForVictory:": {
        "prefix": "components.boatcrew:TestForVictory",
        "body": "components.boatcrew:TestForVictory()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRemoveMemberFn:": {
        "prefix": "components.herd:SetRemoveMemberFn",
        "body": "components.herd:SetRemoveMemberFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCrewOnDeck:": {
        "prefix": "components.boatcrew:IsCrewOnDeck",
        "body": "components.boatcrew:IsCrewOnDeck()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.reserveinkertarget:": {
        "prefix": "components.boatcrew:reserveinkertarget",
        "body": "components.boatcrew:reserveinkertarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMember:": {
        "prefix": "components.herd:AddMember",
        "body": "components.herd:AddMember(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAddMemberFn:": {
        "prefix": "components.herd:SetAddMemberFn",
        "body": "components.herd:SetAddMemberFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.checktinkertarget:": {
        "prefix": "components.boatcrew:checktinkertarget",
        "body": "components.boatcrew:checktinkertarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CountPirateLoot:": {
        "prefix": "components.boatcrew:CountPirateLoot",
        "body": "components.boatcrew:CountPirateLoot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTarget:": {
        "prefix": "components.upgrademodule:SetTarget",
        "body": "components.upgrademodule:SetTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.areAllCrewOnBoat:": {
        "prefix": "components.boatcrew:areAllCrewOnBoat",
        "body": "components.boatcrew:areAllCrewOnBoat()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveMember:": {
        "prefix": "components.herd:RemoveMember",
        "body": "components.herd:RemoveMember(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCaptain:": {
        "prefix": "components.boatracecrew:SetCaptain",
        "body": "components.boatracecrew:SetCaptain(${1:captain})",
        "description": " ※参数: \n   (captain)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUpdateRange:": {
        "prefix": "components.herd:SetUpdateRange",
        "body": "components.herd:SetUpdateRange(${1:range})",
        "description": " ※参数: \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHeading:": {
        "prefix": "components.boatcrew:SetHeading",
        "body": "components.boatcrew:SetHeading(${1:heading})",
        "description": " ※参数: \n   (heading)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CountCrew:": {
        "prefix": "components.boatcrew:CountCrew",
        "body": "components.boatcrew:CountCrew()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopWakeTests:": {
        "prefix": "components.boatdrifter:StopWakeTests",
        "body": "components.boatdrifter:StopWakeTests()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopBoatPhysics:": {
        "prefix": "components.boatdrifter:StopBoatPhysics",
        "body": "components.boatdrifter:StopBoatPhysics()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStopMoving:": {
        "prefix": "components.boatdrifter:OnStopMoving",
        "body": "components.boatdrifter:OnStopMoving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartBoatPhysics:": {
        "prefix": "components.boatdrifter:StartBoatPhysics",
        "body": "components.boatdrifter:StartBoatPhysics()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartMoving:": {
        "prefix": "components.boatdrifter:OnStartMoving",
        "body": "components.boatdrifter:OnStartMoving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartDrifting:": {
        "prefix": "components.boatdrifter:OnStartDrifting",
        "body": "components.boatdrifter:OnStartDrifting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartWakeTests:": {
        "prefix": "components.boatdrifter:StartWakeTests",
        "body": "components.boatdrifter:StartWakeTests()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsMoving:": {
        "prefix": "components.boatdrifter:IsMoving",
        "body": "components.boatdrifter:IsMoving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStopDrifting:": {
        "prefix": "components.boatdrifter:OnStopDrifting",
        "body": "components.boatdrifter:OnStopDrifting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDrifting:": {
        "prefix": "components.boatdrifter:IsDrifting",
        "body": "components.boatdrifter:IsDrifting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRepairedTime:": {
        "prefix": "components.boatleak:SetRepairedTime",
        "body": "components.boatleak:SetRepairedTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFinishedSpawning:": {
        "prefix": "components.boatleak:IsFinishedSpawning",
        "body": "components.boatleak:IsFinishedSpawning()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRemainingRepairedTime:": {
        "prefix": "components.boatleak:GetRemainingRepairedTime",
        "body": "components.boatleak:GetRemainingRepairedTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeToRepaired:": {
        "prefix": "components.boatleak:ChangeToRepaired",
        "body": "components.boatleak:ChangeToRepaired(${1:repair_build_name},${2:sndoverride})",
        "description": " ※参数: \n   (repair_build_name)<>[] \n   (sndoverride)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBoat:": {
        "prefix": "components.mast:SetBoat",
        "body": "components.mast:SetBoat(${1:boat})",
        "description": " ※参数: \n   (boat)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetState:": {
        "prefix": "components.boatleak:SetState",
        "body": "components.boatleak:SetState(${1:state},${2:skip_open})",
        "description": " ※参数: \n   (state)<>[] \n   (skip_open)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPlugged:": {
        "prefix": "components.boatleak:SetPlugged",
        "body": "components.boatleak:SetPlugged(${1:setting})",
        "description": " ※参数: \n   (setting)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsActivated:": {
        "prefix": "components.skilltreeupdater:IsActivated",
        "body": "components.skilltreeupdater:IsActivated(${1:skill})",
        "description": " ※参数: \n   (skill)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PairWithBeacon:": {
        "prefix": "components.boatmagnet:PairWithBeacon",
        "body": "components.boatmagnet:PairWithBeacon(${1:beacon})",
        "description": " ※参数: \n   (beacon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcMagnetDirection:": {
        "prefix": "components.boatmagnet:CalcMagnetDirection",
        "body": "components.boatmagnet:CalcMagnetDirection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcMaxVelocity:": {
        "prefix": "components.mast:CalcMaxVelocity",
        "body": "components.mast:CalcMaxVelocity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnpairWithBeacon:": {
        "prefix": "components.boatmagnet:UnpairWithBeacon",
        "body": "components.boatmagnet:UnpairWithBeacon()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PairedBeacon:": {
        "prefix": "components.boatmagnet:PairedBeacon",
        "body": "components.boatmagnet:PairedBeacon()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFollowTarget:": {
        "prefix": "components.boatmagnet:GetFollowTarget",
        "body": "components.boatmagnet:GetFollowTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBeaconOnSameBoat:": {
        "prefix": "components.boatmagnet:IsBeaconOnSameBoat",
        "body": "components.boatmagnet:IsBeaconOnSameBoat(${1:beacon})",
        "description": " ※参数: \n   (beacon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindNearestBeacon:": {
        "prefix": "components.boatmagnet:FindNearestBeacon",
        "body": "components.boatmagnet:FindNearestBeacon()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcMagnetForce:": {
        "prefix": "components.boatmagnet:CalcMagnetForce",
        "body": "components.boatmagnet:CalcMagnetForce()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PairedMagnet:": {
        "prefix": "components.boatmagnetbeacon:PairedMagnet",
        "body": "components.boatmagnetbeacon:PairedMagnet()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsPickedUp:": {
        "prefix": "components.boatmagnetbeacon:SetIsPickedUp",
        "body": "components.boatmagnetbeacon:SetIsPickedUp(${1:pickedup})",
        "description": " ※参数: \n   (pickedup)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPickedUp:": {
        "prefix": "components.boatmagnetbeacon:IsPickedUp",
        "body": "components.boatmagnetbeacon:IsPickedUp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TurnOffBeacon:": {
        "prefix": "components.boatmagnetbeacon:TurnOffBeacon",
        "body": "components.boatmagnetbeacon:TurnOffBeacon()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnpairWithMagnet:": {
        "prefix": "components.boatmagnetbeacon:UnpairWithMagnet",
        "body": "components.boatmagnetbeacon:UnpairWithMagnet()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTurnedOff:": {
        "prefix": "components.boatmagnetbeacon:IsTurnedOff",
        "body": "components.boatmagnetbeacon:IsTurnedOff()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PairWithMagnet:": {
        "prefix": "components.boatmagnetbeacon:PairWithMagnet",
        "body": "components.boatmagnetbeacon:PairWithMagnet(${1:magnet})",
        "description": " ※参数: \n   (magnet)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TurnOnBeacon:": {
        "prefix": "components.boatmagnetbeacon:TurnOnBeacon",
        "body": "components.boatmagnetbeacon:TurnOnBeacon()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPatchType:": {
        "prefix": "components.boatpatch:GetPatchType",
        "body": "components.boatpatch:GetPatchType()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveBoatDrag:": {
        "prefix": "components.boatphysics:RemoveBoatDrag",
        "body": "components.boatphysics:RemoveBoatDrag(${1:boatdraginst})",
        "description": " ※参数: \n   (boatdraginst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHalting:": {
        "prefix": "components.boatphysics:SetHalting",
        "body": "components.boatphysics:SetHalting(${1:halt})",
        "description": " ※参数: \n   (halt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplySailForce:": {
        "prefix": "components.boatphysics:ApplySailForce",
        "body": "components.boatphysics:ApplySailForce(${1:dt},${2:sail_force},${3:cur_velocity},${4:max_velocity})",
        "description": " ※参数: \n   (dt)<>[] \n   (sail_force)<>[] \n   (cur_velocity)<>[] \n   (max_velocity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxVelocity:": {
        "prefix": "components.boatphysics:GetMaxVelocity",
        "body": "components.boatphysics:GetMaxVelocity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMast:": {
        "prefix": "components.boatphysics:AddMast",
        "body": "components.boatphysics:AddMast(${1:mast})",
        "description": " ※参数: \n   (mast)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartUpdating:": {
        "prefix": "components.walkableplatform:StartUpdating",
        "body": "components.walkableplatform:StartUpdating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMagnet:": {
        "prefix": "components.boatphysics:AddMagnet",
        "body": "components.boatphysics:AddMagnet(${1:magnet})",
        "description": " ※参数: \n   (magnet)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetVelocity:": {
        "prefix": "components.boatphysics:GetVelocity",
        "body": "components.boatphysics:GetVelocity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRudderDirection:": {
        "prefix": "components.boatphysics:GetRudderDirection",
        "body": "components.boatphysics:GetRudderDirection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveEmergencyBrakeSource:": {
        "prefix": "components.boatphysics:RemoveEmergencyBrakeSource",
        "body": "components.boatphysics:RemoveEmergencyBrakeSource(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyRowForce:": {
        "prefix": "components.boatphysics:ApplyRowForce",
        "body": "components.boatphysics:ApplyRowForce(${1:dir_x},${2:dir_z},${3:force},${4:max_velocity})",
        "description": " ※参数: \n   (dir_x)<>[] \n   (dir_z)<>[] \n   (force)<>[] \n   (max_velocity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CloseAllSails:": {
        "prefix": "components.boatphysics:CloseAllSails",
        "body": "components.boatphysics:CloseAllSails()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddBoatDrag:": {
        "prefix": "components.boatphysics:AddBoatDrag",
        "body": "components.boatphysics:AddBoatDrag(${1:boatdraginst})",
        "description": " ※参数: \n   (boatdraginst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopUpdating:": {
        "prefix": "components.walkableplatform:StopUpdating",
        "body": "components.walkableplatform:StopUpdating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNormalizedVelocities:": {
        "prefix": "components.boatphysics:GetNormalizedVelocities",
        "body": "components.boatphysics:GetNormalizedVelocities()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveMast:": {
        "prefix": "components.boatphysics:RemoveMast",
        "body": "components.boatphysics:RemoveMast(${1:mast})",
        "description": " ※参数: \n   (mast)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddEmergencyBrakeSource:": {
        "prefix": "components.boatphysics:AddEmergencyBrakeSource",
        "body": "components.boatphysics:AddEmergencyBrakeSource(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddAnchorCmp:": {
        "prefix": "components.boatphysics:AddAnchorCmp",
        "body": "components.boatphysics:AddAnchorCmp(${1:anchor})",
        "description": " ※参数: \n   (anchor)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTargetRudderDirection:": {
        "prefix": "components.boatphysics:SetTargetRudderDirection",
        "body": "components.boatphysics:SetTargetRudderDirection(${1:dir_x},${2:dir_z})",
        "description": " ※参数: \n   (dir_x)<>[] \n   (dir_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMoveDirection:": {
        "prefix": "components.boatphysics:GetMoveDirection",
        "body": "components.boatphysics:GetMoveDirection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyMagnetForce:": {
        "prefix": "components.boatphysics:ApplyMagnetForce",
        "body": "components.boatphysics:ApplyMagnetForce(${1:dt},${2:magnet_force},${3:magnet_direction},${4:cur_velocity},${5:max_velocity})",
        "description": " ※参数: \n   (dt)<>[] \n   (magnet_force)<>[] \n   (magnet_direction)<>[] \n   (cur_velocity)<>[] \n   (max_velocity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyDrag:": {
        "prefix": "components.boatphysics:ApplyDrag",
        "body": "components.boatphysics:ApplyDrag(${1:dt},${2:total_drag},${3:cur_velocity},${4:velocity_normal_x},${5:velocity_normal_z})",
        "description": " ※参数: \n   (dt)<>[] \n   (total_drag)<>[] \n   (cur_velocity)<>[] \n   (velocity_normal_x)<>[] \n   (velocity_normal_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBoatDrag:": {
        "prefix": "components.boatphysics:GetBoatDrag",
        "body": "components.boatphysics:GetBoatDrag(${1:velocity},${2:total_anchor_drag})",
        "description": " ※参数: \n   (velocity)<>[] \n   (total_anchor_drag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetForceDampening:": {
        "prefix": "components.boatphysics:GetForceDampening",
        "body": "components.boatphysics:GetForceDampening()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveMagnet:": {
        "prefix": "components.boatphysics:RemoveMagnet",
        "body": "components.boatphysics:RemoveMagnet(${1:magnet})",
        "description": " ※参数: \n   (magnet)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAnchorSailForceModifier:": {
        "prefix": "components.boatphysics:GetAnchorSailForceModifier",
        "body": "components.boatphysics:GetAnchorSailForceModifier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRudderTurnSpeed:": {
        "prefix": "components.boatphysics:GetRudderTurnSpeed",
        "body": "components.boatphysics:GetRudderTurnSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanSteeringRotate:": {
        "prefix": "components.boatphysics:SetCanSteeringRotate",
        "body": "components.boatphysics:SetCanSteeringRotate(${1:can_rotate})",
        "description": " ※参数: \n   (can_rotate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyForce:": {
        "prefix": "components.boatphysics:ApplyForce",
        "body": "components.boatphysics:ApplyForce(${1:dir_x},${2:dir_z},${3:force})",
        "description": " ※参数: \n   (dir_x)<>[] \n   (dir_z)<>[] \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAnchorCmp:": {
        "prefix": "components.boatphysics:RemoveAnchorCmp",
        "body": "components.boatphysics:RemoveAnchorCmp(${1:anchor})",
        "description": " ※参数: \n   (anchor)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTotalAnchorDrag:": {
        "prefix": "components.boatphysics:GetTotalAnchorDrag",
        "body": "components.boatphysics:GetTotalAnchorDrag()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoApplyForce:": {
        "prefix": "components.boatphysics:DoApplyForce",
        "body": "components.boatphysics:DoApplyForce(${1:dir_x},${2:dir_z},${3:force})",
        "description": " ※参数: \n   (dir_x)<>[] \n   (dir_z)<>[] \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTargetRudderDirection:": {
        "prefix": "components.boatphysics:GetTargetRudderDirection",
        "body": "components.boatphysics:GetTargetRudderDirection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMemberListeners:": {
        "prefix": "components.boatracecrew:AddMemberListeners",
        "body": "components.boatracecrew:AddMemberListeners(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveMemberListeners:": {
        "prefix": "components.boatracecrew:RemoveMemberListeners",
        "body": "components.boatracecrew:RemoveMemberListeners(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBoatraceStartedFn:": {
        "prefix": "components.boatrace_proximitybeacon:SetBoatraceStartedFn",
        "body": "components.boatrace_proximitybeacon:SetBoatraceStartedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBoatraceFinishedFn:": {
        "prefix": "components.boatrace_proximitybeacon:SetBoatraceFinishedFn",
        "body": "components.boatrace_proximitybeacon:SetBoatraceFinishedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnFinishRace:": {
        "prefix": "components.boatrace_proximitychecker:OnFinishRace",
        "body": "components.boatrace_proximitychecker:OnFinishRace()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartRace:": {
        "prefix": "components.boatrace_proximitychecker:OnStartRace",
        "body": "components.boatrace_proximitychecker:OnStartRace()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveRotator:": {
        "prefix": "components.boatring:RemoveRotator",
        "body": "components.boatring:RemoveRotator(${1:rotator})",
        "description": " ※参数: \n   (rotator)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRadius:": {
        "prefix": "components.hull:GetRadius",
        "body": "components.hull:GetRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveBumper:": {
        "prefix": "components.boatring:RemoveBumper",
        "body": "components.boatring:RemoveBumper(${1:bumper})",
        "description": " ※参数: \n   (bumper)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRotationDirection:": {
        "prefix": "components.boatring:GetRotationDirection",
        "body": "components.boatring:GetRotationDirection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBumperAtPoint:": {
        "prefix": "components.boatring:GetBumperAtPoint",
        "body": "components.boatring:GetBumperAtPoint(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumSegments:": {
        "prefix": "components.boatringdata:GetNumSegments",
        "body": "components.boatringdata:GetNumSegments()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRotationDirection:": {
        "prefix": "components.boatrotator:SetRotationDirection",
        "body": "components.boatrotator:SetRotationDirection(${1:dir})",
        "description": " ※参数: \n   (dir)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddBumper:": {
        "prefix": "components.boatring:AddBumper",
        "body": "components.boatring:AddBumper(${1:bumper})",
        "description": " ※参数: \n   (bumper)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRotator:": {
        "prefix": "components.boatring:AddRotator",
        "body": "components.boatring:AddRotator(${1:rotator})",
        "description": " ※参数: \n   (rotator)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNumSegments:": {
        "prefix": "components.boatringdata:SetNumSegments",
        "body": "components.boatringdata:SetNumSegments(${1:segments})",
        "description": " ※参数: \n   (segments)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsRotating:": {
        "prefix": "components.boatringdata:IsRotating",
        "body": "components.boatringdata:IsRotating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRadius:": {
        "prefix": "components.temperatureoverrider:SetRadius",
        "body": "components.temperatureoverrider:SetRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsRotating:": {
        "prefix": "components.boatringdata:SetIsRotating",
        "body": "components.boatringdata:SetIsRotating(${1:isrotating})",
        "description": " ※参数: \n   (isrotating)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnEffectPrefab:": {
        "prefix": "components.boattrail:SpawnEffectPrefab",
        "body": "components.boattrail:SpawnEffectPrefab(${1:x},${2:y},${3:z},${4:dir_x},${5:dir_z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (dir_x)<>[] \n   (dir_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Setup:": {
        "prefix": "components.distancefade:Setup",
        "body": "components.distancefade:Setup(${1:range},${2:fadedist})",
        "description": " ※参数: \n   (range)<>[] \n   (fadedist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReadSanity:": {
        "prefix": "components.book:SetReadSanity",
        "body": "components.book:SetReadSanity(${1:sanity})",
        "description": " ※参数: \n   (sanity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnRead:": {
        "prefix": "components.book:SetOnRead",
        "body": "components.book:SetOnRead(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRead:": {
        "prefix": "components.book:OnRead",
        "body": "components.book:OnRead(${1:reader})",
        "description": " ※参数: \n   (reader)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPeruseSanity:": {
        "prefix": "components.book:SetPeruseSanity",
        "body": "components.book:SetPeruseSanity(${1:sanity})",
        "description": " ※参数: \n   (sanity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFx:": {
        "prefix": "components.book:SetFx",
        "body": "components.book:SetFx(${1:fx},${2:fxmount})",
        "description": " ※参数: \n   (fx)<>[] \n   (fxmount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPeruse:": {
        "prefix": "components.book:OnPeruse",
        "body": "components.book:OnPeruse(${1:reader})",
        "description": " ※参数: \n   (reader)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ConsumeUse:": {
        "prefix": "components.book:ConsumeUse",
        "body": "components.book:ConsumeUse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPeruse:": {
        "prefix": "components.book:SetOnPeruse",
        "body": "components.book:SetOnPeruse(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Interact:": {
        "prefix": "components.book:Interact",
        "body": "components.book:Interact(${1:fn},${2:reader})",
        "description": " ※参数: \n   (fn)<>[] \n   (reader)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnBrushed:": {
        "prefix": "components.brushable:SetOnBrushed",
        "body": "components.brushable:SetOnBrushed(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Brush:": {
        "prefix": "components.brushable:Brush",
        "body": "components.brushable:Brush(${1:doer},${2:brush})",
        "description": " ※参数: \n   (doer)<>[] \n   (brush)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBrushable:": {
        "prefix": "components.brushable:SetBrushable",
        "body": "components.brushable:SetBrushable(${1:brushable},${2:reset})",
        "description": " ※参数: \n   (brushable)<>[] \n   (reset)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateNumPrizes:": {
        "prefix": "components.brushable:CalculateNumPrizes",
        "body": "components.brushable:CalculateNumPrizes()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveRecipe:": {
        "prefix": "components.builder:RemoveRecipe",
        "body": "components.builder:RemoveRecipe(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.KnowsRecipe:": {
        "prefix": "components.builder:KnowsRecipe",
        "body": "components.builder:KnowsRecipe(${1:recipe},${2:ignore_tempbonus})",
        "description": " ※参数: \n   (recipe)<>[] \n   (ignore_tempbonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ConsumeTempTechBonuses:": {
        "prefix": "components.builder:ConsumeTempTechBonuses",
        "body": "components.builder:ConsumeTempTechBonuses()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GiveAllRecipes:": {
        "prefix": "components.builder:GiveAllRecipes",
        "body": "components.builder:GiveAllRecipes()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GiveTempTechBonus:": {
        "prefix": "components.builder:GiveTempTechBonus",
        "body": "components.builder:GiveTempTechBonus(${1:tech})",
        "description": " ※参数: \n   (tech)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveIngredients:": {
        "prefix": "components.builder:RemoveIngredients",
        "body": "components.builder:RemoveIngredients(${1:ingredients},${2:recname},${3:discounted})",
        "description": " ※参数: \n   (ingredients)<>[] \n   (recname)<>[] \n   (discounted)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanLearn:": {
        "prefix": "components.builder:CanLearn",
        "body": "components.builder:CanLearn(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BufferBuild:": {
        "prefix": "components.builder:BufferBuild",
        "body": "components.builder:BufferBuild(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeRecipeAtPoint:": {
        "prefix": "components.builder:MakeRecipeAtPoint",
        "body": "components.builder:MakeRecipeAtPoint(${1:recipe},${2:pt},${3:rot},${4:skin})",
        "description": " ※参数: \n   (recipe)<>[] \n   (pt)<>[] \n   (rot)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBuild:": {
        "prefix": "components.builder:CanBuild",
        "body": "components.builder:CanBuild(${1:recipe_name})",
        "description": " ※参数: \n   (recipe_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeRecipeFromMenu:": {
        "prefix": "components.builder:MakeRecipeFromMenu",
        "body": "components.builder:MakeRecipeFromMenu(${1:recipe},${2:skin})",
        "description": " ※参数: \n   (recipe)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasIngredients:": {
        "prefix": "components.builder:HasIngredients",
        "body": "components.builder:HasIngredients(${1:recipe})",
        "description": " ※参数: \n   (recipe)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoBuild:": {
        "prefix": "components.builder:DoBuild",
        "body": "components.builder:DoBuild(${1:recname},${2:pt},${3:rotation},${4:skin})",
        "description": " ※参数: \n   (recname)<>[] \n   (pt)<>[] \n   (rotation)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasTechIngredient:": {
        "prefix": "components.builder:HasTechIngredient",
        "body": "components.builder:HasTechIngredient(${1:ingredient})",
        "description": " ※参数: \n   (ingredient)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasCharacterIngredient:": {
        "prefix": "components.builder:HasCharacterIngredient",
        "body": "components.builder:HasCharacterIngredient(${1:ingredient})",
        "description": " ※参数: \n   (ingredient)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTechBonuses:": {
        "prefix": "components.builder:GetTechBonuses",
        "body": "components.builder:GetTechBonuses()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeRecipe:": {
        "prefix": "components.builder:MakeRecipe",
        "body": "components.builder:MakeRecipe(${1:recipe},${2:pt},${3:rot},${4:skin},${5:onsuccess})",
        "description": " ※参数: \n   (recipe)<>[] \n   (pt)<>[] \n   (rot)<>[] \n   (skin)<>[] \n   (onsuccess)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIngredients:": {
        "prefix": "components.builder:GetIngredients",
        "body": "components.builder:GetIngredients(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActivateCurrentResearchMachine:": {
        "prefix": "components.builder:ActivateCurrentResearchMachine",
        "body": "components.builder:ActivateCurrentResearchMachine(${1:recipe})",
        "description": " ※参数: \n   (recipe)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTempTechBonuses:": {
        "prefix": "components.builder:GetTempTechBonuses",
        "body": "components.builder:GetTempTechBonuses()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnlockRecipe:": {
        "prefix": "components.builder:UnlockRecipe",
        "body": "components.builder:UnlockRecipe(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRecipe:": {
        "prefix": "components.builder:AddRecipe",
        "body": "components.builder:AddRecipe(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBuildBuffered:": {
        "prefix": "components.builder:IsBuildBuffered",
        "body": "components.builder:IsBuildBuffered(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIngredientWetness:": {
        "prefix": "components.builder:GetIngredientWetness",
        "body": "components.builder:GetIngredientWetness(${1:ingredients})",
        "description": " ※参数: \n   (ingredients)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UsePrototyper:": {
        "prefix": "components.builder:UsePrototyper",
        "body": "components.builder:UsePrototyper(${1:prototyper})",
        "description": " ※参数: \n   (prototyper)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartBundling:": {
        "prefix": "components.bundlemaker:OnStartBundling",
        "body": "components.bundlemaker:OnStartBundling(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBundlingPrefabs:": {
        "prefix": "components.bundlemaker:SetBundlingPrefabs",
        "body": "components.bundlemaker:SetBundlingPrefabs(${1:bundling},${2:bundled})",
        "description": " ※参数: \n   (bundling)<>[] \n   (bundled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSkinData:": {
        "prefix": "components.bundlemaker:SetSkinData",
        "body": "components.bundlemaker:SetSkinData(${1:skinname},${2:skin_id})",
        "description": " ※参数: \n   (skinname)<>[] \n   (skin_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartBundlingFn:": {
        "prefix": "components.bundlemaker:SetOnStartBundlingFn",
        "body": "components.bundlemaker:SetOnStartBundlingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnFinishBundling:": {
        "prefix": "components.bundler:OnFinishBundling",
        "body": "components.bundler:OnFinishBundling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishBundling:": {
        "prefix": "components.bundler:FinishBundling",
        "body": "components.bundler:FinishBundling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBundling:": {
        "prefix": "components.bundler:IsBundling",
        "body": "components.bundler:IsBundling(${1:bundlinginst})",
        "description": " ※参数: \n   (bundlinginst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanStartBundling:": {
        "prefix": "components.bundler:CanStartBundling",
        "body": "components.bundler:CanStartBundling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartBundling:": {
        "prefix": "components.bundler:StartBundling",
        "body": "components.bundler:StartBundling(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopBundling:": {
        "prefix": "components.bundler:StopBundling",
        "body": "components.bundler:StopBundling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddBurnFX:": {
        "prefix": "components.burnable:AddBurnFX",
        "body": "components.burnable:AddBurnFX(${1:prefab},${2:offset},${3:followsymbol},${4:followaschild},${5:scale},${6:followlayered})",
        "description": " ※参数: \n   (prefab)<>[] \n   (offset)<>[] \n   (followsymbol)<>[] \n   (followaschild)<>[] \n   (scale)<>[] \n   (followlayered)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartWildfire:": {
        "prefix": "components.burnable:StartWildfire",
        "body": "components.burnable:StartWildfire()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Ignite:": {
        "prefix": "components.burnable:Ignite",
        "body": "components.burnable:Ignite(${1:immediate},${2:source},${3:doer})",
        "description": " ※参数: \n   (immediate)<>[] \n   (source)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBurning:": {
        "prefix": "components.burnable:IsBurning",
        "body": "components.burnable:IsBurning()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasEndothermicHeat:": {
        "prefix": "components.burnable:HasEndothermicHeat",
        "body": "components.burnable:HasEndothermicHeat()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBurnTime:": {
        "prefix": "components.burnable:SetBurnTime",
        "body": "components.burnable:SetBurnTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SmotherSmolder:": {
        "prefix": "components.burnable:SmotherSmolder",
        "body": "components.burnable:SmotherSmolder(${1:smotherer})",
        "description": " ※参数: \n   (smotherer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSmoldering:": {
        "prefix": "components.burnable:IsSmoldering",
        "body": "components.burnable:IsSmoldering()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasExothermicHeat:": {
        "prefix": "components.burnable:HasExothermicHeat",
        "body": "components.burnable:HasExothermicHeat()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSmoldering:": {
        "prefix": "components.burnable:StopSmoldering",
        "body": "components.burnable:StopSmoldering(${1:heatpct})",
        "description": " ※参数: \n   (heatpct)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBurningFX:": {
        "prefix": "components.burnable:SetBurningFX",
        "body": "components.burnable:SetBurningFX(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OverrideBurnFXFinalOffset:": {
        "prefix": "components.burnable:OverrideBurnFXFinalOffset",
        "body": "components.burnable:OverrideBurnFXFinalOffset(${1:offs})",
        "description": " ※参数: \n   (offs)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsControlledBurn:": {
        "prefix": "components.burnable:IsControlledBurn",
        "body": "components.burnable:IsControlledBurn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FixFX:": {
        "prefix": "components.burnable:FixFX",
        "body": "components.burnable:FixFX()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Extinguish:": {
        "prefix": "components.firefx:Extinguish",
        "body": "components.firefx:Extinguish(${1:fast})",
        "description": " ※参数: \n   (fast)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFXOffset:": {
        "prefix": "components.burnable:SetFXOffset",
        "body": "components.burnable:SetFXOffset(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetControlledBurn:": {
        "prefix": "components.burnable:GetControlledBurn",
        "body": "components.burnable:GetControlledBurn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ExtendBurning:": {
        "prefix": "components.burnable:ExtendBurning",
        "body": "components.burnable:ExtendBurning()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLargestLightRadius:": {
        "prefix": "components.burnable:GetLargestLightRadius",
        "body": "components.burnable:GetLargestLightRadius()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateControlledBurnDuration:": {
        "prefix": "components.burnable:CalculateControlledBurnDuration",
        "body": "components.burnable:CalculateControlledBurnDuration()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OverrideBurnFXBuild:": {
        "prefix": "components.burnable:OverrideBurnFXBuild",
        "body": "components.burnable:OverrideBurnFXBuild(${1:build})",
        "description": " ※参数: \n   (build)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OverrideBurnFXRadius:": {
        "prefix": "components.burnable:OverrideBurnFXRadius",
        "body": "components.burnable:OverrideBurnFXRadius(${1:radius_levels})",
        "description": " ※参数: \n   (radius_levels)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnLightrays:": {
        "prefix": "components.canopylightrays:SpawnLightrays",
        "body": "components.canopylightrays:SpawnLightrays()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DespawnLightrays:": {
        "prefix": "components.canopylightrays:DespawnLightrays",
        "body": "components.canopylightrays:DespawnLightrays()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GenerateCanopyShadowPositions:": {
        "prefix": "components.canopyshadows:GenerateCanopyShadowPositions",
        "body": "components.canopyshadows:GenerateCanopyShadowPositions()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnShadows:": {
        "prefix": "components.canopyshadows:SpawnShadows",
        "body": "components.canopyshadows:SpawnShadows()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DespawnShadows:": {
        "prefix": "components.canopyshadows:DespawnShadows",
        "body": "components.canopyshadows:DespawnShadows(${1:ignore_entity_sleep})",
        "description": " ※参数: \n   (ignore_entity_sleep)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveCanopyShadowPositions:": {
        "prefix": "components.canopyshadows:RemoveCanopyShadowPositions",
        "body": "components.canopyshadows:RemoveCanopyShadowPositions()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCarefulWalkingSpeedMultiplier:": {
        "prefix": "components.carefulwalker:SetCarefulWalkingSpeedMultiplier",
        "body": "components.carefulwalker:SetCarefulWalkingSpeedMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCarefulWalking:": {
        "prefix": "components.carefulwalker:IsCarefulWalking",
        "body": "components.carefulwalker:IsCarefulWalking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ToggleCareful:": {
        "prefix": "components.carefulwalker:ToggleCareful",
        "body": "components.carefulwalker:ToggleCareful(${1:careful})",
        "description": " ※参数: \n   (careful)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TrackTarget:": {
        "prefix": "components.targettracker:TrackTarget",
        "body": "components.targettracker:TrackTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDecorValue:": {
        "prefix": "components.carnivaldecor:GetDecorValue",
        "body": "components.carnivaldecor:GetDecorValue()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddDecor:": {
        "prefix": "components.carnivaldecorranker:AddDecor",
        "body": "components.carnivaldecorranker:AddDecor(${1:decor})",
        "description": " ※参数: \n   (decor)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateDecorValue:": {
        "prefix": "components.carnivaldecorranker:UpdateDecorValue",
        "body": "components.carnivaldecorranker:UpdateDecorValue(${1:snap})",
        "description": " ※参数: \n   (snap)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveDecor:": {
        "prefix": "components.carnivaldecorranker:RemoveDecor",
        "body": "components.carnivaldecorranker:RemoveDecor(${1:decor})",
        "description": " ※参数: \n   (decor)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoFeed:": {
        "prefix": "components.carnivalgamefeedable:DoFeed",
        "body": "components.carnivalgamefeedable:DoFeed(${1:doer},${2:item})",
        "description": " ※参数: \n   (doer)<>[] \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateAiming:": {
        "prefix": "components.carnivalgameshooter:UpdateAiming",
        "body": "components.carnivalgameshooter:UpdateAiming(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Initialize:": {
        "prefix": "components.weighable:Initialize",
        "body": "components.weighable:Initialize(${1:min_weight},${2:max_weight})",
        "description": " ※参数: \n   (min_weight)<>[] \n   (max_weight)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAim:": {
        "prefix": "components.carnivalgameshooter:SetAim",
        "body": "components.carnivalgameshooter:SetAim()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanSummon:": {
        "prefix": "components.carnivalhostsummon:SetCanSummon",
        "body": "components.carnivalhostsummon:SetCanSummon(${1:cansummon})",
        "description": " ※参数: \n   (cansummon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartWatching:": {
        "prefix": "components.catcher:StartWatching",
        "body": "components.catcher:StartWatching(${1:projectile})",
        "description": " ※参数: \n   (projectile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanCatch:": {
        "prefix": "components.catcher:CanCatch",
        "body": "components.catcher:CanCatch()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopWatching:": {
        "prefix": "components.catcher:StopWatching",
        "body": "components.catcher:StopWatching(${1:projectile})",
        "description": " ※参数: \n   (projectile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetActionDistance:": {
        "prefix": "components.catcher:SetActionDistance",
        "body": "components.catcher:SetActionDistance(${1:dist})",
        "description": " ※参数: \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCatchDistance:": {
        "prefix": "components.catcher:SetCatchDistance",
        "body": "components.catcher:SetCatchDistance(${1:dist})",
        "description": " ※参数: \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPlay:": {
        "prefix": "components.cattoy:SetOnPlay",
        "body": "components.cattoy:SetOnPlay(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Play:": {
        "prefix": "components.nis:Play",
        "body": "components.nis:Play(${1:lines})",
        "description": " ※参数: \n   (lines)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopChanneling:": {
        "prefix": "components.channelcaster:StopChanneling",
        "body": "components.channelcaster:StopChanneling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsChanneling:": {
        "prefix": "components.fan:IsChanneling",
        "body": "components.fan:IsChanneling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartChanneling:": {
        "prefix": "components.channelcaster:StartChanneling",
        "body": "components.channelcaster:StartChanneling(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetChannelingFn:": {
        "prefix": "components.channelable:SetChannelingFn",
        "body": "components.channelable:SetChannelingFn(${1:startfn},${2:stopfn})",
        "description": " ※参数: \n   (startfn)<>[] \n   (stopfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsUserChanneling:": {
        "prefix": "components.channelcastable:IsUserChanneling",
        "body": "components.channelcastable:IsUserChanneling(${1:user})",
        "description": " ※参数: \n   (user)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAnyUserChanneling:": {
        "prefix": "components.channelcastable:IsAnyUserChanneling",
        "body": "components.channelcastable:IsAnyUserChanneling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopChannelingFn:": {
        "prefix": "components.channelcaster:SetOnStopChannelingFn",
        "body": "components.channelcaster:SetOnStopChannelingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartChannelingFn:": {
        "prefix": "components.channelcaster:SetOnStartChannelingFn",
        "body": "components.channelcaster:SetOnStartChannelingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartChanneling:": {
        "prefix": "components.channelcastable:OnStartChanneling",
        "body": "components.channelcastable:OnStartChanneling(${1:user})",
        "description": " ※参数: \n   (user)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStopChanneling:": {
        "prefix": "components.channelcastable:OnStopChanneling",
        "body": "components.channelcastable:OnStopChanneling(${1:user})",
        "description": " ※参数: \n   (user)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStrafing:": {
        "prefix": "components.locomotor:SetStrafing",
        "body": "components.locomotor:SetStrafing(${1:strafing})",
        "description": " ※参数: \n   (strafing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsChannelingItem:": {
        "prefix": "components.channelcaster:IsChannelingItem",
        "body": "components.channelcaster:IsChannelingItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnCharlieHand:": {
        "prefix": "components.charliecutscene:SpawnCharlieHand",
        "body": "components.charliecutscene:SpawnCharlieHand()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindCharlieHandSpawnPoint:": {
        "prefix": "components.charliecutscene:FindCharlieHandSpawnPoint",
        "body": "components.charliecutscene:FindCharlieHandSpawnPoint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClientUnlockCamera:": {
        "prefix": "components.charliecutscene:ClientUnlockCamera",
        "body": "components.charliecutscene:ClientUnlockCamera()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindSceneCameraAngle:": {
        "prefix": "components.charliecutscene:FindSceneCameraAngle",
        "body": "components.charliecutscene:FindSceneCameraAngle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnCharlieWithDelay:": {
        "prefix": "components.charliecutscene:SpawnCharlieWithDelay",
        "body": "components.charliecutscene:SpawnCharlieWithDelay(${1:delay})",
        "description": " ※参数: \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsGateRepaired:": {
        "prefix": "components.charliecutscene:IsGateRepaired",
        "body": "components.charliecutscene:IsGateRepaired()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindCharlieSpawnPoint:": {
        "prefix": "components.charliecutscene:FindCharlieSpawnPoint",
        "body": "components.charliecutscene:FindCharlieSpawnPoint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartRepairingGateWithDelay:": {
        "prefix": "components.charliecutscene:StartRepairingGateWithDelay",
        "body": "components.charliecutscene:StartRepairingGateWithDelay(${1:delay},${2:delay_to_fix})",
        "description": " ※参数: \n   (delay)<>[] \n   (delay_to_fix)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RepairGate:": {
        "prefix": "components.charliecutscene:RepairGate",
        "body": "components.charliecutscene:RepairGate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Finish:": {
        "prefix": "components.charliecutscene:Finish",
        "body": "components.charliecutscene:Finish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CollectAtriumPillarsData:": {
        "prefix": "components.charliecutscene:CollectAtriumPillarsData",
        "body": "components.charliecutscene:CollectAtriumPillarsData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClientLockCamera:": {
        "prefix": "components.charliecutscene:ClientLockCamera",
        "body": "components.charliecutscene:ClientLockCamera()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopRegen:": {
        "prefix": "components.health:StopRegen",
        "body": "components.health:StopRegen()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRegenPeriod:": {
        "prefix": "components.childspawner:SetRegenPeriod",
        "body": "components.childspawner:SetRegenPeriod(${1:period},${2:variance})",
        "description": " ※参数: \n   (period)<>[] \n   (variance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoQueuedSpawn:": {
        "prefix": "components.childspawner:DoQueuedSpawn",
        "body": "components.childspawner:DoQueuedSpawn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToNextRegen:": {
        "prefix": "components.childspawner:GetTimeToNextRegen",
        "body": "components.childspawner:GetTimeToNextRegen()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumEmergencyChildren:": {
        "prefix": "components.childspawner:NumEmergencyChildren",
        "body": "components.childspawner:NumEmergencyChildren()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GoHome:": {
        "prefix": "components.spawner:GoHome",
        "body": "components.spawner:GoHome(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TrySpawnEmergencyChild:": {
        "prefix": "components.childspawner:TrySpawnEmergencyChild",
        "body": "components.childspawner:TrySpawnEmergencyChild()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOccupiedFn:": {
        "prefix": "components.hideout:SetOccupiedFn",
        "body": "components.hideout:SetOccupiedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryStopUpdate:": {
        "prefix": "components.childspawner:TryStopUpdate",
        "body": "components.childspawner:TryStopUpdate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpawnedFn:": {
        "prefix": "components.hideout:SetSpawnedFn",
        "body": "components.hideout:SetSpawnedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFull:": {
        "prefix": "components.worldmigrator:IsFull",
        "body": "components.worldmigrator:IsFull()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddEmergencyChildrenInside:": {
        "prefix": "components.childspawner:AddEmergencyChildrenInside",
        "body": "components.childspawner:AddEmergencyChildrenInside(${1:count})",
        "description": " ※参数: \n   (count)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.QueueSpawnChild:": {
        "prefix": "components.childspawner:QueueSpawnChild",
        "body": "components.childspawner:QueueSpawnChild()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoRegen:": {
        "prefix": "components.childspawner:DoRegen",
        "body": "components.childspawner:DoRegen()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxEmergencyChildren:": {
        "prefix": "components.childspawner:SetMaxEmergencyChildren",
        "body": "components.childspawner:SetMaxEmergencyChildren(${1:max})",
        "description": " ※参数: \n   (max)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldUpdate:": {
        "prefix": "components.childspawner:ShouldUpdate",
        "body": "components.childspawner:ShouldUpdate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnChildKilled:": {
        "prefix": "components.spawner:OnChildKilled",
        "body": "components.spawner:OnChildKilled(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEmergencyRadius:": {
        "prefix": "components.childspawner:SetEmergencyRadius",
        "body": "components.childspawner:SetEmergencyRadius(${1:rad})",
        "description": " ※参数: \n   (rad)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartSpawning:": {
        "prefix": "components.hideout:StartSpawning",
        "body": "components.hideout:StartSpawning()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpawnPeriod:": {
        "prefix": "components.hideout:SetSpawnPeriod",
        "body": "components.hideout:SetSpawnPeriod(${1:period},${2:variance})",
        "description": " ※参数: \n   (period)<>[] \n   (variance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoSpawnChild:": {
        "prefix": "components.childspawner:DoSpawnChild",
        "body": "components.childspawner:DoSpawnChild(${1:target},${2:prefab},${3:radius})",
        "description": " ※参数: \n   (target)<>[] \n   (prefab)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnAddChildFn:": {
        "prefix": "components.childspawner:SetOnAddChildFn",
        "body": "components.childspawner:SetOnAddChildFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeOwnership:": {
        "prefix": "components.spawner:TakeOwnership",
        "body": "components.spawner:TakeOwnership(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRareChild:": {
        "prefix": "components.childspawner:SetRareChild",
        "body": "components.childspawner:SetRareChild(${1:childname},${2:chance})",
        "description": " ※参数: \n   (childname)<>[] \n   (chance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeEmergencyOwnership:": {
        "prefix": "components.childspawner:TakeEmergencyOwnership",
        "body": "components.childspawner:TakeEmergencyOwnership(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanSpawn:": {
        "prefix": "components.childspawner:CanSpawn",
        "body": "components.childspawner:CanSpawn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnEmergencyChild:": {
        "prefix": "components.childspawner:SpawnEmergencyChild",
        "body": "components.childspawner:SpawnEmergencyChild(${1:target},${2:prefab},${3:radius})",
        "description": " ※参数: \n   (target)<>[] \n   (prefab)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGoHomeFn:": {
        "prefix": "components.hideout:SetGoHomeFn",
        "body": "components.hideout:SetGoHomeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanEmergencySpawn:": {
        "prefix": "components.childspawner:CanEmergencySpawn",
        "body": "components.childspawner:CanEmergencySpawn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMaxEmergencyCommit:": {
        "prefix": "components.childspawner:UpdateMaxEmergencyCommit",
        "body": "components.childspawner:UpdateMaxEmergencyCommit()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartRegen:": {
        "prefix": "components.health:StartRegen",
        "body": "components.health:StartRegen(${1:amount},${2:period},${3:interruptcurrentregen})",
        "description": " ※参数: \n   (amount)<>[] \n   (period)<>[] \n   (interruptcurrentregen)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnChild:": {
        "prefix": "components.childspawner:SpawnChild",
        "body": "components.childspawner:SpawnChild(${1:target},${2:prefab},${3:radius})",
        "description": " ※参数: \n   (target)<>[] \n   (prefab)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoTakeOwnership:": {
        "prefix": "components.childspawner:DoTakeOwnership",
        "body": "components.childspawner:DoTakeOwnership(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddChildrenInside:": {
        "prefix": "components.childspawner:AddChildrenInside",
        "body": "components.childspawner:AddChildrenInside(${1:count})",
        "description": " ※参数: \n   (count)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanSpawnOffscreenOrAwake:": {
        "prefix": "components.childspawner:CanSpawnOffscreenOrAwake",
        "body": "components.childspawner:CanSpawnOffscreenOrAwake()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReleaseAllChildren:": {
        "prefix": "components.hideout:ReleaseAllChildren",
        "body": "components.hideout:ReleaseAllChildren(${1:target},${2:prefab})",
        "description": " ※参数: \n   (target)<>[] \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEmergencyFull:": {
        "prefix": "components.childspawner:IsEmergencyFull",
        "body": "components.childspawner:IsEmergencyFull()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSpawning:": {
        "prefix": "components.hideout:StopSpawning",
        "body": "components.hideout:StopSpawning()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxChildren:": {
        "prefix": "components.childspawner:SetMaxChildren",
        "body": "components.childspawner:SetMaxChildren(${1:max})",
        "description": " ※参数: \n   (max)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CountChildrenOutside:": {
        "prefix": "components.childspawner:CountChildrenOutside",
        "body": "components.childspawner:CountChildrenOutside(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumChildren:": {
        "prefix": "components.childspawner:NumChildren",
        "body": "components.childspawner:NumChildren()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnChildKilledFn:": {
        "prefix": "components.childspawner:SetOnChildKilledFn",
        "body": "components.childspawner:SetOnChildKilledFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToNextSpawn:": {
        "prefix": "components.childspawner:GetTimeToNextSpawn",
        "body": "components.childspawner:GetTimeToNextSpawn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetVacateFn:": {
        "prefix": "components.hideout:SetVacateFn",
        "body": "components.hideout:SetVacateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTakeOwnershipFn:": {
        "prefix": "components.childspawner:SetOnTakeOwnershipFn",
        "body": "components.childspawner:SetOnTakeOwnershipFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartUpdate:": {
        "prefix": "components.trap:StartUpdate",
        "body": "components.trap:StartUpdate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMinScale:": {
        "prefix": "components.circler:GetMinScale",
        "body": "components.circler:GetMinScale()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCircleTarget:": {
        "prefix": "components.circler:SetCircleTarget",
        "body": "components.circler:SetCircleTarget(${1:tar})",
        "description": " ※参数: \n   (tar)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMinSpeed:": {
        "prefix": "components.circler:GetMinSpeed",
        "body": "components.circler:GetMinSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnConnectFn:": {
        "prefix": "components.circuitnode:SetOnConnectFn",
        "body": "components.circuitnode:SetOnConnectFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsConnected:": {
        "prefix": "components.circuitnode:IsConnected",
        "body": "components.circuitnode:IsConnected()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddNode:": {
        "prefix": "components.circuitnode:AddNode",
        "body": "components.circuitnode:AddNode(${1:node})",
        "description": " ※参数: \n   (node)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDisconnectFn:": {
        "prefix": "components.circuitnode:SetOnDisconnectFn",
        "body": "components.circuitnode:SetOnDisconnectFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForEachNode:": {
        "prefix": "components.circuitnode:ForEachNode",
        "body": "components.circuitnode:ForEachNode(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ConnectTo:": {
        "prefix": "components.circuitnode:ConnectTo",
        "body": "components.circuitnode:ConnectTo(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveNode:": {
        "prefix": "components.circuitnode:RemoveNode",
        "body": "components.circuitnode:RemoveNode(${1:node})",
        "description": " ※参数: \n   (node)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Disconnect:": {
        "prefix": "components.circuitnode:Disconnect",
        "body": "components.circuitnode:Disconnect()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumConnectedNodes:": {
        "prefix": "components.circuitnode:NumConnectedNodes",
        "body": "components.circuitnode:NumConnectedNodes()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFootprint:": {
        "prefix": "components.circuitnode:SetFootprint",
        "body": "components.circuitnode:SetFootprint(${1:footprint})",
        "description": " ※参数: \n   (footprint)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CloseInspectPoint:": {
        "prefix": "components.closeinspector:CloseInspectPoint",
        "body": "components.closeinspector:CloseInspectPoint(${1:doer},${2:pt})",
        "description": " ※参数: \n   (doer)<>[] \n   (pt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CloseInspectTarget:": {
        "prefix": "components.closeinspector:CloseInspectTarget",
        "body": "components.closeinspector:CloseInspectTarget(${1:doer},${2:target})",
        "description": " ※参数: \n   (doer)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInspectTargetFn:": {
        "prefix": "components.closeinspector:SetInspectTargetFn",
        "body": "components.closeinspector:SetInspectTargetFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInspectPointFn:": {
        "prefix": "components.closeinspector:SetInspectPointFn",
        "body": "components.closeinspector:SetInspectPointFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartInspiring:": {
        "prefix": "components.coach:StartInspiring",
        "body": "components.coach:StartInspiring()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopInspiring:": {
        "prefix": "components.coach:StopInspiring",
        "body": "components.coach:StopInspiring()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Disable:": {
        "prefix": "components.vase:Disable",
        "body": "components.vase:Disable()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopColour:": {
        "prefix": "components.colouradder:PopColour",
        "body": "components.colouradder:PopColour(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSetColour:": {
        "prefix": "components.colouradder:OnSetColour",
        "body": "components.colouradder:OnSetColour(${1:r},${2:g},${3:b},${4:a})",
        "description": " ※参数: \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n   (a)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateCurrentColour:": {
        "prefix": "components.colouradder:CalculateCurrentColour",
        "body": "components.colouradder:CalculateCurrentColour()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentColour:": {
        "prefix": "components.colouradder:GetCurrentColour",
        "body": "components.colouradder:GetCurrentColour()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushColour:": {
        "prefix": "components.colouradder:PushColour",
        "body": "components.colouradder:PushColour(${1:source},${2:r},${3:g},${4:b},${5:a})",
        "description": " ※参数: \n   (source)<>[] \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n   (a)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SyncColour:": {
        "prefix": "components.colouraddersync:SyncColour",
        "body": "components.colouraddersync:SyncColour(${1:r},${2:g},${3:b},${4:a})",
        "description": " ※参数: \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n   (a)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetColourChangedFn:": {
        "prefix": "components.colouraddersync:SetColourChangedFn",
        "body": "components.colouraddersync:SetColourChangedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoUpdate:": {
        "prefix": "components.transparentonsanity:DoUpdate",
        "body": "components.transparentonsanity:DoUpdate(${1:dt},${2:force})",
        "description": " ※参数: \n   (dt)<>[] \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndTween:": {
        "prefix": "components.sizetweener:EndTween",
        "body": "components.sizetweener:EndTween()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLastTarget:": {
        "prefix": "components.combat:SetLastTarget",
        "body": "components.combat:SetLastTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBattleCryString:": {
        "prefix": "components.combat:GetBattleCryString",
        "body": "components.combat:GetBattleCryString(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRetargetFunction:": {
        "prefix": "components.combat:SetRetargetFunction",
        "body": "components.combat:SetRetargetFunction(${1:period},${2:fn})",
        "description": " ※参数: \n   (period)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAreaDamage:": {
        "prefix": "components.combat:SetAreaDamage",
        "body": "components.combat:SetAreaDamage(${1:range},${2:percent},${3:areahitcheck})",
        "description": " ※参数: \n   (range)<>[] \n   (percent)<>[] \n   (areahitcheck)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanTarget:": {
        "prefix": "components.combat:CanTarget",
        "body": "components.combat:CanTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoAreaAttack:": {
        "prefix": "components.combat:DoAreaAttack",
        "body": "components.combat:DoAreaAttack(${1:target},${2:range},${3:weapon},${4:validfn},${5:stimuli},${6:excludetags})",
        "description": " ※参数: \n   (target)<>[] \n   (range)<>[] \n   (weapon)<>[] \n   (validfn)<>[] \n   (stimuli)<>[] \n   (excludetags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BattleCry:": {
        "prefix": "components.combat:BattleCry",
        "body": "components.combat:BattleCry()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPlayerStunlock:": {
        "prefix": "components.combat:SetPlayerStunlock",
        "body": "components.combat:SetPlayerStunlock(${1:stunlock})",
        "description": " ※参数: \n   (stunlock)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDamageReflect:": {
        "prefix": "components.combat:GetDamageReflect",
        "body": "components.combat:GetDamageReflect(${1:target},${2:damage},${3:weapon},${4:stimuli})",
        "description": " ※参数: \n   (target)<>[] \n   (damage)<>[] \n   (weapon)<>[] \n   (stimuli)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddNoAggroTag:": {
        "prefix": "components.combat:AddNoAggroTag",
        "body": "components.combat:AddNoAggroTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OverrideCooldown:": {
        "prefix": "components.combat:OverrideCooldown",
        "body": "components.combat:OverrideCooldown(${1:cd})",
        "description": " ※参数: \n   (cd)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelAttack:": {
        "prefix": "components.combat:CancelAttack",
        "body": "components.combat:CancelAttack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHurtSound:": {
        "prefix": "components.combat:SetHurtSound",
        "body": "components.combat:SetHurtSound(${1:sound})",
        "description": " ※参数: \n   (sound)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanLightTarget:": {
        "prefix": "components.combat:CanLightTarget",
        "body": "components.combat:CanLightTarget(${1:target},${2:weapon})",
        "description": " ※参数: \n   (target)<>[] \n   (weapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTrackingTarget:": {
        "prefix": "components.combat:StopTrackingTarget",
        "body": "components.combat:StopTrackingTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanExtinguishTarget:": {
        "prefix": "components.combat:CanExtinguishTarget",
        "body": "components.combat:CanExtinguishTarget(${1:target},${2:weapon})",
        "description": " ※参数: \n   (target)<>[] \n   (weapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EngageTarget:": {
        "prefix": "components.combat:EngageTarget",
        "body": "components.combat:EngageTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryRetarget:": {
        "prefix": "components.combat:TryRetarget",
        "body": "components.combat:TryRetarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldAggro:": {
        "prefix": "components.combat:ShouldAggro",
        "body": "components.combat:ShouldAggro(${1:target},${2:ignore_forbidden})",
        "description": " ※参数: \n   (target)<>[] \n   (ignore_forbidden)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCooldown:": {
        "prefix": "components.combat:GetCooldown",
        "body": "components.combat:GetCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceAttack:": {
        "prefix": "components.combat:ForceAttack",
        "body": "components.combat:ForceAttack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearAttackTemps:": {
        "prefix": "components.combat:ClearAttackTemps",
        "body": "components.combat:ClearAttackTemps()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveNoAggroTag:": {
        "prefix": "components.combat:RemoveNoAggroTag",
        "body": "components.combat:RemoveNoAggroTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShareTarget:": {
        "prefix": "components.combat:ShareTarget",
        "body": "components.combat:ShareTarget(${1:target},${2:range},${3:fn},${4:maxnum},${5:musttags})",
        "description": " ※参数: \n   (target)<>[] \n   (range)<>[] \n   (fn)<>[] \n   (maxnum)<>[] \n   (musttags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAttackPeriod:": {
        "prefix": "components.combat:SetAttackPeriod",
        "body": "components.combat:SetAttackPeriod(${1:period})",
        "description": " ※参数: \n   (period)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsRecentTarget:": {
        "prefix": "components.combat:IsRecentTarget",
        "body": "components.combat:IsRecentTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTrackingTarget:": {
        "prefix": "components.combat:StartTrackingTarget",
        "body": "components.combat:StartTrackingTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RestartCooldown:": {
        "prefix": "components.combat:RestartCooldown",
        "body": "components.combat:RestartCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ValidateTarget:": {
        "prefix": "components.combat:ValidateTarget",
        "body": "components.combat:ValidateTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartAttack:": {
        "prefix": "components.combat:StartAttack",
        "body": "components.combat:StartAttack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetGiveUpString:": {
        "prefix": "components.combat:GetGiveUpString",
        "body": "components.combat:GetGiveUpString(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnHit:": {
        "prefix": "components.complexprojectile:SetOnHit",
        "body": "components.complexprojectile:SetOnHit(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeAttacked:": {
        "prefix": "components.combat:CanBeAttacked",
        "body": "components.combat:CanBeAttacked(${1:attacker})",
        "description": " ※参数: \n   (attacker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InCooldown:": {
        "prefix": "components.combat:InCooldown",
        "body": "components.combat:InCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SuggestTarget:": {
        "prefix": "components.combat:SuggestTarget",
        "body": "components.combat:SuggestTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsValidTarget:": {
        "prefix": "components.combat:IsValidTarget",
        "body": "components.combat:IsValidTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldAvoidAggro:": {
        "prefix": "components.combat:SetShouldAvoidAggro",
        "body": "components.combat:SetShouldAvoidAggro(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcHitRangeSq:": {
        "prefix": "components.combat:CalcHitRangeSq",
        "body": "components.combat:CalcHitRangeSq(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAlly:": {
        "prefix": "components.combat:IsAlly",
        "body": "components.combat:IsAlly(${1:guy})",
        "description": " ※参数: \n   (guy)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoAttack:": {
        "prefix": "components.combat:DoAttack",
        "body": "components.combat:DoAttack(${1:targ},${2:weapon},${3:projectile},${4:stimuli},${5:instancemult},${6:instrangeoverride},${7:instpos})",
        "description": " ※参数: \n   (targ)<>[] \n   (weapon)<>[] \n   (projectile)<>[] \n   (stimuli)<>[] \n   (instancemult)<>[] \n   (instrangeoverride)<>[] \n   (instpos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWeapon:": {
        "prefix": "components.combat:GetWeapon",
        "body": "components.combat:GetWeapon()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetKeepTargetFunction:": {
        "prefix": "components.combat:SetKeepTargetFunction",
        "body": "components.combat:SetKeepTargetFunction(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableAreaDamage:": {
        "prefix": "components.combat:EnableAreaDamage",
        "body": "components.combat:EnableAreaDamage(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasTarget:": {
        "prefix": "components.targettracker:HasTarget",
        "body": "components.targettracker:HasTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetCooldown:": {
        "prefix": "components.combat:ResetCooldown",
        "body": "components.combat:ResetCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TargetHasFriendlyLeader:": {
        "prefix": "components.combat:TargetHasFriendlyLeader",
        "body": "components.combat:TargetHasFriendlyLeader(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHitRange:": {
        "prefix": "components.combat:GetHitRange",
        "body": "components.combat:GetHitRange()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNoAggroTags:": {
        "prefix": "components.combat:SetNoAggroTags",
        "body": "components.combat:SetNoAggroTags(${1:tags})",
        "description": " ※参数: \n   (tags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAttackRange:": {
        "prefix": "components.combat:GetAttackRange",
        "body": "components.combat:GetAttackRange()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcReflectedDamage:": {
        "prefix": "components.combat:CalcReflectedDamage",
        "body": "components.combat:CalcReflectedDamage(${1:targ},${2:dmg},${3:weapon},${4:stimuli},${5:reflect_list},${6:spdmg})",
        "description": " ※参数: \n   (targ)<>[] \n   (dmg)<>[] \n   (weapon)<>[] \n   (stimuli)<>[] \n   (reflect_list)<>[] \n   (spdmg)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanHitTarget:": {
        "prefix": "components.combat:CanHitTarget",
        "body": "components.combat:CanHitTarget(${1:target},${2:weapon})",
        "description": " ※参数: \n   (target)<>[] \n   (weapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLastAttackedTime:": {
        "prefix": "components.combat:GetLastAttackedTime",
        "body": "components.combat:GetLastAttackedTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldAggroFn:": {
        "prefix": "components.combat:SetShouldAggroFn",
        "body": "components.combat:SetShouldAggroFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TargetIs:": {
        "prefix": "components.combat:TargetIs",
        "body": "components.combat:TargetIs(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaultDamage:": {
        "prefix": "components.damagereflect:SetDefaultDamage",
        "body": "components.damagereflect:SetDefaultDamage(${1:value})",
        "description": " ※参数: \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LocomotorCanAttack:": {
        "prefix": "components.combat:LocomotorCanAttack",
        "body": "components.combat:LocomotorCanAttack(${1:reached_dest},${2:target})",
        "description": " ※参数: \n   (reached_dest)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAttack:": {
        "prefix": "components.teamleader:CanAttack",
        "body": "components.teamleader:CanAttack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetImpactSound:": {
        "prefix": "components.combat:GetImpactSound",
        "body": "components.combat:GetImpactSound(${1:target},${2:weapon})",
        "description": " ※参数: \n   (target)<>[] \n   (weapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAttacked:": {
        "prefix": "components.combat:GetAttacked",
        "body": "components.combat:GetAttacked(${1:attacker},${2:damage},${3:weapon},${4:stimuli},${5:spdamage})",
        "description": " ※参数: \n   (attacker)<>[] \n   (damage)<>[] \n   (weapon)<>[] \n   (stimuli)<>[] \n   (spdamage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetBattleCryCooldown:": {
        "prefix": "components.combat:ResetBattleCryCooldown",
        "body": "components.combat:ResetBattleCryCooldown(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GiveUp:": {
        "prefix": "components.combat:GiveUp",
        "body": "components.combat:GiveUp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryAttack:": {
        "prefix": "components.combat:TryAttack",
        "body": "components.combat:TryAttack(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcAttackRangeSq:": {
        "prefix": "components.combat:CalcAttackRangeSq",
        "body": "components.combat:CalcAttackRangeSq(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveShouldAvoidAggro:": {
        "prefix": "components.combat:RemoveShouldAvoidAggro",
        "body": "components.combat:RemoveShouldAvoidAggro(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcDamage:": {
        "prefix": "components.combat:CalcDamage",
        "body": "components.combat:CalcDamage(${1:target},${2:weapon},${3:multiplier})",
        "description": " ※参数: \n   (target)<>[] \n   (weapon)<>[] \n   (multiplier)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropTarget:": {
        "prefix": "components.combat:DropTarget",
        "body": "components.combat:DropTarget(${1:hasnexttarget})",
        "description": " ※参数: \n   (hasnexttarget)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTrackingDistance:": {
        "prefix": "components.commander:SetTrackingDistance",
        "body": "components.commander:SetTrackingDistance(${1:dist})",
        "description": " ※参数: \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAllSoldiers:": {
        "prefix": "components.commander:GetAllSoldiers",
        "body": "components.commander:GetAllSoldiers(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAnySoldierNotAlert:": {
        "prefix": "components.commander:IsAnySoldierNotAlert",
        "body": "components.commander:IsAnySoldierNotAlert()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumSoldiers:": {
        "prefix": "components.commander:GetNumSoldiers",
        "body": "components.commander:GetNumSoldiers(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushEventToAllSoldiers:": {
        "prefix": "components.commander:PushEventToAllSoldiers",
        "body": "components.commander:PushEventToAllSoldiers(${1:ev},${2:data})",
        "description": " ※参数: \n   (ev)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTrackingDistance:": {
        "prefix": "components.commander:StopTrackingDistance",
        "body": "components.commander:StopTrackingDistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AlertAllSoldiers:": {
        "prefix": "components.commander:AlertAllSoldiers",
        "body": "components.commander:AlertAllSoldiers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveSoldier:": {
        "prefix": "components.commander:RemoveSoldier",
        "body": "components.commander:RemoveSoldier(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTrackingDistance:": {
        "prefix": "components.commander:StartTrackingDistance",
        "body": "components.commander:StartTrackingDistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSoldier:": {
        "prefix": "components.commander:AddSoldier",
        "body": "components.commander:AddSoldier(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSoldier:": {
        "prefix": "components.commander:IsSoldier",
        "body": "components.commander:IsSoldier(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShareTargetToAllSoldiers:": {
        "prefix": "components.commander:ShareTargetToAllSoldiers",
        "body": "components.commander:ShareTargetToAllSoldiers(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropAllSoldierTargets:": {
        "prefix": "components.commander:DropAllSoldierTargets",
        "body": "components.commander:DropAllSoldierTargets()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLaunch:": {
        "prefix": "components.complexprojectile:SetOnLaunch",
        "body": "components.complexprojectile:SetOnLaunch(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Launch:": {
        "prefix": "components.complexprojectile:Launch",
        "body": "components.complexprojectile:Launch(${1:targetPos},${2:attacker},${3:owningweapon})",
        "description": " ※参数: \n   (targetPos)<>[] \n   (attacker)<>[] \n   (owningweapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGravity:": {
        "prefix": "components.complexprojectile:SetGravity",
        "body": "components.complexprojectile:SetGravity(${1:g})",
        "description": " ※参数: \n   (g)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Cancel:": {
        "prefix": "components.spawnfader:Cancel",
        "body": "components.spawnfader:Cancel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHorizontalSpeedForDistance:": {
        "prefix": "components.complexprojectile:SetHorizontalSpeedForDistance",
        "body": "components.complexprojectile:SetHorizontalSpeedForDistance(${1:desired_horizontal_distance},${2:fallback})",
        "description": " ※参数: \n   (desired_horizontal_distance)<>[] \n   (fallback)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateTrajectory:": {
        "prefix": "components.complexprojectile:CalculateTrajectory",
        "body": "components.complexprojectile:CalculateTrajectory(${1:startPos},${2:endPos},${3:speed})",
        "description": " ※参数: \n   (startPos)<>[] \n   (endPos)<>[] \n   (speed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateMinimumSpeedForDistance:": {
        "prefix": "components.complexprojectile:CalculateMinimumSpeedForDistance",
        "body": "components.complexprojectile:CalculateMinimumSpeedForDistance(${1:desired_horizontal_distance})",
        "description": " ※参数: \n   (desired_horizontal_distance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTargetOffset:": {
        "prefix": "components.complexprojectile:SetTargetOffset",
        "body": "components.complexprojectile:SetTargetOffset(${1:offset})",
        "description": " ※参数: \n   (offset)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLaunchOffset:": {
        "prefix": "components.projectile:SetLaunchOffset",
        "body": "components.projectile:SetLaunchOffset(${1:offset})",
        "description": " ※参数: \n   (offset)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUpdate:": {
        "prefix": "components.complexprojectile:SetOnUpdate",
        "body": "components.complexprojectile:SetOnUpdate(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Hit:": {
        "prefix": "components.projectile:Hit",
        "body": "components.projectile:Hit(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHorizontalSpeed:": {
        "prefix": "components.complexprojectile:SetHorizontalSpeed",
        "body": "components.complexprojectile:SetHorizontalSpeed(${1:speed})",
        "description": " ※参数: \n   (speed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaterialTotal:": {
        "prefix": "components.compostingbin:GetMaterialTotal",
        "body": "components.compostingbin:GetMaterialTotal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddCompostable:": {
        "prefix": "components.compostingbin:AddCompostable",
        "body": "components.compostingbin:AddCompostable(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Refresh:": {
        "prefix": "components.maprevealable:Refresh",
        "body": "components.maprevealable:Refresh()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMaterials:": {
        "prefix": "components.compostingbin:AddMaterials",
        "body": "components.compostingbin:AddMaterials(${1:greens},${2:browns})",
        "description": " ※参数: \n   (greens)<>[] \n   (browns)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsComposting:": {
        "prefix": "components.compostingbin:IsComposting",
        "body": "components.compostingbin:IsComposting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanStartConstruction:": {
        "prefix": "components.constructionbuilder:CanStartConstruction",
        "body": "components.constructionbuilder:CanStartConstruction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartConstruction:": {
        "prefix": "components.constructionplans:StartConstruction",
        "body": "components.constructionplans:StartConstruction(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopConstruction:": {
        "prefix": "components.constructionbuilder:StopConstruction",
        "body": "components.constructionbuilder:StopConstruction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsConstructing:": {
        "prefix": "components.constructionbuilder:IsConstructing",
        "body": "components.constructionbuilder:IsConstructing(${1:constructioninst})",
        "description": " ※参数: \n   (constructioninst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsConstructingAny:": {
        "prefix": "components.constructionbuilder:IsConstructingAny",
        "body": "components.constructionbuilder:IsConstructingAny()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnFinishConstruction:": {
        "prefix": "components.constructionbuilder:OnFinishConstruction",
        "body": "components.constructionbuilder:OnFinishConstruction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishConstruction:": {
        "prefix": "components.constructionbuilder:FinishConstruction",
        "body": "components.constructionbuilder:FinishConstruction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetContainer:": {
        "prefix": "components.inventoryitem:GetContainer",
        "body": "components.inventoryitem:GetContainer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTarget:": {
        "prefix": "components.teleporter:GetTarget",
        "body": "components.teleporter:GetTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIngredientForSlot:": {
        "prefix": "components.constructionbuilderuidata:GetIngredientForSlot",
        "body": "components.constructionbuilderuidata:GetIngredientForSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetContainer:": {
        "prefix": "components.constructionbuilderuidata:SetContainer",
        "body": "components.constructionbuilderuidata:SetContainer(${1:containerinst})",
        "description": " ※参数: \n   (containerinst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSlotForIngredient:": {
        "prefix": "components.constructionbuilderuidata:GetSlotForIngredient",
        "body": "components.constructionbuilderuidata:GetSlotForIngredient(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetConstructionSite:": {
        "prefix": "components.constructionbuilderuidata:GetConstructionSite",
        "body": "components.constructionbuilderuidata:GetConstructionSite()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveTargetPrefab:": {
        "prefix": "components.constructionplans:RemoveTargetPrefab",
        "body": "components.constructionplans:RemoveTargetPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddTargetPrefab:": {
        "prefix": "components.constructionplans:AddTargetPrefab",
        "body": "components.constructionplans:AddTargetPrefab(${1:prefab},${2:constructionprefab})",
        "description": " ※参数: \n   (prefab)<>[] \n   (constructionprefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnConstruct:": {
        "prefix": "components.constructionsite:OnConstruct",
        "body": "components.constructionsite:OnConstruct(${1:doer},${2:items})",
        "description": " ※参数: \n   (doer)<>[] \n   (items)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsComplete:": {
        "prefix": "components.constructionsite:IsComplete",
        "body": "components.constructionsite:IsComplete()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasBuilder:": {
        "prefix": "components.constructionsite:HasBuilder",
        "body": "components.constructionsite:HasBuilder()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStopConstruction:": {
        "prefix": "components.constructionsite:OnStopConstruction",
        "body": "components.constructionsite:OnStopConstruction(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaterialCount:": {
        "prefix": "components.constructionsite:GetMaterialCount",
        "body": "components.constructionsite:GetMaterialCount(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceStopConstruction:": {
        "prefix": "components.constructionsite:ForceStopConstruction",
        "body": "components.constructionsite:ForceStopConstruction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartConstruction:": {
        "prefix": "components.constructionsite:OnStartConstruction",
        "body": "components.constructionsite:OnStartConstruction(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnConstructedFn:": {
        "prefix": "components.constructionsite:SetOnConstructedFn",
        "body": "components.constructionsite:SetOnConstructedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetConstructionPrefab:": {
        "prefix": "components.constructionsite:SetConstructionPrefab",
        "body": "components.constructionsite:SetConstructionPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartConstructionFn:": {
        "prefix": "components.constructionsite:SetOnStartConstructionFn",
        "body": "components.constructionsite:SetOnStartConstructionFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBuilder:": {
        "prefix": "components.constructionsite:IsBuilder",
        "body": "components.constructionsite:IsBuilder(${1:guy})",
        "description": " ※参数: \n   (guy)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSlotCount:": {
        "prefix": "components.constructionsite:GetSlotCount",
        "body": "components.constructionsite:GetSlotCount(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropAllMaterials:": {
        "prefix": "components.constructionsite:DropAllMaterials",
        "body": "components.constructionsite:DropAllMaterials(${1:drop_pos})",
        "description": " ※参数: \n   (drop_pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopConstructionFn:": {
        "prefix": "components.constructionsite:SetOnStopConstructionFn",
        "body": "components.constructionsite:SetOnStopConstructionFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveMaterial:": {
        "prefix": "components.constructionsite:RemoveMaterial",
        "body": "components.constructionsite:RemoveMaterial(${1:prefab},${2:num})",
        "description": " ※参数: \n   (prefab)<>[] \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMaterial:": {
        "prefix": "components.constructionsite:AddMaterial",
        "body": "components.constructionsite:AddMaterial(${1:prefab},${2:num})",
        "description": " ※参数: \n   (prefab)<>[] \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanTakeItemInSlot:检测物品能否放入指定序号的栏位": {
        "prefix": "components.container:CanTakeItemInSlot",
        "body": "components.container:CanTakeItemInSlot(${1:item},${2:slot})",
        "description": " ※参数: \n   (item)<ent>[要放入的物品] \n   (slot)<num>[栏序号] \n ※返回: <bool>[可放入] \n ※说明: 检测物品能否放入指定序号的栏位\n ※贡献者: @Runar"
    },
    "组件.DropEverything:丢出所有物品": {
        "prefix": "components.container:DropEverything",
        "body": "components.container:DropEverything(${1:drop_pos},${2:keepoverstacked})",
        "description": " ※参数: \n   (drop_pos)<V3>[掉落位置] \n   (keepoverstacked)<bool>[保持物品堆叠状态] \n ※返回: \n ※说明: 丢出所有物品\n ※贡献者: @lan(多在容器被摧毁时调用)"
    },
    "组件.SwapActiveItemWithSlot:": {
        "prefix": "components.inventory:SwapActiveItemWithSlot",
        "body": "components.inventory:SwapActiveItemWithSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForEachItem:对容器内所有物品执行fn, 传递可变参数": {
        "prefix": "components.container:ForEachItem",
        "body": "components.container:ForEachItem(${1:fn},${2:...})",
        "description": " ※参数: \n   (fn)<fn>[操作函数fn(item, ...)]\n      {参数:\n         (item)<ent>[容器内物品] \n         (...)<any|nil>[可变参数] \n      返回:} \n   (...)<any|nil>[可变参数] \n ※返回: \n ※说明: 对容器内所有物品执行fn, 传递可变参数\n ※贡献者: @Runar"
    },
    "组件.Open:为doer打开容器": {
        "prefix": "components.container:Open",
        "body": "components.container:Open(${1:doer})",
        "description": " ※参数: \n   (doer)<ent>[执行者] \n ※返回: \n ※说明: 为doer打开容器\n ※贡献者: @Runar"
    },
    "组件.ReferenceAllItems:": {
        "prefix": "components.inventory:ReferenceAllItems",
        "body": "components.inventory:ReferenceAllItems()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MoveItemFromHalfOfSlot:": {
        "prefix": "components.inventory:MoveItemFromHalfOfSlot",
        "body": "components.inventory:MoveItemFromHalfOfSlot(${1:slot},${2:container})",
        "description": " ※参数: \n   (slot)<>[] \n   (container)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ConsumeByName:按数量扣除指名物品": {
        "prefix": "components.container:ConsumeByName",
        "body": "components.container:ConsumeByName(${1:item},${2:amount})",
        "description": " ※参数: \n   (item)<str>[物品prefab名] \n   (amount)<num>[扣除数量] \n ※返回: \n ※说明: 按数量扣除指名物品\n ※贡献者: @Runar"
    },
    "组件.GetItemsWithTag:获取容器内指定标签的物品列表": {
        "prefix": "components.container:GetItemsWithTag",
        "body": "components.container:GetItemsWithTag(${1:tag})",
        "description": " ※参数: \n   (tag)<str>[标签] \n ※返回: <tbl>[符合条件的物品列表] \n ※说明: 获取容器内指定标签的物品列表\n ※贡献者: @Runar"
    },
    "组件.IsEmpty:返回容器是否为空": {
        "prefix": "components.container:IsEmpty",
        "body": "components.container:IsEmpty()",
        "description": " ※参数: \n ※返回: <bool>[容器为空] \n ※说明: 返回容器是否为空\n ※贡献者: @Runar"
    },
    "组件.DropItem:原地抛出指定物品": {
        "prefix": "components.container:DropItem",
        "body": "components.container:DropItem(${1:itemtodrop})",
        "description": " ※参数: \n   (itemtodrop)<ent>[要抛出的物品] \n ※返回: \n ※说明: 原地抛出指定物品\n ※贡献者: @Runar"
    },
    "组件.SwapOneOfActiveItemWithSlot:": {
        "prefix": "components.container:SwapOneOfActiveItemWithSlot",
        "body": "components.container:SwapOneOfActiveItemWithSlot(${1:slot},${2:opener})",
        "description": " ※参数: \n   (slot)<>[] \n   (opener)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropOverstackedExcess:将超过最大堆叠数量的超出部分丢弃": {
        "prefix": "components.container:DropOverstackedExcess",
        "body": "components.container:DropOverstackedExcess(${1:item})",
        "description": " ※参数: \n   (item)<ent>[指定物品] \n ※返回: \n ※说明: 将超过最大堆叠数量的超出部分丢弃\n ※贡献者: @lan"
    },
    "组件.RemoveItemBySlot:": {
        "prefix": "components.inventory:RemoveItemBySlot",
        "body": "components.inventory:RemoveItemBySlot(${1:slot},${2:keepoverstacked})",
        "description": " ※参数: \n   (slot)<>[] \n   (keepoverstacked)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSideWidget:容器是否为侧边栏容器": {
        "prefix": "components.container:IsSideWidget",
        "body": "components.container:IsSideWidget()",
        "description": " ※参数: \n ※返回: <bool>[是侧边栏] \n ※说明: 容器是否为侧边栏容器\n ※贡献者: @Runar"
    },
    "组件.ShouldPrioritizeContainer:": {
        "prefix": "components.container:ShouldPrioritizeContainer",
        "body": "components.container:ShouldPrioritizeContainer(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddOneOfActiveItemToSlot:": {
        "prefix": "components.inventory:AddOneOfActiveItemToSlot",
        "body": "components.inventory:AddOneOfActiveItemToSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWidget:获取容器UI": {
        "prefix": "components.container:GetWidget",
        "body": "components.container:GetWidget()",
        "description": " ※参数: \n ※返回: <tbl>[容器UI] \n ※说明: 获取容器UI\n ※贡献者: @lan"
    },
    "组件.AddAllOfActiveItemToSlot:": {
        "prefix": "components.inventory:AddAllOfActiveItemToSlot",
        "body": "components.inventory:AddAllOfActiveItemToSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropItemBySlot:": {
        "prefix": "components.container:DropItemBySlot",
        "body": "components.container:DropItemBySlot(${1:slot},${2:drop_pos},${3:keepoverstacked})",
        "description": " ※参数: \n   (slot)<>[] \n   (drop_pos)<>[] \n   (keepoverstacked)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeActiveItemFromAllOfSlot:": {
        "prefix": "components.inventory:TakeActiveItemFromAllOfSlot",
        "body": "components.inventory:TakeActiveItemFromAllOfSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItemByName:获取容器内指名物品列表": {
        "prefix": "components.container:GetItemByName",
        "body": "components.container:GetItemByName(${1:item},${2:amount})",
        "description": " ※参数: \n   (item)<str>[物品prefab名] \n   (amount)<num>[所需库存数量] \n ※返回: <tbl>[物品inst为键, 值为获取数量的表] \n ※说明: 获取容器内指名物品列表\n ※贡献者: @Runar"
    },
    "组件.IsFull:返回容器是否为满": {
        "prefix": "components.container:IsFull",
        "body": "components.container:IsFull()",
        "description": " ※参数: \n ※返回: <bool>[容器为满] \n ※说明: 返回容器是否为满\n ※贡献者: @Runar"
    },
    "组件.AcceptsStacks:容器是否接受放入物品产生堆叠": {
        "prefix": "components.container:AcceptsStacks",
        "body": "components.container:AcceptsStacks()",
        "description": " ※参数: \n ※返回: <bool>[接受物品堆叠] \n ※说明: 容器是否接受放入物品产生堆叠\n ※贡献者: @Runar"
    },
    "组件.IsHolding:容器是否持有指定物品": {
        "prefix": "components.container:IsHolding",
        "body": "components.container:IsHolding(${1:item},${2:checkcontainer})",
        "description": " ※参数: \n   (item)<ent>[指定物品] \n   (checkcontainer)<bool>[检测容器内容器] \n ※返回: <bool>[容器持有指定物品] \n ※说明: 容器是否持有指定物品\n ※贡献者: @Runar"
    },
    "组件.DropEverythingWithTag:丢出所有具有指定tag的物品": {
        "prefix": "components.container:DropEverythingWithTag",
        "body": "components.container:DropEverythingWithTag(${1:tag},${2:drop_pos},${3:keepoverstacked})",
        "description": " ※参数: \n   (tag)<str>[物品拥有的tag] \n   (drop_pos)<V3>[掉落位置] \n   (keepoverstacked)<bool>[保持物品堆叠状态] \n ※返回: \n ※说明: 丢出所有具有指定tag的物品\n ※贡献者: @lan"
    },
    "组件.GetAllItems:获取容器内所有物品的表": {
        "prefix": "components.container:GetAllItems",
        "body": "components.container:GetAllItems()",
        "description": " ※参数: \n ※返回: <tbl>[容器内所有物品] \n ※说明: 获取容器内所有物品的表\n ※贡献者: @Runar"
    },
    "组件.SetNumSlots:": {
        "prefix": "components.container:SetNumSlots",
        "body": "components.container:SetNumSlots(${1:numslots})",
        "description": " ※参数: \n   (numslots)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PutOneOfActiveItemInSlot:": {
        "prefix": "components.inventory:PutOneOfActiveItemInSlot",
        "body": "components.inventory:PutOneOfActiveItemInSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PutAllOfActiveItemInSlot:": {
        "prefix": "components.inventory:PutAllOfActiveItemInSlot",
        "body": "components.inventory:PutAllOfActiveItemInSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveItem_Internal:": {
        "prefix": "components.container:RemoveItem_Internal",
        "body": "components.container:RemoveItem_Internal(${1:item},${2:slot},${3:wholestack},${4:keepoverstacked})",
        "description": " ※参数: \n   (item)<>[] \n   (slot)<>[] \n   (wholestack)<>[] \n   (keepoverstacked)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanOpen:容器可被打开": {
        "prefix": "components.container:CanOpen",
        "body": "components.container:CanOpen()",
        "description": " ※参数: \n ※返回: <bool>[可打开] \n ※说明: 容器可被打开\n ※贡献者: @Runar"
    },
    "组件.DestroyContents:无条件销毁容器内所有物品": {
        "prefix": "components.container:DestroyContents",
        "body": "components.container:DestroyContents(${1:onpredestroyitemcallbackfn})",
        "description": " ※参数: \n   (onpredestroyitemcallbackfn)<fn|nil>[物品销毁预回调函数]\n      {参数:\n         (inst)<ent>[容器] \n         (item)<ent>[要销毁的物品] \n      返回:} \n ※返回: \n ※说明: 无条件销毁容器内所有物品\n ※贡献者: @Runar"
    },
    "组件.DropEverythingUpToMaxStacks:从容器中丢弃物品直到达到指定的最大堆数": {
        "prefix": "components.container:DropEverythingUpToMaxStacks",
        "body": "components.container:DropEverythingUpToMaxStacks(${1:maxstacks},${2:drop_pos})",
        "description": " ※参数: \n   (maxstacks)<num>[最大堆数] \n   (drop_pos)<V3>[掉落位置] \n ※返回: \n ※说明: 从容器中丢弃物品直到达到指定的最大堆数\n ※贡献者: @lan"
    },
    "组件.RemoveItem:": {
        "prefix": "components.inventory:RemoveItem",
        "body": "components.inventory:RemoveItem(${1:item},${2:wholestack},${3:checkallcontainers},${4:keepoverstacked})",
        "description": " ※参数: \n   (item)<>[] \n   (wholestack)<>[] \n   (checkallcontainers)<>[] \n   (keepoverstacked)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WidgetSetup:绑定容器UI": {
        "prefix": "components.container:WidgetSetup",
        "body": "components.container:WidgetSetup(${1:prefab},${2:data})",
        "description": " ※参数: \n   (prefab)<str>[需要绑定的容器UI] \n   (data)<tbl>[不用填(容器UI信息,不填则在params[prefab]里找)] \n ※返回: \n ※说明: 绑定容器UI\n ※贡献者: @lan"
    },
    "组件.MoveItemFromAllOfSlot:": {
        "prefix": "components.inventory:MoveItemFromAllOfSlot",
        "body": "components.inventory:MoveItemFromAllOfSlot(${1:slot},${2:container})",
        "description": " ※参数: \n   (slot)<>[] \n   (container)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumItems:返回容器中装有物品的格子数": {
        "prefix": "components.container:NumItems",
        "body": "components.container:NumItems()",
        "description": " ※参数: \n ※返回: <num>[容器中装有物品的格子数] \n ※说明: 返回容器中装有物品的格子数\n ※贡献者: @Runar"
    },
    "组件.GetNumSlots:": {
        "prefix": "components.inventory:GetNumSlots",
        "body": "components.inventory:GetNumSlots()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasItemWithTag:容器内是否有指定数量的指定物品及其数目": {
        "prefix": "components.container:HasItemWithTag",
        "body": "components.container:HasItemWithTag(${1:tag},${2:amount})",
        "description": " ※参数: \n   (tag)<str>[标签] \n   (amount)<num>[最低累计数量] \n ※返回: <bool>[容器内有指定数量的指定物品] <num>[库存数量] \n ※说明: 容器内是否有指定数量的指定物品及其数目\n ※贡献者: @Runar"
    },
    "组件.GetItemInSlot:根据栏号获取物品": {
        "prefix": "components.container:GetItemInSlot",
        "body": "components.container:GetItemInSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<num>[栏序号] \n ※返回: <ent>[物品] \n ※说明: 根据栏号获取物品\n ※贡献者: @Runar"
    },
    "组件.Has:容器内是否有指定数量的指定物品及其数目": {
        "prefix": "components.container:Has",
        "body": "components.container:Has(${1:item},${2:amount},${3:iscrafting})",
        "description": " ※参数: \n   (item)<str>[物品prefab名] \n   (amount)<num>[最低数量] \n   (iscrafting)<bool|nil>[区分标签nocrafting] \n ※返回: <bool>[容器内有指定数量的指定物品] <num>[库存数量] \n ※说明: 容器内是否有指定数量的指定物品及其数目\n ※贡献者: @Runar"
    },
    "组件.EnableInfiniteStackSize:启用或关闭容器无限堆叠": {
        "prefix": "components.container:EnableInfiniteStackSize",
        "body": "components.container:EnableInfiniteStackSize(${1:enable})",
        "description": " ※参数: \n   (enable)<bool>[启用无限堆叠] \n ※返回: \n ※说明: 启用或关闭容器无限堆叠\n ※贡献者: @Runar"
    },
    "组件.Close:由doer关闭容器": {
        "prefix": "components.container:Close",
        "body": "components.container:Close(${1:doer})",
        "description": " ※参数: \n   (doer)<ent>[执行者] \n ※返回: \n ※说明: 由doer关闭容器\n ※贡献者: @Runar"
    },
    "组件.FindItem:寻找容器内满足条件的一格物品": {
        "prefix": "components.container:FindItem",
        "body": "components.container:FindItem(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[测试函数]\n      {参数:\n         (item)<ent>[容器内物品] \n      返回:\n         <bool>[满足条件]} \n ※返回: <ent>[满足条件的第一个物品] \n ※说明: 寻找容器内满足条件的一格物品\n ※贡献者: @Runar"
    },
    "组件.TakeActiveItemFromHalfOfSlot:": {
        "prefix": "components.inventory:TakeActiveItemFromHalfOfSlot",
        "body": "components.inventory:TakeActiveItemFromHalfOfSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOpeners:获取容器打开者列表": {
        "prefix": "components.container:GetOpeners",
        "body": "components.container:GetOpeners()",
        "description": " ※参数: \n ※返回: <tbl>[打开者列表] \n ※说明: 获取容器打开者列表\n ※贡献者: @Runar"
    },
    "组件.IsOpenedByOthers:容器是否由非指定目标打开": {
        "prefix": "components.container:IsOpenedByOthers",
        "body": "components.container:IsOpenedByOthers(${1:guy})",
        "description": " ※参数: \n   (guy)<ent>[指定目标] \n ※返回: <bool>[容器由非指定目标打开] \n ※说明: 容器是否由非指定目标打开\n ※贡献者: @Runar"
    },
    "组件.HasItemThatMatches:容器内是否有指定数量的指定物品及其数目": {
        "prefix": "components.container:HasItemThatMatches",
        "body": "components.container:HasItemThatMatches(${1:fn},${2:amount})",
        "description": " ※参数: \n   (fn)<fn>[物品测试函数]\n      {参数:\n         (item)<ent>[物品] \n      返回:\n         <bool>[符合条件]} \n   (amount)<num>[最低累计数量] \n ※返回: <bool>[容器内有指定数量的指定物品] <num>[库存数量] \n ※说明: 容器内是否有指定数量的指定物品及其数目\n ※贡献者: @Runar"
    },
    "组件.CanAcceptCount:容器可以从某个物品堆中接收多少数量": {
        "prefix": "components.container:CanAcceptCount",
        "body": "components.container:CanAcceptCount(${1:item},${2:maxcount})",
        "description": " ※参数: \n   (item)<ent>[要放入的物品] \n   (maxcount)<num|nil>[最大接受数量] \n ※返回: <num>[接受数量] \n ※说明: 容器可以从某个物品堆中接收多少数量\n ※贡献者: @Runar"
    },
    "组件.IsOpen:容器是否打开": {
        "prefix": "components.container:IsOpen",
        "body": "components.container:IsOpen()",
        "description": " ※参数: \n ※返回: <bool>[容器打开中] \n ※说明: 容器是否打开\n ※贡献者: @Runar"
    },
    "组件.FindItems:寻找容器内满足条件的所有物品": {
        "prefix": "components.container:FindItems",
        "body": "components.container:FindItems(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[测试函数]\n      {参数:\n         (item)<ent>[容器内物品] \n      返回:\n         <bool>[满足条件]} \n ※返回: <tbl>[满足条件的所有物品] \n ※说明: 寻找容器内满足条件的所有物品\n ※贡献者: @Runar"
    },
    "组件.DropItemAt:指定坐标抛出指定物品": {
        "prefix": "components.container:DropItemAt",
        "body": "components.container:DropItemAt(${1:itemtodrop},${2:x},${3:y},${4:z})",
        "description": " ※参数: \n   (itemtodrop)<ent>[要抛出的物品] \n   (x)<num>[] \n   (y)<num>[] \n   (z)<num>[] \n ※返回: \n ※说明: 指定坐标抛出指定物品\n ※贡献者: @Runar"
    },
    "组件.IsOpenedBy:容器是否由指定目标打开": {
        "prefix": "components.container:IsOpenedBy",
        "body": "components.container:IsOpenedBy(${1:guy})",
        "description": " ※参数: \n   (guy)<ent>[指定目标] \n ※返回: <bool>[容器由指定目标打开] \n ※说明: 容器是否由指定目标打开\n ※贡献者: @Runar"
    },
    "组件.RemoveAllItems:移除容器内所有物品": {
        "prefix": "components.container:RemoveAllItems",
        "body": "components.container:RemoveAllItems()",
        "description": " ※参数: \n ※返回: <tbl>[容器内所有物品] \n ※说明: 移除容器内所有物品\n ※贡献者: @Runar"
    },
    "组件.GetItemSlot:获取指定物品所在的栏号": {
        "prefix": "components.container:GetItemSlot",
        "body": "components.container:GetItemSlot(${1:item})",
        "description": " ※参数: \n   (item)<ent>[指定物品] \n ※返回: <num>[栏序号] \n ※说明: 获取指定物品所在的栏号\n ※贡献者: @Runar"
    },
    "组件.GetSpecificSlotForItem:在【特定栏位指定物品】容器中寻找可放入指定物品的栏序号": {
        "prefix": "components.container:GetSpecificSlotForItem",
        "body": "components.container:GetSpecificSlotForItem(${1:item})",
        "description": " ※参数: \n   (item)<ent>[要放入的物品] \n ※返回: <num>[可放入的栏序号] \n ※说明: 在【特定栏位指定物品】容器中寻找可放入指定物品的栏序号\n ※贡献者: @Runar"
    },
    "组件.DestroyContentsConditionally:销毁容器内满足条件的所有物品": {
        "prefix": "components.container:DestroyContentsConditionally",
        "body": "components.container:DestroyContentsConditionally(${1:filterfn},${2:onpredestroyitemcallbackfn})",
        "description": " ※参数: \n   (filterfn)<fn|nil>[销毁条件]\n      {参数:\n         (inst)<ent>[容器] \n         (item)<ent>[要测试的物品] \n      返回:} \n   (onpredestroyitemcallbackfn)<fn|nil>[物品销毁预回调函数]\n      {参数:\n         (inst)<ent>[容器] \n         (item)<ent>[要销毁的物品] \n      返回:} \n ※返回: \n ※说明: 销毁容器内满足条件的所有物品\n ※贡献者: @Runar"
    },
    "组件.GiveItem:把指定物品添加到容器中": {
        "prefix": "components.container:GiveItem",
        "body": "components.container:GiveItem(${1:item},${2:slot},${3:src_pos},${4:drop_on_fail})",
        "description": " ※参数: \n   (item)<ent>[要放入的物品] \n   (slot)<num|nil>[栏序号] \n   (src_pos)<V3|nil>[物品来源坐标] \n   (drop_on_fail)<bool|nil>[不为false时失败掉落] \n ※返回: <bool>[成功] \n ※说明: 把指定物品添加到容器中\n ※贡献者: @Runar"
    },
    "组件.Cook:": {
        "prefix": "components.cookable:Cook",
        "body": "components.cookable:Cook(${1:cooker},${2:chef})",
        "description": " ※参数: \n   (cooker)<>[] \n   (chef)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnCookedFn:": {
        "prefix": "components.cookable:SetOnCookedFn",
        "body": "components.cookable:SetOnCookedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LearnRecipe:": {
        "prefix": "components.cookbookupdater:LearnRecipe",
        "body": "components.cookbookupdater:LearnRecipe(${1:product},${2:ingredients})",
        "description": " ※参数: \n   (product)<>[] \n   (ingredients)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LearnFoodStats:": {
        "prefix": "components.cookbookupdater:LearnFoodStats",
        "body": "components.cookbookupdater:LearnFoodStats(${1:product})",
        "description": " ※参数: \n   (product)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CookItem:": {
        "prefix": "components.cooker:CookItem",
        "body": "components.cooker:CookItem(${1:item},${2:chef})",
        "description": " ※参数: \n   (item)<>[] \n   (chef)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanCook:": {
        "prefix": "components.stewer:CanCook",
        "body": "components.stewer:CanCook()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishDrilling:": {
        "prefix": "components.cookiecutterdrill:FinishDrilling",
        "body": "components.cookiecutterdrill:FinishDrilling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PauseDrilling:": {
        "prefix": "components.cookiecutterdrill:PauseDrilling",
        "body": "components.cookiecutterdrill:PauseDrilling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResumeDrilling:": {
        "prefix": "components.cookiecutterdrill:ResumeDrilling",
        "body": "components.cookiecutterdrill:ResumeDrilling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIsDoneDrilling:": {
        "prefix": "components.cookiecutterdrill:GetIsDoneDrilling",
        "body": "components.cookiecutterdrill:GetIsDoneDrilling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetDrilling:": {
        "prefix": "components.cookiecutterdrill:ResetDrilling",
        "body": "components.cookiecutterdrill:ResetDrilling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartCharging:": {
        "prefix": "components.cooldown:StartCharging",
        "body": "components.cooldown:StartCharging(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToCharged:": {
        "prefix": "components.cooldown:GetTimeToCharged",
        "body": "components.cooldown:GetTimeToCharged()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishCharging:": {
        "prefix": "components.cooldown:FinishCharging",
        "body": "components.cooldown:FinishCharging()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCharged:": {
        "prefix": "components.rechargeable:IsCharged",
        "body": "components.rechargeable:IsCharged()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCharging:": {
        "prefix": "components.cooldown:IsCharging",
        "body": "components.cooldown:IsCharging()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRecipes:": {
        "prefix": "components.craftingstation:GetRecipes",
        "body": "components.craftingstation:GetRecipes()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LearnItem:": {
        "prefix": "components.craftingstation:LearnItem",
        "body": "components.craftingstation:LearnItem(${1:itemname},${2:recipetouse})",
        "description": " ※参数: \n   (itemname)<>[] \n   (recipetouse)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForgetAllItems:": {
        "prefix": "components.craftingstation:ForgetAllItems",
        "body": "components.craftingstation:ForgetAllItems()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItems:": {
        "prefix": "components.craftingstation:GetItems",
        "body": "components.craftingstation:GetItems()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForgetItem:": {
        "prefix": "components.craftingstation:ForgetItem",
        "body": "components.craftingstation:ForgetItem(${1:itemname})",
        "description": " ※参数: \n   (itemname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.KnowsItem:": {
        "prefix": "components.craftingstation:KnowsItem",
        "body": "components.craftingstation:KnowsItem(${1:itemname})",
        "description": " ※参数: \n   (itemname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Row:": {
        "prefix": "components.oar:Row",
        "body": "components.oar:Row(${1:doer},${2:pos})",
        "description": " ※参数: \n   (doer)<>[] \n   (pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Shouldrow:": {
        "prefix": "components.crewmember:Shouldrow",
        "body": "components.crewmember:Shouldrow()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLeftCrew:": {
        "prefix": "components.crewmember:OnLeftCrew",
        "body": "components.crewmember:OnLeftCrew()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Leave:": {
        "prefix": "components.herdmember:Leave",
        "body": "components.herdmember:Leave()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDominantTrait:": {
        "prefix": "components.crittertraits:IsDominantTrait",
        "body": "components.crittertraits:IsDominantTrait(${1:trait})",
        "description": " ※参数: \n   (trait)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DecayTraits:": {
        "prefix": "components.crittertraits:DecayTraits",
        "body": "components.crittertraits:DecayTraits()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPet:": {
        "prefix": "components.crittertraits:OnPet",
        "body": "components.crittertraits:OnPet(${1:petter})",
        "description": " ※参数: \n   (petter)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDominantTrait:": {
        "prefix": "components.crittertraits:SetDominantTrait",
        "body": "components.crittertraits:SetDominantTrait(${1:trait})",
        "description": " ※参数: \n   (trait)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshDominantTrait:": {
        "prefix": "components.crittertraits:RefreshDominantTrait",
        "body": "components.crittertraits:RefreshDominantTrait()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IncTracker:": {
        "prefix": "components.crittertraits:IncTracker",
        "body": "components.crittertraits:IncTracker(${1:name},${2:multiplier})",
        "description": " ※参数: \n   (name)<>[] \n   (multiplier)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnHarvestFn:": {
        "prefix": "components.trap:SetOnHarvestFn",
        "body": "components.trap:SetOnHarvestFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Harvest:": {
        "prefix": "components.trap:Harvest",
        "body": "components.trap:Harvest(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Resume:": {
        "prefix": "components.pickable:Resume",
        "body": "components.pickable:Resume()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnMatureFn:": {
        "prefix": "components.crop:SetOnMatureFn",
        "body": "components.crop:SetOnMatureFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsReadyForHarvest:": {
        "prefix": "components.crop:IsReadyForHarvest",
        "body": "components.crop:IsReadyForHarvest()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWorldGrowthRateMultiplier:": {
        "prefix": "components.crop:GetWorldGrowthRateMultiplier",
        "body": "components.crop:GetWorldGrowthRateMultiplier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnWitheredFn:": {
        "prefix": "components.crop:SetOnWitheredFn",
        "body": "components.crop:SetOnWitheredFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeWithered:": {
        "prefix": "components.crop:MakeWithered",
        "body": "components.crop:MakeWithered()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartGrowing:": {
        "prefix": "components.simplemagicgrower:StartGrowing",
        "body": "components.simplemagicgrower:StartGrowing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Mature:": {
        "prefix": "components.crop:Mature",
        "body": "components.crop:Mature()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoGrow:": {
        "prefix": "components.crop:DoGrow",
        "body": "components.crop:DoGrow(${1:dt},${2:nowither})",
        "description": " ※参数: \n   (dt)<>[] \n   (nowither)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceOntoOwner:": {
        "prefix": "components.cursable:ForceOntoOwner",
        "body": "components.cursable:ForceOntoOwner(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyCurse:": {
        "prefix": "components.cursable:ApplyCurse",
        "body": "components.cursable:ApplyCurse(${1:item},${2:curse})",
        "description": " ※参数: \n   (item)<>[] \n   (curse)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Died:": {
        "prefix": "components.cursable:Died",
        "body": "components.cursable:Died()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveCurse:": {
        "prefix": "components.cursable:RemoveCurse",
        "body": "components.cursable:RemoveCurse(${1:curse},${2:numofitems},${3:dropitems})",
        "description": " ※参数: \n   (curse)<>[] \n   (numofitems)<>[] \n   (dropitems)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCursable:": {
        "prefix": "components.cursable:IsCursable",
        "body": "components.cursable:IsCursable(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Given:": {
        "prefix": "components.curseditem:Given",
        "body": "components.curseditem:Given(${1:item},${2:data})",
        "description": " ※参数: \n   (item)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.checkplayersinventoryforspace:": {
        "prefix": "components.curseditem:checkplayersinventoryforspace",
        "body": "components.curseditem:checkplayersinventoryforspace(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.lookforplayer:": {
        "prefix": "components.curseditem:lookforplayer",
        "body": "components.curseditem:lookforplayer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForOwner:": {
        "prefix": "components.curseditem:CheckForOwner",
        "body": "components.curseditem:CheckForOwner()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanSwapSymbol:": {
        "prefix": "components.custombuildmanager:SetCanSwapSymbol",
        "body": "components.custombuildmanager:SetCanSwapSymbol(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.refreshart:": {
        "prefix": "components.custombuildmanager:refreshart",
        "body": "components.custombuildmanager:refreshart()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeGroup:": {
        "prefix": "components.custombuildmanager:ChangeGroup",
        "body": "components.custombuildmanager:ChangeGroup(${1:group},${2:build})",
        "description": " ※参数: \n   (group)<>[] \n   (build)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGroups:": {
        "prefix": "components.custombuildmanager:SetGroups",
        "body": "components.custombuildmanager:SetGroups(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStep:": {
        "prefix": "components.cyclable:SetStep",
        "body": "components.cyclable:SetStep(${1:step},${2:doer},${3:ignore_callback})",
        "description": " ※参数: \n   (step)<>[] \n   (doer)<>[] \n   (ignore_callback)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnCycleFn:": {
        "prefix": "components.cyclable:SetOnCycleFn",
        "body": "components.cyclable:SetOnCycleFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Cycle:": {
        "prefix": "components.cyclable:Cycle",
        "body": "components.cyclable:Cycle(${1:doer},${2:negative})",
        "description": " ※参数: \n   (doer)<>[] \n   (negative)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetReflectedDamage:": {
        "prefix": "components.damagereflect:GetReflectedDamage",
        "body": "components.damagereflect:GetReflectedDamage(${1:attacker},${2:damage},${3:weapon},${4:stimuli},${5:spdamage})",
        "description": " ※参数: \n   (attacker)<>[] \n   (damage)<>[] \n   (weapon)<>[] \n   (stimuli)<>[] \n   (spdamage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReflectDamageFn:": {
        "prefix": "components.damagereflect:SetReflectDamageFn",
        "body": "components.damagereflect:SetReflectDamageFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnHealthDelta:": {
        "prefix": "components.damagetracker:OnHealthDelta",
        "body": "components.damagetracker:OnHealthDelta(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddBonus:": {
        "prefix": "components.planardefense:AddBonus",
        "body": "components.planardefense:AddBonus(${1:src},${2:bonus},${3:key})",
        "description": " ※参数: \n   (src)<>[] \n   (bonus)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveBonus:": {
        "prefix": "components.planardefense:RemoveBonus",
        "body": "components.planardefense:RemoveBonus(${1:src},${2:key})",
        "description": " ※参数: \n   (src)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBonus:": {
        "prefix": "components.planardefense:GetBonus",
        "body": "components.planardefense:GetBonus()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddResist:": {
        "prefix": "components.damagetyperesist:AddResist",
        "body": "components.damagetyperesist:AddResist(${1:tag},${2:src},${3:pct},${4:key})",
        "description": " ※参数: \n   (tag)<>[] \n   (src)<>[] \n   (pct)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveResist:": {
        "prefix": "components.damagetyperesist:RemoveResist",
        "body": "components.damagetyperesist:RemoveResist(${1:tag},${2:src},${3:key})",
        "description": " ※参数: \n   (tag)<>[] \n   (src)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetResist:": {
        "prefix": "components.damagetyperesist:GetResist",
        "body": "components.damagetyperesist:GetResist(${1:attacker},${2:weapon})",
        "description": " ※参数: \n   (attacker)<>[] \n   (weapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetData:": {
        "prefix": "components.playeravatardata:GetData",
        "body": "components.playeravatardata:GetData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopDataRegen:": {
        "prefix": "components.dataanalyzer:StopDataRegen",
        "body": "components.dataanalyzer:StopDataRegen()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpendData:": {
        "prefix": "components.dataanalyzer:SpendData",
        "body": "components.dataanalyzer:SpendData(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsValidSpawningPoint:": {
        "prefix": "components.daywalkerspawner:IsValidSpawningPoint",
        "body": "components.daywalkerspawner:IsValidSpawningPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPowerLevel:": {
        "prefix": "components.forestdaywalkerspawner:GetPowerLevel",
        "body": "components.forestdaywalkerspawner:GetPowerLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindBestSpawningPoint:": {
        "prefix": "components.daywalkerspawner:FindBestSpawningPoint",
        "body": "components.daywalkerspawner:FindBestSpawningPoint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToRegisterSpawningPoint:": {
        "prefix": "components.daywalkerspawner:TryToRegisterSpawningPoint",
        "body": "components.daywalkerspawner:TryToRegisterSpawningPoint(${1:spawnpoint})",
        "description": " ※参数: \n   (spawnpoint)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnDayWalkerArena:": {
        "prefix": "components.daywalkerspawner:SpawnDayWalkerArena",
        "body": "components.daywalkerspawner:SpawnDayWalkerArena(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterDayWalkerSpawningPoint:": {
        "prefix": "components.daywalkerspawner:RegisterDayWalkerSpawningPoint",
        "body": "components.daywalkerspawner:RegisterDayWalkerSpawningPoint(${1:spawnpoint})",
        "description": " ※参数: \n   (spawnpoint)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToSpawnDayWalkerArena:": {
        "prefix": "components.daywalkerspawner:TryToSpawnDayWalkerArena",
        "body": "components.daywalkerspawner:TryToSpawnDayWalkerArena()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnDayChange:": {
        "prefix": "components.forestdaywalkerspawner:OnDayChange",
        "body": "components.forestdaywalkerspawner:OnDayChange()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPostInit:": {
        "prefix": "components.oceancolor:OnPostInit",
        "body": "components.oceancolor:OnPostInit()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WatchDaywalker:": {
        "prefix": "components.forestdaywalkerspawner:WatchDaywalker",
        "body": "components.forestdaywalkerspawner:WatchDaywalker(${1:daywalker})",
        "description": " ※参数: \n   (daywalker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnregisterDayWalkerSpawningPoint:": {
        "prefix": "components.daywalkerspawner:UnregisterDayWalkerSpawningPoint",
        "body": "components.daywalkerspawner:UnregisterDayWalkerSpawningPoint(${1:spawnpoint})",
        "description": " ※参数: \n   (spawnpoint)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IncrementPowerLevel:": {
        "prefix": "components.forestdaywalkerspawner:IncrementPowerLevel",
        "body": "components.forestdaywalkerspawner:IncrementPowerLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDetachedFn:": {
        "prefix": "components.debuff:SetDetachedFn",
        "body": "components.debuff:SetDetachedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAttachedFn:": {
        "prefix": "components.debuff:SetAttachedFn",
        "body": "components.debuff:SetAttachedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetChangeFollowSymbolFn:": {
        "prefix": "components.debuff:SetChangeFollowSymbolFn",
        "body": "components.debuff:SetChangeFollowSymbolFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeFollowSymbol:": {
        "prefix": "components.debuff:ChangeFollowSymbol",
        "body": "components.debuff:ChangeFollowSymbol(${1:followsymbol},${2:followoffset})",
        "description": " ※参数: \n   (followsymbol)<>[] \n   (followoffset)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Extend:": {
        "prefix": "components.walkingplank:Extend",
        "body": "components.walkingplank:Extend()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnDetach:": {
        "prefix": "components.debuff:OnDetach",
        "body": "components.debuff:OnDetach()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AttachTo:": {
        "prefix": "components.debuff:AttachTo",
        "body": "components.debuff:AttachTo(${1:name},${2:target},${3:followsymbol},${4:followoffset},${5:data})",
        "description": " ※参数: \n   (name)<>[] \n   (target)<>[] \n   (followsymbol)<>[] \n   (followoffset)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetExtendedFn:": {
        "prefix": "components.debuff:SetExtendedFn",
        "body": "components.debuff:SetExtendedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasDebuff:": {
        "prefix": "components.debuffable:HasDebuff",
        "body": "components.debuffable:HasDebuff(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddDebuff:": {
        "prefix": "components.debuffable:AddDebuff",
        "body": "components.debuffable:AddDebuff(${1:name},${2:prefab},${3:data})",
        "description": " ※参数: \n   (name)<>[] \n   (prefab)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDebuff:": {
        "prefix": "components.debuffable:GetDebuff",
        "body": "components.debuffable:GetDebuff(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFollowSymbol:": {
        "prefix": "components.debuffable:SetFollowSymbol",
        "body": "components.debuffable:SetFollowSymbol(${1:symbol},${2:x},${3:y},${4:z})",
        "description": " ※参数: \n   (symbol)<>[] \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveDebuff:": {
        "prefix": "components.debuffable:RemoveDebuff",
        "body": "components.debuffable:RemoveDebuff(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveOnDespawn:": {
        "prefix": "components.debuffable:RemoveOnDespawn",
        "body": "components.debuffable:RemoveOnDespawn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetColour:": {
        "prefix": "components.debugger:SetColour",
        "body": "components.debugger:SetColour(${1:key},${2:r},${3:g},${4:b},${5:a})",
        "description": " ※参数: \n   (key)<>[] \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n   (a)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAll:": {
        "prefix": "components.debugger:SetAll",
        "body": "components.debugger:SetAll(${1:key},${2:origin},${3:tar},${4:colour})",
        "description": " ※参数: \n   (key)<>[] \n   (origin)<>[] \n   (tar)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetZ:": {
        "prefix": "components.debugger:SetZ",
        "body": "components.debugger:SetZ(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOrigin:": {
        "prefix": "components.debugger:SetOrigin",
        "body": "components.debugger:SetOrigin(${1:key},${2:x},${3:y})",
        "description": " ※参数: \n   (key)<>[] \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTimeDelta:": {
        "prefix": "components.decay:SetTimeDelta",
        "body": "components.decay:SetTimeDelta(${1:amount},${2:pause},${3:num})",
        "description": " ※参数: \n   (amount)<>[] \n   (pause)<>[] \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopMonster:": {
        "prefix": "components.deciduoustreeupdater:StopMonster",
        "body": "components.deciduoustreeupdater:StopMonster()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnIgniteWave:": {
        "prefix": "components.deciduoustreeupdater:SpawnIgniteWave",
        "body": "components.deciduoustreeupdater:SpawnIgniteWave()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartMonster:": {
        "prefix": "components.deciduoustreeupdater:StartMonster",
        "body": "components.deciduoustreeupdater:StartMonster(${1:starttime})",
        "description": " ※参数: \n   (starttime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetClosestHerdAlertTarget:": {
        "prefix": "components.deerherding:GetClosestHerdAlertTarget",
        "body": "components.deerherding:GetClosestHerdAlertTarget(${1:deer})",
        "description": " ※参数: \n   (deer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetValidAareaCheckFn:": {
        "prefix": "components.deerherding:SetValidAareaCheckFn",
        "body": "components.deerherding:SetValidAareaCheckFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAnyEntityAsleep:": {
        "prefix": "components.deerherding:IsAnyEntityAsleep",
        "body": "components.deerherding:IsAnyEntityAsleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcIsHerdSpooked:": {
        "prefix": "components.deerherding:CalcIsHerdSpooked",
        "body": "components.deerherding:CalcIsHerdSpooked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateDeerHerdingStatus:": {
        "prefix": "components.deerherding:UpdateDeerHerdingStatus",
        "body": "components.deerherding:UpdateDeerHerdingStatus()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcHerdCenterPoint:": {
        "prefix": "components.deerherding:CalcHerdCenterPoint",
        "body": "components.deerherding:CalcHerdCenterPoint(${1:detailedinfo})",
        "description": " ※参数: \n   (detailedinfo)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateHerdLocation:": {
        "prefix": "components.deerherding:UpdateHerdLocation",
        "body": "components.deerherding:UpdateHerdLocation(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsActiveInHerd:": {
        "prefix": "components.deerherding:IsActiveInHerd",
        "body": "components.deerherding:IsActiveInHerd(${1:deer})",
        "description": " ※参数: \n   (deer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHerdAlertTarget:": {
        "prefix": "components.deerherding:SetHerdAlertTarget",
        "body": "components.deerherding:SetHerdAlertTarget(${1:deer},${2:target})",
        "description": " ※参数: \n   (deer)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAHerdAlertTarget:": {
        "prefix": "components.deerherding:IsAHerdAlertTarget",
        "body": "components.deerherding:IsAHerdAlertTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsGrazing:": {
        "prefix": "components.deerherding:IsGrazing",
        "body": "components.deerherding:IsGrazing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HerdHasAlertTarget:": {
        "prefix": "components.deerherding:HerdHasAlertTarget",
        "body": "components.deerherding:HerdHasAlertTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeploySpacingRadius:": {
        "prefix": "components.deployable:DeploySpacingRadius",
        "body": "components.deployable:DeploySpacingRadius()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDeploySpacing:": {
        "prefix": "components.deployable:SetDeploySpacing",
        "body": "components.deployable:SetDeploySpacing(${1:spacing})",
        "description": " ※参数: \n   (spacing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Deploy:": {
        "prefix": "components.deployable:Deploy",
        "body": "components.deployable:Deploy(${1:pt},${2:deployer},${3:rot})",
        "description": " ※参数: \n   (pt)<>[] \n   (deployer)<>[] \n   (rot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDeployMode:": {
        "prefix": "components.deployable:SetDeployMode",
        "body": "components.deployable:SetDeployMode(${1:mode})",
        "description": " ※参数: \n   (mode)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUseGridPlacer:": {
        "prefix": "components.deployable:SetUseGridPlacer",
        "body": "components.deployable:SetUseGridPlacer(${1:usegridplacer})",
        "description": " ※参数: \n   (usegridplacer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDeployTossSymbolOverride:": {
        "prefix": "components.deployable:SetDeployTossSymbolOverride",
        "body": "components.deployable:SetDeployTossSymbolOverride(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeploy:": {
        "prefix": "components.deployable:CanDeploy",
        "body": "components.deployable:CanDeploy(${1:pt},${2:mouseover},${3:deployer},${4:rot})",
        "description": " ※参数: \n   (pt)<>[] \n   (mouseover)<>[] \n   (deployer)<>[] \n   (rot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDeployable:": {
        "prefix": "components.deployable:IsDeployable",
        "body": "components.deployable:IsDeployable(${1:deployer})",
        "description": " ※参数: \n   (deployer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartHelper:": {
        "prefix": "components.deployhelper:StartHelper",
        "body": "components.deployhelper:StartHelper(${1:recipename},${2:placerinst})",
        "description": " ※参数: \n   (recipename)<>[] \n   (placerinst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRecipeFilter:": {
        "prefix": "components.deployhelper:AddRecipeFilter",
        "body": "components.deployhelper:AddRecipeFilter(${1:recipename})",
        "description": " ※参数: \n   (recipename)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopHelper:": {
        "prefix": "components.deployhelper:StopHelper",
        "body": "components.deployhelper:StopHelper()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddKeyFilter:": {
        "prefix": "components.deployhelper:AddKeyFilter",
        "body": "components.deployhelper:AddKeyFilter(${1:key})",
        "description": " ※参数: \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FadeOut:": {
        "prefix": "components.despawnfader:FadeOut",
        "body": "components.despawnfader:FadeOut()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryDigest:": {
        "prefix": "components.digester:TryDigest",
        "body": "components.digester:TryDigest()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PrepareDisappear:": {
        "prefix": "components.disappears:PrepareDisappear",
        "body": "components.disappears:PrepareDisappear()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Disappear:": {
        "prefix": "components.disappears:Disappear",
        "body": "components.disappears:Disappear()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopDisappear:": {
        "prefix": "components.disappears:StopDisappear",
        "body": "components.disappears:StopDisappear()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIcons:": {
        "prefix": "components.discoverable:SetIcons",
        "body": "components.discoverable:SetIcons(${1:undiscovered},${2:discovered})",
        "description": " ※参数: \n   (undiscovered)<>[] \n   (discovered)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Hide:": {
        "prefix": "components.inventory:Hide",
        "body": "components.inventory:Hide()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Discover:": {
        "prefix": "components.discoverable:Discover",
        "body": "components.discoverable:Discover()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Spread:": {
        "prefix": "components.diseaseable:Spread",
        "body": "components.diseaseable:Spread()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDiseased:": {
        "prefix": "components.diseaseable:IsDiseased",
        "body": "components.diseaseable:IsDiseased()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBecomingDiseased:": {
        "prefix": "components.diseaseable:IsBecomingDiseased",
        "body": "components.diseaseable:IsBecomingDiseased()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RestartNearbySpread:": {
        "prefix": "components.diseaseable:RestartNearbySpread",
        "body": "components.diseaseable:RestartNearbySpread()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Disease:": {
        "prefix": "components.diseaseable:Disease",
        "body": "components.diseaseable:Disease()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDiseasedFn:": {
        "prefix": "components.diseaseable:SetDiseasedFn",
        "body": "components.diseaseable:SetDiseasedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetExtraFn:": {
        "prefix": "components.distancefade:SetExtraFn",
        "body": "components.distancefade:SetExtraFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryBecomeDomesticated:": {
        "prefix": "components.domesticatable:TryBecomeDomesticated",
        "body": "components.domesticatable:TryBecomeDomesticated()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetObedience:": {
        "prefix": "components.domesticatable:GetObedience",
        "body": "components.domesticatable:GetObedience()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMinObedience:": {
        "prefix": "components.domesticatable:SetMinObedience",
        "body": "components.domesticatable:SetMinObedience(${1:min})",
        "description": " ※参数: \n   (min)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeltaObedience:": {
        "prefix": "components.domesticatable:DeltaObedience",
        "body": "components.domesticatable:DeltaObedience(${1:delta})",
        "description": " ※参数: \n   (delta)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDomesticationTrigger:": {
        "prefix": "components.domesticatable:SetDomesticationTrigger",
        "body": "components.domesticatable:SetDomesticationTrigger(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDomesticated:": {
        "prefix": "components.domesticatable:IsDomesticated",
        "body": "components.domesticatable:IsDomesticated()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDomestication:": {
        "prefix": "components.domesticatable:GetDomestication",
        "body": "components.domesticatable:GetDomestication()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BecomeDomesticated:": {
        "prefix": "components.domesticatable:BecomeDomesticated",
        "body": "components.domesticatable:BecomeDomesticated()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PauseDomesticationDecay:": {
        "prefix": "components.domesticatable:PauseDomesticationDecay",
        "body": "components.domesticatable:PauseDomesticationDecay(${1:pause})",
        "description": " ※参数: \n   (pause)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForChanges:": {
        "prefix": "components.domesticatable:CheckForChanges",
        "body": "components.domesticatable:CheckForChanges()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckAndStartTask:": {
        "prefix": "components.domesticatable:CheckAndStartTask",
        "body": "components.domesticatable:CheckAndStartTask()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeltaTendency:": {
        "prefix": "components.domesticatable:DeltaTendency",
        "body": "components.domesticatable:DeltaTendency(${1:tendency},${2:delta})",
        "description": " ※参数: \n   (tendency)<>[] \n   (delta)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelTask:": {
        "prefix": "components.domesticatable:CancelTask",
        "body": "components.domesticatable:CancelTask()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDomesticated:": {
        "prefix": "components.domesticatable:SetDomesticated",
        "body": "components.domesticatable:SetDomesticated(${1:domesticated})",
        "description": " ※参数: \n   (domesticated)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Validate:": {
        "prefix": "components.domesticatable:Validate",
        "body": "components.domesticatable:Validate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeltaDomestication:": {
        "prefix": "components.domesticatable:DeltaDomestication",
        "body": "components.domesticatable:DeltaDomestication(${1:delta},${2:doer})",
        "description": " ※参数: \n   (delta)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDraw:": {
        "prefix": "components.drawable:CanDraw",
        "body": "components.drawable:CanDraw()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetImage:": {
        "prefix": "components.drawable:GetImage",
        "body": "components.drawable:GetImage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBGAtlas:": {
        "prefix": "components.drawable:GetBGAtlas",
        "body": "components.drawable:GetBGAtlas()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnDrawn:": {
        "prefix": "components.drawable:OnDrawn",
        "body": "components.drawable:OnDrawn(${1:imagename},${2:imagesource},${3:atlasname},${4:bgimagename},${5:bgatlasname})",
        "description": " ※参数: \n   (imagename)<>[] \n   (imagesource)<>[] \n   (atlasname)<>[] \n   (bgimagename)<>[] \n   (bgatlasname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAtlas:": {
        "prefix": "components.drawable:GetAtlas",
        "body": "components.drawable:GetAtlas()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBGImage:": {
        "prefix": "components.drawable:GetBGImage",
        "body": "components.drawable:GetBGImage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanDraw:": {
        "prefix": "components.drawable:SetCanDraw",
        "body": "components.drawable:SetCanDraw(${1:candraw})",
        "description": " ※参数: \n   (candraw)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDrawnFn:": {
        "prefix": "components.drawable:SetOnDrawnFn",
        "body": "components.drawable:SetOnDrawnFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDrawFn:": {
        "prefix": "components.drawingtool:SetOnDrawFn",
        "body": "components.drawingtool:SetOnDrawFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetImageToDraw:": {
        "prefix": "components.drawingtool:GetImageToDraw",
        "body": "components.drawingtool:GetImageToDraw(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Draw:": {
        "prefix": "components.drawingtool:Draw",
        "body": "components.drawingtool:Draw(${1:target},${2:image},${3:src},${4:atlas},${5:bgimage},${6:bgatlas})",
        "description": " ※参数: \n   (target)<>[] \n   (image)<>[] \n   (src)<>[] \n   (atlas)<>[] \n   (bgimage)<>[] \n   (bgatlas)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeDrowningDamage:": {
        "prefix": "components.drownable:TakeDrowningDamage",
        "body": "components.drownable:TakeDrowningDamage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCustomTuningsFn:": {
        "prefix": "components.drownable:SetCustomTuningsFn",
        "body": "components.drownable:SetCustomTuningsFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WashAshore:": {
        "prefix": "components.drownable:WashAshore",
        "body": "components.drownable:WashAshore()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldDropItems:": {
        "prefix": "components.drownable:ShouldDropItems",
        "body": "components.drownable:ShouldDropItems()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropInventory:": {
        "prefix": "components.drownable:DropInventory",
        "body": "components.drownable:DropInventory()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWashingAshoreTeleportSpot:": {
        "prefix": "components.drownable:GetWashingAshoreTeleportSpot",
        "body": "components.drownable:GetWashingAshoreTeleportSpot(${1:excludeclosest})",
        "description": " ※参数: \n   (excludeclosest)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnFallInOcean:": {
        "prefix": "components.drownable:OnFallInOcean",
        "body": "components.drownable:OnFallInOcean(${1:shore_x},${2:shore_y},${3:shore_z})",
        "description": " ※参数: \n   (shore_x)<>[] \n   (shore_y)<>[] \n   (shore_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOverWater:": {
        "prefix": "components.drownable:IsOverWater",
        "body": "components.drownable:IsOverWater()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldDrown:": {
        "prefix": "components.drownable:ShouldDrown",
        "body": "components.drownable:ShouldDrown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTakeDrowningDamageFn:": {
        "prefix": "components.drownable:SetOnTakeDrowningDamageFn",
        "body": "components.drownable:SetOnTakeDrowningDamageFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Teleport:": {
        "prefix": "components.teleporter:Teleport",
        "body": "components.teleporter:Teleport(${1:obj})",
        "description": " ※参数: \n   (obj)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBuildFile:": {
        "prefix": "components.dryable:SetBuildFile",
        "body": "components.dryable:SetBuildFile(${1:buildfile})",
        "description": " ※参数: \n   (buildfile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetProduct:": {
        "prefix": "components.plantregrowth:SetProduct",
        "body": "components.plantregrowth:SetProduct(${1:product})",
        "description": " ※参数: \n   (product)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDriedBuildFile:": {
        "prefix": "components.dryable:SetDriedBuildFile",
        "body": "components.dryable:SetDriedBuildFile(${1:dried_buildfile})",
        "description": " ※参数: \n   (dried_buildfile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetProduct:": {
        "prefix": "components.dryable:GetProduct",
        "body": "components.dryable:GetProduct()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDriedBuildFile:": {
        "prefix": "components.dryable:GetDriedBuildFile",
        "body": "components.dryable:GetDriedBuildFile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDryTime:": {
        "prefix": "components.dryable:SetDryTime",
        "body": "components.dryable:SetDryTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDryTime:": {
        "prefix": "components.dryable:GetDryTime",
        "body": "components.dryable:GetDryTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBuildFile:": {
        "prefix": "components.dryable:GetBuildFile",
        "body": "components.dryable:GetBuildFile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPaused:": {
        "prefix": "components.worldsettingstimer:IsPaused",
        "body": "components.worldsettingstimer:IsPaused(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDone:": {
        "prefix": "components.yotb_sewer:IsDone",
        "body": "components.yotb_sewer:IsDone()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Pause:": {
        "prefix": "components.targettracker:Pause",
        "body": "components.targettracker:Pause(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopDrying:": {
        "prefix": "components.dryer:StopDrying",
        "body": "components.dryer:StopDrying(${1:reason})",
        "description": " ※参数: \n   (reason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartDrying:": {
        "prefix": "components.dryer:StartDrying",
        "body": "components.dryer:StartDrying(${1:dryable})",
        "description": " ※参数: \n   (dryable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDry:": {
        "prefix": "components.dryer:CanDry",
        "body": "components.dryer:CanDry(${1:dryable})",
        "description": " ※参数: \n   (dryable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToSpoil:": {
        "prefix": "components.stewer:GetTimeToSpoil",
        "body": "components.stewer:GetTimeToSpoil()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStartDryingFn:": {
        "prefix": "components.dryer:SetStartDryingFn",
        "body": "components.dryer:SetStartDryingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropItem:": {
        "prefix": "components.inventory:DropItem",
        "body": "components.inventory:DropItem(${1:item},${2:wholestack},${3:randomdir},${4:pos},${5:keepoverstacked})",
        "description": " ※参数: \n   (item)<>[] \n   (wholestack)<>[] \n   (randomdir)<>[] \n   (pos)<>[] \n   (keepoverstacked)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDoneDryingFn:": {
        "prefix": "components.dryer:SetDoneDryingFn",
        "body": "components.dryer:SetDoneDryingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToDry:": {
        "prefix": "components.dryer:GetTimeToDry",
        "body": "components.dryer:GetTimeToDry()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDrying:": {
        "prefix": "components.dryer:IsDrying",
        "body": "components.dryer:IsDrying()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanLift:": {
        "prefix": "components.dumbbelllifter:CanLift",
        "body": "components.dumbbelllifter:CanLift(${1:dumbbell})",
        "description": " ※参数: \n   (dumbbell)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Lift:": {
        "prefix": "components.dumbbelllifter:Lift",
        "body": "components.dumbbelllifter:Lift()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopLifting:": {
        "prefix": "components.dumbbelllifter:StopLifting",
        "body": "components.dumbbelllifter:StopLifting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLifting:": {
        "prefix": "components.dumbbelllifter:IsLifting",
        "body": "components.dumbbelllifter:IsLifting(${1:dumbbell})",
        "description": " ※参数: \n   (dumbbell)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartLifting:": {
        "prefix": "components.dumbbelllifter:StartLifting",
        "body": "components.dumbbelllifter:StartLifting(${1:dumbbell})",
        "description": " ※参数: \n   (dumbbell)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLiftingAny:": {
        "prefix": "components.dumbbelllifter:IsLiftingAny",
        "body": "components.dumbbelllifter:IsLiftingAny()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPrefersEatingTag:设置实体优先食用指定标签的食物": {
        "prefix": "components.eater:SetPrefersEatingTag",
        "body": "components.eater:SetPrefersEatingTag(${1:tag})",
        "description": " ※参数: \n   (tag)<str>[优先食用的标签] \n ※返回: \n ※说明: 设置实体优先食用指定标签的食物\n ※贡献者: @764不是西红柿"
    },
    "组件.SetRefusesSpoiledFood:设置实体是否拒绝腐烂的食物": {
        "prefix": "components.eater:SetRefusesSpoiledFood",
        "body": "components.eater:SetRefusesSpoiledFood(${1:refuses})",
        "description": " ※参数: \n   (refuses)<bool>[是否拒绝腐烂食物] \n ※返回: \n ※说明: 设置实体是否拒绝腐烂的食物\n ※贡献者: @764不是西红柿"
    },
    "组件.SetDiet:设置食物种类和优先食用的类别": {
        "prefix": "components.eater:SetDiet",
        "body": "components.eater:SetDiet(${1:caneat},${2:preferseating})",
        "description": " ※参数: \n   (caneat)<tbl>[可以食用的食物类别] \n   (preferseating)<tbl>[优先食用的食物类别] \n ※返回: \n ※说明: 设置食物种类和优先食用的类别\n ※贡献者: @764不是西红柿"
    },
    "组件.OnRemoveFromEntity:当组件从实体中移除时调用的函数": {
        "prefix": "components.eater:OnRemoveFromEntity",
        "body": "components.eater:OnRemoveFromEntity()",
        "description": " ※参数: \n ※返回: \n ※说明: 当组件从实体中移除时调用的函数\n ※贡献者: @764不是西红柿"
    },
    "组件.DoFoodEffects:应用食物的效果到实体": {
        "prefix": "components.eater:DoFoodEffects",
        "body": "components.eater:DoFoodEffects(${1:food})",
        "description": " ※参数: \n   (food)<tbl>[食物对象] \n ※返回: \n ※说明: 应用食物的效果到实体\n ※贡献者: @764不是西红柿"
    },
    "组件.OnSave:保存实体的状态信息": {
        "prefix": "components.eater:OnSave",
        "body": "components.eater:OnSave()",
        "description": " ※参数: \n ※返回: <tbl>[保存的数据表] \n ※说明: 保存实体的状态信息\n ※贡献者: @764不是西红柿"
    },
    "组件.HasBeen:检查是否已经经过指定时间": {
        "prefix": "components.eater:HasBeen",
        "body": "components.eater:HasBeen(${1:time})",
        "description": " ※参数: \n   (time)<num>[时间间隔] \n ※返回: <bool>[是否经过指定时间] \n ※说明: 检查是否已经经过指定时间\n ※贡献者: @764不是西红柿"
    },
    "组件.CanEat:检查实体是否可以吃指定食物": {
        "prefix": "components.eater:CanEat",
        "body": "components.eater:CanEat(${1:food})",
        "description": " ※参数: \n   (food)<tbl>[食物对象] \n ※返回: <bool>[实体是否可以吃该食物] \n ※说明: 检查实体是否可以吃指定食物\n ※贡献者: @764不是西红柿"
    },
    "组件.PrefersToEat:检查实体是否优先选择吃该食物": {
        "prefix": "components.eater:PrefersToEat",
        "body": "components.eater:PrefersToEat(${1:food})",
        "description": " ※参数: \n   (food)<tbl>[食物对象] \n ※返回: <bool>[是否优先食用] \n ※说明: 检查实体是否优先选择吃该食物\n ※贡献者: @764不是西红柿"
    },
    "组件.Eat:实体吃掉指定的食物": {
        "prefix": "components.eater:Eat",
        "body": "components.eater:Eat(${1:food},${2:feeder})",
        "description": " ※参数: \n   (food)<tbl>[食物对象] \n   (feeder)<tbl>[喂食者对象] \n ※返回: \n ※说明: 实体吃掉指定的食物\n ※贡献者: @764不是西红柿"
    },
    "组件.TestFood:测试食物是否符合某些条件": {
        "prefix": "components.eater:TestFood",
        "body": "components.eater:TestFood(${1:food},${2:testvalues})",
        "description": " ※参数: \n   (food)<tbl>[食物对象] \n   (testvalues)<tbl>[测试值] \n ※返回: <bool>[测试结果] \n ※说明: 测试食物是否符合某些条件\n ※贡献者: @764不是西红柿"
    },
    "组件.GetEdibleTags:获取实体可食用的食物标签列表": {
        "prefix": "components.eater:GetEdibleTags",
        "body": "components.eater:GetEdibleTags()",
        "description": " ※参数: \n ※返回: <tbl>[返回可食用的标签列表] \n ※说明: 获取实体可食用的食物标签列表\n ※贡献者: @764不是西红柿"
    },
    "组件.SetCanEatNitre:设置实体是否可以食用硝石": {
        "prefix": "components.eater:SetCanEatNitre",
        "body": "components.eater:SetCanEatNitre(${1:can_eat})",
        "description": " ※参数: \n   (can_eat)<bool>[是否可以食用硝石] \n ※返回: \n ※说明: 设置实体是否可以食用硝石\n ※贡献者: @764不是西红柿"
    },
    "组件.SetOnEatFn:设置当实体吃掉食物时调用的函数": {
        "prefix": "components.eater:SetOnEatFn",
        "body": "components.eater:SetOnEatFn(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[吃掉食物时的回调函数] \n ※返回: \n ※说明: 设置当实体吃掉食物时调用的函数\n ※贡献者: @764不是西红柿"
    },
    "组件.SetIgnoresSpoilage:设置实体是否忽略食物的腐烂状态": {
        "prefix": "components.eater:SetIgnoresSpoilage",
        "body": "components.eater:SetIgnoresSpoilage(${1:ignores})",
        "description": " ※参数: \n   (ignores)<bool>[是否忽略食物腐烂] \n ※返回: \n ※说明: 设置实体是否忽略食物的腐烂状态\n ※贡献者: @764不是西红柿"
    },
    "组件.SetCanEatGears:设置实体可以食用齿轮": {
        "prefix": "components.eater:SetCanEatGears",
        "body": "components.eater:SetCanEatGears()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置实体可以食用齿轮\n ※贡献者: @764不是西红柿"
    },
    "组件.SetAbsorptionModifiers:设置食物对健康、饥饿和理智的吸收倍率": {
        "prefix": "components.eater:SetAbsorptionModifiers",
        "body": "components.eater:SetAbsorptionModifiers(${1:health},${2:hunger},${3:sanity})",
        "description": " ※参数: \n   (health)<num>[健康吸收倍率] \n   (hunger)<num>[饥饿吸收倍率] \n   (sanity)<num>[理智吸收倍率] \n ※返回: \n ※说明: 设置食物对健康、饥饿和理智的吸收倍率\n ※贡献者: @764不是西红柿"
    },
    "组件.SetCanEatRawMeat:设置实体是否可以食用生肉": {
        "prefix": "components.eater:SetCanEatRawMeat",
        "body": "components.eater:SetCanEatRawMeat(${1:can_eat})",
        "description": " ※参数: \n   (can_eat)<bool>[是否可以食用生肉] \n ※返回: \n ※说明: 设置实体是否可以食用生肉\n ※贡献者: @764不是西红柿"
    },
    "组件.SetCanEatRaw:设置实体可以生吃食物": {
        "prefix": "components.eater:SetCanEatRaw",
        "body": "components.eater:SetCanEatRaw()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置实体可以生吃食物\n ※贡献者: @764不是西红柿"
    },
    "组件.TimeSinceLastEating:获取自上次进食以来的时间": {
        "prefix": "components.eater:TimeSinceLastEating",
        "body": "components.eater:TimeSinceLastEating()",
        "description": " ※参数: \n ※返回: <num>[返回自上次进食以来的时间] \n ※说明: 获取自上次进食以来的时间\n ※贡献者: @764不是西红柿"
    },
    "组件.OnLoad:从保存数据中加载实体的状态信息": {
        "prefix": "components.eater:OnLoad",
        "body": "components.eater:OnLoad(${1:data})",
        "description": " ※参数: \n   (data)<tbl>[加载的保存数据] \n ※返回: \n ※说明: 从保存数据中加载实体的状态信息\n ※贡献者: @764不是西红柿"
    },
    "组件.SetStrongStomach:设置实体是否拥有强胃（更耐腐烂食物）": {
        "prefix": "components.eater:SetStrongStomach",
        "body": "components.eater:SetStrongStomach(${1:is_strong})",
        "description": " ※参数: \n   (is_strong)<bool>[是否拥有强胃] \n ※返回: \n ※说明: 设置实体是否拥有强胃（更耐腐烂食物）\n ※贡献者: @764不是西红柿"
    },
    "组件.SetCanEatHorrible:设置实体可以食用腐烂食物": {
        "prefix": "components.eater:SetCanEatHorrible",
        "body": "components.eater:SetCanEatHorrible()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置实体可以食用腐烂食物\n ※贡献者: @764不是西红柿"
    },
    "组件.SetOnEatenFn:": {
        "prefix": "components.edible:SetOnEatenFn",
        "body": "components.edible:SetOnEatenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGetHealthFn:": {
        "prefix": "components.edible:SetGetHealthFn",
        "body": "components.edible:SetGetHealthFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWoodiness:": {
        "prefix": "components.edible:GetWoodiness",
        "body": "components.edible:GetWoodiness(${1:eater})",
        "description": " ※参数: \n   (eater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSanity:": {
        "prefix": "components.edible:GetSanity",
        "body": "components.edible:GetSanity(${1:eater})",
        "description": " ※参数: \n   (eater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHealth:": {
        "prefix": "components.edible:GetHealth",
        "body": "components.edible:GetHealth(${1:eater})",
        "description": " ※参数: \n   (eater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnEaten:": {
        "prefix": "components.edible:OnEaten",
        "body": "components.edible:OnEaten(${1:eater})",
        "description": " ※参数: \n   (eater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGetSanityFn:": {
        "prefix": "components.edible:SetGetSanityFn",
        "body": "components.edible:SetGetSanityFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DiluteChill:": {
        "prefix": "components.edible:DiluteChill",
        "body": "components.edible:DiluteChill(${1:item},${2:count})",
        "description": " ※参数: \n   (item)<>[] \n   (count)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddChill:": {
        "prefix": "components.edible:AddChill",
        "body": "components.edible:AddChill(${1:delta})",
        "description": " ※参数: \n   (delta)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHunger:": {
        "prefix": "components.edible:GetHunger",
        "body": "components.edible:GetHunger(${1:eater})",
        "description": " ※参数: \n   (eater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMultiplier:": {
        "prefix": "components.workmultiplier:AddMultiplier",
        "body": "components.workmultiplier:AddMultiplier(${1:action},${2:multiplier},${3:source})",
        "description": " ※参数: \n   (action)<>[] \n   (multiplier)<>[] \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMultiplier:": {
        "prefix": "components.workmultiplier:GetMultiplier",
        "body": "components.workmultiplier:GetMultiplier(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveMultiplier:": {
        "prefix": "components.workmultiplier:RemoveMultiplier",
        "body": "components.workmultiplier:RemoveMultiplier(${1:action},${2:source})",
        "description": " ※参数: \n   (action)<>[] \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveSource:": {
        "prefix": "components.rooted:RemoveSource",
        "body": "components.rooted:RemoveSource(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSource:": {
        "prefix": "components.rooted:AddSource",
        "body": "components.rooted:AddSource(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateEmbarkingPos:": {
        "prefix": "components.embarker:UpdateEmbarkingPos",
        "body": "components.embarker:UpdateEmbarkingPos(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEmbarkable:": {
        "prefix": "components.embarker:SetEmbarkable",
        "body": "components.embarker:SetEmbarkable(${1:embarkable})",
        "description": " ※参数: \n   (embarkable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartMoving:": {
        "prefix": "components.embarker:StartMoving",
        "body": "components.embarker:StartMoving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEmbarkPosition:": {
        "prefix": "components.walkableplatform:GetEmbarkPosition",
        "body": "components.walkableplatform:GetEmbarkPosition(${1:embarker_x},${2:embarker_z},${3:embarker_min_dist})",
        "description": " ※参数: \n   (embarker_x)<>[] \n   (embarker_z)<>[] \n   (embarker_min_dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Embark:": {
        "prefix": "components.embarker:Embark",
        "body": "components.embarker:Embark()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDisembarkPos:": {
        "prefix": "components.embarker:SetDisembarkPos",
        "body": "components.embarker:SetDisembarkPos(${1:pos_x},${2:pos_z})",
        "description": " ※参数: \n   (pos_x)<>[] \n   (pos_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDisembarkActionPos:": {
        "prefix": "components.embarker:SetDisembarkActionPos",
        "body": "components.embarker:SetDisembarkActionPos(${1:pos_x},${2:pos_z})",
        "description": " ※参数: \n   (pos_x)<>[] \n   (pos_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasDestination:": {
        "prefix": "components.locomotor:HasDestination",
        "body": "components.locomotor:HasDestination()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Emit:": {
        "prefix": "components.emitter:Emit",
        "body": "components.emitter:Emit()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TrackEntity:": {
        "prefix": "components.entitytracker:TrackEntity",
        "body": "components.entitytracker:TrackEntity(${1:name},${2:inst})",
        "description": " ※参数: \n   (name)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEntity:": {
        "prefix": "components.entitytracker:GetEntity",
        "body": "components.entitytracker:GetEntity(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForgetEntity:": {
        "prefix": "components.entitytracker:ForgetEntity",
        "body": "components.entitytracker:ForgetEntity(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaultDuration:": {
        "prefix": "components.epicscare:SetDefaultDuration",
        "body": "components.epicscare:SetDefaultDuration(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Scare:": {
        "prefix": "components.epicscare:Scare",
        "body": "components.epicscare:Scare(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPreventUnequipping:": {
        "prefix": "components.equippable:SetPreventUnequipping",
        "body": "components.equippable:SetPreventUnequipping(${1:shouldprevent})",
        "description": " ※参数: \n   (shouldprevent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInsulated:": {
        "prefix": "components.inventory:IsInsulated",
        "body": "components.inventory:IsInsulated()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnEquipToModel:": {
        "prefix": "components.equippable:SetOnEquipToModel",
        "body": "components.equippable:SetOnEquipToModel(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPocket:": {
        "prefix": "components.equippable:SetOnPocket",
        "body": "components.equippable:SetOnPocket(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsRestricted_FromLoad:": {
        "prefix": "components.equippable:IsRestricted_FromLoad",
        "body": "components.equippable:IsRestricted_FromLoad(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWalkSpeedMult:": {
        "prefix": "components.equippable:GetWalkSpeedMult",
        "body": "components.equippable:GetWalkSpeedMult()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEquippedMoisture:": {
        "prefix": "components.equippable:GetEquippedMoisture",
        "body": "components.equippable:GetEquippedMoisture()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDappernessFn:": {
        "prefix": "components.equippable:SetDappernessFn",
        "body": "components.equippable:SetDappernessFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUnequip:": {
        "prefix": "components.equippable:SetOnUnequip",
        "body": "components.equippable:SetOnUnequip(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDapperness:": {
        "prefix": "components.equippable:GetDapperness",
        "body": "components.equippable:GetDapperness(${1:owner},${2:ignore_wetness})",
        "description": " ※参数: \n   (owner)<>[] \n   (ignore_wetness)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldPreventUnequipping:": {
        "prefix": "components.equippable:ShouldPreventUnequipping",
        "body": "components.equippable:ShouldPreventUnequipping()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Equip:": {
        "prefix": "components.inventory:Equip",
        "body": "components.inventory:Equip(${1:item},${2:old_to_active},${3:no_animation},${4:force_ui_anim})",
        "description": " ※参数: \n   (item)<>[] \n   (old_to_active)<>[] \n   (no_animation)<>[] \n   (force_ui_anim)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsRestricted:": {
        "prefix": "components.equippable:IsRestricted",
        "body": "components.equippable:IsRestricted(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Unequip:": {
        "prefix": "components.inventory:Unequip",
        "body": "components.inventory:Unequip(${1:equipslot},${2:slip})",
        "description": " ※参数: \n   (equipslot)<>[] \n   (slip)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ToPocket:": {
        "prefix": "components.equippable:ToPocket",
        "body": "components.equippable:ToPocket(${1:owner})",
        "description": " ※参数: \n   (owner)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnEquip:": {
        "prefix": "components.equippable:SetOnEquip",
        "body": "components.equippable:SetOnEquip(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEquipped:": {
        "prefix": "components.equippable:IsEquipped",
        "body": "components.equippable:IsEquipped()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStackSize:": {
        "prefix": "components.stackable:SetStackSize",
        "body": "components.stackable:SetStackSize(${1:sz})",
        "description": " ※参数: \n   (sz)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoErase:": {
        "prefix": "components.papereraser:DoErase",
        "body": "components.papereraser:DoErase(${1:paper},${2:doer})",
        "description": " ※参数: \n   (paper)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetErasedPrefab:": {
        "prefix": "components.erasablepaper:SetErasedPrefab",
        "body": "components.erasablepaper:SetErasedPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateXp:": {
        "prefix": "components.experiencecollector:UpdateXp",
        "body": "components.experiencecollector:UpdateXp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTask:": {
        "prefix": "components.experiencecollector:SetTask",
        "body": "components.experiencecollector:SetTask(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRowForceMultiplier:": {
        "prefix": "components.expertsailor:SetRowForceMultiplier",
        "body": "components.expertsailor:SetRowForceMultiplier(${1:force})",
        "description": " ※参数: \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLowerSailStrength:": {
        "prefix": "components.expertsailor:SetLowerSailStrength",
        "body": "components.expertsailor:SetLowerSailStrength(${1:strength})",
        "description": " ※参数: \n   (strength)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRowExtraMaxVelocity:": {
        "prefix": "components.expertsailor:GetRowExtraMaxVelocity",
        "body": "components.expertsailor:GetRowExtraMaxVelocity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLowerSailStrength:": {
        "prefix": "components.expertsailor:GetLowerSailStrength",
        "body": "components.expertsailor:GetLowerSailStrength()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRowForceMultiplier:": {
        "prefix": "components.expertsailor:GetRowForceMultiplier",
        "body": "components.expertsailor:GetRowForceMultiplier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAnchorRaisingSpeed:": {
        "prefix": "components.expertsailor:SetAnchorRaisingSpeed",
        "body": "components.expertsailor:SetAnchorRaisingSpeed(${1:speed})",
        "description": " ※参数: \n   (speed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRowExtraMaxVelocity:": {
        "prefix": "components.expertsailor:SetRowExtraMaxVelocity",
        "body": "components.expertsailor:SetRowExtraMaxVelocity(${1:vel})",
        "description": " ※参数: \n   (vel)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAnchorRaisingSpeed:": {
        "prefix": "components.expertsailor:GetAnchorRaisingSpeed",
        "body": "components.expertsailor:GetAnchorRaisingSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnExplodeFn:": {
        "prefix": "components.mine:SetOnExplodeFn",
        "body": "components.mine:SetOnExplodeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPvpAttacker:": {
        "prefix": "components.explosive:SetPvpAttacker",
        "body": "components.explosive:SetPvpAttacker(${1:attacker})",
        "description": " ※参数: \n   (attacker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnBurnt:": {
        "prefix": "components.explosive:OnBurnt",
        "body": "components.explosive:OnBurnt()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAttacker:": {
        "prefix": "components.explosive:SetAttacker",
        "body": "components.explosive:SetAttacker(${1:attacker})",
        "description": " ※参数: \n   (attacker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetResistance:": {
        "prefix": "components.grogginess:GetResistance",
        "body": "components.grogginess:GetResistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnExplosiveDamage:": {
        "prefix": "components.explosiveresist:OnExplosiveDamage",
        "body": "components.explosiveresist:OnExplosiveDamage(${1:damage},${2:src})",
        "description": " ※参数: \n   (damage)<>[] \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetResistance:": {
        "prefix": "components.sleeper:SetResistance",
        "body": "components.sleeper:SetResistance(${1:resist})",
        "description": " ※参数: \n   (resist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Fade:": {
        "prefix": "components.fader:Fade",
        "body": "components.fader:Fade(${1:startval},${2:endval},${3:time},${4:setter},${5:atend},${6:id})",
        "description": " ※参数: \n   (startval)<>[] \n   (endval)<>[] \n   (time)<>[] \n   (setter)<>[] \n   (atend)<>[] \n   (id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopAll:": {
        "prefix": "components.fader:StopAll",
        "body": "components.fader:StopAll()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanUseFn:": {
        "prefix": "components.fan:SetCanUseFn",
        "body": "components.fan:SetCanUseFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Channel:": {
        "prefix": "components.fan:Channel",
        "body": "components.fan:Channel(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOverrideSymbol:": {
        "prefix": "components.fan:SetOverrideSymbol",
        "body": "components.fan:SetOverrideSymbol(${1:symbol})",
        "description": " ※参数: \n   (symbol)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Fan:": {
        "prefix": "components.fan:Fan",
        "body": "components.fan:Fan(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUseFn:": {
        "prefix": "components.useabletargeteditem:SetOnUseFn",
        "body": "components.useabletargeteditem:SetOnUseFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnChannelingFn:": {
        "prefix": "components.fan:SetOnChannelingFn",
        "body": "components.fan:SetOnChannelingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Plant:": {
        "prefix": "components.farmplantable:Plant",
        "body": "components.farmplantable:Plant(${1:target},${2:planter})",
        "description": " ※参数: \n   (target)<>[] \n   (planter)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcFinalStressState:": {
        "prefix": "components.farmplantstress:CalcFinalStressState",
        "body": "components.farmplantstress:CalcFinalStressState()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFinalStressState:": {
        "prefix": "components.farmplantstress:GetFinalStressState",
        "body": "components.farmplantstress:GetFinalStressState()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeCheckpoint:": {
        "prefix": "components.farmplantstress:MakeCheckpoint",
        "body": "components.farmplantstress:MakeCheckpoint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddStressCategory:": {
        "prefix": "components.farmplantstress:AddStressCategory",
        "body": "components.farmplantstress:AddStressCategory(${1:name},${2:testfn},${3:onchangefn})",
        "description": " ※参数: \n   (name)<>[] \n   (testfn)<>[] \n   (onchangefn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CopyFrom:": {
        "prefix": "components.farmsoildrinker:CopyFrom",
        "body": "components.farmsoildrinker:CopyFrom(${1:rhs})",
        "description": " ※参数: \n   (rhs)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnInteractWith:": {
        "prefix": "components.farmplantstress:OnInteractWith",
        "body": "components.farmplantstress:OnInteractWith(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStressed:": {
        "prefix": "components.farmplantstress:SetStressed",
        "body": "components.farmplantstress:SetStressed(${1:name},${2:stressed},${3:doer})",
        "description": " ※参数: \n   (name)<>[] \n   (stressed)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetStressDescription:": {
        "prefix": "components.farmplantstress:GetStressDescription",
        "body": "components.farmplantstress:GetStressDescription(${1:viewer})",
        "description": " ※参数: \n   (viewer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTendable:": {
        "prefix": "components.farmplanttendable:SetTendable",
        "body": "components.farmplanttendable:SetTendable(${1:tendable})",
        "description": " ※参数: \n   (tendable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TendTo:": {
        "prefix": "components.farmplanttendable:TendTo",
        "body": "components.farmplanttendable:TendTo(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcPercentTimeHydrated:": {
        "prefix": "components.farmsoildrinker:CalcPercentTimeHydrated",
        "body": "components.farmsoildrinker:CalcPercentTimeHydrated()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMoistureTime:": {
        "prefix": "components.farmsoildrinker:UpdateMoistureTime",
        "body": "components.farmsoildrinker:UpdateMoistureTime(${1:is_soil_moist},${2:was_soil_moist})",
        "description": " ※参数: \n   (is_soil_moist)<>[] \n   (was_soil_moist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSoilMoistureStateChange:": {
        "prefix": "components.farmsoildrinker:OnSoilMoistureStateChange",
        "body": "components.farmsoildrinker:OnSoilMoistureStateChange(${1:cur_state},${2:prev_state})",
        "description": " ※参数: \n   (cur_state)<>[] \n   (prev_state)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMoistureRate:": {
        "prefix": "components.moisture:GetMoistureRate",
        "body": "components.moisture:GetMoistureRate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Till:": {
        "prefix": "components.farmtiller:Till",
        "body": "components.farmtiller:Till(${1:pt},${2:doer})",
        "description": " ※参数: \n   (pt)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Rotate:": {
        "prefix": "components.fencerotator:Rotate",
        "body": "components.fencerotator:Rotate(${1:target},${2:delta})",
        "description": " ※参数: \n   (target)<>[] \n   (delta)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnApplied:": {
        "prefix": "components.fertilizer:OnApplied",
        "body": "components.fertilizer:OnApplied(${1:doer},${2:target})",
        "description": " ※参数: \n   (doer)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHealingAmount:": {
        "prefix": "components.fertilizer:SetHealingAmount",
        "body": "components.fertilizer:SetHealingAmount(${1:health})",
        "description": " ※参数: \n   (health)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNutrients:": {
        "prefix": "components.fertilizer:SetNutrients",
        "body": "components.fertilizer:SetNutrients(${1:nutrient1},${2:nutrient2},${3:nutrient3})",
        "description": " ※参数: \n   (nutrient1)<>[] \n   (nutrient2)<>[] \n   (nutrient3)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Heal:": {
        "prefix": "components.maxhealer:Heal",
        "body": "components.maxhealer:Heal(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetResearchFn:": {
        "prefix": "components.plantresearchable:SetResearchFn",
        "body": "components.plantresearchable:SetResearchFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LearnFertilizer:": {
        "prefix": "components.plantregistryupdater:LearnFertilizer",
        "body": "components.plantregistryupdater:LearnFertilizer(${1:fertilizer})",
        "description": " ※参数: \n   (fertilizer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetResearchInfo:": {
        "prefix": "components.plantresearchable:GetResearchInfo",
        "body": "components.plantresearchable:GetResearchInfo()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Fill:": {
        "prefix": "components.fillable:Fill",
        "body": "components.fillable:Fill(${1:from_object})",
        "description": " ※参数: \n   (from_object)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxUses:": {
        "prefix": "components.finiteuses:SetMaxUses",
        "body": "components.finiteuses:SetMaxUses(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDoesNotStartFull:": {
        "prefix": "components.finiteuses:SetDoesNotStartFull",
        "body": "components.finiteuses:SetDoesNotStartFull(${1:enabled})",
        "description": " ※参数: \n   (enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetConsumption:": {
        "prefix": "components.mightydumbbell:SetConsumption",
        "body": "components.mightydumbbell:SetConsumption(${1:consumption})",
        "description": " ※参数: \n   (consumption)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetUses:": {
        "prefix": "components.finiteuses:GetUses",
        "body": "components.finiteuses:GetUses()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUses:": {
        "prefix": "components.finiteuses:SetUses",
        "body": "components.finiteuses:SetUses(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Use:": {
        "prefix": "components.watersource:Use",
        "body": "components.watersource:Use()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IgnoresCombatDurabilityLoss:": {
        "prefix": "components.finiteuses:IgnoresCombatDurabilityLoss",
        "body": "components.finiteuses:IgnoresCombatDurabilityLoss()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnUsedAsItem:": {
        "prefix": "components.finiteuses:OnUsedAsItem",
        "body": "components.finiteuses:OnUsedAsItem(${1:action},${2:doer},${3:target})",
        "description": " ※参数: \n   (action)<>[] \n   (doer)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIgnoreCombatDurabilityLoss:": {
        "prefix": "components.finiteuses:SetIgnoreCombatDurabilityLoss",
        "body": "components.finiteuses:SetIgnoreCombatDurabilityLoss(${1:value})",
        "description": " ※参数: \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnBeginEmergencyFn:": {
        "prefix": "components.firedetector:SetOnBeginEmergencyFn",
        "body": "components.firedetector:SetOnBeginEmergencyFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxEmergencyLevel:": {
        "prefix": "components.firedetector:GetMaxEmergencyLevel",
        "body": "components.firedetector:GetMaxEmergencyLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RaiseEmergencyLevel:": {
        "prefix": "components.firedetector:RaiseEmergencyLevel",
        "body": "components.firedetector:RaiseEmergencyLevel(${1:numlevels})",
        "description": " ※参数: \n   (numlevels)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnFindFireFn:": {
        "prefix": "components.firedetector:SetOnFindFireFn",
        "body": "components.firedetector:SetOnFindFireFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Activate:": {
        "prefix": "components.worldmigrator:Activate",
        "body": "components.worldmigrator:Activate(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnEndWarningFn:": {
        "prefix": "components.firedetector:SetOnEndWarningFn",
        "body": "components.firedetector:SetOnEndWarningFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnBeginWarningFn:": {
        "prefix": "components.firedetector:SetOnBeginWarningFn",
        "body": "components.firedetector:SetOnBeginWarningFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActivateEmergencyMode:": {
        "prefix": "components.firedetector:ActivateEmergencyMode",
        "body": "components.firedetector:ActivateEmergencyMode(${1:randomizedStartTime})",
        "description": " ※参数: \n   (randomizedStartTime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUpdateWarningFn:": {
        "prefix": "components.firedetector:SetOnUpdateWarningFn",
        "body": "components.firedetector:SetOnUpdateWarningFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnEndEmergencyFn:": {
        "prefix": "components.firedetector:SetOnEndEmergencyFn",
        "body": "components.firedetector:SetOnEndEmergencyFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Deactivate:": {
        "prefix": "components.playercontroller:Deactivate",
        "body": "components.playercontroller:Deactivate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DetectFire:": {
        "prefix": "components.firedetector:DetectFire",
        "body": "components.firedetector:DetectFire()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LowerEmergencyLevel:": {
        "prefix": "components.firedetector:LowerEmergencyLevel",
        "body": "components.firedetector:LowerEmergencyLevel(${1:numlevels})",
        "description": " ※参数: \n   (numlevels)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetEmergencyCooldown:": {
        "prefix": "components.firedetector:ResetEmergencyCooldown",
        "body": "components.firedetector:ResetEmergencyCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEmergencyLevel:": {
        "prefix": "components.firedetector:GetEmergencyLevel",
        "body": "components.firedetector:GetEmergencyLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEmergency:": {
        "prefix": "components.firedetector:IsEmergency",
        "body": "components.firedetector:IsEmergency()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateRadius:": {
        "prefix": "components.firefx:UpdateRadius",
        "body": "components.firefx:UpdateRadius()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPercentInLevel:": {
        "prefix": "components.firefx:SetPercentInLevel",
        "body": "components.firefx:SetPercentInLevel(${1:percent})",
        "description": " ※参数: \n   (percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLevelRadius:": {
        "prefix": "components.firefx:GetLevelRadius",
        "body": "components.firefx:GetLevelRadius(${1:level})",
        "description": " ※参数: \n   (level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AttachLightTo:": {
        "prefix": "components.firefx:AttachLightTo",
        "body": "components.firefx:AttachLightTo(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshFish:": {
        "prefix": "components.fishable:RefreshFish",
        "body": "components.fishable:RefreshFish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HookFish:": {
        "prefix": "components.fishable:HookFish",
        "body": "components.fishable:HookFish(${1:fisherman})",
        "description": " ※参数: \n   (fisherman)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFishPercent:": {
        "prefix": "components.fishable:GetFishPercent",
        "body": "components.fishable:GetFishPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Unfreeze:": {
        "prefix": "components.freezable:Unfreeze",
        "body": "components.freezable:Unfreeze()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Freeze:": {
        "prefix": "components.freezable:Freeze",
        "body": "components.freezable:Freeze(${1:freezetime})",
        "description": " ※参数: \n   (freezetime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveFish:": {
        "prefix": "components.fishable:RemoveFish",
        "body": "components.fishable:RemoveFish(${1:fish})",
        "description": " ※参数: \n   (fish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRespawnTime:": {
        "prefix": "components.fishable:SetRespawnTime",
        "body": "components.fishable:SetRespawnTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFrozenOver:": {
        "prefix": "components.fishable:IsFrozenOver",
        "body": "components.fishable:IsFrozenOver()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGetFishFn:": {
        "prefix": "components.fishable:SetGetFishFn",
        "body": "components.fishable:SetGetFishFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReleaseFish:": {
        "prefix": "components.fishable:ReleaseFish",
        "body": "components.fishable:ReleaseFish(${1:fish})",
        "description": " ※参数: \n   (fish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddFish:": {
        "prefix": "components.fishable:AddFish",
        "body": "components.fishable:AddFish(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CastNet:": {
        "prefix": "components.fishingnet:CastNet",
        "body": "components.fishingnet:CastNet(${1:pos_x},${2:pos_z},${3:doer})",
        "description": " ※参数: \n   (pos_x)<>[] \n   (pos_z)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BeginOpening:": {
        "prefix": "components.fishingnetvisualizer:BeginOpening",
        "body": "components.fishingnetvisualizer:BeginOpening()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateY:": {
        "prefix": "components.fishingnetvisualizer:CalculateY",
        "body": "components.fishingnetvisualizer:CalculateY(${1:x},${2:x_span},${3:scale})",
        "description": " ※参数: \n   (x)<>[] \n   (x_span)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BeginCast:": {
        "prefix": "components.fishingnetvisualizer:BeginCast",
        "body": "components.fishingnetvisualizer:BeginCast(${1:thrower},${2:target_x},${3:target_z})",
        "description": " ※参数: \n   (thrower)<>[] \n   (target_x)<>[] \n   (target_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BeginFinalPickup:": {
        "prefix": "components.fishingnetvisualizer:BeginFinalPickup",
        "body": "components.fishingnetvisualizer:BeginFinalPickup()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateWhenOpening:": {
        "prefix": "components.fishingnetvisualizer:UpdateWhenOpening",
        "body": "components.fishingnetvisualizer:UpdateWhenOpening(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateWhenMovingToTarget:": {
        "prefix": "components.fishingnetvisualizer:UpdateWhenMovingToTarget",
        "body": "components.fishingnetvisualizer:UpdateWhenMovingToTarget(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateWhenRetrieving:": {
        "prefix": "components.fishingnetvisualizer:UpdateWhenRetrieving",
        "body": "components.fishingnetvisualizer:UpdateWhenRetrieving(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BeginRetrieving:": {
        "prefix": "components.fishingnetvisualizer:BeginRetrieving",
        "body": "components.fishingnetvisualizer:BeginRetrieving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWaitTimes:": {
        "prefix": "components.fishingrod:SetWaitTimes",
        "body": "components.fishingrod:SetWaitTimes(${1:min},${2:max})",
        "description": " ※参数: \n   (min)<>[] \n   (max)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Collect:": {
        "prefix": "components.fishingrod:Collect",
        "body": "components.fishingrod:Collect()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStrainTimes:": {
        "prefix": "components.fishingrod:SetStrainTimes",
        "body": "components.fishingrod:SetStrainTimes(${1:min},${2:max})",
        "description": " ※参数: \n   (min)<>[] \n   (max)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopFishing:": {
        "prefix": "components.oceanfishingrod:StopFishing",
        "body": "components.oceanfishingrod:StopFishing(${1:reason},${2:lost_tackle})",
        "description": " ※参数: \n   (reason)<>[] \n   (lost_tackle)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasHookedFish:": {
        "prefix": "components.fishingrod:HasHookedFish",
        "body": "components.fishingrod:HasHookedFish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelFishTask:": {
        "prefix": "components.fishingrod:CancelFishTask",
        "body": "components.fishingrod:CancelFishTask()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasCaughtFish:": {
        "prefix": "components.fishingrod:HasCaughtFish",
        "body": "components.fishingrod:HasCaughtFish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Reel:": {
        "prefix": "components.oceanfishingrod:Reel",
        "body": "components.oceanfishingrod:Reel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Release:": {
        "prefix": "components.fishingrod:Release",
        "body": "components.fishingrod:Release()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFishing:": {
        "prefix": "components.fishingrod:IsFishing",
        "body": "components.fishingrod:IsFishing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Hook:": {
        "prefix": "components.fishingrod:Hook",
        "body": "components.fishingrod:Hook()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WaitForFish:": {
        "prefix": "components.fishingrod:WaitForFish",
        "body": "components.fishingrod:WaitForFish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FishIsBiting:": {
        "prefix": "components.fishingrod:FishIsBiting",
        "body": "components.fishingrod:FishIsBiting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartFishing:": {
        "prefix": "components.fishingrod:StartFishing",
        "body": "components.fishingrod:StartFishing(${1:target},${2:fisherman})",
        "description": " ※参数: \n   (target)<>[] \n   (fisherman)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Replenish:": {
        "prefix": "components.fishschool:Replenish",
        "body": "components.fishschool:Replenish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNettedPrefab:": {
        "prefix": "components.fishschool:SetNettedPrefab",
        "body": "components.fishschool:SetNettedPrefab(${1:fishing_net_prefab})",
        "description": " ※参数: \n   (fishing_net_prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartReplenish:": {
        "prefix": "components.fishschool:StartReplenish",
        "body": "components.fishschool:StartReplenish(${1:replenish_rate})",
        "description": " ※参数: \n   (replenish_rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPreNet:": {
        "prefix": "components.fishschool:OnPreNet",
        "body": "components.fishschool:OnPreNet(${1:net})",
        "description": " ※参数: \n   (net)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopReplenish:": {
        "prefix": "components.fishschool:StopReplenish",
        "body": "components.fishschool:StopReplenish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnNoLongerLandedClient:": {
        "prefix": "components.floater:OnNoLongerLandedClient",
        "body": "components.floater:OnNoLongerLandedClient()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetVerticalOffset:": {
        "prefix": "components.floater:SetVerticalOffset",
        "body": "components.floater:SetVerticalOffset(${1:offset})",
        "description": " ※参数: \n   (offset)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSwapData:": {
        "prefix": "components.floater:SetSwapData",
        "body": "components.floater:SetSwapData(${1:swap_data})",
        "description": " ※参数: \n   (swap_data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnNoLongerLandedServer:": {
        "prefix": "components.floater:OnNoLongerLandedServer",
        "body": "components.floater:OnNoLongerLandedServer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFloating:": {
        "prefix": "components.floater:IsFloating",
        "body": "components.floater:IsFloating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldShowEffect:": {
        "prefix": "components.floater:ShouldShowEffect",
        "body": "components.floater:ShouldShowEffect()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSize:": {
        "prefix": "components.groundshadowhandler:SetSize",
        "body": "components.groundshadowhandler:SetSize(${1:width},${2:height})",
        "description": " ※参数: \n   (width)<>[] \n   (height)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBankSwapOnFloat:": {
        "prefix": "components.floater:SetBankSwapOnFloat",
        "body": "components.floater:SetBankSwapOnFloat(${1:should_bank_swap},${2:float_index},${3:swap_data})",
        "description": " ※参数: \n   (should_bank_swap)<>[] \n   (float_index)<>[] \n   (swap_data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsObstacle:": {
        "prefix": "components.floater:SetIsObstacle",
        "body": "components.floater:SetIsObstacle(${1:bool})",
        "description": " ※参数: \n   (bool)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Erode:": {
        "prefix": "components.floater:Erode",
        "body": "components.floater:Erode(${1:erode_time})",
        "description": " ※参数: \n   (erode_time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AttachEffect:": {
        "prefix": "components.floater:AttachEffect",
        "body": "components.floater:AttachEffect(${1:effect})",
        "description": " ※参数: \n   (effect)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetScale:": {
        "prefix": "components.scaler:SetScale",
        "body": "components.scaler:SetScale(${1:scale})",
        "description": " ※参数: \n   (scale)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SwitchToDefaultAnim:": {
        "prefix": "components.floater:SwitchToDefaultAnim",
        "body": "components.floater:SwitchToDefaultAnim(${1:force_switch})",
        "description": " ※参数: \n   (force_switch)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLandedServer:": {
        "prefix": "components.floater:OnLandedServer",
        "body": "components.floater:OnLandedServer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SwitchToFloatAnim:": {
        "prefix": "components.floater:SwitchToFloatAnim",
        "body": "components.floater:SwitchToFloatAnim()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLandedClient:": {
        "prefix": "components.floater:OnLandedClient",
        "body": "components.floater:OnLandedClient()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPreventDrowningDamage:": {
        "prefix": "components.flotationdevice:OnPreventDrowningDamage",
        "body": "components.flotationdevice:OnPreventDrowningDamage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopFocusSource:": {
        "prefix": "components.focalpoint:StopFocusSource",
        "body": "components.focalpoint:StopFocusSource(${1:source},${2:id})",
        "description": " ※参数: \n   (source)<>[] \n   (id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAllFocusSources:": {
        "prefix": "components.focalpoint:RemoveAllFocusSources",
        "body": "components.focalpoint:RemoveAllFocusSources(${1:no_snap})",
        "description": " ※参数: \n   (no_snap)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CameraUpdate:": {
        "prefix": "components.focalpoint:CameraUpdate",
        "body": "components.focalpoint:CameraUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartFocusSource:": {
        "prefix": "components.focalpoint:StartFocusSource",
        "body": "components.focalpoint:StartFocusSource(${1:source},${2:id},${3:target},${4:minrange},${5:maxrange},${6:priority},${7:updater})",
        "description": " ※参数: \n   (source)<>[] \n   (id)<>[] \n   (target)<>[] \n   (minrange)<>[] \n   (maxrange)<>[] \n   (priority)<>[] \n   (updater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushTempFocus:": {
        "prefix": "components.focalpoint:PushTempFocus",
        "body": "components.focalpoint:PushTempFocus(${1:target},${2:minrange},${3:maxrange},${4:priority})",
        "description": " ※参数: \n   (target)<>[] \n   (minrange)<>[] \n   (maxrange)<>[] \n   (priority)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLeader:": {
        "prefix": "components.follower:GetLeader",
        "body": "components.follower:GetLeader()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.KeepLeaderOnAttacked:": {
        "prefix": "components.follower:KeepLeaderOnAttacked",
        "body": "components.follower:KeepLeaderOnAttacked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopLeashing:": {
        "prefix": "components.follower:StopLeashing",
        "body": "components.follower:StopLeashing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopFollowing:": {
        "prefix": "components.follower:StopFollowing",
        "body": "components.follower:StopFollowing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CachePlayerLeader:": {
        "prefix": "components.follower:CachePlayerLeader",
        "body": "components.follower:CachePlayerLeader(${1:userid},${2:timeleft})",
        "description": " ※参数: \n   (userid)<>[] \n   (timeleft)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelLoyaltyTask:": {
        "prefix": "components.follower:CancelLoyaltyTask",
        "body": "components.follower:CancelLoyaltyTask()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLeader:": {
        "prefix": "components.follower:SetLeader",
        "body": "components.follower:SetLeader(${1:new_leader})",
        "description": " ※参数: \n   (new_leader)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddLoyaltyTime:": {
        "prefix": "components.follower:AddLoyaltyTime",
        "body": "components.follower:AddLoyaltyTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearCachedPlayerLeader:": {
        "prefix": "components.follower:ClearCachedPlayerLeader",
        "body": "components.follower:ClearCachedPlayerLeader()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLoyaltyPercent:": {
        "prefix": "components.follower:GetLoyaltyPercent",
        "body": "components.follower:GetLoyaltyPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LoseLeaderOnAttacked:": {
        "prefix": "components.follower:LoseLeaderOnAttacked",
        "body": "components.follower:LoseLeaderOnAttacked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLeaderSame:": {
        "prefix": "components.follower:IsLeaderSame",
        "body": "components.follower:IsLeaderSame(${1:otherfollower})",
        "description": " ※参数: \n   (otherfollower)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartLeashing:": {
        "prefix": "components.follower:StartLeashing",
        "body": "components.follower:StartLeashing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsNearLeader:": {
        "prefix": "components.follower:IsNearLeader",
        "body": "components.follower:IsNearLeader(${1:dist})",
        "description": " ※参数: \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnHerdFn:": {
        "prefix": "components.followerherder:SetOnHerdFn",
        "body": "components.followerherder:SetOnHerdFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanHerdFn:": {
        "prefix": "components.followerherder:SetCanHerdFn",
        "body": "components.followerherder:SetCanHerdFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanHerd:": {
        "prefix": "components.followerherder:CanHerd",
        "body": "components.followerherder:CanHerd(${1:leader})",
        "description": " ※参数: \n   (leader)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Herd:": {
        "prefix": "components.followerherder:Herd",
        "body": "components.followerherder:Herd(${1:leader})",
        "description": " ※参数: \n   (leader)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFoodBasePrefab:": {
        "prefix": "components.foodaffinity:GetFoodBasePrefab",
        "body": "components.foodaffinity:GetFoodBasePrefab(${1:food})",
        "description": " ※参数: \n   (food)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SortAffinitiesByBonus:": {
        "prefix": "components.foodaffinity:SortAffinitiesByBonus",
        "body": "components.foodaffinity:SortAffinitiesByBonus(${1:affinities})",
        "description": " ※参数: \n   (affinities)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveFoodtypeAffinity:": {
        "prefix": "components.foodaffinity:RemoveFoodtypeAffinity",
        "body": "components.foodaffinity:RemoveFoodtypeAffinity(${1:foodtype})",
        "description": " ※参数: \n   (foodtype)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveTagAffinity:": {
        "prefix": "components.foodaffinity:RemoveTagAffinity",
        "body": "components.foodaffinity:RemoveTagAffinity(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAffinity:": {
        "prefix": "components.foodaffinity:GetAffinity",
        "body": "components.foodaffinity:GetAffinity(${1:food})",
        "description": " ※参数: \n   (food)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasPrefabAffinity:": {
        "prefix": "components.foodaffinity:HasPrefabAffinity",
        "body": "components.foodaffinity:HasPrefabAffinity(${1:food})",
        "description": " ※参数: \n   (food)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddTagAffinity:": {
        "prefix": "components.foodaffinity:AddTagAffinity",
        "body": "components.foodaffinity:AddTagAffinity(${1:tag},${2:bonus})",
        "description": " ※参数: \n   (tag)<>[] \n   (bonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemovePrefabAffinity:": {
        "prefix": "components.foodaffinity:RemovePrefabAffinity",
        "body": "components.foodaffinity:RemovePrefabAffinity(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddPrefabAffinity:": {
        "prefix": "components.foodaffinity:AddPrefabAffinity",
        "body": "components.foodaffinity:AddPrefabAffinity(${1:prefab},${2:bonus})",
        "description": " ※参数: \n   (prefab)<>[] \n   (bonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddFoodtypeAffinity:": {
        "prefix": "components.foodaffinity:AddFoodtypeAffinity",
        "body": "components.foodaffinity:AddFoodtypeAffinity(${1:foodtype},${2:bonus})",
        "description": " ※参数: \n   (foodtype)<>[] \n   (bonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasAffinity:": {
        "prefix": "components.foodaffinity:HasAffinity",
        "body": "components.foodaffinity:HasAffinity(${1:food})",
        "description": " ※参数: \n   (food)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMemoryCount:": {
        "prefix": "components.foodmemory:GetMemoryCount",
        "body": "components.foodmemory:GetMemoryCount(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFoodMultiplier:": {
        "prefix": "components.foodmemory:GetFoodMultiplier",
        "body": "components.foodmemory:GetFoodMultiplier(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDuration:": {
        "prefix": "components.foodmemory:SetDuration",
        "body": "components.foodmemory:SetDuration(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RememberFood:": {
        "prefix": "components.foodmemory:RememberFood",
        "body": "components.foodmemory:RememberFood(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanSpawnFromJunk:": {
        "prefix": "components.forestdaywalkerspawner:CanSpawnFromJunk",
        "body": "components.forestdaywalkerspawner:CanSpawnFromJunk()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldShakeJunk:": {
        "prefix": "components.forestdaywalkerspawner:ShouldShakeJunk",
        "body": "components.forestdaywalkerspawner:ShouldShakeJunk()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasDaywalker:": {
        "prefix": "components.forestdaywalkerspawner:HasDaywalker",
        "body": "components.forestdaywalkerspawner:HasDaywalker()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToSetDayWalkerJunkPile:": {
        "prefix": "components.forestdaywalkerspawner:TryToSetDayWalkerJunkPile",
        "body": "components.forestdaywalkerspawner:TryToSetDayWalkerJunkPile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRepair:": {
        "prefix": "components.forgerepair:OnRepair",
        "body": "components.forgerepair:OnRepair(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRepairMaterial:": {
        "prefix": "components.forgerepairable:SetRepairMaterial",
        "body": "components.forgerepairable:SetRepairMaterial(${1:material})",
        "description": " ※参数: \n   (material)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnRepaired:": {
        "prefix": "components.forgerepairable:SetOnRepaired",
        "body": "components.forgerepairable:SetOnRepaired(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRepairable:": {
        "prefix": "components.forgerepairable:SetRepairable",
        "body": "components.forgerepairable:SetRepairable(${1:repairable})",
        "description": " ※参数: \n   (repairable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LeaveFormation:": {
        "prefix": "components.teamattacker:LeaveFormation",
        "body": "components.teamattacker:LeaveFormation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SearchForFormation:": {
        "prefix": "components.formationfollower:SearchForFormation",
        "body": "components.formationfollower:SearchForFormation(${1:override_find_entities})",
        "description": " ※参数: \n   (override_find_entities)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ValidateFormation:": {
        "prefix": "components.formationleader:ValidateFormation",
        "body": "components.formationleader:ValidateFormation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ValidMember:": {
        "prefix": "components.teamleader:ValidMember",
        "body": "components.teamleader:ValidMember(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFormationFull:": {
        "prefix": "components.formationleader:IsFormationFull",
        "body": "components.formationleader:IsFormationFull()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTheta:": {
        "prefix": "components.teamleader:GetTheta",
        "body": "components.teamleader:GetTheta(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFormationEmpty:": {
        "prefix": "components.formationleader:IsFormationEmpty",
        "body": "components.formationleader:IsFormationEmpty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFormationSize:": {
        "prefix": "components.formationleader:GetFormationSize",
        "body": "components.formationleader:GetFormationSize()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUp:": {
        "prefix": "components.teamleader:SetUp",
        "body": "components.teamleader:SetUp(${1:target},${2:first_member})",
        "description": " ※参数: \n   (target)<>[] \n   (first_member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFormationPositions:": {
        "prefix": "components.teamleader:GetFormationPositions",
        "body": "components.teamleader:GetFormationPositions()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLostFormationMember:": {
        "prefix": "components.formationleader:OnLostFormationMember",
        "body": "components.formationleader:OnLostFormationMember(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FormationSizeControl:": {
        "prefix": "components.formationleader:FormationSizeControl",
        "body": "components.formationleader:FormationSizeControl()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DisbandFormation:": {
        "prefix": "components.formationleader:DisbandFormation",
        "body": "components.formationleader:DisbandFormation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NewFormationMember:": {
        "prefix": "components.formationleader:NewFormationMember",
        "body": "components.formationleader:NewFormationMember(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OrganizeFormations:": {
        "prefix": "components.formationleader:OrganizeFormations",
        "body": "components.formationleader:OrganizeFormations()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartWearingOff:": {
        "prefix": "components.pinnable:StartWearingOff",
        "body": "components.pinnable:StartWearingOff(${1:wearofftime})",
        "description": " ※参数: \n   (wearofftime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsThawing:": {
        "prefix": "components.freezable:IsThawing",
        "body": "components.freezable:IsThawing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFrozen:": {
        "prefix": "components.freezable:IsFrozen",
        "body": "components.freezable:IsFrozen()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddColdness:": {
        "prefix": "components.freezable:AddColdness",
        "body": "components.freezable:AddColdness(${1:coldness},${2:freezetime},${3:nofreeze})",
        "description": " ※参数: \n   (coldness)<>[] \n   (freezetime)<>[] \n   (nofreeze)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaultWearOffTime:": {
        "prefix": "components.pinnable:SetDefaultWearOffTime",
        "body": "components.pinnable:SetDefaultWearOffTime(${1:wearofftime})",
        "description": " ※参数: \n   (wearofftime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShatterFXLevel:": {
        "prefix": "components.freezable:SetShatterFXLevel",
        "body": "components.freezable:SetShatterFXLevel(${1:level},${2:percent})",
        "description": " ※参数: \n   (level)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Thaw:": {
        "prefix": "components.freezable:Thaw",
        "body": "components.freezable:Thaw(${1:thawtime})",
        "description": " ※参数: \n   (thawtime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResolveResistance:": {
        "prefix": "components.freezable:ResolveResistance",
        "body": "components.freezable:ResolveResistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetExtraResist:": {
        "prefix": "components.sleeper:SetExtraResist",
        "body": "components.sleeper:SetExtraResist(${1:resist})",
        "description": " ※参数: \n   (resist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateTint:": {
        "prefix": "components.freezable:UpdateTint",
        "body": "components.freezable:UpdateTint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResolveWearOffTime:": {
        "prefix": "components.freezable:ResolveWearOffTime",
        "body": "components.freezable:ResolveWearOffTime(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToWearOff:": {
        "prefix": "components.freezable:GetTimeToWearOff",
        "body": "components.freezable:GetTimeToWearOff()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRedirectFn:": {
        "prefix": "components.freezable:SetRedirectFn",
        "body": "components.freezable:SetRedirectFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnShatterFX:": {
        "prefix": "components.pinnable:SpawnShatterFX",
        "body": "components.pinnable:SpawnShatterFX(${1:ratio})",
        "description": " ※参数: \n   (ratio)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddShatterFX:": {
        "prefix": "components.freezable:AddShatterFX",
        "body": "components.freezable:AddShatterFX(${1:prefab},${2:offset},${3:followsymbol})",
        "description": " ※参数: \n   (prefab)<>[] \n   (offset)<>[] \n   (followsymbol)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFriendlyTasks:": {
        "prefix": "components.friendlevels:SetFriendlyTasks",
        "body": "components.friendlevels:SetFriendlyTasks(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxLevel:": {
        "prefix": "components.friendlevels:GetMaxLevel",
        "body": "components.friendlevels:GetMaxLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLevelRewards:": {
        "prefix": "components.friendlevels:SetLevelRewards",
        "body": "components.friendlevels:SetLevelRewards(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoRewards:": {
        "prefix": "components.friendlevels:DoRewards",
        "body": "components.friendlevels:DoRewards(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CompleteTask:": {
        "prefix": "components.friendlevels:CompleteTask",
        "body": "components.friendlevels:CompleteTask(${1:task},${2:doer})",
        "description": " ※参数: \n   (task)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaultRewards:": {
        "prefix": "components.friendlevels:SetDefaultRewards",
        "body": "components.friendlevels:SetDefaultRewards(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopBreath:": {
        "prefix": "components.frostybreather:StopBreath",
        "body": "components.frostybreather:StopBreath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOffsetFn:": {
        "prefix": "components.talker:SetOffsetFn",
        "body": "components.talker:SetOffsetFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartBreath:": {
        "prefix": "components.frostybreather:StartBreath",
        "body": "components.frostybreather:StartBreath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceBreathOn:": {
        "prefix": "components.frostybreather:ForceBreathOn",
        "body": "components.frostybreather:ForceBreathOn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOffset:": {
        "prefix": "components.frostybreather:SetOffset",
        "body": "components.frostybreather:SetOffset(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOffset:": {
        "prefix": "components.frostybreather:GetOffset",
        "body": "components.frostybreather:GetOffset()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnTemperatureChanged:": {
        "prefix": "components.frostybreather:OnTemperatureChanged",
        "body": "components.frostybreather:OnTemperatureChanged(${1:temperature})",
        "description": " ※参数: \n   (temperature)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EmitOnce:": {
        "prefix": "components.frostybreather:EmitOnce",
        "body": "components.frostybreather:EmitOnce()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceBreathOff:": {
        "prefix": "components.frostybreather:ForceBreathOff",
        "body": "components.frostybreather:ForceBreathOff()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Taken:": {
        "prefix": "components.fueler:Taken",
        "body": "components.fueler:Taken(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTakenFn:": {
        "prefix": "components.fueler:SetOnTakenFn",
        "body": "components.fueler:SetOnTakenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUpdateFn:": {
        "prefix": "components.fueled:SetUpdateFn",
        "body": "components.fueled:SetUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeSection:": {
        "prefix": "components.fueled:ChangeSection",
        "body": "components.fueled:ChangeSection(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddThreshold:": {
        "prefix": "components.fueled:AddThreshold",
        "body": "components.fueled:AddThreshold(${1:percent},${2:fn})",
        "description": " ※参数: \n   (percent)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMultiplierFn:": {
        "prefix": "components.fueled:SetMultiplierFn",
        "body": "components.fueled:SetMultiplierFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDepletedFn:": {
        "prefix": "components.fueled:SetDepletedFn",
        "body": "components.fueled:SetDepletedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSections:": {
        "prefix": "components.fueled:SetSections",
        "body": "components.fueled:SetSections(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEmpty:": {
        "prefix": "components.grower:IsEmpty",
        "body": "components.grower:IsEmpty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartConsuming:": {
        "prefix": "components.fueled:StartConsuming",
        "body": "components.fueled:StartConsuming()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InitializeFuelLevel:": {
        "prefix": "components.fueled:InitializeFuelLevel",
        "body": "components.fueled:InitializeFuelLevel(${1:fuel})",
        "description": " ※参数: \n   (fuel)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanTakeFuelItemFn:": {
        "prefix": "components.fueled:SetCanTakeFuelItemFn",
        "body": "components.fueled:SetCanTakeFuelItemFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTakeFuelItemFn:": {
        "prefix": "components.fueled:SetTakeFuelItemFn",
        "body": "components.fueled:SetTakeFuelItemFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSectionPercent:": {
        "prefix": "components.fueled:GetSectionPercent",
        "body": "components.fueled:GetSectionPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeFuelItem:": {
        "prefix": "components.fueled:TakeFuelItem",
        "body": "components.fueled:TakeFuelItem(${1:item},${2:doer})",
        "description": " ※参数: \n   (item)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFirstPeriod:": {
        "prefix": "components.fueled:SetFirstPeriod",
        "body": "components.fueled:SetFirstPeriod(${1:firstperiod},${2:firstperiodfull})",
        "description": " ※参数: \n   (firstperiod)<>[] \n   (firstperiodfull)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTakeFuelFn:": {
        "prefix": "components.fueled:SetTakeFuelFn",
        "body": "components.fueled:SetTakeFuelFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentSection:": {
        "prefix": "components.fueled:GetCurrentSection",
        "body": "components.fueled:GetCurrentSection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeEmpty:": {
        "prefix": "components.pickable:MakeEmpty",
        "body": "components.pickable:MakeEmpty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSectionCallback:": {
        "prefix": "components.fueled:SetSectionCallback",
        "body": "components.fueled:SetSectionCallback(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAcceptFuelItem:": {
        "prefix": "components.fueled:CanAcceptFuelItem",
        "body": "components.fueled:CanAcceptFuelItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopConsuming:": {
        "prefix": "components.fueled:StopConsuming",
        "body": "components.fueled:StopConsuming()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBonusMult:": {
        "prefix": "components.fuelmaster:SetBonusMult",
        "body": "components.fuelmaster:SetBonusMult(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBonusMult:": {
        "prefix": "components.fuelmaster:GetBonusMult",
        "body": "components.fuelmaster:GetBonusMult(${1:item},${2:target})",
        "description": " ※参数: \n   (item)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBonusFn:": {
        "prefix": "components.fuelmaster:SetBonusFn",
        "body": "components.fuelmaster:SetBonusFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PutOnFurniture:": {
        "prefix": "components.furnituredecor:PutOnFurniture",
        "body": "components.furnituredecor:PutOnFurniture(${1:furniture})",
        "description": " ※参数: \n   (furniture)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AcceptDecor:": {
        "prefix": "components.furnituredecortaker:AcceptDecor",
        "body": "components.furnituredecortaker:AcceptDecor(${1:item},${2:giver})",
        "description": " ※参数: \n   (item)<>[] \n   (giver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AbleToAcceptDecor:": {
        "prefix": "components.furnituredecortaker:AbleToAcceptDecor",
        "body": "components.furnituredecortaker:AbleToAcceptDecor(${1:item},${2:giver})",
        "description": " ※参数: \n   (item)<>[] \n   (giver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeItem:": {
        "prefix": "components.trophyscale:TakeItem",
        "body": "components.trophyscale:TakeItem(${1:receiver})",
        "description": " ※参数: \n   (receiver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecallComplete:": {
        "prefix": "components.ghostlybond:RecallComplete",
        "body": "components.ghostlybond:RecallComplete()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Init:": {
        "prefix": "components.ghostlybond:Init",
        "body": "components.ghostlybond:Init(${1:ghost_prefab},${2:bond_levelup_time})",
        "description": " ※参数: \n   (ghost_prefab)<>[] \n   (bond_levelup_time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Recall:": {
        "prefix": "components.ghostlybond:Recall",
        "body": "components.ghostlybond:Recall(${1:was_killed})",
        "description": " ※参数: \n   (was_killed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBondLevel:": {
        "prefix": "components.ghostlybond:SetBondLevel",
        "body": "components.ghostlybond:SetBondLevel(${1:level},${2:time},${3:isloading})",
        "description": " ※参数: \n   (level)<>[] \n   (time)<>[] \n   (isloading)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBondTimeMultiplier:": {
        "prefix": "components.ghostlybond:SetBondTimeMultiplier",
        "body": "components.ghostlybond:SetBondTimeMultiplier(${1:src},${2:mult},${3:key})",
        "description": " ※参数: \n   (src)<>[] \n   (mult)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PauseBonding:": {
        "prefix": "components.ghostlybond:PauseBonding",
        "body": "components.ghostlybond:PauseBonding()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResumeBonding:": {
        "prefix": "components.ghostlybond:ResumeBonding",
        "body": "components.ghostlybond:ResumeBonding()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Summon:": {
        "prefix": "components.ghostlybond:Summon",
        "body": "components.ghostlybond:Summon(${1:summoningitem})",
        "description": " ※参数: \n   (summoningitem)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnGhost:": {
        "prefix": "components.ghostlybond:SpawnGhost",
        "body": "components.ghostlybond:SpawnGhost()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeBehaviour:": {
        "prefix": "components.ghostlybond:ChangeBehaviour",
        "body": "components.ghostlybond:ChangeBehaviour()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SummonComplete:": {
        "prefix": "components.ghostlybond:SummonComplete",
        "body": "components.ghostlybond:SummonComplete()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Apply:": {
        "prefix": "components.ghostlyelixir:Apply",
        "body": "components.ghostlyelixir:Apply(${1:doer},${2:target})",
        "description": " ※参数: \n   (doer)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetApplyToTarget:": {
        "prefix": "components.ghostlyelixirable:GetApplyToTarget",
        "body": "components.ghostlyelixirable:GetApplyToTarget(${1:doer},${2:elixir})",
        "description": " ※参数: \n   (doer)<>[] \n   (elixir)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGiftMachine:": {
        "prefix": "components.giftreceiver:SetGiftMachine",
        "body": "components.giftreceiver:SetGiftMachine(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStopOpenGift:": {
        "prefix": "components.giftreceiver:OnStopOpenGift",
        "body": "components.giftreceiver:OnStopOpenGift(${1:usewardrobe})",
        "description": " ※参数: \n   (usewardrobe)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartOpenGift:": {
        "prefix": "components.giftreceiver:OnStartOpenGift",
        "body": "components.giftreceiver:OnStartOpenGift()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasGift:": {
        "prefix": "components.giftreceiver:HasGift",
        "body": "components.giftreceiver:HasGift()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshGiftCount:": {
        "prefix": "components.giftreceiver:RefreshGiftCount",
        "body": "components.giftreceiver:RefreshGiftCount()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OpenNextGift:": {
        "prefix": "components.giftreceiver:OpenNextGift",
        "body": "components.giftreceiver:OpenNextGift()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GenerateCrumbPoints:": {
        "prefix": "components.gingerbreadhunter:GenerateCrumbPoints",
        "body": "components.gingerbreadhunter:GenerateCrumbPoints(${1:origin_pt},${2:amount})",
        "description": " ※参数: \n   (origin_pt)<>[] \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Load:": {
        "prefix": "components.gingerbreadhunter:Load",
        "body": "components.gingerbreadhunter:Load(${1:data},${2:ents})",
        "description": " ※参数: \n   (data)<>[] \n   (ents)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPlayerJoined:": {
        "prefix": "components.worldoverseer:OnPlayerJoined",
        "body": "components.worldoverseer:OnPlayerJoined(${1:src},${2:player})",
        "description": " ※参数: \n   (src)<>[] \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnIsDay:": {
        "prefix": "components.gingerbreadhunter:OnIsDay",
        "body": "components.gingerbreadhunter:OnIsDay()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnCrumbTrail:": {
        "prefix": "components.gingerbreadhunter:SpawnCrumbTrail",
        "body": "components.gingerbreadhunter:SpawnCrumbTrail(${1:killtime})",
        "description": " ※参数: \n   (killtime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPlayerLeft:": {
        "prefix": "components.worldoverseer:OnPlayerLeft",
        "body": "components.worldoverseer:OnPlayerLeft(${1:src},${2:player})",
        "description": " ※参数: \n   (src)<>[] \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanGrabFn:": {
        "prefix": "components.grabbable:SetCanGrabFn",
        "body": "components.grabbable:SetCanGrabFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanGrab:": {
        "prefix": "components.grabbable:CanGrab",
        "body": "components.grabbable:CanGrab(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddGrogginess:": {
        "prefix": "components.grogginess:AddGrogginess",
        "body": "components.grogginess:AddGrogginess(${1:grogginess},${2:knockoutduration})",
        "description": " ※参数: \n   (grogginess)<>[] \n   (knockoutduration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetKnockOutTest:": {
        "prefix": "components.grogginess:SetKnockOutTest",
        "body": "components.grogginess:SetKnockOutTest(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetGrogginess:": {
        "prefix": "components.grogginess:ResetGrogginess",
        "body": "components.grogginess:ResetGrogginess()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpeedModMultiplier:": {
        "prefix": "components.grogginess:SetSpeedModMultiplier",
        "body": "components.grogginess:SetSpeedModMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ComeTo:": {
        "prefix": "components.grogginess:ComeTo",
        "body": "components.grogginess:ComeTo()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasGrogginess:": {
        "prefix": "components.grogginess:HasGrogginess",
        "body": "components.grogginess:HasGrogginess()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeGrogginessAtLeast:": {
        "prefix": "components.grogginess:MakeGrogginessAtLeast",
        "body": "components.grogginess:MakeGrogginessAtLeast(${1:min})",
        "description": " ※参数: \n   (min)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsKnockedOut:": {
        "prefix": "components.grogginess:IsKnockedOut",
        "body": "components.grogginess:IsKnockedOut()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsGroggy:": {
        "prefix": "components.grogginess:IsGroggy",
        "body": "components.grogginess:IsGroggy()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveResistanceSource:": {
        "prefix": "components.grogginess:RemoveResistanceSource",
        "body": "components.grogginess:RemoveResistanceSource(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddResistanceSource:": {
        "prefix": "components.grogginess:AddResistanceSource",
        "body": "components.grogginess:AddResistanceSource(${1:source},${2:resistance})",
        "description": " ※参数: \n   (source)<>[] \n   (resistance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWearOffDuration:": {
        "prefix": "components.grogginess:SetWearOffDuration",
        "body": "components.grogginess:SetWearOffDuration(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaultTests:": {
        "prefix": "components.sleeper:SetDefaultTests",
        "body": "components.sleeper:SetDefaultTests()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.KnockOut:": {
        "prefix": "components.grogginess:KnockOut",
        "body": "components.grogginess:KnockOut()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ExtendKnockout:": {
        "prefix": "components.grogginess:ExtendKnockout",
        "body": "components.grogginess:ExtendKnockout(${1:knockoutduration})",
        "description": " ※参数: \n   (knockoutduration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetComeToTest:": {
        "prefix": "components.grogginess:SetComeToTest",
        "body": "components.grogginess:SetComeToTest(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SubtractGrogginess:": {
        "prefix": "components.grogginess:SubtractGrogginess",
        "body": "components.grogginess:SubtractGrogginess(${1:grogginess})",
        "description": " ※参数: \n   (grogginess)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CapToResistance:": {
        "prefix": "components.grogginess:CapToResistance",
        "body": "components.grogginess:CapToResistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MaximizeGrogginess:": {
        "prefix": "components.grogginess:MaximizeGrogginess",
        "body": "components.grogginess:MaximizeGrogginess()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEnableSpeedMod:": {
        "prefix": "components.grogginess:SetEnableSpeedMod",
        "body": "components.grogginess:SetEnableSpeedMod(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDecayRate:": {
        "prefix": "components.grogginess:SetDecayRate",
        "body": "components.grogginess:SetDecayRate(${1:rate})",
        "description": " ※参数: \n   (rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanBeDressed:": {
        "prefix": "components.wardrobe:SetCanBeDressed",
        "body": "components.wardrobe:SetCanBeDressed(${1:canbedressed})",
        "description": " ※参数: \n   (canbedressed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOccupant:": {
        "prefix": "components.groomer:SetOccupant",
        "body": "components.groomer:SetOccupant(${1:occupant})",
        "description": " ※参数: \n   (occupant)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetChangeInDelay:": {
        "prefix": "components.wardrobe:SetChangeInDelay",
        "body": "components.wardrobe:SetChangeInDelay(${1:delay})",
        "description": " ※参数: \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplySkins:": {
        "prefix": "components.wardrobe:ApplySkins",
        "body": "components.wardrobe:ApplySkins(${1:doer},${2:diff})",
        "description": " ※参数: \n   (doer)<>[] \n   (diff)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BeginChanging:": {
        "prefix": "components.wardrobe:BeginChanging",
        "body": "components.wardrobe:BeginChanging(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActivateChanging:": {
        "prefix": "components.wardrobe:ActivateChanging",
        "body": "components.wardrobe:ActivateChanging(${1:doer},${2:skins})",
        "description": " ※参数: \n   (doer)<>[] \n   (skins)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanBeShared:": {
        "prefix": "components.wardrobe:SetCanBeShared",
        "body": "components.wardrobe:SetCanBeShared(${1:canbeshared})",
        "description": " ※参数: \n   (canbeshared)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndAllChanging:": {
        "prefix": "components.wardrobe:EndAllChanging",
        "body": "components.wardrobe:EndAllChanging()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyTargetSkins:": {
        "prefix": "components.wardrobe:ApplyTargetSkins",
        "body": "components.wardrobe:ApplyTargetSkins(${1:target},${2:doer},${3:skins})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n   (skins)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSkinCategory:": {
        "prefix": "components.groomer:GetSkinCategory",
        "body": "components.groomer:GetSkinCategory(${1:skin})",
        "description": " ※参数: \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeginChanging:": {
        "prefix": "components.wardrobe:CanBeginChanging",
        "body": "components.wardrobe:CanBeginChanging(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanUseAction:": {
        "prefix": "components.wardrobe:SetCanUseAction",
        "body": "components.wardrobe:SetCanUseAction(${1:canuseaction})",
        "description": " ※参数: \n   (canuseaction)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndChanging:": {
        "prefix": "components.wardrobe:EndChanging",
        "body": "components.wardrobe:EndChanging(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DestroyRing:": {
        "prefix": "components.groundpounder:DestroyRing",
        "body": "components.groundpounder:DestroyRing(${1:pt},${2:radius},${3:points},${4:breakobjects},${5:dodamage},${6:pushplatforms},${7:pushinventoryitems},${8:spawnfx},${9:ents_hit},${10:platforms_hit})",
        "description": " ※参数: \n   (pt)<>[] \n   (radius)<>[] \n   (points)<>[] \n   (breakobjects)<>[] \n   (dodamage)<>[] \n   (pushplatforms)<>[] \n   (pushinventoryitems)<>[] \n   (spawnfx)<>[] \n   (ents_hit)<>[] \n   (platforms_hit)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UseRingMode:": {
        "prefix": "components.groundpounder:UseRingMode",
        "body": "components.groundpounder:UseRingMode()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GroundPound:": {
        "prefix": "components.groundpounder:GroundPound",
        "body": "components.groundpounder:GroundPound(${1:pt},${2:ents_hit})",
        "description": " ※参数: \n   (pt)<>[] \n   (ents_hit)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DestroyPoints:": {
        "prefix": "components.groundpounder:DestroyPoints",
        "body": "components.groundpounder:DestroyPoints(${1:points},${2:breakobjects},${3:dodamage},${4:pushplatforms},${5:pushinventoryitems},${6:spawnfx})",
        "description": " ※参数: \n   (points)<>[] \n   (breakobjects)<>[] \n   (dodamage)<>[] \n   (pushplatforms)<>[] \n   (pushinventoryitems)<>[] \n   (spawnfx)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GroundPound_Offscreen:": {
        "prefix": "components.groundpounder:GroundPound_Offscreen",
        "body": "components.groundpounder:GroundPound_Offscreen(${1:position})",
        "description": " ※参数: \n   (position)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPoints:": {
        "prefix": "components.groundpounder:GetPoints",
        "body": "components.groundpounder:GetPoints(${1:pt})",
        "description": " ※参数: \n   (pt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddTarget:": {
        "prefix": "components.grouptargeter:AddTarget",
        "body": "components.grouptargeter:AddTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTotalWeight:": {
        "prefix": "components.grouptargeter:GetTotalWeight",
        "body": "components.grouptargeter:GetTotalWeight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTargeting:": {
        "prefix": "components.grouptargeter:IsTargeting",
        "body": "components.grouptargeter:IsTargeting(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SelectTarget:": {
        "prefix": "components.grouptargeter:SelectTarget",
        "body": "components.grouptargeter:SelectTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveTarget:": {
        "prefix": "components.grouptargeter:RemoveTarget",
        "body": "components.grouptargeter:RemoveTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTracking:": {
        "prefix": "components.targettracker:StopTracking",
        "body": "components.targettracker:StopTracking(${1:reset})",
        "description": " ※参数: \n   (reset)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPickTarget:": {
        "prefix": "components.grouptargeter:OnPickTarget",
        "body": "components.grouptargeter:OnPickTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTargets:": {
        "prefix": "components.grouptargeter:GetTargets",
        "body": "components.grouptargeter:GetTargets()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryGetNewTarget:": {
        "prefix": "components.grouptargeter:TryGetNewTarget",
        "body": "components.grouptargeter:TryGetNewTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopGrowing:": {
        "prefix": "components.harvestable:StopGrowing",
        "body": "components.harvestable:StopGrowing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsGrowing:": {
        "prefix": "components.growable:IsGrowing",
        "body": "components.growable:IsGrowing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoGrowth:": {
        "prefix": "components.growable:DoGrowth",
        "body": "components.growable:DoGrowth()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStage:": {
        "prefix": "components.upgradeable:SetStage",
        "body": "components.upgradeable:SetStage(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoMagicGrowth:": {
        "prefix": "components.harvestable:DoMagicGrowth",
        "body": "components.harvestable:DoMagicGrowth(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentStageData:": {
        "prefix": "components.growable:GetCurrentStageData",
        "body": "components.growable:GetCurrentStageData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetStage:": {
        "prefix": "components.upgradeable:GetStage",
        "body": "components.upgradeable:GetStage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNextStage:": {
        "prefix": "components.growable:GetNextStage",
        "body": "components.growable:GetNextStage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ExtendGrowTime:": {
        "prefix": "components.growable:ExtendGrowTime",
        "body": "components.growable:ExtendGrowTime(${1:extra_time})",
        "description": " ※参数: \n   (extra_time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFertilePercent:": {
        "prefix": "components.grower:GetFertilePercent",
        "body": "components.grower:GetFertilePercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFullFertile:": {
        "prefix": "components.grower:IsFullFertile",
        "body": "components.grower:IsFullFertile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveCrop:": {
        "prefix": "components.grower:RemoveCrop",
        "body": "components.grower:RemoveCrop(${1:crop})",
        "description": " ※参数: \n   (crop)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PlantItem:": {
        "prefix": "components.grower:PlantItem",
        "body": "components.grower:PlantItem(${1:item},${2:doer})",
        "description": " ※参数: \n   (item)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFertile:": {
        "prefix": "components.grower:IsFertile",
        "body": "components.grower:IsFertile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSleeping:": {
        "prefix": "components.grue:SetSleeping",
        "body": "components.grue:SetSleeping(${1:asleep})",
        "description": " ※参数: \n   (asleep)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveImmunity:": {
        "prefix": "components.grue:RemoveImmunity",
        "body": "components.grue:RemoveImmunity(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Attack:": {
        "prefix": "components.grue:Attack",
        "body": "components.grue:Attack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddImmunity:": {
        "prefix": "components.grue:AddImmunity",
        "body": "components.grue:AddImmunity(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSounds:": {
        "prefix": "components.grue:SetSounds",
        "body": "components.grue:SetSounds(${1:warn},${2:attack})",
        "description": " ※参数: \n   (warn)<>[] \n   (attack)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SummonsAtMin:": {
        "prefix": "components.guardian:SummonsAtMin",
        "body": "components.guardian:SummonsAtMin()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Decay:": {
        "prefix": "components.projectedeffects:Decay",
        "body": "components.projectedeffects:Decay(${1:permanent})",
        "description": " ※参数: \n   (permanent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasGuardian:": {
        "prefix": "components.guardian:HasGuardian",
        "body": "components.guardian:HasGuardian()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SummonsAtMax:": {
        "prefix": "components.guardian:SummonsAtMax",
        "body": "components.guardian:SummonsAtMax()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGuardian:": {
        "prefix": "components.guardian:SetGuardian",
        "body": "components.guardian:SetGuardian(${1:guardian})",
        "description": " ※参数: \n   (guardian)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SummonGuardian:": {
        "prefix": "components.guardian:SummonGuardian",
        "body": "components.guardian:SummonGuardian(${1:override})",
        "description": " ※参数: \n   (override)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DismissGuardian:": {
        "prefix": "components.guardian:DismissGuardian",
        "body": "components.guardian:DismissGuardian()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartDecay:": {
        "prefix": "components.guardian:StartDecay",
        "body": "components.guardian:StartDecay()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnGuardianDeath:": {
        "prefix": "components.guardian:OnGuardianDeath",
        "body": "components.guardian:OnGuardianDeath(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Call:": {
        "prefix": "components.guardian:Call",
        "body": "components.guardian:Call(${1:d})",
        "description": " ※参数: \n   (d)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckPerish:": {
        "prefix": "components.gym:CheckPerish",
        "body": "components.gym:CheckPerish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTrainee:": {
        "prefix": "components.gym:SetTrainee",
        "body": "components.gym:SetTrainee(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnRemoveTraineeFn:": {
        "prefix": "components.gym:SetOnRemoveTraineeFn",
        "body": "components.gym:SetOnRemoveTraineeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveTrainee:": {
        "prefix": "components.gym:RemoveTrainee",
        "body": "components.gym:RemoveTrainee()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTraining:": {
        "prefix": "components.gym:StartTraining",
        "body": "components.gym:StartTraining(${1:inst},${2:time})",
        "description": " ※参数: \n   (inst)<>[] \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnTimerDone:": {
        "prefix": "components.gym:OnTimerDone",
        "body": "components.gym:OnTimerDone(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.checktraineesleep:": {
        "prefix": "components.gym:checktraineesleep",
        "body": "components.gym:checktraineesleep(${1:phase})",
        "description": " ※参数: \n   (phase)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Train:": {
        "prefix": "components.gym:Train",
        "body": "components.gym:Train()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTrainFn:": {
        "prefix": "components.gym:SetTrainFn",
        "body": "components.gym:SetTrainFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTraining:": {
        "prefix": "components.gym:StopTraining",
        "body": "components.gym:StopTraining()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushMontage:": {
        "prefix": "components.gym:PushMontage",
        "body": "components.gym:PushMontage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Mutate:": {
        "prefix": "components.spidermutator:Mutate",
        "body": "components.spidermutator:Mutate(${1:spider},${2:skip_event},${3:giver})",
        "description": " ※参数: \n   (spider)<>[] \n   (skip_event)<>[] \n   (giver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetConversionOverrideFn:": {
        "prefix": "components.halloweenmoonmutable:SetConversionOverrideFn",
        "body": "components.halloweenmoonmutable:SetConversionOverrideFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnMutateFn:": {
        "prefix": "components.halloweenmoonmutable:SetOnMutateFn",
        "body": "components.halloweenmoonmutable:SetOnMutateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPrefabMutated:": {
        "prefix": "components.halloweenmoonmutable:SetPrefabMutated",
        "body": "components.halloweenmoonmutable:SetPrefabMutated(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanHarvestFn:": {
        "prefix": "components.harvestable:SetCanHarvestFn",
        "body": "components.harvestable:SetCanHarvestFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnGrowFn:": {
        "prefix": "components.harvestable:SetOnGrowFn",
        "body": "components.harvestable:SetOnGrowFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsMagicGrowable:": {
        "prefix": "components.harvestable:IsMagicGrowable",
        "body": "components.harvestable:IsMagicGrowable()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PauseGrowing:": {
        "prefix": "components.harvestable:PauseGrowing",
        "body": "components.harvestable:PauseGrowing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeHarvested:": {
        "prefix": "components.harvestable:CanBeHarvested",
        "body": "components.harvestable:CanBeHarvested()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDoMagicGrowthFn:": {
        "prefix": "components.harvestable:SetDoMagicGrowthFn",
        "body": "components.harvestable:SetDoMagicGrowthFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Grow:": {
        "prefix": "components.simplemagicgrower:Grow",
        "body": "components.simplemagicgrower:Grow()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGrowTime:": {
        "prefix": "components.harvestable:SetGrowTime",
        "body": "components.harvestable:SetGrowTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHatchFailTime:": {
        "prefix": "components.hatchable:SetHatchFailTime",
        "body": "components.hatchable:SetHatchFailTime(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Delay:": {
        "prefix": "components.hatchable:Delay",
        "body": "components.hatchable:Delay(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCrackTime:": {
        "prefix": "components.hatchable:SetCrackTime",
        "body": "components.hatchable:SetCrackTime(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnState:": {
        "prefix": "components.hatchable:SetOnState",
        "body": "components.hatchable:SetOnState(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetChillerPrefs:": {
        "prefix": "components.hatchable:SetChillerPrefs",
        "body": "components.hatchable:SetChillerPrefs(${1:day},${2:dusk},${3:night})",
        "description": " ※参数: \n   (day)<>[] \n   (dusk)<>[] \n   (night)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHeaterPrefs:": {
        "prefix": "components.hatchable:SetHeaterPrefs",
        "body": "components.hatchable:SetHeaterPrefs(${1:day},${2:dusk},${3:night})",
        "description": " ※参数: \n   (day)<>[] \n   (dusk)<>[] \n   (night)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetChillerPref:": {
        "prefix": "components.hatchable:GetChillerPref",
        "body": "components.hatchable:GetChillerPref(${1:phase})",
        "description": " ※参数: \n   (phase)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHeaterPref:": {
        "prefix": "components.hatchable:GetHeaterPref",
        "body": "components.hatchable:GetHeaterPref(${1:phase})",
        "description": " ※参数: \n   (phase)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnState:": {
        "prefix": "components.hatchable:OnState",
        "body": "components.hatchable:OnState(${1:state},${2:forcestateupdate})",
        "description": " ※参数: \n   (state)<>[] \n   (forcestateupdate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHatchTime:": {
        "prefix": "components.hatchable:SetHatchTime",
        "body": "components.hatchable:SetHatchTime(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartShaderFx:": {
        "prefix": "components.hauntable:StartShaderFx",
        "body": "components.hauntable:StartShaderFx()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnHauntFn:": {
        "prefix": "components.hauntable:SetOnHauntFn",
        "body": "components.hauntable:SetOnHauntFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartFX:": {
        "prefix": "components.hauntable:StartFX",
        "body": "components.hauntable:StartFX(${1:noflicker})",
        "description": " ※参数: \n   (noflicker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AdvanceFlickerState:": {
        "prefix": "components.hauntable:AdvanceFlickerState",
        "body": "components.hauntable:AdvanceFlickerState()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopFX:": {
        "prefix": "components.hauntable:StopFX",
        "body": "components.hauntable:StopFX()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoHaunt:": {
        "prefix": "components.hauntable:DoHaunt",
        "body": "components.hauntable:DoHaunt(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopShaderFX:": {
        "prefix": "components.hauntable:StopShaderFX",
        "body": "components.hauntable:StopShaderFX()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUnHauntFn:": {
        "prefix": "components.hauntable:SetOnUnHauntFn",
        "body": "components.hauntable:SetOnUnHauntFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Panic:": {
        "prefix": "components.hauntable:Panic",
        "body": "components.hauntable:Panic(${1:panictime})",
        "description": " ※参数: \n   (panictime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHauntValue:": {
        "prefix": "components.hauntable:SetHauntValue",
        "body": "components.hauntable:SetHauntValue(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Heal:该方法在触发治疗时调用，该方法内会依次触发SetCanHealFn设置的判断和SetOnHealFn设置的触发方法，还会判断治疗目标本身的target.components.health.canheal，如果canheal=false,则依然会触发整个治疗流程并扣除治疗预制物，但目标不会加血。": {
        "prefix": "components.healer:Heal",
        "body": "components.healer:Heal(${2:doer},${1:target})",
        "description": " ※参数: \n   (doer)<触发治疗的对象，一般是玩家。>[使用者] \n   (target)<实体对象>[治疗目标] \n ※返回: \n ※说明: 该方法在触发治疗时调用，该方法内会依次触发SetCanHealFn设置的判断和SetOnHealFn设置的触发方法，还会判断治疗目标本身的target.components.health.canheal，如果canheal=false,则依然会触发整个治疗流程并扣除治疗预制物，但目标不会加血。\n ※贡献者: @御坂十七号"
    },
    "组件.SetCanHealFn:传入一个方法，用于判断是否可以触发治疗。例如：SetCanHealFn(function (inst, target, doer) return false,'不准治疗他') inst是有该组件的预制物，target是治疗目标,doer是使用者": {
        "prefix": "components.healer:SetCanHealFn",
        "body": "components.healer:SetCanHealFn(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 传入一个方法，用于判断是否可以触发治疗。例如：SetCanHealFn(function (inst, target, doer) return false,'不准治疗他') inst是有该组件的预制物，target是治疗目标,doer是使用者\n ※贡献者: @御坂十七号"
    },
    "组件.SetOnHealFn:设置一个方法，在触发治疗时，会触发该方法，例如：SetOnHealFn(function (inst, target,doer)  end)，inst是有该组件的预制物，target是治疗目标,doer是使用者": {
        "prefix": "components.healer:SetOnHealFn",
        "body": "components.healer:SetOnHealFn(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 设置一个方法，在触发治疗时，会触发该方法，例如：SetOnHealFn(function (inst, target,doer)  end)，inst是有该组件的预制物，target是治疗目标,doer是使用者\n ※贡献者: @御坂十七号"
    },
    "组件.SetHealthAmount:设置一个治疗量x，在触发治疗后，恢复玩家血量x 治疗量默认值为 TUNING.HEALING_SMALL = 3": {
        "prefix": "components.healer:SetHealthAmount",
        "body": "components.healer:SetHealthAmount(${1:health})",
        "description": " ※参数: \n   (health)<num>[治疗量] \n ※返回: \n ※说明: 设置一个治疗量x，在触发治疗后，恢复玩家血量x 治疗量默认值为 TUNING.HEALING_SMALL = 3\n ※贡献者: @御坂十七号"
    },
    "组件.SetCurrentHealth:": {
        "prefix": "components.health:SetCurrentHealth",
        "body": "components.health:SetCurrentHealth(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAbsorptionAmountFromPlayer:": {
        "prefix": "components.health:SetAbsorptionAmountFromPlayer",
        "body": "components.health:SetAbsorptionAmountFromPlayer(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHurt:": {
        "prefix": "components.health:IsHurt",
        "body": "components.health:IsHurt()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecalculatePenalty:": {
        "prefix": "components.sanity:RecalculatePenalty",
        "body": "components.sanity:RecalculatePenalty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFireDamageScale:": {
        "prefix": "components.health:GetFireDamageScale",
        "body": "components.health:GetFireDamageScale()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInvincible:": {
        "prefix": "components.health:IsInvincible",
        "body": "components.health:IsInvincible()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceUpdateHUD:": {
        "prefix": "components.health:ForceUpdateHUD",
        "body": "components.health:ForceUpdateHUD(${1:overtime})",
        "description": " ※参数: \n   (overtime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPenalty:": {
        "prefix": "components.health:SetPenalty",
        "body": "components.health:SetPenalty(${1:penalty})",
        "description": " ※参数: \n   (penalty)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAbsorptionAmount:": {
        "prefix": "components.health:SetAbsorptionAmount",
        "body": "components.health:SetAbsorptionAmount(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxHealth:": {
        "prefix": "components.pethealthbar:SetMaxHealth",
        "body": "components.pethealthbar:SetMaxHealth(${1:max_health})",
        "description": " ※参数: \n   (max_health)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxWithPenalty:": {
        "prefix": "components.sanity:GetMaxWithPenalty",
        "body": "components.sanity:GetMaxWithPenalty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveRegenSource:": {
        "prefix": "components.health:RemoveRegenSource",
        "body": "components.health:RemoveRegenSource(${1:source},${2:key})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRegenSource:": {
        "prefix": "components.health:AddRegenSource",
        "body": "components.health:AddRegenSource(${1:source},${2:amount},${3:period},${4:key})",
        "description": " ※参数: \n   (source)<>[] \n   (amount)<>[] \n   (period)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeltaPenalty:": {
        "prefix": "components.health:DeltaPenalty",
        "body": "components.health:DeltaPenalty(${1:delta})",
        "description": " ※参数: \n   (delta)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetVal:": {
        "prefix": "components.health:SetVal",
        "body": "components.health:SetVal(${1:val},${2:cause},${3:afflicter})",
        "description": " ※参数: \n   (val)<>[] \n   (cause)<>[] \n   (afflicter)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxDamageTakenPerHit:": {
        "prefix": "components.health:SetMaxDamageTakenPerHit",
        "body": "components.health:SetMaxDamageTakenPerHit(${1:maxdamagetakenperhit})",
        "description": " ※参数: \n   (maxdamagetakenperhit)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDead:": {
        "prefix": "components.health:IsDead",
        "body": "components.health:IsDead()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Kill:": {
        "prefix": "components.health:Kill",
        "body": "components.health:Kill()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMinHealth:": {
        "prefix": "components.health:SetMinHealth",
        "body": "components.health:SetMinHealth(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPercentWithPenalty:": {
        "prefix": "components.sanity:GetPercentWithPenalty",
        "body": "components.sanity:GetPercentWithPenalty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPenaltyPercent:": {
        "prefix": "components.sanity:GetPenaltyPercent",
        "body": "components.sanity:GetPenaltyPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoFireDamage:": {
        "prefix": "components.health:DoFireDamage",
        "body": "components.health:DoFireDamage(${1:amount},${2:doer},${3:instant})",
        "description": " ※参数: \n   (amount)<>[] \n   (doer)<>[] \n   (instant)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetValue:": {
        "prefix": "components.healthbar:SetValue",
        "body": "components.healthbar:SetValue(${1:percent})",
        "description": " ※参数: \n   (percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOverTime:": {
        "prefix": "components.pethealthbar:GetOverTime",
        "body": "components.pethealthbar:GetOverTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddTrigger:": {
        "prefix": "components.healthtrigger:AddTrigger",
        "body": "components.healthtrigger:AddTrigger(${1:amount},${2:fn})",
        "description": " ※参数: \n   (amount)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldFalloff:": {
        "prefix": "components.heater:SetShouldFalloff",
        "body": "components.heater:SetShouldFalloff(${1:should_falloff})",
        "description": " ※参数: \n   (should_falloff)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsExothermic:": {
        "prefix": "components.heater:IsExothermic",
        "body": "components.heater:IsExothermic()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEndothermic:": {
        "prefix": "components.heater:IsEndothermic",
        "body": "components.heater:IsEndothermic()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHeat:": {
        "prefix": "components.heater:GetHeat",
        "body": "components.heater:GetHeat(${1:observer})",
        "description": " ※参数: \n   (observer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEquippedHeat:": {
        "prefix": "components.heater:GetEquippedHeat",
        "body": "components.heater:GetEquippedHeat(${1:observer})",
        "description": " ※参数: \n   (observer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHeatRadiusCutoff:": {
        "prefix": "components.heater:SetHeatRadiusCutoff",
        "body": "components.heater:SetHeatRadiusCutoff(${1:radius_cutoff})",
        "description": " ※参数: \n   (radius_cutoff)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCarriedHeat:": {
        "prefix": "components.heater:GetCarriedHeat",
        "body": "components.heater:GetCarriedHeat(${1:observer})",
        "description": " ※参数: \n   (observer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHeatRadiusCutoff:": {
        "prefix": "components.heater:GetHeatRadiusCutoff",
        "body": "components.heater:GetHeatRadiusCutoff()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetThermics:": {
        "prefix": "components.heater:SetThermics",
        "body": "components.heater:SetThermics(${1:exo},${2:endo})",
        "description": " ※参数: \n   (exo)<>[] \n   (endo)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldFalloff:": {
        "prefix": "components.heater:ShouldFalloff",
        "body": "components.heater:ShouldFalloff()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFalling:": {
        "prefix": "components.heavyobstaclephysics:IsFalling",
        "body": "components.heavyobstaclephysics:IsFalling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddFallingStates:": {
        "prefix": "components.heavyobstaclephysics:AddFallingStates",
        "body": "components.heavyobstaclephysics:AddFallingStates()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartFallingFn:": {
        "prefix": "components.heavyobstaclephysics:SetOnStartFallingFn",
        "body": "components.heavyobstaclephysics:SetOnStartFallingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnChangeToItemFn:": {
        "prefix": "components.heavyobstaclephysics:SetOnChangeToItemFn",
        "body": "components.heavyobstaclephysics:SetOnChangeToItemFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsObstacle:": {
        "prefix": "components.heavyobstaclephysics:IsObstacle",
        "body": "components.heavyobstaclephysics:IsObstacle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeSmallObstacle:": {
        "prefix": "components.heavyobstaclephysics:MakeSmallObstacle",
        "body": "components.heavyobstaclephysics:MakeSmallObstacle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopFallingFn:": {
        "prefix": "components.heavyobstaclephysics:SetOnStopFallingFn",
        "body": "components.heavyobstaclephysics:SetOnStopFallingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnChangeToObstacleFn:": {
        "prefix": "components.heavyobstaclephysics:SetOnChangeToObstacleFn",
        "body": "components.heavyobstaclephysics:SetOnChangeToObstacleFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPhysicsStateChangedFn:": {
        "prefix": "components.heavyobstaclephysics:SetOnPhysicsStateChangedFn",
        "body": "components.heavyobstaclephysics:SetOnPhysicsStateChangedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsItem:": {
        "prefix": "components.heavyobstaclephysics:IsItem",
        "body": "components.heavyobstaclephysics:IsItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPhysicsState:": {
        "prefix": "components.heavyobstaclephysics:GetPhysicsState",
        "body": "components.heavyobstaclephysics:GetPhysicsState()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UseHeavyObstacle:": {
        "prefix": "components.heavyobstacleusetarget:UseHeavyObstacle",
        "body": "components.heavyobstacleusetarget:UseHeavyObstacle(${1:doer},${2:heavy_obstacle})",
        "description": " ※参数: \n   (doer)<>[] \n   (heavy_obstacle)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxSize:": {
        "prefix": "components.herd:SetMaxSize",
        "body": "components.herd:SetMaxSize(${1:size})",
        "description": " ※参数: \n   (size)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnFullFn:": {
        "prefix": "components.herd:SetOnFullFn",
        "body": "components.herd:SetOnFullFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGatherRange:": {
        "prefix": "components.herd:SetGatherRange",
        "body": "components.herd:SetGatherRange(${1:range})",
        "description": " ※参数: \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnEmptyFn:": {
        "prefix": "components.herd:SetOnEmptyFn",
        "body": "components.herd:SetOnEmptyFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MergeNearbyHerds:": {
        "prefix": "components.herd:MergeNearbyHerds",
        "body": "components.herd:MergeNearbyHerds()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GatherNearbyMembers:": {
        "prefix": "components.herd:GatherNearbyMembers",
        "body": "components.herd:GatherNearbyMembers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHerdPrefab:": {
        "prefix": "components.herdmember:SetHerdPrefab",
        "body": "components.herdmember:SetHerdPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHerd:": {
        "prefix": "components.herdmember:SetHerd",
        "body": "components.herdmember:SetHerd(${1:herd})",
        "description": " ※参数: \n   (herd)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CreateHerd:": {
        "prefix": "components.herdmember:CreateHerd",
        "body": "components.herdmember:CreateHerd()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHerd:": {
        "prefix": "components.herdmember:GetHerd",
        "body": "components.herdmember:GetHerd()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGame:": {
        "prefix": "components.hideandseeker:SetGame",
        "body": "components.hideandseeker:SetGame(${1:hideandseekgame})",
        "description": " ※参数: \n   (hideandseekgame)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsActive:": {
        "prefix": "components.worldmigrator:IsActive",
        "body": "components.worldmigrator:IsActive()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumSeekers:": {
        "prefix": "components.hideandseekgame:GetNumSeekers",
        "body": "components.hideandseekgame:GetNumSeekers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSeeker:": {
        "prefix": "components.hideandseekgame:AddSeeker",
        "body": "components.hideandseekgame:AddSeeker(${1:seeker},${2:started_game})",
        "description": " ※参数: \n   (seeker)<>[] \n   (started_game)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Abort:": {
        "prefix": "components.hideandseekhidingspot:Abort",
        "body": "components.hideandseekhidingspot:Abort()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumHiding:": {
        "prefix": "components.hideandseekgame:GetNumHiding",
        "body": "components.hideandseekgame:GetNumHiding()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._HideAndSeekOver:": {
        "prefix": "components.hideandseekgame:_HideAndSeekOver",
        "body": "components.hideandseekgame:_HideAndSeekOver()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterHidingSpot:": {
        "prefix": "components.hideandseekgame:RegisterHidingSpot",
        "body": "components.hideandseekgame:RegisterHidingSpot(${1:hiding_spot})",
        "description": " ※参数: \n   (hiding_spot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnregisterHidingSpot:": {
        "prefix": "components.hideandseekgame:UnregisterHidingSpot",
        "body": "components.hideandseekgame:UnregisterHidingSpot(${1:hiding_spot})",
        "description": " ※参数: \n   (hiding_spot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumFound:": {
        "prefix": "components.hideandseekgame:GetNumFound",
        "body": "components.hideandseekgame:GetNumFound()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPlayHideAndSeek:": {
        "prefix": "components.hideandseekhider:CanPlayHideAndSeek",
        "body": "components.hideandseekhider:CanPlayHideAndSeek()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHidden:": {
        "prefix": "components.hideandseekhider:IsHidden",
        "body": "components.hideandseekhider:IsHidden()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GoHide:": {
        "prefix": "components.hideandseekhider:GoHide",
        "body": "components.hideandseekhider:GoHide(${1:hiding_spot},${2:timeout_time},${3:isloading})",
        "description": " ※参数: \n   (hiding_spot)<>[] \n   (timeout_time)<>[] \n   (isloading)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Found:": {
        "prefix": "components.hideandseekhider:Found",
        "body": "components.hideandseekhider:Found(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPlaying:": {
        "prefix": "components.hideandseekhider:IsPlaying",
        "body": "components.hideandseekhider:IsPlaying()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHider:": {
        "prefix": "components.hideandseekhidingspot:SetHider",
        "body": "components.hideandseekhidingspot:SetHider(${1:hider})",
        "description": " ※参数: \n   (hider)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._ReleaesHider:": {
        "prefix": "components.hideandseekhidingspot:_ReleaesHider",
        "body": "components.hideandseekhidingspot:_ReleaesHider(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HideInSpot:": {
        "prefix": "components.hideandseekhidingspot:HideInSpot",
        "body": "components.hideandseekhidingspot:HideInSpot(${1:hider})",
        "description": " ※参数: \n   (hider)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SearchHidingSpot:": {
        "prefix": "components.hideandseekhidingspot:SearchHidingSpot",
        "body": "components.hideandseekhidingspot:SearchHidingSpot(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanRelease:": {
        "prefix": "components.hideout:CanRelease",
        "body": "components.hideout:CanRelease()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReleaseChild:": {
        "prefix": "components.spawner:ReleaseChild",
        "body": "components.spawner:ReleaseChild()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoReleaseChild:": {
        "prefix": "components.hideout:DoReleaseChild",
        "body": "components.hideout:DoReleaseChild(${1:target},${2:child},${3:radius})",
        "description": " ※参数: \n   (target)<>[] \n   (child)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAddColour:": {
        "prefix": "components.highlight:SetAddColour",
        "body": "components.highlight:SetAddColour(${1:col})",
        "description": " ※参数: \n   (col)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyColour:": {
        "prefix": "components.highlight:ApplyColour",
        "body": "components.highlight:ApplyColour()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Flash:": {
        "prefix": "components.propagator:Flash",
        "body": "components.propagator:Flash()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Highlight:": {
        "prefix": "components.highlight:Highlight",
        "body": "components.highlight:Highlight(${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnHighlight:": {
        "prefix": "components.highlight:UnHighlight",
        "body": "components.highlight:UnHighlight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOwner:": {
        "prefix": "components.sentientaxe:SetOwner",
        "body": "components.sentientaxe:SetOwner(${1:owner})",
        "description": " ※参数: \n   (owner)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnChangeOwner:": {
        "prefix": "components.highlightchild:OnChangeOwner",
        "body": "components.highlightchild:OnChangeOwner(${1:owner})",
        "description": " ※参数: \n   (owner)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Unhitch:": {
        "prefix": "components.hitcher:Unhitch",
        "body": "components.hitcher:Unhitch()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHitch:": {
        "prefix": "components.hitchable:GetHitch",
        "body": "components.hitchable:GetHitch()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHitched:": {
        "prefix": "components.hitcher:SetHitched",
        "body": "components.hitcher:SetHitched(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHitched:": {
        "prefix": "components.hitcher:GetHitched",
        "body": "components.hitcher:GetHitched()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Lock:": {
        "prefix": "components.lock:Lock",
        "body": "components.lock:Lock(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHome:": {
        "prefix": "components.homeseeker:GetHome",
        "body": "components.homeseeker:GetHome()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHomePos:": {
        "prefix": "components.homeseeker:GetHomePos",
        "body": "components.homeseeker:GetHomePos()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHomeDirectTravelTime:": {
        "prefix": "components.homeseeker:GetHomeDirectTravelTime",
        "body": "components.homeseeker:GetHomeDirectTravelTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHome:": {
        "prefix": "components.homeseeker:SetHome",
        "body": "components.homeseeker:SetHome(${1:home})",
        "description": " ※参数: \n   (home)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasHome:": {
        "prefix": "components.homeseeker:HasHome",
        "body": "components.homeseeker:HasHome()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHoundThief:": {
        "prefix": "components.houndedtarget:IsHoundThief",
        "body": "components.houndedtarget:IsHoundThief()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTargetWeight:": {
        "prefix": "components.houndedtarget:GetTargetWeight",
        "body": "components.houndedtarget:GetTargetWeight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldTrack:": {
        "prefix": "components.hudindicatable:ShouldTrack",
        "body": "components.hudindicatable:ShouldTrack(${1:viewer})",
        "description": " ※参数: \n   (viewer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterWithWorldComponent:": {
        "prefix": "components.hudindicatable:RegisterWithWorldComponent",
        "body": "components.hudindicatable:RegisterWithWorldComponent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnRegisterWithWorldComponent:": {
        "prefix": "components.hudindicatable:UnRegisterWithWorldComponent",
        "body": "components.hudindicatable:UnRegisterWithWorldComponent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldTrackFunction:": {
        "prefix": "components.hudindicatable:SetShouldTrackFunction",
        "body": "components.hudindicatable:SetShouldTrackFunction(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldRemoveIndicator:": {
        "prefix": "components.playertargetindicator:ShouldRemoveIndicator",
        "body": "components.playertargetindicator:ShouldRemoveIndicator(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldShowIndicator:": {
        "prefix": "components.playertargetindicator:ShouldShowIndicator",
        "body": "components.playertargetindicator:ShouldShowIndicator(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AttachEntityToBoat:": {
        "prefix": "components.hull:AttachEntityToBoat",
        "body": "components.hull:AttachEntityToBoat(${1:obj},${2:offset_x},${3:offset_z},${4:parent_to_boat})",
        "description": " ※参数: \n   (obj)<>[] \n   (offset_x)<>[] \n   (offset_z)<>[] \n   (parent_to_boat)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBoatLip:": {
        "prefix": "components.hull:SetBoatLip",
        "body": "components.hull:SetBoatLip(${1:obj},${2:scale})",
        "description": " ※参数: \n   (obj)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnDeployed:": {
        "prefix": "components.hull:OnDeployed",
        "body": "components.hull:OnDeployed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishRemovingEntity:": {
        "prefix": "components.hull:FinishRemovingEntity",
        "body": "components.hull:FinishRemovingEntity(${1:entity})",
        "description": " ※参数: \n   (entity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPlank:": {
        "prefix": "components.hull:SetPlank",
        "body": "components.hull:SetPlank(${1:obj})",
        "description": " ※参数: \n   (obj)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnDegadeDebris:": {
        "prefix": "components.hullhealth:SpawnDegadeDebris",
        "body": "components.hullhealth:SpawnDegadeDebris()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLeakAngle:": {
        "prefix": "components.hullhealth:GetLeakAngle",
        "body": "components.hullhealth:GetLeakAngle(${1:idx})",
        "description": " ※参数: \n   (idx)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateHealth:": {
        "prefix": "components.hullhealth:UpdateHealth",
        "body": "components.hullhealth:UpdateHealth()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLeakPosition:": {
        "prefix": "components.hullhealth:GetLeakPosition",
        "body": "components.hullhealth:GetLeakPosition(${1:idx})",
        "description": " ※参数: \n   (idx)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSelfDegrading:": {
        "prefix": "components.hullhealth:SetSelfDegrading",
        "body": "components.hullhealth:SetSelfDegrading(${1:stat})",
        "description": " ※参数: \n   (stat)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCollide:": {
        "prefix": "components.hullhealth:OnCollide",
        "body": "components.hullhealth:OnCollide(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshLeakIndicator:": {
        "prefix": "components.hullhealth:RefreshLeakIndicator",
        "body": "components.hullhealth:RefreshLeakIndicator(${1:leak_idx})",
        "description": " ※参数: \n   (leak_idx)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMax:": {
        "prefix": "components.sanity:SetMax",
        "body": "components.sanity:SetMax(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRate:": {
        "prefix": "components.mightiness:SetRate",
        "body": "components.mightiness:SetRate(${1:rate})",
        "description": " ※参数: \n   (rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoDec:": {
        "prefix": "components.mightiness:DoDec",
        "body": "components.mightiness:DoDec(${1:dt},${2:ignore_damage})",
        "description": " ※参数: \n   (dt)<>[] \n   (ignore_damage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOverrideStarveFn:": {
        "prefix": "components.hunger:SetOverrideStarveFn",
        "body": "components.hunger:SetOverrideStarveFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetKillRate:": {
        "prefix": "components.hunger:SetKillRate",
        "body": "components.hunger:SetKillRate(${1:rate})",
        "description": " ※参数: \n   (rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldIncinerateItemFn:": {
        "prefix": "components.incinerator:SetShouldIncinerateItemFn",
        "body": "components.incinerator:SetShouldIncinerateItemFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnIncinerateFn:": {
        "prefix": "components.incinerator:SetOnIncinerateFn",
        "body": "components.incinerator:SetOnIncinerateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Incinerate:": {
        "prefix": "components.incinerator:Incinerate",
        "body": "components.incinerator:Incinerate(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldIncinerateItem:": {
        "prefix": "components.incinerator:ShouldIncinerateItem",
        "body": "components.incinerator:ShouldIncinerateItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoProduce:": {
        "prefix": "components.incrementalproducer:DoProduce",
        "body": "components.incrementalproducer:DoProduce()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanProduce:": {
        "prefix": "components.incrementalproducer:CanProduce",
        "body": "components.incrementalproducer:CanProduce()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryProduce:": {
        "prefix": "components.incrementalproducer:TryProduce",
        "body": "components.incrementalproducer:TryProduce()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Ink:": {
        "prefix": "components.inkable:Ink",
        "body": "components.inkable:Ink()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDescription:": {
        "prefix": "components.inspectable:GetDescription",
        "body": "components.inspectable:GetDescription(${1:viewer})",
        "description": " ※参数: \n   (viewer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecordViews:": {
        "prefix": "components.inspectable:RecordViews",
        "body": "components.inspectable:RecordViews(${1:state})",
        "description": " ※参数: \n   (state)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetStatus:": {
        "prefix": "components.inspectable:GetStatus",
        "body": "components.inspectable:GetStatus(${1:viewer})",
        "description": " ※参数: \n   (viewer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNameOverride:": {
        "prefix": "components.inspectable:SetNameOverride",
        "body": "components.inspectable:SetNameOverride(${1:nameoverride})",
        "description": " ※参数: \n   (nameoverride)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsParticipantClose:": {
        "prefix": "components.inspectaclesparticipant:IsParticipantClose",
        "body": "components.inspectaclesparticipant:IsParticipantClose(${1:range})",
        "description": " ※参数: \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShowCurrentGame:": {
        "prefix": "components.inspectaclesparticipant:ShowCurrentGame",
        "body": "components.inspectaclesparticipant:ShowCurrentGame()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInCooldown:": {
        "prefix": "components.roseinspectableuser:IsInCooldown",
        "body": "components.roseinspectableuser:IsInCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCLIENTDetails:": {
        "prefix": "components.inspectaclesparticipant:GetCLIENTDetails",
        "body": "components.inspectaclesparticipant:GetCLIENTDetails()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsUpgradedBox:": {
        "prefix": "components.inspectaclesparticipant:IsUpgradedBox",
        "body": "components.inspectaclesparticipant:IsUpgradedBox()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPuzzleData:": {
        "prefix": "components.inspectaclesparticipant:GetPuzzleData",
        "body": "components.inspectaclesparticipant:GetPuzzleData(${1:puzzle})",
        "description": " ※参数: \n   (puzzle)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NetworkCurrentGame:": {
        "prefix": "components.inspectaclesparticipant:NetworkCurrentGame",
        "body": "components.inspectaclesparticipant:NetworkCurrentGame()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateInspectacles:": {
        "prefix": "components.inspectaclesparticipant:UpdateInspectacles",
        "body": "components.inspectaclesparticipant:UpdateInspectacles()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFreeGame:": {
        "prefix": "components.inspectaclesparticipant:IsFreeGame",
        "body": "components.inspectaclesparticipant:IsFreeGame(${1:game})",
        "description": " ※参数: \n   (game)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyCooldown:": {
        "prefix": "components.roseinspectableuser:ApplyCooldown",
        "body": "components.roseinspectableuser:ApplyCooldown(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateBox:": {
        "prefix": "components.inspectaclesparticipant:UpdateBox",
        "body": "components.inspectaclesparticipant:UpdateBox()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnClosePopup:": {
        "prefix": "components.inspectaclesparticipant:OnClosePopup",
        "body": "components.inspectaclesparticipant:OnClosePopup(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSignalPulse:": {
        "prefix": "components.inspectaclesparticipant:OnSignalPulse",
        "body": "components.inspectaclesparticipant:OnSignalPulse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCooldownFinished:": {
        "prefix": "components.inspectaclesparticipant:OnCooldownFinished",
        "body": "components.inspectaclesparticipant:OnCooldownFinished()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckGameSolution:": {
        "prefix": "components.inspectaclesparticipant:CheckGameSolution",
        "body": "components.inspectaclesparticipant:CheckGameSolution(${1:solution})",
        "description": " ※参数: \n   (solution)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateGamePuzzle:": {
        "prefix": "components.inspectaclesparticipant:CalculateGamePuzzle",
        "body": "components.inspectaclesparticipant:CalculateGamePuzzle(${1:gameid},${2:posx},${3:posz})",
        "description": " ※参数: \n   (gameid)<>[] \n   (posx)<>[] \n   (posz)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnInspectaclesGameChanged:": {
        "prefix": "components.inspectaclesparticipant:OnInspectaclesGameChanged",
        "body": "components.inspectaclesparticipant:OnInspectaclesGameChanged(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishCurrentGame:": {
        "prefix": "components.inspectaclesparticipant:FinishCurrentGame",
        "body": "components.inspectaclesparticipant:FinishCurrentGame()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HideCurrentGame:": {
        "prefix": "components.inspectaclesparticipant:HideCurrentGame",
        "body": "components.inspectaclesparticipant:HideCurrentGame()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GrantRewards:": {
        "prefix": "components.inspectaclesparticipant:GrantRewards",
        "body": "components.inspectaclesparticipant:GrantRewards()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CreateNewAndOrShowCurrentGame:": {
        "prefix": "components.inspectaclesparticipant:CreateNewAndOrShowCurrentGame",
        "body": "components.inspectaclesparticipant:CreateNewAndOrShowCurrentGame()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanCreateGameInWorld:": {
        "prefix": "components.inspectaclesparticipant:CanCreateGameInWorld",
        "body": "components.inspectaclesparticipant:CanCreateGameInWorld()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCurrentGame:": {
        "prefix": "components.inspectaclesparticipant:SetCurrentGame",
        "body": "components.inspectaclesparticipant:SetCurrentGame(${1:gameid},${2:posx},${3:posz})",
        "description": " ※参数: \n   (gameid)<>[] \n   (posx)<>[] \n   (posz)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CreateBox:": {
        "prefix": "components.inspectaclesparticipant:CreateBox",
        "body": "components.inspectaclesparticipant:CreateBox()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindGameLocation:": {
        "prefix": "components.inspectaclesparticipant:FindGameLocation",
        "body": "components.inspectaclesparticipant:FindGameLocation(${1:gameid})",
        "description": " ※参数: \n   (gameid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldStopGameInteractions:": {
        "prefix": "components.inspectaclesparticipant:ShouldStopGameInteractions",
        "body": "components.inspectaclesparticipant:ShouldStopGameInteractions()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSERVERDetails:": {
        "prefix": "components.inspectaclesparticipant:GetSERVERDetails",
        "body": "components.inspectaclesparticipant:GetSERVERDetails()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnHeardFn:": {
        "prefix": "components.instrument:SetOnHeardFn",
        "body": "components.instrument:SetOnHeardFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPlayedFn:": {
        "prefix": "components.instrument:SetOnPlayedFn",
        "body": "components.instrument:SetOnPlayedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsType:": {
        "prefix": "components.insulator:IsType",
        "body": "components.insulator:IsType(${1:type})",
        "description": " ※参数: \n   (type)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSummer:": {
        "prefix": "components.insulator:SetSummer",
        "body": "components.insulator:SetSummer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWinter:": {
        "prefix": "components.insulator:SetWinter",
        "body": "components.insulator:SetWinter()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetType:": {
        "prefix": "components.insulator:GetType",
        "body": "components.insulator:GetType()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInsulation:": {
        "prefix": "components.insulator:SetInsulation",
        "body": "components.insulator:SetInsulation(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropEverything:": {
        "prefix": "components.inventory:DropEverything",
        "body": "components.inventory:DropEverything(${1:ondeath},${2:keepequip})",
        "description": " ※参数: \n   (ondeath)<>[] \n   (keepequip)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DisableDropOnDeath:": {
        "prefix": "components.inventory:DisableDropOnDeath",
        "body": "components.inventory:DisableDropOnDeath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Open:": {
        "prefix": "components.inventory:Open",
        "body": "components.inventory:Open()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetActiveItem:": {
        "prefix": "components.inventory:GetActiveItem",
        "body": "components.inventory:GetActiveItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReturnActiveItem:": {
        "prefix": "components.inventory:ReturnActiveItem",
        "body": "components.inventory:ReturnActiveItem(${1:slot},${2:stack_mod})",
        "description": " ※参数: \n   (slot)<>[] \n   (stack_mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InspectItemFromInvTile:": {
        "prefix": "components.inventory:InspectItemFromInvTile",
        "body": "components.inventory:InspectItemFromInvTile(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAccessItem:": {
        "prefix": "components.inventory:CanAccessItem",
        "body": "components.inventory:CanAccessItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItemByName:": {
        "prefix": "components.inventory:GetItemByName",
        "body": "components.inventory:GetItemByName(${1:item},${2:amount},${3:checkallcontainers})",
        "description": " ※参数: \n   (item)<>[] \n   (amount)<>[] \n   (checkallcontainers)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AcceptsStacks:": {
        "prefix": "components.inventory:AcceptsStacks",
        "body": "components.inventory:AcceptsStacks()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropEverythingWithTag:": {
        "prefix": "components.inventory:DropEverythingWithTag",
        "body": "components.inventory:DropEverythingWithTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EquipActiveItem:": {
        "prefix": "components.inventory:EquipActiveItem",
        "body": "components.inventory:EquipActiveItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNextAvailableSlot:": {
        "prefix": "components.inventory:GetNextAvailableSlot",
        "body": "components.inventory:GetNextAvailableSlot(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFirstItemInAnySlot:": {
        "prefix": "components.inventory:GetFirstItemInAnySlot",
        "body": "components.inventory:GetFirstItemInAnySlot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEquippedItem:": {
        "prefix": "components.inventory:GetEquippedItem",
        "body": "components.inventory:GetEquippedItem(${1:eslot})",
        "description": " ※参数: \n   (eslot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsItemEquipped:": {
        "prefix": "components.inventory:IsItemEquipped",
        "body": "components.inventory:IsItemEquipped(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumItems:": {
        "prefix": "components.inventory:NumItems",
        "body": "components.inventory:NumItems()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForEachEquipment:": {
        "prefix": "components.inventory:ForEachEquipment",
        "body": "components.inventory:ForEachEquipment(${1:fn},${2:...})",
        "description": " ※参数: \n   (fn)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeActiveItemFromEquipSlot:": {
        "prefix": "components.inventory:TakeActiveItemFromEquipSlot",
        "body": "components.inventory:TakeActiveItemFromEquipSlot(${1:eslot})",
        "description": " ※参数: \n   (eslot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetActiveItem:": {
        "prefix": "components.inventory:SetActiveItem",
        "body": "components.inventory:SetActiveItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItemInSlot:": {
        "prefix": "components.inventory:GetItemInSlot",
        "body": "components.inventory:GetItemInSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GiveActiveItem:": {
        "prefix": "components.inventory:GiveActiveItem",
        "body": "components.inventory:GiveActiveItem(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindItems:": {
        "prefix": "components.inventory:FindItems",
        "body": "components.inventory:FindItems(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyDamage:": {
        "prefix": "components.saddler:ApplyDamage",
        "body": "components.saddler:ApplyDamage(${1:damage},${2:attacker},${3:weapon},${4:spdamage})",
        "description": " ※参数: \n   (damage)<>[] \n   (attacker)<>[] \n   (weapon)<>[] \n   (spdamage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Has:": {
        "prefix": "components.inventory:Has",
        "body": "components.inventory:Has(${1:item},${2:amount},${3:checkallcontainers})",
        "description": " ※参数: \n   (item)<>[] \n   (amount)<>[] \n   (checkallcontainers)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GiveItem:": {
        "prefix": "components.inventoryitemholder:GiveItem",
        "body": "components.inventoryitemholder:GiveItem(${1:item},${2:giver})",
        "description": " ※参数: \n   (item)<>[] \n   (giver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanTakeItemInSlot:": {
        "prefix": "components.inventory:CanTakeItemInSlot",
        "body": "components.inventory:CanTakeItemInSlot(${1:item},${2:slot})",
        "description": " ※参数: \n   (item)<>[] \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IgnoresCanGoInContainer:": {
        "prefix": "components.inventory:IgnoresCanGoInContainer",
        "body": "components.inventory:IgnoresCanGoInContainer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EquipActionItem:": {
        "prefix": "components.inventory:EquipActionItem",
        "body": "components.inventory:EquipActionItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumStackedItems:": {
        "prefix": "components.inventory:NumStackedItems",
        "body": "components.inventory:NumStackedItems()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ArmorHasTag:": {
        "prefix": "components.inventory:ArmorHasTag",
        "body": "components.inventory:ArmorHasTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOpenContainerProxyFor:": {
        "prefix": "components.inventory:GetOpenContainerProxyFor",
        "body": "components.inventory:GetOpenContainerProxyFor(${1:master})",
        "description": " ※参数: \n   (master)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SwapEquipment:": {
        "prefix": "components.inventory:SwapEquipment",
        "body": "components.inventory:SwapEquipment(${1:other},${2:equipslot_to_swap})",
        "description": " ※参数: \n   (other)<>[] \n   (equipslot_to_swap)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWaterproof:": {
        "prefix": "components.inventory:IsWaterproof",
        "body": "components.inventory:IsWaterproof()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWaterproofness:": {
        "prefix": "components.moisture:GetWaterproofness",
        "body": "components.moisture:GetWaterproofness()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableDropOnDeath:": {
        "prefix": "components.inventory:EnableDropOnDeath",
        "body": "components.inventory:EnableDropOnDeath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TransferInventory:": {
        "prefix": "components.inventory:TransferInventory",
        "body": "components.inventory:TransferInventory(${1:receiver})",
        "description": " ※参数: \n   (receiver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SelectActiveItemFromSlot:": {
        "prefix": "components.inventory:SelectActiveItemFromSlot",
        "body": "components.inventory:SelectActiveItemFromSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropActiveItem:": {
        "prefix": "components.inventory:DropActiveItem",
        "body": "components.inventory:DropActiveItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeActiveItemFromEquipSlotID:": {
        "prefix": "components.inventory:TakeActiveItemFromEquipSlotID",
        "body": "components.inventory:TakeActiveItemFromEquipSlotID(${1:eslotid})",
        "description": " ※参数: \n   (eslotid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SwapEquipWithActiveItem:": {
        "prefix": "components.inventory:SwapEquipWithActiveItem",
        "body": "components.inventory:SwapEquipWithActiveItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EquipHasSpDefenseForType:": {
        "prefix": "components.inventory:EquipHasSpDefenseForType",
        "body": "components.inventory:EquipHasSpDefenseForType(${1:sptype})",
        "description": " ※参数: \n   (sptype)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CastSpellBookFromInv:": {
        "prefix": "components.inventory:CastSpellBookFromInv",
        "body": "components.inventory:CastSpellBookFromInv(${1:item},${2:spell_id})",
        "description": " ※参数: \n   (item)<>[] \n   (spell_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropItemFromInvTile:": {
        "prefix": "components.inventory:DropItemFromInvTile",
        "body": "components.inventory:DropItemFromInvTile(${1:item},${2:single})",
        "description": " ※参数: \n   (item)<>[] \n   (single)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CombineActiveStackWithSlot:": {
        "prefix": "components.inventory:CombineActiveStackWithSlot",
        "body": "components.inventory:CombineActiveStackWithSlot(${1:slot},${2:stack_mod})",
        "description": " ※参数: \n   (slot)<>[] \n   (stack_mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ControllerUseItemOnSelfFromInvTile:": {
        "prefix": "components.inventory:ControllerUseItemOnSelfFromInvTile",
        "body": "components.inventory:ControllerUseItemOnSelfFromInvTile(${1:item},${2:actioncode},${3:mod_name})",
        "description": " ※参数: \n   (item)<>[] \n   (actioncode)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ControllerUseItemOnSceneFromInvTile:": {
        "prefix": "components.inventory:ControllerUseItemOnSceneFromInvTile",
        "body": "components.inventory:ControllerUseItemOnSceneFromInvTile(${1:item},${2:target},${3:actioncode},${4:mod_name})",
        "description": " ※参数: \n   (item)<>[] \n   (target)<>[] \n   (actioncode)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SelectActiveItemFromEquipSlot:": {
        "prefix": "components.inventory:SelectActiveItemFromEquipSlot",
        "body": "components.inventory:SelectActiveItemFromEquipSlot(${1:slot})",
        "description": " ※参数: \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ControllerUseItemOnItemFromInvTile:": {
        "prefix": "components.inventory:ControllerUseItemOnItemFromInvTile",
        "body": "components.inventory:ControllerUseItemOnItemFromInvTile(${1:item},${2:active_item},${3:actioncode},${4:mod_name})",
        "description": " ※参数: \n   (item)<>[] \n   (active_item)<>[] \n   (actioncode)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOverflowContainer:": {
        "prefix": "components.inventory:GetOverflowContainer",
        "body": "components.inventory:GetOverflowContainer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAcceptCount:": {
        "prefix": "components.inventory:CanAcceptCount",
        "body": "components.inventory:CanAcceptCount(${1:item},${2:maxcount})",
        "description": " ※参数: \n   (item)<>[] \n   (maxcount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForEachWetableItem:": {
        "prefix": "components.inventory:ForEachWetableItem",
        "body": "components.inventory:ForEachWetableItem(${1:fn},${2:...})",
        "description": " ※参数: \n   (fn)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CloseAllChestContainers:": {
        "prefix": "components.inventory:CloseAllChestContainers",
        "body": "components.inventory:CloseAllChestContainers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForEachItem:": {
        "prefix": "components.inventory:ForEachItem",
        "body": "components.inventory:ForEachItem(${1:fn},${2:...})",
        "description": " ※参数: \n   (fn)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasAnyEquipment:": {
        "prefix": "components.inventory:HasAnyEquipment",
        "body": "components.inventory:HasAnyEquipment()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ConsumeByName:": {
        "prefix": "components.inventory:ConsumeByName",
        "body": "components.inventory:ConsumeByName(${1:item},${2:amount})",
        "description": " ※参数: \n   (item)<>[] \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Show:": {
        "prefix": "components.inventory:Show",
        "body": "components.inventory:Show()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHolding:": {
        "prefix": "components.inventoryitemholder:IsHolding",
        "body": "components.inventoryitemholder:IsHolding()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Close:": {
        "prefix": "components.inventory:Close",
        "body": "components.inventory:Close(${1:keepactiveitem})",
        "description": " ※参数: \n   (keepactiveitem)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOpenedBy:": {
        "prefix": "components.inventory:IsOpenedBy",
        "body": "components.inventory:IsOpenedBy(${1:guy})",
        "description": " ※参数: \n   (guy)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BurnNonpotatableInContainer:": {
        "prefix": "components.inventory:BurnNonpotatableInContainer",
        "body": "components.inventory:BurnNonpotatableInContainer(${1:container})",
        "description": " ※参数: \n   (container)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropEquipped:": {
        "prefix": "components.inventory:DropEquipped",
        "body": "components.inventory:DropEquipped(${1:keepBackpack})",
        "description": " ※参数: \n   (keepBackpack)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItemsWithTag:": {
        "prefix": "components.inventory:GetItemsWithTag",
        "body": "components.inventory:GetItemsWithTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasItemWithTag:": {
        "prefix": "components.inventory:HasItemWithTag",
        "body": "components.inventory:HasItemWithTag(${1:tag},${2:amount})",
        "description": " ※参数: \n   (tag)<>[] \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasItemThatMatches:": {
        "prefix": "components.inventory:HasItemThatMatches",
        "body": "components.inventory:HasItemThatMatches(${1:fn},${2:amount})",
        "description": " ※参数: \n   (fn)<>[] \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EquipHasTag:": {
        "prefix": "components.inventory:EquipHasTag",
        "body": "components.inventory:EquipHasTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindItem:": {
        "prefix": "components.inventory:FindItem",
        "body": "components.inventory:FindItem(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UseItemFromInvTile:": {
        "prefix": "components.inventory:UseItemFromInvTile",
        "body": "components.inventory:UseItemFromInvTile(${1:item},${2:actioncode},${3:mod_name})",
        "description": " ※参数: \n   (item)<>[] \n   (actioncode)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHeavyLifting:": {
        "prefix": "components.inventory:IsHeavyLifting",
        "body": "components.inventory:IsHeavyLifting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItemSlot:": {
        "prefix": "components.inventory:GetItemSlot",
        "body": "components.inventory:GetItemSlot(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWearingArmor:": {
        "prefix": "components.inventory:IsWearingArmor",
        "body": "components.inventory:IsWearingArmor()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReturnActiveActionItem:": {
        "prefix": "components.inventory:ReturnActiveActionItem",
        "body": "components.inventory:ReturnActiveActionItem(${1:item},${2:instant})",
        "description": " ※参数: \n   (item)<>[] \n   (instant)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEquippedMoistureRate:": {
        "prefix": "components.moisture:GetEquippedMoistureRate",
        "body": "components.moisture:GetEquippedMoistureRate(${1:dryingrate})",
        "description": " ※参数: \n   (dryingrate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnActiveItemFn:": {
        "prefix": "components.inventoryitem:SetOnActiveItemFn",
        "body": "components.inventoryitem:SetOnActiveItemFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HibernateLivingItem:": {
        "prefix": "components.inventoryitem:HibernateLivingItem",
        "body": "components.inventoryitem:HibernateLivingItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSlotNum:": {
        "prefix": "components.inventoryitem:GetSlotNum",
        "body": "components.inventoryitem:GetSlotNum()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPickupFn:": {
        "prefix": "components.inventoryitem:SetOnPickupFn",
        "body": "components.inventoryitem:SetOnPickupFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableMoisture:": {
        "prefix": "components.inventoryitem:EnableMoisture",
        "body": "components.inventoryitem:EnableMoisture(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPutInInventory:": {
        "prefix": "components.inventoryitem:OnPutInInventory",
        "body": "components.inventoryitem:OnPutInInventory(${1:owner})",
        "description": " ※参数: \n   (owner)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DryMoisture:": {
        "prefix": "components.inventoryitem:DryMoisture",
        "body": "components.inventoryitem:DryMoisture()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAcidSizzling:": {
        "prefix": "components.inventoryitem:IsAcidSizzling",
        "body": "components.inventoryitem:IsAcidSizzling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPutInInventoryFn:": {
        "prefix": "components.inventoryitem:SetOnPutInInventoryFn",
        "body": "components.inventoryitem:SetOnPutInInventoryFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InheritWorldWetnessAtTarget:": {
        "prefix": "components.inventoryitem:InheritWorldWetnessAtTarget",
        "body": "components.inventoryitem:InheritWorldWetnessAtTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearOwner:": {
        "prefix": "components.inventoryitem:ClearOwner",
        "body": "components.inventoryitem:ClearOwner()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLanded:": {
        "prefix": "components.inventoryitem:SetLanded",
        "body": "components.inventoryitem:SetLanded(${1:is_landed},${2:should_poll_for_landing})",
        "description": " ※参数: \n   (is_landed)<>[] \n   (should_poll_for_landing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoved:": {
        "prefix": "components.key:OnRemoved",
        "body": "components.key:OnRemoved(${1:lock},${2:doer})",
        "description": " ※参数: \n   (lock)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToSink:": {
        "prefix": "components.inventoryitem:TryToSink",
        "body": "components.inventoryitem:TryToSink()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSheltered:": {
        "prefix": "components.inventoryitem:IsSheltered",
        "body": "components.inventoryitem:IsSheltered()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetGrandOwner:": {
        "prefix": "components.inventoryitem:GetGrandOwner",
        "body": "components.inventoryitem:GetGrandOwner()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWet:": {
        "prefix": "components.moisture:IsWet",
        "body": "components.moisture:IsWet()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WakeLivingItem:": {
        "prefix": "components.inventoryitem:WakeLivingItem",
        "body": "components.inventoryitem:WakeLivingItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldSink:": {
        "prefix": "components.inventoryitem:ShouldSink",
        "body": "components.inventoryitem:ShouldSink()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveFromOwner:": {
        "prefix": "components.upgrademodule:RemoveFromOwner",
        "body": "components.upgrademodule:RemoveFromOwner()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DiluteMoisture:": {
        "prefix": "components.inventoryitemmoisture:DiluteMoisture",
        "body": "components.inventoryitemmoisture:DiluteMoisture(${1:item},${2:count})",
        "description": " ※参数: \n   (item)<>[] \n   (count)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeImageName:": {
        "prefix": "components.inventoryitem:ChangeImageName",
        "body": "components.inventoryitem:ChangeImageName(${1:newname})",
        "description": " ※参数: \n   (newname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMoisture:": {
        "prefix": "components.moisture:GetMoisture",
        "body": "components.moisture:GetMoisture()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHeldBy:": {
        "prefix": "components.inventoryitem:IsHeldBy",
        "body": "components.inventoryitem:IsHeldBy(${1:guy})",
        "description": " ※参数: \n   (guy)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InheritMoisture:": {
        "prefix": "components.inventoryitemmoisture:InheritMoisture",
        "body": "components.inventoryitemmoisture:InheritMoisture(${1:moisture},${2:iswet})",
        "description": " ※参数: \n   (moisture)<>[] \n   (iswet)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSinks:": {
        "prefix": "components.inventoryitem:SetSinks",
        "body": "components.inventoryitem:SetSinks(${1:should_sink})",
        "description": " ※参数: \n   (should_sink)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoDropPhysics:": {
        "prefix": "components.inventoryitem:DoDropPhysics",
        "body": "components.inventoryitem:DoDropPhysics(${1:x},${2:y},${3:z},${4:randomdir},${5:speedmult})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (randomdir)<>[] \n   (speedmult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDroppedFn:": {
        "prefix": "components.inventoryitem:SetOnDroppedFn",
        "body": "components.inventoryitem:SetOnDroppedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHeld:": {
        "prefix": "components.inventoryitem:IsHeld",
        "body": "components.inventoryitem:IsHeld()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InheritWorldWetnessAtXZ:": {
        "prefix": "components.inventoryitem:InheritWorldWetnessAtXZ",
        "body": "components.inventoryitem:InheritWorldWetnessAtXZ(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMoisture:": {
        "prefix": "components.inventoryitem:AddMoisture",
        "body": "components.inventoryitem:AddMoisture(${1:delta})",
        "description": " ※参数: \n   (delta)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnDropped:": {
        "prefix": "components.inventoryitem:OnDropped",
        "body": "components.inventoryitem:OnDropped(${1:randomdir},${2:speedmult})",
        "description": " ※参数: \n   (randomdir)<>[] \n   (speedmult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeMoistureAtLeast:": {
        "prefix": "components.inventoryitemmoisture:MakeMoistureAtLeast",
        "body": "components.inventoryitemmoisture:MakeMoistureAtLeast(${1:min})",
        "description": " ※参数: \n   (min)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanTake:": {
        "prefix": "components.inventoryitemholder:CanTake",
        "body": "components.inventoryitemholder:CanTake(${1:taker})",
        "description": " ※参数: \n   (taker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnItemTakenFn:": {
        "prefix": "components.trophyscale:SetOnItemTakenFn",
        "body": "components.trophyscale:SetOnItemTakenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAllowedTags:": {
        "prefix": "components.inventoryitemholder:SetAllowedTags",
        "body": "components.inventoryitemholder:SetAllowedTags(${1:tags})",
        "description": " ※参数: \n   (tags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanGive:": {
        "prefix": "components.inventoryitemholder:CanGive",
        "body": "components.inventoryitemholder:CanGive(${1:item},${2:giver})",
        "description": " ※参数: \n   (item)<>[] \n   (giver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnItemGivenFn:": {
        "prefix": "components.inventoryitemholder:SetOnItemGivenFn",
        "body": "components.inventoryitemholder:SetOnItemGivenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMoisture:": {
        "prefix": "components.inventoryitemmoisture:SetMoisture",
        "body": "components.inventoryitemmoisture:SetMoisture(${1:moisture})",
        "description": " ※参数: \n   (moisture)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AttachReplica:": {
        "prefix": "components.inventoryitemmoisture:AttachReplica",
        "body": "components.inventoryitemmoisture:AttachReplica(${1:replica})",
        "description": " ※参数: \n   (replica)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMoisture:": {
        "prefix": "components.inventoryitemmoisture:UpdateMoisture",
        "body": "components.inventoryitemmoisture:UpdateMoisture(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTargetMoisture:": {
        "prefix": "components.inventoryitemmoisture:GetTargetMoisture",
        "body": "components.inventoryitemmoisture:GetTargetMoisture()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAffinity:": {
        "prefix": "components.itemaffinity:RemoveAffinity",
        "body": "components.itemaffinity:RemoveAffinity(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshAffinity:": {
        "prefix": "components.itemaffinity:RefreshAffinity",
        "body": "components.itemaffinity:RefreshAffinity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddAffinity:": {
        "prefix": "components.itemaffinity:AddAffinity",
        "body": "components.itemaffinity:AddAffinity(${1:prefab},${2:tag},${3:sanity_bonus},${4:priority})",
        "description": " ※参数: \n   (prefab)<>[] \n   (tag)<>[] \n   (sanity_bonus)<>[] \n   (priority)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SortAffinities:": {
        "prefix": "components.itemaffinity:SortAffinities",
        "body": "components.itemaffinity:SortAffinities()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoWeighIn:": {
        "prefix": "components.itemweigher:DoWeighIn",
        "body": "components.itemweigher:DoWeighIn(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDoWeighInFn:": {
        "prefix": "components.itemweigher:SetOnDoWeighInFn",
        "body": "components.itemweigher:SetOnDoWeighInFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUsedFn:": {
        "prefix": "components.key:SetOnUsedFn",
        "body": "components.key:SetOnUsedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnRemovedFn:": {
        "prefix": "components.petleash:SetOnRemovedFn",
        "body": "components.petleash:SetOnRemovedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveKitcoon:": {
        "prefix": "components.kitcoonden:RemoveKitcoon",
        "body": "components.kitcoonden:RemoveKitcoon(${1:kitcoon})",
        "description": " ※参数: \n   (kitcoon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddKitcoon:": {
        "prefix": "components.kitcoonden:AddKitcoon",
        "body": "components.kitcoonden:AddKitcoon(${1:kitcoon},${2:doer})",
        "description": " ※参数: \n   (kitcoon)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAllKitcoons:": {
        "prefix": "components.kitcoonden:RemoveAllKitcoons",
        "body": "components.kitcoonden:RemoveAllKitcoons()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTrueKey:": {
        "prefix": "components.klaussackkey:SetTrueKey",
        "body": "components.klaussackkey:SetTrueKey(${1:truekey})",
        "description": " ※参数: \n   (truekey)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UseKey:": {
        "prefix": "components.klaussacklock:UseKey",
        "body": "components.klaussacklock:UseKey(${1:key},${2:doer})",
        "description": " ※参数: \n   (key)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUseKey:": {
        "prefix": "components.klaussacklock:SetOnUseKey",
        "body": "components.klaussacklock:SetOnUseKey(${1:onusekeyfn})",
        "description": " ※参数: \n   (onusekeyfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLoot:": {
        "prefix": "components.klaussackloot:GetLoot",
        "body": "components.klaussackloot:GetLoot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RememberLocation:": {
        "prefix": "components.knownlocations:RememberLocation",
        "body": "components.knownlocations:RememberLocation(${1:name},${2:pos},${3:dont_overwrite})",
        "description": " ※参数: \n   (name)<>[] \n   (pos)<>[] \n   (dont_overwrite)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLocation:": {
        "prefix": "components.knownlocations:GetLocation",
        "body": "components.knownlocations:GetLocation(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeserializeLocations:": {
        "prefix": "components.knownlocations:DeserializeLocations",
        "body": "components.knownlocations:DeserializeLocations(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForgetLocation:": {
        "prefix": "components.knownlocations:ForgetLocation",
        "body": "components.knownlocations:ForgetLocation(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SerializeLocations:": {
        "prefix": "components.knownlocations:SerializeLocations",
        "body": "components.knownlocations:SerializeLocations()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumMobs:": {
        "prefix": "components.lavaarenamobtracker:GetNumMobs",
        "body": "components.lavaarenamobtracker:GetNumMobs()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForEachMob:": {
        "prefix": "components.lavaarenamobtracker:ForEachMob",
        "body": "components.lavaarenamobtracker:ForEachMob(${1:cb},${2:params})",
        "description": " ※参数: \n   (cb)<>[] \n   (params)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindMobs:": {
        "prefix": "components.lavaarenamobtracker:FindMobs",
        "body": "components.lavaarenamobtracker:FindMobs(${1:x},${2:y},${3:z},${4:r},${5:musttags},${6:canttags},${7:mustoneoftags})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (r)<>[] \n   (musttags)<>[] \n   (canttags)<>[] \n   (mustoneoftags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAllMobs:": {
        "prefix": "components.lavaarenamobtracker:GetAllMobs",
        "body": "components.lavaarenamobtracker:GetAllMobs()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HaveFollowersCachePlayerLeader:": {
        "prefix": "components.leader:HaveFollowersCachePlayerLeader",
        "body": "components.leader:HaveFollowersCachePlayerLeader()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddFollower:": {
        "prefix": "components.leader:AddFollower",
        "body": "components.leader:AddFollower(${1:follower})",
        "description": " ※参数: \n   (follower)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnAttacked:": {
        "prefix": "components.singinginspiration:OnAttacked",
        "body": "components.singinginspiration:OnAttacked(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAllFollowers:": {
        "prefix": "components.leader:RemoveAllFollowers",
        "body": "components.leader:RemoveAllFollowers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAllFollowersOnDeath:": {
        "prefix": "components.leader:RemoveAllFollowersOnDeath",
        "body": "components.leader:RemoveAllFollowersOnDeath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTargetedByFollowers:": {
        "prefix": "components.leader:IsTargetedByFollowers",
        "body": "components.leader:IsTargetedByFollowers(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFollower:": {
        "prefix": "components.leader:IsFollower",
        "body": "components.leader:IsFollower(${1:guy})",
        "description": " ※参数: \n   (guy)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveFollower:": {
        "prefix": "components.leader:RemoveFollower",
        "body": "components.leader:RemoveFollower(${1:follower},${2:invalid})",
        "description": " ※参数: \n   (follower)<>[] \n   (invalid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBeingFollowedBy:": {
        "prefix": "components.leader:IsBeingFollowedBy",
        "body": "components.leader:IsBeingFollowedBy(${1:prefabName})",
        "description": " ※参数: \n   (prefabName)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveFollowersByTag:": {
        "prefix": "components.leader:RemoveFollowersByTag",
        "body": "components.leader:RemoveFollowersByTag(${1:tag},${2:validateremovefn})",
        "description": " ※参数: \n   (tag)<>[] \n   (validateremovefn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnNewTarget:": {
        "prefix": "components.leader:OnNewTarget",
        "body": "components.leader:OnNewTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CountFollowers:": {
        "prefix": "components.leader:CountFollowers",
        "body": "components.leader:CountFollowers(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLightFn:": {
        "prefix": "components.lighter:SetOnLightFn",
        "body": "components.lighter:SetOnLightFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Light:": {
        "prefix": "components.lighter:Light",
        "body": "components.lighter:Light(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLightningStrike:": {
        "prefix": "components.lightningblocker:SetOnLightningStrike",
        "body": "components.lightningblocker:SetOnLightningStrike(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoLightningStrike:": {
        "prefix": "components.lightningblocker:DoLightningStrike",
        "body": "components.lightningblocker:DoLightningStrike(${1:pos})",
        "description": " ※参数: \n   (pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBlockRange:": {
        "prefix": "components.lightningblocker:SetBlockRange",
        "body": "components.lightningblocker:SetBlockRange(${1:newrange})",
        "description": " ※参数: \n   (newrange)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLockedFn:": {
        "prefix": "components.lock:SetOnLockedFn",
        "body": "components.lock:SetOnLockedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Unlock:": {
        "prefix": "components.lock:Unlock",
        "body": "components.lock:Unlock(${1:key},${2:doer})",
        "description": " ※参数: \n   (key)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsStuck:": {
        "prefix": "components.stuckdetection:IsStuck",
        "body": "components.stuckdetection:IsStuck()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CompatableKey:": {
        "prefix": "components.lock:CompatableKey",
        "body": "components.lock:CompatableKey(${1:keytype})",
        "description": " ※参数: \n   (keytype)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUnlockedFn:": {
        "prefix": "components.lock:SetOnUnlockedFn",
        "body": "components.lock:SetOnUnlockedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestForUnlock:": {
        "prefix": "components.lock:TestForUnlock",
        "body": "components.lock:TestForUnlock(${1:key})",
        "description": " ※参数: \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLocked:": {
        "prefix": "components.lock:SetLocked",
        "body": "components.lock:SetLocked(${1:locked})",
        "description": " ※参数: \n   (locked)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLocked:": {
        "prefix": "components.lock:IsLocked",
        "body": "components.lock:IsLocked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetKey:": {
        "prefix": "components.lock:SetKey",
        "body": "components.lock:SetKey(${1:key})",
        "description": " ※参数: \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopUpdatingInternal:": {
        "prefix": "components.locomotor:StopUpdatingInternal",
        "body": "components.locomotor:StopUpdatingInternal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GoToEntity:": {
        "prefix": "components.locomotor:GoToEntity",
        "body": "components.locomotor:GoToEntity(${1:target},${2:bufferedaction},${3:run})",
        "description": " ※参数: \n   (target)<>[] \n   (bufferedaction)<>[] \n   (run)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAtEdge:": {
        "prefix": "components.locomotor:IsAtEdge",
        "body": "components.locomotor:IsAtEdge(${1:my_platform},${2:map},${3:my_x},${4:my_z},${5:dir_x},${6:dir_z})",
        "description": " ※参数: \n   (my_platform)<>[] \n   (map)<>[] \n   (my_x)<>[] \n   (my_z)<>[] \n   (dir_x)<>[] \n   (dir_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeMoving:": {
        "prefix": "components.locomotor:GetTimeMoving",
        "body": "components.locomotor:GetTimeMoving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPredictExternalSpeedMultiplier:": {
        "prefix": "components.locomotor:SetPredictExternalSpeedMultiplier",
        "body": "components.locomotor:SetPredictExternalSpeedMultiplier(${1:source},${2:key},${3:m})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n   (m)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRunSpeed:": {
        "prefix": "components.locomotor:GetRunSpeed",
        "body": "components.locomotor:GetRunSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartHopping:": {
        "prefix": "components.locomotor:StartHopping",
        "body": "components.locomotor:StartHopping(${1:x},${2:z},${3:target_platform})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n   (target_platform)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartMoveTimerInternal:": {
        "prefix": "components.locomotor:StartMoveTimerInternal",
        "body": "components.locomotor:StartMoveTimerInternal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAllowPlatformHopping:": {
        "prefix": "components.locomotor:SetAllowPlatformHopping",
        "body": "components.locomotor:SetAllowPlatformHopping(${1:enabled})",
        "description": " ※参数: \n   (enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindPath:": {
        "prefix": "components.locomotor:FindPath",
        "body": "components.locomotor:FindPath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WaitingForPathSearch:": {
        "prefix": "components.locomotor:WaitingForPathSearch",
        "body": "components.locomotor:WaitingForPathSearch()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelPredictMoveTimer:": {
        "prefix": "components.locomotor:CancelPredictMoveTimer",
        "body": "components.locomotor:CancelPredictMoveTimer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMotorSpeed:": {
        "prefix": "components.locomotor:SetMotorSpeed",
        "body": "components.locomotor:SetMotorSpeed(${1:speed})",
        "description": " ※参数: \n   (speed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWalkSpeed:": {
        "prefix": "components.locomotor:GetWalkSpeed",
        "body": "components.locomotor:GetWalkSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTerrestrial:": {
        "prefix": "components.locomotor:IsTerrestrial",
        "body": "components.locomotor:IsTerrestrial()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushAction:": {
        "prefix": "components.locomotor:PushAction",
        "body": "components.locomotor:PushAction(${1:bufferedaction},${2:run},${3:try_instant})",
        "description": " ※参数: \n   (bufferedaction)<>[] \n   (run)<>[] \n   (try_instant)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestForBlocked:": {
        "prefix": "components.locomotor:TestForBlocked",
        "body": "components.locomotor:TestForBlocked(${1:my_x},${2:my_z},${3:dir_x},${4:dir_z},${5:radius},${6:test_length})",
        "description": " ※参数: \n   (my_x)<>[] \n   (my_z)<>[] \n   (dir_x)<>[] \n   (dir_z)<>[] \n   (radius)<>[] \n   (test_length)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishHopping:": {
        "prefix": "components.locomotor:FinishHopping",
        "body": "components.locomotor:FinishHopping()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckEdge:": {
        "prefix": "components.tackler:CheckEdge",
        "body": "components.tackler:CheckEdge()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReachDestinationCallback:": {
        "prefix": "components.locomotor:SetReachDestinationCallback",
        "body": "components.locomotor:SetReachDestinationCallback(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WantsToMoveForward:": {
        "prefix": "components.locomotor:WantsToMoveForward",
        "body": "components.locomotor:WantsToMoveForward()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PreviewAction:": {
        "prefix": "components.locomotor:PreviewAction",
        "body": "components.locomotor:PreviewAction(${1:bufferedaction},${2:run},${3:try_instant})",
        "description": " ※参数: \n   (bufferedaction)<>[] \n   (run)<>[] \n   (try_instant)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RunInDirection:": {
        "prefix": "components.locomotor:RunInDirection",
        "body": "components.locomotor:RunInDirection(${1:direction},${2:throttle})",
        "description": " ※参数: \n   (direction)<>[] \n   (throttle)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WalkInDirection:": {
        "prefix": "components.locomotor:WalkInDirection",
        "body": "components.locomotor:WalkInDirection(${1:direction},${2:should_run})",
        "description": " ※参数: \n   (direction)<>[] \n   (should_run)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveExternalSpeedMultiplier:": {
        "prefix": "components.locomotor:RemoveExternalSpeedMultiplier",
        "body": "components.locomotor:RemoveExternalSpeedMultiplier(${1:source},${2:key})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ScanForPlatform:": {
        "prefix": "components.locomotor:ScanForPlatform",
        "body": "components.locomotor:ScanForPlatform(${1:my_platform},${2:target_x},${3:target_z},${4:hop_distance})",
        "description": " ※参数: \n   (my_platform)<>[] \n   (target_x)<>[] \n   (target_z)<>[] \n   (hop_distance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFasterOnGroundTile:": {
        "prefix": "components.locomotor:SetFasterOnGroundTile",
        "body": "components.locomotor:SetFasterOnGroundTile(${1:ground_tile},${2:is_faster})",
        "description": " ※参数: \n   (ground_tile)<>[] \n   (is_faster)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartUpdatingInternal:": {
        "prefix": "components.locomotor:StartUpdatingInternal",
        "body": "components.locomotor:StartUpdatingInternal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableGroundSpeedMultiplier:": {
        "prefix": "components.locomotor:EnableGroundSpeedMultiplier",
        "body": "components.locomotor:EnableGroundSpeedMultiplier(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemovePredictExternalSpeedMultiplier:": {
        "prefix": "components.locomotor:RemovePredictExternalSpeedMultiplier",
        "body": "components.locomotor:RemovePredictExternalSpeedMultiplier(${1:source},${2:key})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetExternalSpeedMultiplier:": {
        "prefix": "components.locomotor:GetExternalSpeedMultiplier",
        "body": "components.locomotor:GetExternalSpeedMultiplier(${1:source},${2:key})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RestartPredictMoveTimer:": {
        "prefix": "components.locomotor:RestartPredictMoveTimer",
        "body": "components.locomotor:RestartPredictMoveTimer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetExternalSpeedMultiplier:": {
        "prefix": "components.locomotor:SetExternalSpeedMultiplier",
        "body": "components.locomotor:SetExternalSpeedMultiplier(${1:source},${2:key},${3:m})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n   (m)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFasterOnCreep:": {
        "prefix": "components.locomotor:SetFasterOnCreep",
        "body": "components.locomotor:SetFasterOnCreep(${1:faster})",
        "description": " ※参数: \n   (faster)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAquatic:": {
        "prefix": "components.locomotor:IsAquatic",
        "body": "components.locomotor:IsAquatic()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopStrafing:": {
        "prefix": "components.locomotor:StopStrafing",
        "body": "components.locomotor:StopStrafing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateHopping:": {
        "prefix": "components.locomotor:UpdateHopping",
        "body": "components.locomotor:UpdateHopping(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSlowMultiplier:": {
        "prefix": "components.locomotor:SetSlowMultiplier",
        "body": "components.locomotor:SetSlowMultiplier(${1:m})",
        "description": " ※参数: \n   (m)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPredictExternalSpeedMultipler:": {
        "prefix": "components.locomotor:GetPredictExternalSpeedMultipler",
        "body": "components.locomotor:GetPredictExternalSpeedMultipler(${1:source},${2:key})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPathfindOnLand:": {
        "prefix": "components.locomotor:CanPathfindOnLand",
        "body": "components.locomotor:CanPathfindOnLand()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ScanForPlatformInDir:": {
        "prefix": "components.locomotor:ScanForPlatformInDir",
        "body": "components.locomotor:ScanForPlatformInDir(${1:my_platform},${2:map},${3:my_x},${4:my_z},${5:dir_x},${6:dir_z},${7:steps},${8:step_size})",
        "description": " ※参数: \n   (my_platform)<>[] \n   (map)<>[] \n   (my_x)<>[] \n   (my_z)<>[] \n   (dir_x)<>[] \n   (dir_z)<>[] \n   (steps)<>[] \n   (step_size)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHopDistance:": {
        "prefix": "components.locomotor:GetHopDistance",
        "body": "components.locomotor:GetHopDistance(${1:speed_mult})",
        "description": " ※参数: \n   (speed_mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopMoveTimerInternal:": {
        "prefix": "components.locomotor:StopMoveTimerInternal",
        "body": "components.locomotor:StopMoveTimerInternal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WantsToRun:": {
        "prefix": "components.locomotor:WantsToRun",
        "body": "components.locomotor:WantsToRun()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldRun:": {
        "prefix": "components.locomotor:SetShouldRun",
        "body": "components.locomotor:SetShouldRun(${1:should_run})",
        "description": " ※参数: \n   (should_run)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushTempGroundSpeedMultiplier:": {
        "prefix": "components.locomotor:PushTempGroundSpeedMultiplier",
        "body": "components.locomotor:PushTempGroundSpeedMultiplier(${1:mult},${2:tile})",
        "description": " ※参数: \n   (mult)<>[] \n   (tile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTriggersCreep:": {
        "prefix": "components.locomotor:SetTriggersCreep",
        "body": "components.locomotor:SetTriggersCreep(${1:triggers})",
        "description": " ※参数: \n   (triggers)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBufferedAction:": {
        "prefix": "components.locomotor:SetBufferedAction",
        "body": "components.locomotor:SetBufferedAction(${1:act})",
        "description": " ※参数: \n   (act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecalculateExternalSpeedMultiplier:": {
        "prefix": "components.locomotor:RecalculateExternalSpeedMultiplier",
        "body": "components.locomotor:RecalculateExternalSpeedMultiplier(${1:sources})",
        "description": " ※参数: \n   (sources)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Clear:": {
        "prefix": "components.locomotor:Clear",
        "body": "components.locomotor:Clear()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TempGroundSpeedMultiplier:": {
        "prefix": "components.locomotor:TempGroundSpeedMultiplier",
        "body": "components.locomotor:TempGroundSpeedMultiplier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.KillPathSearch:": {
        "prefix": "components.locomotor:KillPathSearch",
        "body": "components.locomotor:KillPathSearch()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetPath:": {
        "prefix": "components.locomotor:ResetPath",
        "body": "components.locomotor:ResetPath()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RunForward:": {
        "prefix": "components.locomotor:RunForward",
        "body": "components.locomotor:RunForward(${1:direct})",
        "description": " ※参数: \n   (direct)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WalkForward:": {
        "prefix": "components.locomotor:WalkForward",
        "body": "components.locomotor:WalkForward(${1:direct})",
        "description": " ※参数: \n   (direct)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMoveDir:": {
        "prefix": "components.locomotor:SetMoveDir",
        "body": "components.locomotor:SetMoveDir(${1:dir})",
        "description": " ※参数: \n   (dir)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FaceMovePoint:": {
        "prefix": "components.locomotor:FaceMovePoint",
        "body": "components.locomotor:FaceMovePoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStrafeFacingChanged:": {
        "prefix": "components.locomotor:OnStrafeFacingChanged",
        "body": "components.locomotor:OnStrafeFacingChanged(${1:dir})",
        "description": " ※参数: \n   (dir)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TempGroundTile:": {
        "prefix": "components.locomotor:TempGroundTile",
        "body": "components.locomotor:TempGroundTile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopMoving:": {
        "prefix": "components.locomotor:StopMoving",
        "body": "components.locomotor:StopMoving()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPathfindOnWater:": {
        "prefix": "components.locomotor:CanPathfindOnWater",
        "body": "components.locomotor:CanPathfindOnWater()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartStrafing:": {
        "prefix": "components.locomotor:StartStrafing",
        "body": "components.locomotor:StartStrafing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GoToPoint:": {
        "prefix": "components.locomotor:GoToPoint",
        "body": "components.locomotor:GoToPoint(${1:pt},${2:bufferedaction},${3:run},${4:overridedest})",
        "description": " ※参数: \n   (pt)<>[] \n   (bufferedaction)<>[] \n   (run)<>[] \n   (overridedest)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateGroundSpeedMultiplier:": {
        "prefix": "components.locomotor:UpdateGroundSpeedMultiplier",
        "body": "components.locomotor:UpdateGroundSpeedMultiplier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableHopDelay:": {
        "prefix": "components.locomotor:EnableHopDelay",
        "body": "components.locomotor:EnableHopDelay(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropLoot:": {
        "prefix": "components.lootdropper:DropLoot",
        "body": "components.lootdropper:DropLoot(${1:pt})",
        "description": " ※参数: \n   (pt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FlingItem:": {
        "prefix": "components.lootdropper:FlingItem",
        "body": "components.lootdropper:FlingItem(${1:loot},${2:pt})",
        "description": " ※参数: \n   (loot)<>[] \n   (pt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRandomHauntedLoot:": {
        "prefix": "components.lootdropper:AddRandomHauntedLoot",
        "body": "components.lootdropper:AddRandomHauntedLoot(${1:prefab},${2:weight})",
        "description": " ※参数: \n   (prefab)<>[] \n   (weight)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAllPossibleLoot:": {
        "prefix": "components.lootdropper:GetAllPossibleLoot",
        "body": "components.lootdropper:GetAllPossibleLoot(${1:setuploot})",
        "description": " ※参数: \n   (setuploot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnLootPrefab:": {
        "prefix": "components.lootdropper:SpawnLootPrefab",
        "body": "components.lootdropper:SpawnLootPrefab(${1:lootprefab},${2:pt},${3:linked_skinname},${4:skin_id},${5:userid})",
        "description": " ※参数: \n   (lootprefab)<>[] \n   (pt)<>[] \n   (linked_skinname)<>[] \n   (skin_id)<>[] \n   (userid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearRandomLoot:": {
        "prefix": "components.lootdropper:ClearRandomLoot",
        "body": "components.lootdropper:ClearRandomLoot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFlingTarget:": {
        "prefix": "components.lootdropper:SetFlingTarget",
        "body": "components.lootdropper:SetFlingTarget(${1:pos},${2:variance})",
        "description": " ※参数: \n   (pos)<>[] \n   (variance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFullRecipeLoot:": {
        "prefix": "components.lootdropper:GetFullRecipeLoot",
        "body": "components.lootdropper:GetFullRecipeLoot(${1:recipe})",
        "description": " ※参数: \n   (recipe)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddIfNotChanceLoot:": {
        "prefix": "components.lootdropper:AddIfNotChanceLoot",
        "body": "components.lootdropper:AddIfNotChanceLoot(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLootSetupFn:": {
        "prefix": "components.lootdropper:SetLootSetupFn",
        "body": "components.lootdropper:SetLootSetupFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GenerateLoot:": {
        "prefix": "components.lootdropper:GenerateLoot",
        "body": "components.lootdropper:GenerateLoot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRecipeLoot:": {
        "prefix": "components.lootdropper:GetRecipeLoot",
        "body": "components.lootdropper:GetRecipeLoot(${1:recipe})",
        "description": " ※参数: \n   (recipe)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRandomLoot:": {
        "prefix": "components.lootdropper:AddRandomLoot",
        "body": "components.lootdropper:AddRandomLoot(${1:prefab},${2:weight})",
        "description": " ※参数: \n   (prefab)<>[] \n   (weight)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddChanceLoot:": {
        "prefix": "components.lootdropper:AddChanceLoot",
        "body": "components.lootdropper:AddChanceLoot(${1:prefab},${2:chance})",
        "description": " ※参数: \n   (prefab)<>[] \n   (chance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PickRandomLoot:": {
        "prefix": "components.lootdropper:PickRandomLoot",
        "body": "components.lootdropper:PickRandomLoot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLoot:": {
        "prefix": "components.lootdropper:SetLoot",
        "body": "components.lootdropper:SetLoot(${1:loots})",
        "description": " ※参数: \n   (loots)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRewardGiven:": {
        "prefix": "components.lunarriftmutationsmanager:OnRewardGiven",
        "body": "components.lunarriftmutationsmanager:OnRewardGiven()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshDefeatedMutationsTable:": {
        "prefix": "components.lunarriftmutationsmanager:RefreshDefeatedMutationsTable",
        "body": "components.lunarriftmutationsmanager:RefreshDefeatedMutationsTable()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumDefeatedMutations:": {
        "prefix": "components.lunarriftmutationsmanager:GetNumDefeatedMutations",
        "body": "components.lunarriftmutationsmanager:GetNumDefeatedMutations()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasDefeatedThisMutation:": {
        "prefix": "components.lunarriftmutationsmanager:HasDefeatedThisMutation",
        "body": "components.lunarriftmutationsmanager:HasDefeatedThisMutation(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryMutate:": {
        "prefix": "components.lunarriftmutationsmanager:TryMutate",
        "body": "components.lunarriftmutationsmanager:TryMutate(${1:ent},${2:corpseprefab})",
        "description": " ※参数: \n   (ent)<>[] \n   (corpseprefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TriggerWagstaffAppearance:": {
        "prefix": "components.lunarriftmutationsmanager:TriggerWagstaffAppearance",
        "body": "components.lunarriftmutationsmanager:TriggerWagstaffAppearance(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldGiveReward:": {
        "prefix": "components.lunarriftmutationsmanager:ShouldGiveReward",
        "body": "components.lunarriftmutationsmanager:ShouldGiveReward()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMutationDefeated:": {
        "prefix": "components.lunarriftmutationsmanager:SetMutationDefeated",
        "body": "components.lunarriftmutationsmanager:SetMutationDefeated(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTaskCompleted:": {
        "prefix": "components.lunarriftmutationsmanager:IsTaskCompleted",
        "body": "components.lunarriftmutationsmanager:IsTaskCompleted()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._CanCorpseMutate:": {
        "prefix": "components.lunarriftmutationsmanager:_CanCorpseMutate",
        "body": "components.lunarriftmutationsmanager:_CanCorpseMutate(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWagstaffSpawned:": {
        "prefix": "components.lunarriftmutationsmanager:IsWagstaffSpawned",
        "body": "components.lunarriftmutationsmanager:IsWagstaffSpawned()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasDefeatedAllMutations:": {
        "prefix": "components.lunarriftmutationsmanager:HasDefeatedAllMutations",
        "body": "components.lunarriftmutationsmanager:HasDefeatedAllMutations()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnGestalt:": {
        "prefix": "components.lunarthrall_plantspawner:SpawnGestalt",
        "body": "components.lunarthrall_plantspawner:SpawnGestalt(${1:target},${2:rift})",
        "description": " ※参数: \n   (target)<>[] \n   (rift)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindPlant:": {
        "prefix": "components.lunarthrall_plantspawner:FindPlant",
        "body": "components.lunarthrall_plantspawner:FindPlant()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnPlant:": {
        "prefix": "components.lunarthrall_plantspawner:SpawnPlant",
        "body": "components.lunarthrall_plantspawner:SpawnPlant(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.setHerdsOnPlantable:": {
        "prefix": "components.lunarthrall_plantspawner:setHerdsOnPlantable",
        "body": "components.lunarthrall_plantspawner:setHerdsOnPlantable(${1:plantable})",
        "description": " ※参数: \n   (plantable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveWave:": {
        "prefix": "components.lunarthrall_plantspawner:RemoveWave",
        "body": "components.lunarthrall_plantspawner:RemoveWave()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MoveGestaltToPlant:": {
        "prefix": "components.lunarthrall_plantspawner:MoveGestaltToPlant",
        "body": "components.lunarthrall_plantspawner:MoveGestaltToPlant(${1:thrall})",
        "description": " ※参数: \n   (thrall)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InvadeTarget:": {
        "prefix": "components.lunarthrall_plantspawner:InvadeTarget",
        "body": "components.lunarthrall_plantspawner:InvadeTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindHerd:": {
        "prefix": "components.lunarthrall_plantspawner:FindHerd",
        "body": "components.lunarthrall_plantspawner:FindHerd()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TurnOff:": {
        "prefix": "components.treasuremarked:TurnOff",
        "body": "components.treasuremarked:TurnOff()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGroundOnlyMachine:": {
        "prefix": "components.machine:SetGroundOnlyMachine",
        "body": "components.machine:SetGroundOnlyMachine(${1:groundonly})",
        "description": " ※参数: \n   (groundonly)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanInteract:": {
        "prefix": "components.yotc_racestart:CanInteract",
        "body": "components.yotc_racestart:CanInteract()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOn:": {
        "prefix": "components.machine:IsOn",
        "body": "components.machine:IsOn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TurnOn:": {
        "prefix": "components.treasuremarked:TurnOn",
        "body": "components.treasuremarked:TurnOn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartMakingScience:": {
        "prefix": "components.madsciencelab:StartMakingScience",
        "body": "components.madsciencelab:StartMakingScience(${1:product})",
        "description": " ※参数: \n   (product)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsMakingScience:": {
        "prefix": "components.madsciencelab:IsMakingScience",
        "body": "components.madsciencelab:IsMakingScience()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartUsingTool:": {
        "prefix": "components.magician:StartUsingTool",
        "body": "components.magician:StartUsingTool(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DropToolOnStop:": {
        "prefix": "components.magician:DropToolOnStop",
        "body": "components.magician:DropToolOnStop()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopUsing:": {
        "prefix": "components.magiciantool:StopUsing",
        "body": "components.magiciantool:StopUsing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStopUsing:": {
        "prefix": "components.magiciantool:OnStopUsing",
        "body": "components.magiciantool:OnStopUsing(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartUsingFn:": {
        "prefix": "components.magiciantool:SetOnStartUsingFn",
        "body": "components.magiciantool:SetOnStartUsingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopUsingFn:": {
        "prefix": "components.magiciantool:SetOnStopUsingFn",
        "body": "components.magiciantool:SetOnStopUsingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartUsing:": {
        "prefix": "components.magiciantool:OnStartUsing",
        "body": "components.magiciantool:OnStartUsing(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanTillSoilAtPoint:": {
        "prefix": "components.map:CanTillSoilAtPoint",
        "body": "components.map:CanTillSoilAtPoint(${1:x},${2:y},${3:z},${4:ignore_tile_type})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (ignore_tile_type)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanCastAtPoint:": {
        "prefix": "components.map:CanCastAtPoint",
        "body": "components.map:CanCastAtPoint(${1:pt},${2:alwayspassable},${3:allowwater},${4:deployradius})",
        "description": " ※参数: \n   (pt)<>[] \n   (alwayspassable)<>[] \n   (allowwater)<>[] \n   (deployradius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployAtPoint:": {
        "prefix": "components.map:CanDeployAtPoint",
        "body": "components.map:CanDeployAtPoint(${1:pt},${2:inst},${3:mouseover})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n   (mouseover)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterGroundTargetBlocker:": {
        "prefix": "components.map:RegisterGroundTargetBlocker",
        "body": "components.map:RegisterGroundTargetBlocker(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAboveGroundInSquare:": {
        "prefix": "components.map:IsAboveGroundInSquare",
        "body": "components.map:IsAboveGroundInSquare(${1:x},${2:y},${3:z},${4:r},${5:filterfn})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (r)<>[] \n   (filterfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNearestPointOnWater:": {
        "prefix": "components.map:GetNearestPointOnWater",
        "body": "components.map:GetNearestPointOnWater(${1:x},${2:z},${3:radius},${4:iterations})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n   (radius)<>[] \n   (iterations)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOceanAtPoint:": {
        "prefix": "components.map:IsOceanAtPoint",
        "body": "components.map:IsOceanAtPoint(${1:x},${2:y},${3:z},${4:allow_boats})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (allow_boats)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployWalkablePeripheralAtPoint:": {
        "prefix": "components.map:CanDeployWalkablePeripheralAtPoint",
        "body": "components.map:CanDeployWalkablePeripheralAtPoint(${1:pt},${2:inst})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOceanTileAtPoint:": {
        "prefix": "components.map:IsOceanTileAtPoint",
        "body": "components.map:IsOceanTileAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForBadThingsInOceanArena:": {
        "prefix": "components.map:CheckForBadThingsInOceanArena",
        "body": "components.map:CheckForBadThingsInOceanArena(${1:pt},${2:badthingsatspawnpoints})",
        "description": " ※参数: \n   (pt)<>[] \n   (badthingsatspawnpoints)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartFindingGoodOceanArenaPoints:": {
        "prefix": "components.map:StartFindingGoodOceanArenaPoints",
        "body": "components.map:StartFindingGoodOceanArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InternalIsPointOnWater:": {
        "prefix": "components.map:InternalIsPointOnWater",
        "body": "components.map:InternalIsPointOnWater(${1:test_x},${2:test_y},${3:test_z})",
        "description": " ※参数: \n   (test_x)<>[] \n   (test_y)<>[] \n   (test_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CollapseSoilAtPoint:": {
        "prefix": "components.map:CollapseSoilAtPoint",
        "body": "components.map:CollapseSoilAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDeployPointClear2:": {
        "prefix": "components.map:IsDeployPointClear2",
        "body": "components.map:IsDeployPointClear2(${1:pt},${2:inst},${3:object_size},${4:object_size_fn},${5:near_other_fn},${6:check_player},${7:custom_ignore_tags})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n   (object_size)<>[] \n   (object_size_fn)<>[] \n   (near_other_fn)<>[] \n   (check_player)<>[] \n   (custom_ignore_tags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPlatformAtPoint:": {
        "prefix": "components.map:GetPlatformAtPoint",
        "body": "components.map:GetPlatformAtPoint(${1:pos_x},${2:pos_y},${3:pos_z},${4:extra_radius})",
        "description": " ※参数: \n   (pos_x)<>[] \n   (pos_y)<>[] \n   (pos_z)<>[] \n   (extra_radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPlantAtPoint:": {
        "prefix": "components.map:CanPlantAtPoint",
        "body": "components.map:CanPlantAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterTerraformExtraSpacing:": {
        "prefix": "components.map:RegisterTerraformExtraSpacing",
        "body": "components.map:RegisterTerraformExtraSpacing(${1:spacing})",
        "description": " ※参数: \n   (spacing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartFindingGoodArenaPoints:": {
        "prefix": "components.map:StartFindingGoodArenaPoints",
        "body": "components.map:StartFindingGoodArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployAtPointInWater:": {
        "prefix": "components.map:CanDeployAtPointInWater",
        "body": "components.map:CanDeployAtPointInWater(${1:pt},${2:inst},${3:mouseover},${4:data})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n   (mouseover)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindRandomPointOnLand:": {
        "prefix": "components.map:FindRandomPointOnLand",
        "body": "components.map:FindRandomPointOnLand(${1:max_tries})",
        "description": " ※参数: \n   (max_tries)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTopologyIDAtPoint:": {
        "prefix": "components.map:GetTopologyIDAtPoint",
        "body": "components.map:GetTopologyIDAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsValidTileAtPoint:": {
        "prefix": "components.map:IsValidTileAtPoint",
        "body": "components.map:IsValidTileAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTemporaryTileAtPoint:": {
        "prefix": "components.map:IsTemporaryTileAtPoint",
        "body": "components.map:IsTemporaryTileAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPlaceTurfAtPoint:": {
        "prefix": "components.map:CanPlaceTurfAtPoint",
        "body": "components.map:CanPlaceTurfAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOceanIceAtPoint:": {
        "prefix": "components.map:IsOceanIceAtPoint",
        "body": "components.map:IsOceanIceAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterDeploySmartRadius:": {
        "prefix": "components.map:RegisterDeploySmartRadius",
        "body": "components.map:RegisterDeploySmartRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasAdjacentLandTile:": {
        "prefix": "components.map:HasAdjacentLandTile",
        "body": "components.map:HasAdjacentLandTile(${1:tx},${2:ty})",
        "description": " ※参数: \n   (tx)<>[] \n   (ty)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetGoodOceanArenaPoints:": {
        "prefix": "components.map:GetGoodOceanArenaPoints",
        "body": "components.map:GetGoodOceanArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearGoodOceanArenaPoints:": {
        "prefix": "components.map:ClearGoodOceanArenaPoints",
        "body": "components.map:ClearGoodOceanArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTerraformingBlockedByAnObject:": {
        "prefix": "components.map:IsTerraformingBlockedByAnObject",
        "body": "components.map:IsTerraformingBlockedByAnObject(${1:tile_x},${2:tile_y})",
        "description": " ※参数: \n   (tile_x)<>[] \n   (tile_y)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTileLandNoDocks:": {
        "prefix": "components.map:IsTileLandNoDocks",
        "body": "components.map:IsTileLandNoDocks(${1:tile})",
        "description": " ※参数: \n   (tile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForBadThingsInArena:": {
        "prefix": "components.map:CheckForBadThingsInArena",
        "body": "components.map:CheckForBadThingsInArena(${1:pt},${2:badthingsatspawnpoints})",
        "description": " ※参数: \n   (pt)<>[] \n   (badthingsatspawnpoints)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPassableAtPoint:": {
        "prefix": "components.map:IsPassableAtPoint",
        "body": "components.map:IsPassableAtPoint(${1:x},${2:y},${3:z},${4:allow_water},${5:exclude_boats})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (allow_water)<>[] \n   (exclude_boats)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetGoodArenaPoints:": {
        "prefix": "components.map:GetGoodArenaPoints",
        "body": "components.map:GetGoodArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployRecipeAtPoint:": {
        "prefix": "components.map:CanDeployRecipeAtPoint",
        "body": "components.map:CanDeployRecipeAtPoint(${1:pt},${2:recipe},${3:rot})",
        "description": " ※参数: \n   (pt)<>[] \n   (recipe)<>[] \n   (rot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopFindingGoodOceanArenaPoints:": {
        "prefix": "components.map:StopFindingGoodOceanArenaPoints",
        "body": "components.map:StopFindingGoodOceanArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPlowAtPoint:": {
        "prefix": "components.map:CanPlowAtPoint",
        "body": "components.map:CanPlowAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearGoodArenaPoints:": {
        "prefix": "components.map:ClearGoodArenaPoints",
        "body": "components.map:ClearGoodArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInLunacyArea:": {
        "prefix": "components.map:IsInLunacyArea",
        "body": "components.map:IsInLunacyArea(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployWallAtPoint:": {
        "prefix": "components.map:CanDeployWallAtPoint",
        "body": "components.map:CanDeployWallAtPoint(${1:pt},${2:inst})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployMastAtPoint:": {
        "prefix": "components.map:CanDeployMastAtPoint",
        "body": "components.map:CanDeployMastAtPoint(${1:pt},${2:inst},${3:mouseover})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n   (mouseover)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NodeAtPointHasTag:": {
        "prefix": "components.map:NodeAtPointHasTag",
        "body": "components.map:NodeAtPointHasTag(${1:x},${2:y},${3:z},${4:tag})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSurroundedByWater:": {
        "prefix": "components.map:IsSurroundedByWater",
        "body": "components.map:IsSurroundedByWater(${1:x},${2:y},${3:z},${4:radius})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLandTileAtPoint:": {
        "prefix": "components.map:IsLandTileAtPoint",
        "body": "components.map:IsLandTileAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPointInSharkBoiArena:": {
        "prefix": "components.map:IsPointInSharkBoiArena",
        "body": "components.map:IsPointInSharkBoiArena(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindBestSpawningPointForOceanArena:": {
        "prefix": "components.map:FindBestSpawningPointForOceanArena",
        "body": "components.map:FindBestSpawningPointForOceanArena(${1:CustomAllowTest},${2:perfect_only},${3:spawnpoints})",
        "description": " ※参数: \n   (CustomAllowTest)<>[] \n   (perfect_only)<>[] \n   (spawnpoints)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterDeployExtraSpacing:": {
        "prefix": "components.map:RegisterDeployExtraSpacing",
        "body": "components.map:RegisterDeployExtraSpacing(${1:spacing})",
        "description": " ※参数: \n   (spacing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPlacePrefabFilteredAtPoint:": {
        "prefix": "components.map:CanPlacePrefabFilteredAtPoint",
        "body": "components.map:CanPlacePrefabFilteredAtPoint(${1:x},${2:y},${3:z},${4:prefab})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsGroundTargetBlocked:": {
        "prefix": "components.map:IsGroundTargetBlocked",
        "body": "components.map:IsGroundTargetBlocked(${1:pt},${2:range})",
        "description": " ※参数: \n   (pt)<>[] \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindBestSpawningPointForArena:": {
        "prefix": "components.map:FindBestSpawningPointForArena",
        "body": "components.map:FindBestSpawningPointForArena(${1:CustomAllowTest},${2:perfect_only},${3:spawnpoints})",
        "description": " ※参数: \n   (CustomAllowTest)<>[] \n   (perfect_only)<>[] \n   (spawnpoints)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAboveGroundAtPoint:": {
        "prefix": "components.map:IsAboveGroundAtPoint",
        "body": "components.map:IsAboveGroundAtPoint(${1:x},${2:y},${3:z},${4:allow_water})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (allow_water)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopFindingGoodArenaPoints:": {
        "prefix": "components.map:StopFindingGoodArenaPoints",
        "body": "components.map:StopFindingGoodArenaPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTileOcean:": {
        "prefix": "components.map:IsTileOcean",
        "body": "components.map:IsTileOcean(${1:tile})",
        "description": " ※参数: \n   (tile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRandomPointClustersForNodePrefix:": {
        "prefix": "components.map:GetRandomPointClustersForNodePrefix",
        "body": "components.map:GetRandomPointClustersForNodePrefix(${1:prefixes},${2:countpernode})",
        "description": " ※参数: \n   (prefixes)<>[] \n   (countpernode)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDockAtPoint:": {
        "prefix": "components.map:IsDockAtPoint",
        "body": "components.map:IsDockAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPointHaveAcidRain:": {
        "prefix": "components.map:CanPointHaveAcidRain",
        "body": "components.map:CanPointHaveAcidRain(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployBoatAtPointInWater:": {
        "prefix": "components.map:CanDeployBoatAtPointInWater",
        "body": "components.map:CanDeployBoatAtPointInWater(${1:pt},${2:inst},${3:mouseover},${4:data})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n   (mouseover)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPassableAtPointWithPlatformRadiusBias:": {
        "prefix": "components.map:IsPassableAtPointWithPlatformRadiusBias",
        "body": "components.map:IsPassableAtPointWithPlatformRadiusBias(${1:x},${2:y},${3:z},${4:allow_water},${5:exclude_boats},${6:platform_radius_bias},${7:ignore_land_overhang})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (allow_water)<>[] \n   (exclude_boats)<>[] \n   (platform_radius_bias)<>[] \n   (ignore_land_overhang)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanTerraformAtPoint:": {
        "prefix": "components.map:CanTerraformAtPoint",
        "body": "components.map:CanTerraformAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindRandomPointInOcean:": {
        "prefix": "components.map:FindRandomPointInOcean",
        "body": "components.map:FindRandomPointInOcean(${1:max_tries})",
        "description": " ※参数: \n   (max_tries)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDeployPointClear:": {
        "prefix": "components.map:IsDeployPointClear",
        "body": "components.map:IsDeployPointClear(${1:pt},${2:inst},${3:min_spacing},${4:min_spacing_sq_fn},${5:near_other_fn},${6:check_player},${7:custom_ignore_tags})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n   (min_spacing)<>[] \n   (min_spacing_sq_fn)<>[] \n   (near_other_fn)<>[] \n   (check_player)<>[] \n   (custom_ignore_tags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindRandomPointWithFilter:": {
        "prefix": "components.map:FindRandomPointWithFilter",
        "body": "components.map:FindRandomPointWithFilter(${1:max_tries},${2:filterfn})",
        "description": " ※参数: \n   (max_tries)<>[] \n   (filterfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSurroundedByLand:": {
        "prefix": "components.map:IsSurroundedByLand",
        "body": "components.map:IsSurroundedByLand(${1:x},${2:y},${3:z},${4:radius})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAreaTagsHaveAcidRain:": {
        "prefix": "components.map:CanAreaTagsHaveAcidRain",
        "body": "components.map:CanAreaTagsHaveAcidRain(${1:tags})",
        "description": " ※参数: \n   (tags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPointNearHole:": {
        "prefix": "components.map:IsPointNearHole",
        "body": "components.map:IsPointNearHole(${1:pt},${2:range})",
        "description": " ※参数: \n   (pt)<>[] \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployDockAtPoint:": {
        "prefix": "components.map:CanDeployDockAtPoint",
        "body": "components.map:CanDeployDockAtPoint(${1:pt},${2:inst},${3:mouseover})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n   (mouseover)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindNodeAtPoint:": {
        "prefix": "components.map:FindNodeAtPoint",
        "body": "components.map:FindNodeAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFarmableSoilAtPoint:": {
        "prefix": "components.map:IsFarmableSoilAtPoint",
        "body": "components.map:IsFarmableSoilAtPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDeployPlantAtPoint:": {
        "prefix": "components.map:CanDeployPlantAtPoint",
        "body": "components.map:CanDeployPlantAtPoint(${1:pt},${2:inst})",
        "description": " ※参数: \n   (pt)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTile:": {
        "prefix": "components.map:SetTile",
        "body": "components.map:SetTile(${1:x},${2:y},${3:tile},${4:...})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (tile)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearMap:": {
        "prefix": "components.maprecorder:ClearMap",
        "body": "components.maprecorder:ClearMap()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TeachMap:": {
        "prefix": "components.maprecorder:TeachMap",
        "body": "components.maprecorder:TeachMap(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDataChangedFn:": {
        "prefix": "components.maprecorder:SetOnDataChangedFn",
        "body": "components.maprecorder:SetOnDataChangedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecordMap:": {
        "prefix": "components.maprecorder:RecordMap",
        "body": "components.maprecorder:RecordMap(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCurrentWorld:": {
        "prefix": "components.maprecorder:IsCurrentWorld",
        "body": "components.maprecorder:IsCurrentWorld()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasData:": {
        "prefix": "components.maprecorder:HasData",
        "body": "components.maprecorder:HasData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartRevealing:": {
        "prefix": "components.maprevealable:StartRevealing",
        "body": "components.maprevealable:StartRevealing(${1:restriction})",
        "description": " ※参数: \n   (restriction)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveRevealSource:": {
        "prefix": "components.maprevealable:RemoveRevealSource",
        "body": "components.maprevealable:RemoveRevealSource(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIconPrefab:": {
        "prefix": "components.maprevealable:SetIconPrefab",
        "body": "components.maprevealable:SetIconPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopRevealing:": {
        "prefix": "components.maprevealable:StopRevealing",
        "body": "components.maprevealable:StopRevealing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIconPriority:": {
        "prefix": "components.maprevealable:SetIconPriority",
        "body": "components.maprevealable:SetIconPriority(${1:priority})",
        "description": " ※参数: \n   (priority)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIcon:": {
        "prefix": "components.maprevealable:SetIcon",
        "body": "components.maprevealable:SetIcon(${1:iconname})",
        "description": " ※参数: \n   (iconname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRevealSource:": {
        "prefix": "components.maprevealable:AddRevealSource",
        "body": "components.maprevealable:AddRevealSource(${1:source},${2:restriction})",
        "description": " ※参数: \n   (source)<>[] \n   (restriction)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshRevealSources:": {
        "prefix": "components.maprevealable:RefreshRevealSources",
        "body": "components.maprevealable:RefreshRevealSources()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RevealMapToPlayer:": {
        "prefix": "components.maprevealer:RevealMapToPlayer",
        "body": "components.maprevealer:RevealMapToPlayer(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPreRevealFn:": {
        "prefix": "components.mapspotrevealer:SetPreRevealFn",
        "body": "components.mapspotrevealer:SetPreRevealFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGetTargetFn:": {
        "prefix": "components.mapspotrevealer:SetGetTargetFn",
        "body": "components.mapspotrevealer:SetGetTargetFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RevealMap:": {
        "prefix": "components.mapspotrevealer:RevealMap",
        "body": "components.mapspotrevealer:RevealMap(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.returnid:": {
        "prefix": "components.markable:returnid",
        "body": "components.markable:returnid(${1:id})",
        "description": " ※参数: \n   (id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Mark:": {
        "prefix": "components.markable_proxy:Mark",
        "body": "components.markable_proxy:Mark(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMarkable:": {
        "prefix": "components.markable_proxy:SetMarkable",
        "body": "components.markable_proxy:SetMarkable(${1:markable})",
        "description": " ※参数: \n   (markable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanMark:": {
        "prefix": "components.markable:CanMark",
        "body": "components.markable:CanMark(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasMarked:": {
        "prefix": "components.markable_proxy:HasMarked",
        "body": "components.markable_proxy:HasMarked(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Unmarkall:": {
        "prefix": "components.markable:Unmarkall",
        "body": "components.markable:Unmarkall()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.getid:": {
        "prefix": "components.markable:getid",
        "body": "components.markable:getid()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReveseDeploy:": {
        "prefix": "components.mast:SetReveseDeploy",
        "body": "components.mast:SetReveseDeploy(${1:set})",
        "description": " ※参数: \n   (set)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveSailFurler:": {
        "prefix": "components.mast:RemoveSailFurler",
        "body": "components.mast:RemoveSailFurler(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSailFurler:": {
        "prefix": "components.mast:AddSailFurler",
        "body": "components.mast:AddSailFurler(${1:doer},${2:strength})",
        "description": " ※参数: \n   (doer)<>[] \n   (strength)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SailUnfurled:": {
        "prefix": "components.mast:SailUnfurled",
        "body": "components.mast:SailUnfurled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFurled0to1:": {
        "prefix": "components.mast:GetFurled0to1",
        "body": "components.mast:GetFurled0to1()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRudderDirection:": {
        "prefix": "components.mast:SetRudderDirection",
        "body": "components.mast:SetRudderDirection(${1:rudder_direction_x},${2:rudder_direction_z})",
        "description": " ※参数: \n   (rudder_direction_x)<>[] \n   (rudder_direction_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRudder:": {
        "prefix": "components.mast:SetRudder",
        "body": "components.mast:SetRudder(${1:obj})",
        "description": " ※参数: \n   (obj)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CloseSail:": {
        "prefix": "components.mast:CloseSail",
        "body": "components.mast:CloseSail()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SailFurled:": {
        "prefix": "components.mast:SailFurled",
        "body": "components.mast:SailFurled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcSailForce:": {
        "prefix": "components.mast:CalcSailForce",
        "body": "components.mast:CalcSailForce()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentFurlUnits:": {
        "prefix": "components.mast:GetCurrentFurlUnits",
        "body": "components.mast:GetCurrentFurlUnits()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSailForce:": {
        "prefix": "components.mast:SetSailForce",
        "body": "components.mast:SetSailForce(${1:set})",
        "description": " ※参数: \n   (set)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnfurlSail:": {
        "prefix": "components.mast:UnfurlSail",
        "body": "components.mast:UnfurlSail()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHealthAmount:": {
        "prefix": "components.maxhealer:SetHealthAmount",
        "body": "components.maxhealer:SetHealthAmount(${1:health})",
        "description": " ※参数: \n   (health)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnLight:": {
        "prefix": "components.maxlightspawner:SpawnLight",
        "body": "components.maxlightspawner:SpawnLight(${1:location})",
        "description": " ※参数: \n   (location)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnAllLights:": {
        "prefix": "components.maxlightspawner:SpawnAllLights",
        "body": "components.maxlightspawner:SpawnAllLights()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoTalk:": {
        "prefix": "components.maxwelltalker:DoTalk",
        "body": "components.maxwelltalker:DoTalk()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCancel:": {
        "prefix": "components.maxwelltalker:OnCancel",
        "body": "components.maxwelltalker:OnCancel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTalking:": {
        "prefix": "components.maxwelltalker:StopTalking",
        "body": "components.maxwelltalker:StopTalking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpeech:": {
        "prefix": "components.maxwelltalker:SetSpeech",
        "body": "components.maxwelltalker:SetSpeech(${1:speech})",
        "description": " ※参数: \n   (speech)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTalking:": {
        "prefix": "components.maxwelltalker:IsTalking",
        "body": "components.maxwelltalker:IsTalking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnClick:": {
        "prefix": "components.nis:OnClick",
        "body": "components.nis:OnClick()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldTransform:": {
        "prefix": "components.mermkingmanager:ShouldTransform",
        "body": "components.mermkingmanager:ShouldTransform(${1:merm})",
        "description": " ※参数: \n   (merm)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetCalories:": {
        "prefix": "components.mermcandidate:ResetCalories",
        "body": "components.mermcandidate:ResetCalories()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddCalories:": {
        "prefix": "components.mermcandidate:AddCalories",
        "body": "components.mermcandidate:AddCalories(${1:food})",
        "description": " ※参数: \n   (food)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindMermCandidate:": {
        "prefix": "components.mermkingmanager:FindMermCandidate",
        "body": "components.mermkingmanager:FindMermCandidate(${1:throne})",
        "description": " ※参数: \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetKing:": {
        "prefix": "components.mermkingmanager:GetKing",
        "body": "components.mermkingmanager:GetKing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasPauldronLocal:": {
        "prefix": "components.mermkingmanager:HasPauldronLocal",
        "body": "components.mermkingmanager:HasPauldronLocal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMainThrone:": {
        "prefix": "components.mermkingmanager:GetMainThrone",
        "body": "components.mermkingmanager:GetMainThrone()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CreateMermKing:": {
        "prefix": "components.mermkingmanager:CreateMermKing",
        "body": "components.mermkingmanager:CreateMermKing(${1:candidate},${2:throne})",
        "description": " ※参数: \n   (candidate)<>[] \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasCrownAnywhere:": {
        "prefix": "components.mermkingmanager:HasCrownAnywhere",
        "body": "components.mermkingmanager:HasCrownAnywhere()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasTridentLocal:": {
        "prefix": "components.mermkingmanager:HasTridentLocal",
        "body": "components.mermkingmanager:HasTridentLocal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsThrone:": {
        "prefix": "components.mermkingmanager:IsThrone",
        "body": "components.mermkingmanager:IsThrone(${1:throne})",
        "description": " ※参数: \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasPauldronAnywhere:": {
        "prefix": "components.mermkingmanager:HasPauldronAnywhere",
        "body": "components.mermkingmanager:HasPauldronAnywhere()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnThroneDestroyed:": {
        "prefix": "components.mermkingmanager:OnThroneDestroyed",
        "body": "components.mermkingmanager:OnThroneDestroyed(${1:throne})",
        "description": " ※参数: \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasCrownLocal:": {
        "prefix": "components.mermkingmanager:HasCrownLocal",
        "body": "components.mermkingmanager:HasCrownLocal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetThrone:": {
        "prefix": "components.mermkingmanager:GetThrone",
        "body": "components.mermkingmanager:GetThrone(${1:merm})",
        "description": " ※参数: \n   (merm)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsThroneCandidate:": {
        "prefix": "components.mermkingmanager:IsThroneCandidate",
        "body": "components.mermkingmanager:IsThroneCandidate(${1:merm},${2:throne})",
        "description": " ※参数: \n   (merm)<>[] \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasKingAnywhere:": {
        "prefix": "components.mermkingmanager:HasKingAnywhere",
        "body": "components.mermkingmanager:HasKingAnywhere()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsThroneValid:": {
        "prefix": "components.mermkingmanager:IsThroneValid",
        "body": "components.mermkingmanager:IsThroneValid(${1:throne})",
        "description": " ※参数: \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasKingLocal:": {
        "prefix": "components.mermkingmanager:HasKingLocal",
        "body": "components.mermkingmanager:HasKingLocal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCandidateAtThrone:": {
        "prefix": "components.mermkingmanager:IsCandidateAtThrone",
        "body": "components.mermkingmanager:IsCandidateAtThrone(${1:candidate},${2:throne})",
        "description": " ※参数: \n   (candidate)<>[] \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasKing:": {
        "prefix": "components.mermkingmanager:HasKing",
        "body": "components.mermkingmanager:HasKing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCandidate:": {
        "prefix": "components.mermkingmanager:GetCandidate",
        "body": "components.mermkingmanager:GetCandidate(${1:throne})",
        "description": " ※参数: \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCandidate:": {
        "prefix": "components.mermkingmanager:IsCandidate",
        "body": "components.mermkingmanager:IsCandidate(${1:merm})",
        "description": " ※参数: \n   (merm)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldGoToThrone:": {
        "prefix": "components.mermkingmanager:ShouldGoToThrone",
        "body": "components.mermkingmanager:ShouldGoToThrone(${1:merm},${2:throne})",
        "description": " ※参数: \n   (merm)<>[] \n   (throne)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasTridentAnywhere:": {
        "prefix": "components.mermkingmanager:HasTridentAnywhere",
        "body": "components.mermkingmanager:HasTridentAnywhere()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsShowering:": {
        "prefix": "components.meteorshower:IsShowering",
        "body": "components.meteorshower:IsShowering()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnMeteor:": {
        "prefix": "components.meteorshower:SpawnMeteor",
        "body": "components.meteorshower:SpawnMeteor(${1:mod})",
        "description": " ※参数: \n   (mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartCooldown:": {
        "prefix": "components.meteorshower:StartCooldown",
        "body": "components.meteorshower:StartCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopShower:": {
        "prefix": "components.meteorshower:StopShower",
        "body": "components.meteorshower:StopShower()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCoolingDown:": {
        "prefix": "components.meteorshower:IsCoolingDown",
        "body": "components.meteorshower:IsCoolingDown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartShower:": {
        "prefix": "components.meteorshower:StartShower",
        "body": "components.meteorshower:StartShower(${1:level})",
        "description": " ※参数: \n   (level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInMiasma:": {
        "prefix": "components.miasmawatcher:IsInMiasma",
        "body": "components.miasmawatcher:IsInMiasma()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddMiasmaSource:": {
        "prefix": "components.miasmawatcher:AddMiasmaSource",
        "body": "components.miasmawatcher:AddMiasmaSource(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ToggleMiasma:": {
        "prefix": "components.miasmawatcher:ToggleMiasma",
        "body": "components.miasmawatcher:ToggleMiasma(${1:active})",
        "description": " ※参数: \n   (active)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMiasmaSpeedMultiplier:": {
        "prefix": "components.miasmawatcher:SetMiasmaSpeedMultiplier",
        "body": "components.miasmawatcher:SetMiasmaSpeedMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMiasmaWalkSpeed:": {
        "prefix": "components.miasmawatcher:UpdateMiasmaWalkSpeed",
        "body": "components.miasmawatcher:UpdateMiasmaWalkSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveMiasmaSource:": {
        "prefix": "components.miasmawatcher:RemoveMiasmaSource",
        "body": "components.miasmawatcher:RemoveMiasmaSource(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsMighty:": {
        "prefix": "components.mightiness:IsMighty",
        "body": "components.mightiness:IsMighty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BecomeState:": {
        "prefix": "components.mightiness:BecomeState",
        "body": "components.mightiness:BecomeState(${1:state},${2:silent},${3:delay_skin},${4:forcesound})",
        "description": " ※参数: \n   (state)<>[] \n   (silent)<>[] \n   (delay_skin)<>[] \n   (forcesound)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSkinMode:": {
        "prefix": "components.skinner:GetSkinMode",
        "body": "components.skinner:GetSkinMode()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRateScale:": {
        "prefix": "components.mightiness:SetRateScale",
        "body": "components.mightiness:SetRateScale(${1:ratescale})",
        "description": " ※参数: \n   (ratescale)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DelayDrain:": {
        "prefix": "components.mightiness:DelayDrain",
        "body": "components.mightiness:DelayDrain(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMax:": {
        "prefix": "components.temperature:GetMax",
        "body": "components.temperature:GetMax()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnHungerDelta:": {
        "prefix": "components.mightiness:OnHungerDelta",
        "body": "components.mightiness:OnHungerDelta(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsNormal:": {
        "prefix": "components.mightiness:IsNormal",
        "body": "components.mightiness:IsNormal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanTransform:": {
        "prefix": "components.mightiness:CanTransform",
        "body": "components.mightiness:CanTransform(${1:state})",
        "description": " ※参数: \n   (state)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateSkinMode:": {
        "prefix": "components.mightiness:UpdateSkinMode",
        "body": "components.mightiness:UpdateSkinMode(${1:skin_data},${2:delay})",
        "description": " ※参数: \n   (skin_data)<>[] \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSetInvincible:": {
        "prefix": "components.mightiness:OnSetInvincible",
        "body": "components.mightiness:OnSetInvincible(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrent:": {
        "prefix": "components.temperature:GetCurrent",
        "body": "components.temperature:GetCurrent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetScale:": {
        "prefix": "components.mightiness:GetScale",
        "body": "components.mightiness:GetScale()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOverMax:": {
        "prefix": "components.mightiness:GetOverMax",
        "body": "components.mightiness:GetOverMax()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOverMax:": {
        "prefix": "components.mightiness:SetOverMax",
        "body": "components.mightiness:SetOverMax(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetState:": {
        "prefix": "components.mightiness:GetState",
        "body": "components.mightiness:GetState()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRateScale:": {
        "prefix": "components.sanity:GetRateScale",
        "body": "components.sanity:GetRateScale()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWimpy:": {
        "prefix": "components.mightiness:IsWimpy",
        "body": "components.mightiness:IsWimpy()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckEfficiency:": {
        "prefix": "components.mightydumbbell:CheckEfficiency",
        "body": "components.mightydumbbell:CheckEfficiency(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartWorkout:": {
        "prefix": "components.mightygym:StartWorkout",
        "body": "components.mightygym:StartWorkout(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWorkingOut:": {
        "prefix": "components.mightydumbbell:IsWorkingOut",
        "body": "components.mightydumbbell:IsWorkingOut(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanWorkout:": {
        "prefix": "components.mightygym:CanWorkout",
        "body": "components.mightygym:CanWorkout(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEfficiency:": {
        "prefix": "components.mightydumbbell:SetEfficiency",
        "body": "components.mightydumbbell:SetEfficiency(${1:wimpy},${2:normal},${3:mighty})",
        "description": " ※参数: \n   (wimpy)<>[] \n   (normal)<>[] \n   (mighty)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoWorkout:": {
        "prefix": "components.strongman:DoWorkout",
        "body": "components.strongman:DoWorkout(${1:gym})",
        "description": " ※参数: \n   (gym)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoAttackWorkout:": {
        "prefix": "components.mightydumbbell:DoAttackWorkout",
        "body": "components.mightydumbbell:DoAttackWorkout(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopWorkout:": {
        "prefix": "components.strongman:StopWorkout",
        "body": "components.strongman:StopWorkout()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckAttackEfficiency:": {
        "prefix": "components.mightydumbbell:CheckAttackEfficiency",
        "body": "components.mightydumbbell:CheckAttackEfficiency(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CharacterExitGym:": {
        "prefix": "components.mightygym:CharacterExitGym",
        "body": "components.mightygym:CharacterExitGym(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InUse:": {
        "prefix": "components.sleepingbag:InUse",
        "body": "components.sleepingbag:InUse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSkinModeOnGym:": {
        "prefix": "components.mightygym:SetSkinModeOnGym",
        "body": "components.mightygym:SetSkinModeOnGym(${1:doer},${2:skin_mode})",
        "description": " ※参数: \n   (doer)<>[] \n   (skin_mode)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnloadWeight:": {
        "prefix": "components.mightygym:UnloadWeight",
        "body": "components.mightygym:UnloadWeight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcWeight:": {
        "prefix": "components.mightygym:CalcWeight",
        "body": "components.mightygym:CalcWeight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LoadWeight:": {
        "prefix": "components.mightygym:LoadWeight",
        "body": "components.mightygym:LoadWeight(${1:weight},${2:slot})",
        "description": " ※参数: \n   (weight)<>[] \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWeightSymbol:": {
        "prefix": "components.mightygym:SetWeightSymbol",
        "body": "components.mightygym:SetWeightSymbol(${1:weight},${2:slot})",
        "description": " ※参数: \n   (weight)<>[] \n   (slot)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CharacterEnterGym:": {
        "prefix": "components.mightygym:CharacterEnterGym",
        "body": "components.mightygym:CharacterEnterGym(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SwapWeight:": {
        "prefix": "components.mightygym:SwapWeight",
        "body": "components.mightygym:SwapWeight(${1:item},${2:swapitem})",
        "description": " ※参数: \n   (item)<>[] \n   (swapitem)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateMightiness:": {
        "prefix": "components.mightygym:CalculateMightiness",
        "body": "components.mightygym:CalculateMightiness(${1:perfect})",
        "description": " ※参数: \n   (perfect)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForWeight:": {
        "prefix": "components.mightygym:CheckForWeight",
        "body": "components.mightygym:CheckForWeight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLevelArt:": {
        "prefix": "components.mightygym:SetLevelArt",
        "body": "components.mightygym:SetLevelArt(${1:level},${2:target})",
        "description": " ※参数: \n   (level)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPetFn:": {
        "prefix": "components.migrationpetowner:SetPetFn",
        "body": "components.migrationpetowner:SetPetFn(${1:petfn})",
        "description": " ※参数: \n   (petfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPet:": {
        "prefix": "components.migrationpetowner:GetPet",
        "body": "components.migrationpetowner:GetPet()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Spring:": {
        "prefix": "components.mine:Spring",
        "body": "components.mine:Spring()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTesting:": {
        "prefix": "components.sleeper:StopTesting",
        "body": "components.sleeper:StopTesting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAlignment:": {
        "prefix": "components.mine:SetAlignment",
        "body": "components.mine:SetAlignment(${1:alignment})",
        "description": " ※参数: \n   (alignment)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTestTimeFn:": {
        "prefix": "components.mine:SetTestTimeFn",
        "body": "components.mine:SetTestTimeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTesting:": {
        "prefix": "components.sleeper:StartTesting",
        "body": "components.sleeper:StartTesting(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnResetFn:": {
        "prefix": "components.mine:SetOnResetFn",
        "body": "components.mine:SetOnResetFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Explode:": {
        "prefix": "components.mine:Explode",
        "body": "components.mine:Explode(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReusable:": {
        "prefix": "components.mine:SetReusable",
        "body": "components.mine:SetReusable(${1:reusable})",
        "description": " ※参数: \n   (reusable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnSprungFn:": {
        "prefix": "components.mine:SetOnSprungFn",
        "body": "components.mine:SetOnSprungFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDeactivateFn:": {
        "prefix": "components.mine:SetOnDeactivateFn",
        "body": "components.mine:SetOnDeactivateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSpectator:": {
        "prefix": "components.minigame:AddSpectator",
        "body": "components.minigame:AddSpectator(${1:spectator})",
        "description": " ※参数: \n   (spectator)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoActivePulse:": {
        "prefix": "components.minigame:DoActivePulse",
        "body": "components.minigame:DoActivePulse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnActivatedFn:": {
        "prefix": "components.minigame:SetOnActivatedFn",
        "body": "components.minigame:SetOnActivatedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsIntro:": {
        "prefix": "components.minigame:SetIsIntro",
        "body": "components.minigame:SetIsIntro()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsOutro:": {
        "prefix": "components.minigame:SetIsOutro",
        "body": "components.minigame:SetIsOutro()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIsPlaying:": {
        "prefix": "components.minigame:GetIsPlaying",
        "body": "components.minigame:GetIsPlaying()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsExciting:": {
        "prefix": "components.minigame:IsExciting",
        "body": "components.minigame:IsExciting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIsOutro:": {
        "prefix": "components.minigame:GetIsOutro",
        "body": "components.minigame:GetIsOutro()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecordExcitement:": {
        "prefix": "components.minigame:RecordExcitement",
        "body": "components.minigame:RecordExcitement()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TimeSinceLastExcitement:": {
        "prefix": "components.minigame:TimeSinceLastExcitement",
        "body": "components.minigame:TimeSinceLastExcitement()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsPlaying:": {
        "prefix": "components.minigame:SetIsPlaying",
        "body": "components.minigame:SetIsPlaying()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIsIntro:": {
        "prefix": "components.minigame:GetIsIntro",
        "body": "components.minigame:GetIsIntro()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddParticipator:": {
        "prefix": "components.minigame:AddParticipator",
        "body": "components.minigame:AddParticipator(${1:participator},${2:notimeout})",
        "description": " ※参数: \n   (participator)<>[] \n   (notimeout)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDeactivatedFn:": {
        "prefix": "components.minigame:SetOnDeactivatedFn",
        "body": "components.minigame:SetOnDeactivatedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.KillAllMinions:": {
        "prefix": "components.minionspawner:KillAllMinions",
        "body": "components.minionspawner:KillAllMinions()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnNewMinion:": {
        "prefix": "components.minionspawner:SpawnNewMinion",
        "body": "components.minionspawner:SpawnNewMinion()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpawnInfo:": {
        "prefix": "components.minionspawner:SetSpawnInfo",
        "body": "components.minionspawner:SetSpawnInfo(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckTileCompatibility:": {
        "prefix": "components.minionspawner:CheckTileCompatibility",
        "body": "components.minionspawner:CheckTileCompatibility(${1:tile})",
        "description": " ※参数: \n   (tile)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemovePosition:": {
        "prefix": "components.minionspawner:RemovePosition",
        "body": "components.minionspawner:RemovePosition(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResumeSpawn:": {
        "prefix": "components.minionspawner:ResumeSpawn",
        "body": "components.minionspawner:ResumeSpawn(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MaxedMinions:": {
        "prefix": "components.minionspawner:MaxedMinions",
        "body": "components.minionspawner:MaxedMinions()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeMinion:": {
        "prefix": "components.minionspawner:MakeMinion",
        "body": "components.minionspawner:MakeMinion()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartNextSpawn:": {
        "prefix": "components.minionspawner:StartNextSpawn",
        "body": "components.minionspawner:StartNextSpawn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNextSpawnTime:": {
        "prefix": "components.minionspawner:GetNextSpawnTime",
        "body": "components.minionspawner:GetNextSpawnTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddPosition:": {
        "prefix": "components.minionspawner:AddPosition",
        "body": "components.minionspawner:AddPosition(${1:num},${2:tbl})",
        "description": " ※参数: \n   (num)<>[] \n   (tbl)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLostMinion:": {
        "prefix": "components.minionspawner:OnLostMinion",
        "body": "components.minionspawner:OnLostMinion(${1:minion})",
        "description": " ※参数: \n   (minion)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeSpawnLocations:": {
        "prefix": "components.minionspawner:MakeSpawnLocations",
        "body": "components.minionspawner:MakeSpawnLocations()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpawnLocation:": {
        "prefix": "components.minionspawner:GetSpawnLocation",
        "body": "components.minionspawner:GetSpawnLocation(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWaterproofInventory:": {
        "prefix": "components.moisture:SetWaterproofInventory",
        "body": "components.moisture:SetWaterproofInventory(${1:waterproof})",
        "description": " ※参数: \n   (waterproof)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceDry:": {
        "prefix": "components.moisture:ForceDry",
        "body": "components.moisture:ForceDry(${1:force},${2:source})",
        "description": " ※参数: \n   (force)<>[] \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSegs:": {
        "prefix": "components.moisture:GetSegs",
        "body": "components.moisture:GetSegs()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMoisturePercent:": {
        "prefix": "components.moisture:GetMoisturePercent",
        "body": "components.moisture:GetMoisturePercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDryingRate:": {
        "prefix": "components.moisture:GetDryingRate",
        "body": "components.moisture:GetDryingRate(${1:moisturerate})",
        "description": " ※参数: \n   (moisturerate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AnnounceMoisture:": {
        "prefix": "components.moisture:AnnounceMoisture",
        "body": "components.moisture:AnnounceMoisture(${1:oldSegs},${2:newSegs})",
        "description": " ※参数: \n   (oldSegs)<>[] \n   (newSegs)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRateBonus:": {
        "prefix": "components.moisture:GetRateBonus",
        "body": "components.moisture:GetRateBonus()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWaterproofInventory:": {
        "prefix": "components.moisture:GetWaterproofInventory",
        "body": "components.moisture:GetWaterproofInventory()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveRateBonus:": {
        "prefix": "components.moisture:RemoveRateBonus",
        "body": "components.moisture:RemoveRateBonus(${1:src},${2:key})",
        "description": " ※参数: \n   (src)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRateBonus:": {
        "prefix": "components.moisture:AddRateBonus",
        "body": "components.moisture:AddRateBonus(${1:src},${2:bonus},${3:key})",
        "description": " ※参数: \n   (src)<>[] \n   (bonus)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMoistureLevel:": {
        "prefix": "components.moisture:SetMoistureLevel",
        "body": "components.moisture:SetMoistureLevel(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRate:": {
        "prefix": "components.moisture:GetRate",
        "body": "components.moisture:GetRate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsForceDry:": {
        "prefix": "components.moisture:IsForceDry",
        "body": "components.moisture:IsForceDry()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxMoisture:": {
        "prefix": "components.moisture:GetMaxMoisture",
        "body": "components.moisture:GetMaxMoisture()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInherentWaterproofness:": {
        "prefix": "components.moisture:SetInherentWaterproofness",
        "body": "components.moisture:SetInherentWaterproofness(${1:waterproofness})",
        "description": " ※参数: \n   (waterproofness)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSleepingBagDryingRate:": {
        "prefix": "components.moisture:GetSleepingBagDryingRate",
        "body": "components.moisture:GetSleepingBagDryingRate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveSource_Internal:": {
        "prefix": "components.moistureimmunity:RemoveSource_Internal",
        "body": "components.moistureimmunity:RemoveSource_Internal(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInMood:": {
        "prefix": "components.mood:IsInMood",
        "body": "components.mood:IsInMood()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForMoodChange:": {
        "prefix": "components.mood:CheckForMoodChange",
        "body": "components.mood:CheckForMoodChange()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMoodTimeInDays:": {
        "prefix": "components.mood:SetMoodTimeInDays",
        "body": "components.mood:SetMoodTimeInDays(${1:length},${2:wait},${3:forcemood},${4:worldsettingsmultiplier_inmood},${5:worldsettingsmultiplier_outmood},${6:worldsettingsenabled})",
        "description": " ※参数: \n   (length)<>[] \n   (wait)<>[] \n   (forcemood)<>[] \n   (worldsettingsmultiplier_inmood)<>[] \n   (worldsettingsmultiplier_outmood)<>[] \n   (worldsettingsenabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ValidateMood:": {
        "prefix": "components.mood:ValidateMood",
        "body": "components.mood:ValidateMood()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLeaveMoodFn:": {
        "prefix": "components.mood:SetLeaveMoodFn",
        "body": "components.mood:SetLeaveMoodFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInMoodFn:": {
        "prefix": "components.mood:SetInMoodFn",
        "body": "components.mood:SetInMoodFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetMood:": {
        "prefix": "components.mood:ResetMood",
        "body": "components.mood:ResetMood()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMoodSeason:": {
        "prefix": "components.mood:SetMoodSeason",
        "body": "components.mood:SetMoodSeason(${1:activeseason})",
        "description": " ※参数: \n   (activeseason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EstablishLink:": {
        "prefix": "components.moonaltarlink:EstablishLink",
        "body": "components.moonaltarlink:EstablishLink(${1:altars})",
        "description": " ※参数: \n   (altars)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BreakLink:": {
        "prefix": "components.moonaltarlink:BreakLink",
        "body": "components.moonaltarlink:BreakLink()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryEstablishLink:": {
        "prefix": "components.moonaltarlinktarget:TryEstablishLink",
        "body": "components.moonaltarlinktarget:TryEstablishLink()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeLinked:": {
        "prefix": "components.moonaltarlinktarget:CanBeLinked",
        "body": "components.moonaltarlinktarget:CanBeLinked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForcePetrify:": {
        "prefix": "components.moonbeastspawner:ForcePetrify",
        "body": "components.moonbeastspawner:ForcePetrify()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ToggleMoonstorms:": {
        "prefix": "components.moonstormwatcher:ToggleMoonstorms",
        "body": "components.moonstormwatcher:ToggleMoonstorms(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMoonstormSpeedMultiplier:": {
        "prefix": "components.moonstormwatcher:SetMoonstormSpeedMultiplier",
        "body": "components.moonstormwatcher:SetMoonstormSpeedMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMoonStormLevel:": {
        "prefix": "components.moonstormwatcher:GetMoonStormLevel",
        "body": "components.moonstormwatcher:GetMoonStormLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMoonstormWalkSpeed:": {
        "prefix": "components.moonstormwatcher:UpdateMoonstormWalkSpeed",
        "body": "components.moonstormwatcher:UpdateMoonstormWalkSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMoonstormWalkSpeed_Internal:": {
        "prefix": "components.moonstormwatcher:UpdateMoonstormWalkSpeed_Internal",
        "body": "components.moonstormwatcher:UpdateMoonstormWalkSpeed_Internal(${1:level})",
        "description": " ※参数: \n   (level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMoonstormLevel:": {
        "prefix": "components.moonstormwatcher:UpdateMoonstormLevel",
        "body": "components.moonstormwatcher:UpdateMoonstormLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnAcceptFn:": {
        "prefix": "components.moontrader:SetOnAcceptFn",
        "body": "components.moontrader:SetOnAcceptFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AcceptOffering:": {
        "prefix": "components.moontrader:AcceptOffering",
        "body": "components.moontrader:AcceptOffering(${1:giver},${2:item})",
        "description": " ※参数: \n   (giver)<>[] \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanAcceptFn:": {
        "prefix": "components.moontrader:SetCanAcceptFn",
        "body": "components.moontrader:SetCanAcceptFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetName:": {
        "prefix": "components.nis:SetName",
        "body": "components.nis:SetName(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PickNewName:": {
        "prefix": "components.named:PickNewName",
        "body": "components.named:PickNewName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateNightLightPosition:": {
        "prefix": "components.nightlightmanager:UpdateNightLightPosition",
        "body": "components.nightlightmanager:UpdateNightLightPosition(${1:nightlight})",
        "description": " ※参数: \n   (nightlight)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindClosestNightLightFromListToInst:": {
        "prefix": "components.nightlightmanager:FindClosestNightLightFromListToInst",
        "body": "components.nightlightmanager:FindClosestNightLightFromListToInst(${1:nightlights},${2:inst})",
        "description": " ※参数: \n   (nightlights)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNightLightsWithFilter:": {
        "prefix": "components.nightlightmanager:GetNightLightsWithFilter",
        "body": "components.nightlightmanager:GetNightLightsWithFilter(${1:filterfn},${2:...})",
        "description": " ※参数: \n   (filterfn)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRegisterNightLight:": {
        "prefix": "components.nightlightmanager:OnRegisterNightLight",
        "body": "components.nightlightmanager:OnRegisterNightLight(${1:nightlight})",
        "description": " ※参数: \n   (nightlight)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsNightLightDataInAnyTag:": {
        "prefix": "components.nightlightmanager:IsNightLightDataInAnyTag",
        "body": "components.nightlightmanager:IsNightLightDataInAnyTag(${1:nightlightdata},${2:tags})",
        "description": " ※参数: \n   (nightlightdata)<>[] \n   (tags)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInit:": {
        "prefix": "components.nis:SetInit",
        "body": "components.nis:SetInit(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCancel:": {
        "prefix": "components.nis:SetCancel",
        "body": "components.nis:SetCancel(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnFinish:": {
        "prefix": "components.spell:OnFinish",
        "body": "components.spell:OnFinish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetScript:": {
        "prefix": "components.scenariorunner:SetScript",
        "body": "components.scenariorunner:SetScript(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.resetqueue:": {
        "prefix": "components.npc_talker:resetqueue",
        "body": "components.npc_talker:resetqueue()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Say:": {
        "prefix": "components.talker:Say",
        "body": "components.talker:Say(${1:script},${2:time},${3:noanim},${4:force},${5:nobroadcast},${6:colour},${7:text_filter_context},${8:original_author_netid},${9:onfinishedlinesfn},${10:sgparam})",
        "description": " ※参数: \n   (script)<>[] \n   (time)<>[] \n   (noanim)<>[] \n   (force)<>[] \n   (nobroadcast)<>[] \n   (colour)<>[] \n   (text_filter_context)<>[] \n   (original_author_netid)<>[] \n   (onfinishedlinesfn)<>[] \n   (sgparam)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.haslines:": {
        "prefix": "components.npc_talker:haslines",
        "body": "components.npc_talker:haslines()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Chatter:": {
        "prefix": "components.talker:Chatter",
        "body": "components.talker:Chatter(${1:strtbl},${2:strid},${3:time},${4:forcetext},${5:echotochatpriority})",
        "description": " ※参数: \n   (strtbl)<>[] \n   (strid)<>[] \n   (time)<>[] \n   (forcetext)<>[] \n   (echotochatpriority)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.donextline:": {
        "prefix": "components.npc_talker:donextline",
        "body": "components.npc_talker:donextline()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RowFail:": {
        "prefix": "components.oar:RowFail",
        "body": "components.oar:RowFail(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetProximityLevel:": {
        "prefix": "components.oasis:GetProximityLevel",
        "body": "components.oasis:GetProximityLevel(${1:ent},${2:range})",
        "description": " ※参数: \n   (ent)<>[] \n   (range)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEntityInOasis:": {
        "prefix": "components.oasis:IsEntityInOasis",
        "body": "components.oasis:IsEntityInOasis(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnObject:": {
        "prefix": "components.objectspawner:SpawnObject",
        "body": "components.objectspawner:SpawnObject(${1:obj},${2:linked_skinname},${3:skin_id})",
        "description": " ※参数: \n   (obj)<>[] \n   (linked_skinname)<>[] \n   (skin_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanOccupy:": {
        "prefix": "components.occupiable:CanOccupy",
        "body": "components.occupiable:CanOccupy(${1:occupier})",
        "description": " ※参数: \n   (occupier)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Occupy:": {
        "prefix": "components.occupiable:Occupy",
        "body": "components.occupiable:Occupy(${1:occupier})",
        "description": " ※参数: \n   (occupier)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOccupant:": {
        "prefix": "components.occupiable:GetOccupant",
        "body": "components.occupiable:GetOccupant()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOccupied:": {
        "prefix": "components.spawner:IsOccupied",
        "body": "components.spawner:IsOccupied()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOwner:": {
        "prefix": "components.occupier:GetOwner",
        "body": "components.occupier:GetOwner()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentAngle:": {
        "prefix": "components.ocean:GetCurrentAngle",
        "body": "components.ocean:GetCurrentAngle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentSpeed:": {
        "prefix": "components.ocean:GetCurrentSpeed",
        "body": "components.ocean:GetCurrentSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentVec3:": {
        "prefix": "components.ocean:GetCurrentVec3",
        "body": "components.ocean:GetCurrentVec3()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPhaseChanged:": {
        "prefix": "components.oceancolor:OnPhaseChanged",
        "body": "components.oceancolor:OnPhaseChanged(${1:src},${2:phase})",
        "description": " ※参数: \n   (src)<>[] \n   (phase)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRod:": {
        "prefix": "components.oceanfishable:GetRod",
        "body": "components.oceanfishable:GetRod()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcStruggleDuration:": {
        "prefix": "components.oceanfishable:CalcStruggleDuration",
        "body": "components.oceanfishable:CalcStruggleDuration()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WasEatenByA:": {
        "prefix": "components.oceanfishable:WasEatenByA",
        "body": "components.oceanfishable:WasEatenByA(${1:tunafish})",
        "description": " ※参数: \n   (tunafish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateStruggleState:": {
        "prefix": "components.oceanfishable:UpdateStruggleState",
        "body": "components.oceanfishable:UpdateStruggleState()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnReelingIn:": {
        "prefix": "components.oceanfishable:OnReelingIn",
        "body": "components.oceanfishable:OnReelingIn(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetStruggling:": {
        "prefix": "components.oceanfishable:ResetStruggling",
        "body": "components.oceanfishable:ResetStruggling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcLineUnreelRate:": {
        "prefix": "components.oceanfishable:CalcLineUnreelRate",
        "body": "components.oceanfishable:CalcLineUnreelRate(${1:rod})",
        "description": " ※参数: \n   (rod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeProjectile:": {
        "prefix": "components.oceanfishable:MakeProjectile",
        "body": "components.oceanfishable:MakeProjectile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsStruggling:": {
        "prefix": "components.oceanfishable:IsStruggling",
        "body": "components.oceanfishable:IsStruggling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateRunSpeed:": {
        "prefix": "components.oceanfishable:UpdateRunSpeed",
        "body": "components.oceanfishable:UpdateRunSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcStaminaDrainRate:": {
        "prefix": "components.oceanfishable:CalcStaminaDrainRate",
        "body": "components.oceanfishable:CalcStaminaDrainRate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnReelingInPst:": {
        "prefix": "components.oceanfishable:OnReelingInPst",
        "body": "components.oceanfishable:OnReelingInPst(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StrugglingSetup:": {
        "prefix": "components.oceanfishable:StrugglingSetup",
        "body": "components.oceanfishable:StrugglingSetup(${1:walk_speed},${2:run_speed},${3:stamina_def})",
        "description": " ※参数: \n   (walk_speed)<>[] \n   (run_speed)<>[] \n   (stamina_def)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRod:": {
        "prefix": "components.oceanfishable:SetRod",
        "body": "components.oceanfishable:SetRod(${1:rod})",
        "description": " ※参数: \n   (rod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearLostInterestList:": {
        "prefix": "components.oceanfishinghook:ClearLostInterestList",
        "body": "components.oceanfishinghook:ClearLostInterestList()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._ClacCharm:": {
        "prefix": "components.oceanfishinghook:_ClacCharm",
        "body": "components.oceanfishinghook:_ClacCharm(${1:fish})",
        "description": " ※参数: \n   (fish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasLostInterest:": {
        "prefix": "components.oceanfishinghook:HasLostInterest",
        "body": "components.oceanfishinghook:HasLostInterest(${1:fish})",
        "description": " ※参数: \n   (fish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateInterestForFishable:": {
        "prefix": "components.oceanfishinghook:UpdateInterestForFishable",
        "body": "components.oceanfishinghook:UpdateInterestForFishable(${1:fish})",
        "description": " ※参数: \n   (fish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestInterest:": {
        "prefix": "components.oceanfishinghook:TestInterest",
        "body": "components.oceanfishinghook:TestInterest(${1:fish})",
        "description": " ※参数: \n   (fish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLostInterest:": {
        "prefix": "components.oceanfishinghook:SetLostInterest",
        "body": "components.oceanfishinghook:SetLostInterest(${1:fish})",
        "description": " ※参数: \n   (fish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLureData:": {
        "prefix": "components.oceanfishinghook:SetLureData",
        "body": "components.oceanfishinghook:SetLureData(${1:lure_data},${2:lure_fns})",
        "description": " ※参数: \n   (lure_data)<>[] \n   (lure_fns)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateTensionRating:": {
        "prefix": "components.oceanfishingrod:UpdateTensionRating",
        "body": "components.oceanfishingrod:UpdateTensionRating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._CalcCastDest:": {
        "prefix": "components.oceanfishingrod:_CalcCastDest",
        "body": "components.oceanfishingrod:_CalcCastDest(${1:src_pos},${2:dest_pos})",
        "description": " ※参数: \n   (src_pos)<>[] \n   (dest_pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetExtraStaminaDrain:": {
        "prefix": "components.oceanfishingrod:GetExtraStaminaDrain",
        "body": "components.oceanfishingrod:GetExtraStaminaDrain()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLineTensionGood:": {
        "prefix": "components.oceanfishingrod:IsLineTensionGood",
        "body": "components.oceanfishingrod:IsLineTensionGood()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._LaunchFishProjectile:": {
        "prefix": "components.oceanfishingrod:_LaunchFishProjectile",
        "body": "components.oceanfishingrod:_LaunchFishProjectile(${1:projectile},${2:srcpos},${3:targetpos})",
        "description": " ※参数: \n   (projectile)<>[] \n   (srcpos)<>[] \n   (targetpos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLureData:": {
        "prefix": "components.oceanfishingrod:GetLureData",
        "body": "components.oceanfishingrod:GetLureData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTensionRating:": {
        "prefix": "components.oceanfishingrod:GetTensionRating",
        "body": "components.oceanfishingrod:GetTensionRating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLineTensionLow:": {
        "prefix": "components.oceanfishingrod:IsLineTensionLow",
        "body": "components.oceanfishingrod:IsLineTensionLow()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CatchFish:": {
        "prefix": "components.oceanfishingrod:CatchFish",
        "body": "components.oceanfishingrod:CatchFish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaults:": {
        "prefix": "components.oceanfishingrod:SetDefaults",
        "body": "components.oceanfishingrod:SetDefaults(${1:default_projectile_prefab},${2:default_casting_tuning},${3:default_lure_tuning},${4:default_lure_setup})",
        "description": " ※参数: \n   (default_projectile_prefab)<>[] \n   (default_casting_tuning)<>[] \n   (default_lure_tuning)<>[] \n   (default_lure_setup)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._CacheTackleData:": {
        "prefix": "components.oceanfishingrod:_CacheTackleData",
        "body": "components.oceanfishingrod:_CacheTackleData(${1:bobber},${2:lure})",
        "description": " ※参数: \n   (bobber)<>[] \n   (lure)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcCatchDest:": {
        "prefix": "components.oceanfishingrod:CalcCatchDest",
        "body": "components.oceanfishingrod:CalcCatchDest(${1:src_pos},${2:dest_pos},${3:catch_dist})",
        "description": " ※参数: \n   (src_pos)<>[] \n   (dest_pos)<>[] \n   (catch_dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Cast:": {
        "prefix": "components.oceanfishingrod:Cast",
        "body": "components.oceanfishingrod:Cast(${1:fisher},${2:targetpos})",
        "description": " ※参数: \n   (fisher)<>[] \n   (targetpos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLureFunctions:": {
        "prefix": "components.oceanfishingrod:GetLureFunctions",
        "body": "components.oceanfishingrod:GetLureFunctions()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateClientMaxCastDistance:": {
        "prefix": "components.oceanfishingrod:UpdateClientMaxCastDistance",
        "body": "components.oceanfishingrod:UpdateClientMaxCastDistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLineTensionHigh:": {
        "prefix": "components.oceanfishingrod:IsLineTensionHigh",
        "body": "components.oceanfishingrod:IsLineTensionHigh()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._LaunchCastingProjectile:": {
        "prefix": "components.oceanfishingrod:_LaunchCastingProjectile",
        "body": "components.oceanfishingrod:_LaunchCastingProjectile(${1:source},${2:targetpos},${3:prefab})",
        "description": " ※参数: \n   (source)<>[] \n   (targetpos)<>[] \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetupLure:": {
        "prefix": "components.oceanfishingtackle:SetupLure",
        "body": "components.oceanfishingtackle:SetupLure(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCastingData:": {
        "prefix": "components.oceanfishingtackle:SetCastingData",
        "body": "components.oceanfishingtackle:SetCastingData(${1:data},${2:projectile_prefab})",
        "description": " ※参数: \n   (data)<>[] \n   (projectile_prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSingleUse:": {
        "prefix": "components.oceanfishingtackle:IsSingleUse",
        "body": "components.oceanfishingtackle:IsSingleUse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnAddProjectileFn:": {
        "prefix": "components.oceanthrowable:SetOnAddProjectileFn",
        "body": "components.oceanthrowable:SetOnAddProjectileFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddProjectile:": {
        "prefix": "components.oceanthrowable:AddProjectile",
        "body": "components.oceanthrowable:AddProjectile()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Raise:": {
        "prefix": "components.oceantrawler:Raise",
        "body": "components.oceantrawler:Raise()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Fix:": {
        "prefix": "components.oceantrawler:Fix",
        "body": "components.oceantrawler:Fix()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasCaughtItem:": {
        "prefix": "components.oceantrawler:HasCaughtItem",
        "body": "components.oceantrawler:HasCaughtItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasFishEscaped:": {
        "prefix": "components.oceantrawler:HasFishEscaped",
        "body": "components.oceantrawler:HasFishEscaped()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLowered:": {
        "prefix": "components.oceantrawler:IsLowered",
        "body": "components.oceantrawler:IsLowered()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Lower:": {
        "prefix": "components.oceantrawler:Lower",
        "body": "components.oceantrawler:Lower()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SimulateCatchFish:": {
        "prefix": "components.oceantrawler:SimulateCatchFish",
        "body": "components.oceantrawler:SimulateCatchFish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOceanTrawlerSpawnChanceModifier:": {
        "prefix": "components.oceantrawler:GetOceanTrawlerSpawnChanceModifier",
        "body": "components.oceantrawler:GetOceanTrawlerSpawnChanceModifier(${1:spawnpoint})",
        "description": " ※参数: \n   (spawnpoint)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForMalbatross:": {
        "prefix": "components.oceantrawler:CheckForMalbatross",
        "body": "components.oceantrawler:CheckForMalbatross()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBait:": {
        "prefix": "components.oceantrawler:GetBait",
        "body": "components.oceantrawler:GetBait(${1:eater})",
        "description": " ※参数: \n   (eater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReleaseOverflowFish:": {
        "prefix": "components.oceantrawler:ReleaseOverflowFish",
        "body": "components.oceantrawler:ReleaseOverflowFish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnTakeDamage:": {
        "prefix": "components.oldager:OnTakeDamage",
        "body": "components.oldager:OnTakeDamage(${1:amount},${2:overtime},${3:cause},${4:ignore_invincible},${5:afflicter},${6:ignore_absorb})",
        "description": " ※参数: \n   (amount)<>[] \n   (overtime)<>[] \n   (cause)<>[] \n   (ignore_invincible)<>[] \n   (afflicter)<>[] \n   (ignore_absorb)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddValidHealingCause:": {
        "prefix": "components.oldager:AddValidHealingCause",
        "body": "components.oldager:AddValidHealingCause(${1:cause_name})",
        "description": " ※参数: \n   (cause_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopDamageOverTime:": {
        "prefix": "components.oldager:StopDamageOverTime",
        "body": "components.oldager:StopDamageOverTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentYearPercent:": {
        "prefix": "components.oldager:GetCurrentYearPercent",
        "body": "components.oldager:GetCurrentYearPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnParryFn:": {
        "prefix": "components.parryweapon:SetOnParryFn",
        "body": "components.parryweapon:SetOnParryFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnterParryState:": {
        "prefix": "components.parryweapon:EnterParryState",
        "body": "components.parryweapon:EnterParryState(${1:doer},${2:rot},${3:duration})",
        "description": " ※参数: \n   (doer)<>[] \n   (rot)<>[] \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryParry:": {
        "prefix": "components.parryweapon:TryParry",
        "body": "components.parryweapon:TryParry(${1:doer},${2:attacker},${3:damage},${4:weapon},${5:stimuli})",
        "description": " ※参数: \n   (doer)<>[] \n   (attacker)<>[] \n   (damage)<>[] \n   (weapon)<>[] \n   (stimuli)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPreParryFn:": {
        "prefix": "components.parryweapon:SetOnPreParryFn",
        "body": "components.parryweapon:SetOnPreParryFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPreParry:": {
        "prefix": "components.parryweapon:OnPreParry",
        "body": "components.parryweapon:OnPreParry(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetParryArc:": {
        "prefix": "components.parryweapon:SetParryArc",
        "body": "components.parryweapon:SetParryArc(${1:arc})",
        "description": " ※参数: \n   (arc)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnSpawnFn:": {
        "prefix": "components.petleash:SetOnSpawnFn",
        "body": "components.petleash:SetOnSpawnFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGetSpawnPointFn:": {
        "prefix": "components.periodicspawner:SetGetSpawnPointFn",
        "body": "components.periodicspawner:SetGetSpawnPointFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TrySpawn:": {
        "prefix": "components.periodicspawner:TrySpawn",
        "body": "components.periodicspawner:TrySpawn(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDensityInRange:": {
        "prefix": "components.periodicspawner:SetDensityInRange",
        "body": "components.periodicspawner:SetDensityInRange(${1:range},${2:density})",
        "description": " ※参数: \n   (range)<>[] \n   (density)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnlySpawnOffscreen:": {
        "prefix": "components.spawner:SetOnlySpawnOffscreen",
        "body": "components.spawner:SetOnlySpawnOffscreen(${1:offscreen})",
        "description": " ※参数: \n   (offscreen)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMinimumSpacing:": {
        "prefix": "components.periodicspawner:SetMinimumSpacing",
        "body": "components.periodicspawner:SetMinimumSpacing(${1:spacing})",
        "description": " ※参数: \n   (spacing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SafeStart:": {
        "prefix": "components.periodicspawner:SafeStart",
        "body": "components.periodicspawner:SafeStart(${1:timeoverride})",
        "description": " ※参数: \n   (timeoverride)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpawnTestFn:": {
        "prefix": "components.periodicspawner:SetSpawnTestFn",
        "body": "components.periodicspawner:SetSpawnTestFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoSpawn:": {
        "prefix": "components.periodicspawner:DoSpawn",
        "body": "components.periodicspawner:DoSpawn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRandomTimes:": {
        "prefix": "components.periodicspawner:SetRandomTimes",
        "body": "components.periodicspawner:SetRandomTimes(${1:basetime},${2:variance},${3:no_reset})",
        "description": " ※参数: \n   (basetime)<>[] \n   (variance)<>[] \n   (no_reset)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIgnoreFlotsamGenerator:": {
        "prefix": "components.periodicspawner:SetIgnoreFlotsamGenerator",
        "body": "components.periodicspawner:SetIgnoreFlotsamGenerator(${1:ignores})",
        "description": " ※参数: \n   (ignores)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Perish:": {
        "prefix": "components.perishable:Perish",
        "body": "components.perishable:Perish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddTime:": {
        "prefix": "components.perishable:AddTime",
        "body": "components.perishable:AddTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLocalMultiplier:": {
        "prefix": "components.perishable:SetLocalMultiplier",
        "body": "components.perishable:SetLocalMultiplier(${1:newMult})",
        "description": " ※参数: \n   (newMult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFresh:": {
        "prefix": "components.perishable:IsFresh",
        "body": "components.perishable:IsFresh()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Dilute:": {
        "prefix": "components.perishable:Dilute",
        "body": "components.perishable:Dilute(${1:number},${2:timeleft})",
        "description": " ※参数: \n   (number)<>[] \n   (timeleft)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSpoiled:": {
        "prefix": "components.perishable:IsSpoiled",
        "body": "components.perishable:IsSpoiled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPerishFn:": {
        "prefix": "components.perishable:SetOnPerishFn",
        "body": "components.perishable:SetOnPerishFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartPerishing:": {
        "prefix": "components.perishable:StartPerishing",
        "body": "components.perishable:StartPerishing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPerishing:": {
        "prefix": "components.perishable:IsPerishing",
        "body": "components.perishable:IsPerishing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLocalMultiplier:": {
        "prefix": "components.perishable:GetLocalMultiplier",
        "body": "components.perishable:GetLocalMultiplier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopPerishing:": {
        "prefix": "components.perishable:StopPerishing",
        "body": "components.perishable:StopPerishing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPerishTime:": {
        "prefix": "components.perishable:SetPerishTime",
        "body": "components.perishable:SetPerishTime(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsStale:": {
        "prefix": "components.perishable:IsStale",
        "body": "components.perishable:IsStale()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReducePercent:": {
        "prefix": "components.perishable:ReducePercent",
        "body": "components.perishable:ReducePercent(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNewMaxPerishTime:": {
        "prefix": "components.perishable:SetNewMaxPerishTime",
        "body": "components.perishable:SetNewMaxPerishTime(${1:newtime})",
        "description": " ※参数: \n   (newtime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSymbol:": {
        "prefix": "components.pethealthbar:SetSymbol",
        "body": "components.pethealthbar:SetSymbol(${1:symbol})",
        "description": " ※参数: \n   (symbol)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPulse:": {
        "prefix": "components.pethealthbar:GetPulse",
        "body": "components.pethealthbar:GetPulse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxHealth:": {
        "prefix": "components.pethealthbar:GetMaxHealth",
        "body": "components.pethealthbar:GetMaxHealth()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetPulse:": {
        "prefix": "components.pethealthbar:ResetPulse",
        "body": "components.pethealthbar:ResetPulse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPet:": {
        "prefix": "components.pethealthbar:SetPet",
        "body": "components.pethealthbar:SetPet(${1:pet},${2:symbol},${3:maxhealth})",
        "description": " ※参数: \n   (pet)<>[] \n   (symbol)<>[] \n   (maxhealth)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPetSkin:": {
        "prefix": "components.pethealthbar:SetPetSkin",
        "body": "components.pethealthbar:SetPetSkin(${1:petskin})",
        "description": " ※参数: \n   (petskin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSymbol:": {
        "prefix": "components.pethealthbar:GetSymbol",
        "body": "components.pethealthbar:GetSymbol()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnPetAt:": {
        "prefix": "components.petleash:SpawnPetAt",
        "body": "components.petleash:SpawnPetAt(${1:x},${2:y},${3:z},${4:prefaboverride},${5:skin})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (prefaboverride)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPet:": {
        "prefix": "components.petleash:IsPet",
        "body": "components.petleash:IsPet(${1:pet})",
        "description": " ※参数: \n   (pet)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxPetsForPrefab:": {
        "prefix": "components.petleash:GetMaxPetsForPrefab",
        "body": "components.petleash:GetMaxPetsForPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxPets:": {
        "prefix": "components.petleash:GetMaxPets",
        "body": "components.petleash:GetMaxPets()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumPetsForPrefab:": {
        "prefix": "components.petleash:GetNumPetsForPrefab",
        "body": "components.petleash:GetNumPetsForPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DespawnAllPets:": {
        "prefix": "components.petleash:DespawnAllPets",
        "body": "components.petleash:DespawnAllPets()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFullForPrefab:": {
        "prefix": "components.petleash:IsFullForPrefab",
        "body": "components.petleash:IsFullForPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DespawnPet:": {
        "prefix": "components.petleash:DespawnPet",
        "body": "components.petleash:DespawnPet(${1:pet})",
        "description": " ※参数: \n   (pet)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPetPrefab:": {
        "prefix": "components.petleash:SetPetPrefab",
        "body": "components.petleash:SetPetPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDespawnFn:": {
        "prefix": "components.petleash:SetOnDespawnFn",
        "body": "components.petleash:SetOnDespawnFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPets:": {
        "prefix": "components.petleash:GetPets",
        "body": "components.petleash:GetPets()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasPetWithTag:": {
        "prefix": "components.petleash:HasPetWithTag",
        "body": "components.petleash:HasPetWithTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPetsWithPrefab:": {
        "prefix": "components.petleash:GetPetsWithPrefab",
        "body": "components.petleash:GetPetsWithPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxPetsForPrefab:": {
        "prefix": "components.petleash:SetMaxPetsForPrefab",
        "body": "components.petleash:SetMaxPetsForPrefab(${1:prefab},${2:maxpets})",
        "description": " ※参数: \n   (prefab)<>[] \n   (maxpets)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumPets:": {
        "prefix": "components.petleash:GetNumPets",
        "body": "components.petleash:GetNumPets()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxPets:": {
        "prefix": "components.petleash:SetMaxPets",
        "body": "components.petleash:SetMaxPets(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPetAPrefabLimitedOne:": {
        "prefix": "components.petleash:IsPetAPrefabLimitedOne",
        "body": "components.petleash:IsPetAPrefabLimitedOne(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPetrifiedFn:": {
        "prefix": "components.petrifiable:SetPetrifiedFn",
        "body": "components.petrifiable:SetPetrifiedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPetrified:": {
        "prefix": "components.petrifiable:IsPetrified",
        "body": "components.petrifiable:IsPetrified()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Petrify:": {
        "prefix": "components.petrifiable:Petrify",
        "body": "components.petrifiable:Petrify(${1:immediate})",
        "description": " ※参数: \n   (immediate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMakeEmptyFn:": {
        "prefix": "components.pickable:SetMakeEmptyFn",
        "body": "components.pickable:SetMakeEmptyFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeProduct:": {
        "prefix": "components.pickable:ChangeProduct",
        "body": "components.pickable:ChangeProduct(${1:newProduct})",
        "description": " ※参数: \n   (newProduct)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Pick:": {
        "prefix": "components.pickable:Pick",
        "body": "components.pickable:Pick(${1:picker})",
        "description": " ※参数: \n   (picker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishGrowing:": {
        "prefix": "components.pickable:FinishGrowing",
        "body": "components.pickable:FinishGrowing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnTransplant:": {
        "prefix": "components.pickable:OnTransplant",
        "body": "components.pickable:OnTransplant()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMakeBarrenFn:": {
        "prefix": "components.pickable:SetMakeBarrenFn",
        "body": "components.pickable:SetMakeBarrenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeBarren:": {
        "prefix": "components.pickable:MakeBarren",
        "body": "components.pickable:MakeBarren()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPickedFn:": {
        "prefix": "components.pickable:SetOnPickedFn",
        "body": "components.pickable:SetOnPickedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBePicked:": {
        "prefix": "components.pickable:CanBePicked",
        "body": "components.pickable:CanBePicked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBarren:": {
        "prefix": "components.pickable:IsBarren",
        "body": "components.pickable:IsBarren()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWildfireStarter:": {
        "prefix": "components.pickable:IsWildfireStarter",
        "body": "components.pickable:IsWildfireStarter()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeFertilized:": {
        "prefix": "components.pickable:CanBeFertilized",
        "body": "components.pickable:CanBeFertilized()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ConsumeCycles:": {
        "prefix": "components.pickable:ConsumeCycles",
        "body": "components.pickable:ConsumeCycles(${1:cycles})",
        "description": " ※参数: \n   (cycles)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnRegenFn:": {
        "prefix": "components.pickable:SetOnRegenFn",
        "body": "components.pickable:SetOnRegenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Regen:": {
        "prefix": "components.pickable:Regen",
        "body": "components.pickable:Regen()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Stick:": {
        "prefix": "components.pinnable:Stick",
        "body": "components.pinnable:Stick(${1:goo_build},${2:splashfxlist})",
        "description": " ※参数: \n   (goo_build)<>[] \n   (splashfxlist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Unstick:": {
        "prefix": "components.pinnable:Unstick",
        "body": "components.pinnable:Unstick()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateStuckStatus:": {
        "prefix": "components.pinnable:UpdateStuckStatus",
        "body": "components.pinnable:UpdateStuckStatus()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsValidPinTarget:": {
        "prefix": "components.pinnable:IsValidPinTarget",
        "body": "components.pinnable:IsValidPinTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemainingRatio:": {
        "prefix": "components.pinnable:RemainingRatio",
        "body": "components.pinnable:RemainingRatio()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBuilder:": {
        "prefix": "components.placer:SetBuilder",
        "body": "components.placer:SetBuilder(${1:builder},${2:recipe},${3:invobject})",
        "description": " ※参数: \n   (builder)<>[] \n   (recipe)<>[] \n   (invobject)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LinkEntity:": {
        "prefix": "components.placer:LinkEntity",
        "body": "components.placer:LinkEntity(${1:ent},${2:lightoverride})",
        "description": " ※参数: \n   (ent)<>[] \n   (lightoverride)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDeployAction:": {
        "prefix": "components.placer:GetDeployAction",
        "body": "components.placer:GetDeployAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestCanBuild:": {
        "prefix": "components.placer:TestCanBuild",
        "body": "components.placer:TestCanBuild()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDamage:": {
        "prefix": "components.planardamage:GetDamage",
        "body": "components.planardamage:GetDamage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBaseDamage:": {
        "prefix": "components.planardamage:GetBaseDamage",
        "body": "components.planardamage:GetBaseDamage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBaseDamage:": {
        "prefix": "components.planardamage:SetBaseDamage",
        "body": "components.planardamage:SetBaseDamage(${1:damage})",
        "description": " ※参数: \n   (damage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBaseDefense:": {
        "prefix": "components.planardefense:GetBaseDefense",
        "body": "components.planardefense:GetBaseDefense()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDefense:": {
        "prefix": "components.planardefense:GetDefense",
        "body": "components.planardefense:GetDefense()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBaseDefense:": {
        "prefix": "components.planardefense:SetBaseDefense",
        "body": "components.planardefense:SetBaseDefense(${1:defense})",
        "description": " ※参数: \n   (defense)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPlanarAttackUndefended:": {
        "prefix": "components.planarentity:OnPlanarAttackUndefended",
        "body": "components.planarentity:OnPlanarAttackUndefended(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnResistNonPlanarAttack:": {
        "prefix": "components.planarentity:OnResistNonPlanarAttack",
        "body": "components.planarentity:OnResistNonPlanarAttack(${1:attacker})",
        "description": " ※参数: \n   (attacker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AbsorbDamage:": {
        "prefix": "components.planarentity:AbsorbDamage",
        "body": "components.planarentity:AbsorbDamage(${1:damage},${2:attacker},${3:weapon},${4:spdmg})",
        "description": " ※参数: \n   (damage)<>[] \n   (attacker)<>[] \n   (weapon)<>[] \n   (spdmg)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LearnPlantStage:": {
        "prefix": "components.plantregistryupdater:LearnPlantStage",
        "body": "components.plantregistryupdater:LearnPlantStage(${1:plant},${2:stage})",
        "description": " ※参数: \n   (plant)<>[] \n   (stage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TakeOversizedPicture:": {
        "prefix": "components.plantregistryupdater:TakeOversizedPicture",
        "body": "components.plantregistryupdater:TakeOversizedPicture(${1:plant},${2:weight},${3:beardskin},${4:beardlength})",
        "description": " ※参数: \n   (plant)<>[] \n   (weight)<>[] \n   (beardskin)<>[] \n   (beardlength)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TrySpawnNearby:": {
        "prefix": "components.plantregrowth:TrySpawnNearby",
        "body": "components.plantregrowth:TrySpawnNearby()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSearchTag:": {
        "prefix": "components.plantregrowth:SetSearchTag",
        "body": "components.plantregrowth:SetSearchTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetGrowthTime:": {
        "prefix": "components.plantregrowth:ResetGrowthTime",
        "body": "components.plantregrowth:ResetGrowthTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRegrowthRate:": {
        "prefix": "components.plantregrowth:SetRegrowthRate",
        "body": "components.plantregrowth:SetRegrowthRate(${1:rate})",
        "description": " ※参数: \n   (rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsRandomSeed:": {
        "prefix": "components.plantresearchable:IsRandomSeed",
        "body": "components.plantresearchable:IsRandomSeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LearnPlant:": {
        "prefix": "components.plantresearchable:LearnPlant",
        "body": "components.plantresearchable:LearnPlant(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDelay:": {
        "prefix": "components.platformhopdelay:SetDelay",
        "body": "components.platformhopdelay:SetDelay(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDelayTicks:": {
        "prefix": "components.platformhopdelay:GetDelayTicks",
        "body": "components.platformhopdelay:GetDelayTicks()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDelayTicks:": {
        "prefix": "components.platformhopdelay:SetDelayTicks",
        "body": "components.platformhopdelay:SetDelayTicks(${1:ticks})",
        "description": " ※参数: \n   (ticks)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCurrentAct:": {
        "prefix": "components.playbill:SetCurrentAct",
        "body": "components.playbill:SetCurrentAct(${1:act})",
        "description": " ※参数: \n   (act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChangeAct:": {
        "prefix": "components.playbill_lecturn:ChangeAct",
        "body": "components.playbill_lecturn:ChangeAct(${1:next_act})",
        "description": " ※参数: \n   (next_act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SwapPlayBill:": {
        "prefix": "components.playbill_lecturn:SwapPlayBill",
        "body": "components.playbill_lecturn:SwapPlayBill(${1:playbill},${2:doer})",
        "description": " ※参数: \n   (playbill)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateText:": {
        "prefix": "components.playbill_lecturn:UpdateText",
        "body": "components.playbill_lecturn:UpdateText()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCannonAimActions:": {
        "prefix": "components.playeractionpicker:GetCannonAimActions",
        "body": "components.playeractionpicker:GetCannonAimActions(${1:inst},${2:pos},${3:right})",
        "description": " ※参数: \n   (inst)<>[] \n   (pos)<>[] \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnregisterContainer:": {
        "prefix": "components.playeractionpicker:UnregisterContainer",
        "body": "components.playeractionpicker:UnregisterContainer(${1:container})",
        "description": " ※参数: \n   (container)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEquippedItemActions:": {
        "prefix": "components.playeractionpicker:GetEquippedItemActions",
        "body": "components.playeractionpicker:GetEquippedItemActions(${1:target},${2:useitem},${3:right})",
        "description": " ※参数: \n   (target)<>[] \n   (useitem)<>[] \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRightClickActions:": {
        "prefix": "components.playeractionpicker:GetRightClickActions",
        "body": "components.playeractionpicker:GetRightClickActions(${1:position},${2:target},${3:spellbook})",
        "description": " ※参数: \n   (position)<>[] \n   (target)<>[] \n   (spellbook)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnUpdateActionFilterStack:": {
        "prefix": "components.playeractionpicker:OnUpdateActionFilterStack",
        "body": "components.playeractionpicker:OnUpdateActionFilterStack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoGetMouseActions:": {
        "prefix": "components.playeractionpicker:DoGetMouseActions",
        "body": "components.playeractionpicker:DoGetMouseActions(${1:position},${2:target},${3:spellbook})",
        "description": " ※参数: \n   (position)<>[] \n   (target)<>[] \n   (spellbook)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetUseItemActions:": {
        "prefix": "components.playeractionpicker:GetUseItemActions",
        "body": "components.playeractionpicker:GetUseItemActions(${1:target},${2:useitem},${3:right})",
        "description": " ※参数: \n   (target)<>[] \n   (useitem)<>[] \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasContainerWidgetAction:": {
        "prefix": "components.playeractionpicker:HasContainerWidgetAction",
        "body": "components.playeractionpicker:HasContainerWidgetAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPointActions:": {
        "prefix": "components.playeractionpicker:GetPointActions",
        "body": "components.playeractionpicker:GetPointActions(${1:pos},${2:useitem},${3:right},${4:target})",
        "description": " ※参数: \n   (pos)<>[] \n   (useitem)<>[] \n   (right)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterContainer:": {
        "prefix": "components.playeractionpicker:RegisterContainer",
        "body": "components.playeractionpicker:RegisterContainer(${1:container})",
        "description": " ※参数: \n   (container)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSceneActions:": {
        "prefix": "components.playeractionpicker:GetSceneActions",
        "body": "components.playeractionpicker:GetSceneActions(${1:useitem},${2:right})",
        "description": " ※参数: \n   (useitem)<>[] \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushActionFilter:": {
        "prefix": "components.playeractionpicker:PushActionFilter",
        "body": "components.playeractionpicker:PushActionFilter(${1:filterfn},${2:priority})",
        "description": " ※参数: \n   (filterfn)<>[] \n   (priority)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPointSpecialActions:": {
        "prefix": "components.playeractionpicker:GetPointSpecialActions",
        "body": "components.playeractionpicker:GetPointSpecialActions(${1:pos},${2:useitem},${3:right},${4:usereticulepos})",
        "description": " ※参数: \n   (pos)<>[] \n   (useitem)<>[] \n   (right)<>[] \n   (usereticulepos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLeftClickActions:": {
        "prefix": "components.playeractionpicker:GetLeftClickActions",
        "body": "components.playeractionpicker:GetLeftClickActions(${1:position},${2:target})",
        "description": " ※参数: \n   (position)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSteeringActions:": {
        "prefix": "components.playeractionpicker:GetSteeringActions",
        "body": "components.playeractionpicker:GetSteeringActions(${1:inst},${2:pos},${3:right})",
        "description": " ※参数: \n   (inst)<>[] \n   (pos)<>[] \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopActionFilter:": {
        "prefix": "components.playeractionpicker:PopActionFilter",
        "body": "components.playeractionpicker:PopActionFilter(${1:filterfn})",
        "description": " ※参数: \n   (filterfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetInventoryActions:": {
        "prefix": "components.playeractionpicker:GetInventoryActions",
        "body": "components.playeractionpicker:GetInventoryActions(${1:useitem},${2:right})",
        "description": " ※参数: \n   (useitem)<>[] \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddClothingData:": {
        "prefix": "components.playeravatardata:AddClothingData",
        "body": "components.playeravatardata:AddClothingData(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAllowBurnt:": {
        "prefix": "components.playeravatardata:SetAllowBurnt",
        "body": "components.playeravatardata:SetAllowBurnt(${1:allow})",
        "description": " ※参数: \n   (allow)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddNameData:": {
        "prefix": "components.playeravatardata:AddNameData",
        "body": "components.playeravatardata:AddNameData(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAllowEmptyName:": {
        "prefix": "components.playeravatardata:SetAllowEmptyName",
        "body": "components.playeravatardata:SetAllowEmptyName(${1:allow})",
        "description": " ※参数: \n   (allow)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddPlayerData:": {
        "prefix": "components.playeravatardata:AddPlayerData",
        "body": "components.playeravatardata:AddPlayerData(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetData:": {
        "prefix": "components.symbolswapdata:SetData",
        "body": "components.symbolswapdata:SetData(${1:build},${2:symbol},${3:is_skinned})",
        "description": " ※参数: \n   (build)<>[] \n   (symbol)<>[] \n   (is_skinned)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddBaseSkinData:": {
        "prefix": "components.playeravatardata:AddBaseSkinData",
        "body": "components.playeravatardata:AddBaseSkinData(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddEquipData:": {
        "prefix": "components.playeravatardata:AddEquipData",
        "body": "components.playeravatardata:AddEquipData(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddAgeData:": {
        "prefix": "components.playeravatardata:AddAgeData",
        "body": "components.playeravatardata:AddAgeData(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsControllerTargetingModifierDown:": {
        "prefix": "components.playercontroller:IsControllerTargetingModifierDown",
        "body": "components.playercontroller:IsControllerTargetingModifierDown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteLeftClick:": {
        "prefix": "components.playercontroller:OnRemoteLeftClick",
        "body": "components.playercontroller:OnRemoteLeftClick(${1:actioncode},${2:position},${3:target},${4:isreleased},${5:controlmodscode},${6:noforce},${7:mod_name},${8:spellbook},${9:spell_id})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (position)<>[] \n   (target)<>[] \n   (isreleased)<>[] \n   (controlmodscode)<>[] \n   (noforce)<>[] \n   (mod_name)<>[] \n   (spellbook)<>[] \n   (spell_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RefreshReticule:": {
        "prefix": "components.playercontroller:RefreshReticule",
        "body": "components.playercontroller:RefreshReticule(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanLocomote:": {
        "prefix": "components.playercontroller:CanLocomote",
        "body": "components.playercontroller:CanLocomote()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoActionAutoEquip:": {
        "prefix": "components.playercontroller:DoActionAutoEquip",
        "body": "components.playercontroller:DoActionAutoEquip(${1:buffaction})",
        "description": " ※参数: \n   (buffaction)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ToggleController:": {
        "prefix": "components.playercontroller:ToggleController",
        "body": "components.playercontroller:ToggleController(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteControllerActionButtonDeploy:": {
        "prefix": "components.playercontroller:OnRemoteControllerActionButtonDeploy",
        "body": "components.playercontroller:OnRemoteControllerActionButtonDeploy(${1:invobject},${2:position},${3:rotation},${4:isreleased})",
        "description": " ※参数: \n   (invobject)<>[] \n   (position)<>[] \n   (rotation)<>[] \n   (isreleased)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteMakeRecipeFromMenu:": {
        "prefix": "components.playercontroller:RemoteMakeRecipeFromMenu",
        "body": "components.playercontroller:RemoteMakeRecipeFromMenu(${1:recipe},${2:skin})",
        "description": " ※参数: \n   (recipe)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAnyOfControlsPressed:": {
        "prefix": "components.playercontroller:IsAnyOfControlsPressed",
        "body": "components.playercontroller:IsAnyOfControlsPressed(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EncodeControlMods:": {
        "prefix": "components.playercontroller:EncodeControlMods",
        "body": "components.playercontroller:EncodeControlMods()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoAttackButton:": {
        "prefix": "components.playercontroller:DoAttackButton",
        "body": "components.playercontroller:DoAttackButton(${1:retarget})",
        "description": " ※参数: \n   (retarget)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetGroundUseSpecialAction:": {
        "prefix": "components.playercontroller:GetGroundUseSpecialAction",
        "body": "components.playercontroller:GetGroundUseSpecialAction(${1:position},${2:right})",
        "description": " ※参数: \n   (position)<>[] \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDoingOrWorking:": {
        "prefix": "components.playercontroller:IsDoingOrWorking",
        "body": "components.playercontroller:IsDoingOrWorking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCombatTarget:": {
        "prefix": "components.playercontroller:GetCombatTarget",
        "body": "components.playercontroller:GetCombatTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteInspectButton:": {
        "prefix": "components.playercontroller:OnRemoteInspectButton",
        "body": "components.playercontroller:OnRemoteInspectButton(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetControllerAttackTarget:": {
        "prefix": "components.playercontroller:GetControllerAttackTarget",
        "body": "components.playercontroller:GetControllerAttackTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLocalOrRemoteHopping:": {
        "prefix": "components.playercontroller:IsLocalOrRemoteHopping",
        "body": "components.playercontroller:IsLocalOrRemoteHopping()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsControlPressed:": {
        "prefix": "components.playercontroller:IsControlPressed",
        "body": "components.playercontroller:IsControlPressed(${1:control})",
        "description": " ※参数: \n   (control)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBusy:": {
        "prefix": "components.teleporter:IsBusy",
        "body": "components.teleporter:IsBusy()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoAction:": {
        "prefix": "components.playercontroller:DoAction",
        "body": "components.playercontroller:DoAction(${1:buffaction},${2:spellbook})",
        "description": " ※参数: \n   (buffaction)<>[] \n   (spellbook)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteStopControl:": {
        "prefix": "components.playercontroller:RemoteStopControl",
        "body": "components.playercontroller:RemoteStopControl(${1:control})",
        "description": " ※参数: \n   (control)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DecodeControlMods:": {
        "prefix": "components.playercontroller:DecodeControlMods",
        "body": "components.playercontroller:DecodeControlMods(${1:code})",
        "description": " ※参数: \n   (code)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableMapControls:": {
        "prefix": "components.playercontroller:EnableMapControls",
        "body": "components.playercontroller:EnableMapControls(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemotePausePrediction:": {
        "prefix": "components.playercontroller:RemotePausePrediction",
        "body": "components.playercontroller:RemotePausePrediction(${1:frames})",
        "description": " ※参数: \n   (frames)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAOETargeting:": {
        "prefix": "components.playercontroller:IsAOETargeting",
        "body": "components.playercontroller:IsAOETargeting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteControllerAttackButton:": {
        "prefix": "components.playercontroller:OnRemoteControllerAttackButton",
        "body": "components.playercontroller:OnRemoteControllerAttackButton(${1:target},${2:isreleased},${3:noforce})",
        "description": " ※参数: \n   (target)<>[] \n   (isreleased)<>[] \n   (noforce)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteDropItemFromInvTile:": {
        "prefix": "components.playercontroller:RemoteDropItemFromInvTile",
        "body": "components.playercontroller:RemoteDropItemFromInvTile(${1:item},${2:single})",
        "description": " ※参数: \n   (item)<>[] \n   (single)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteAttackButton:": {
        "prefix": "components.playercontroller:RemoteAttackButton",
        "body": "components.playercontroller:RemoteAttackButton(${1:target},${2:force_attack})",
        "description": " ※参数: \n   (target)<>[] \n   (force_attack)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHoverTextOverride:": {
        "prefix": "components.playercontroller:GetHoverTextOverride",
        "body": "components.playercontroller:GetHoverTextOverride()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemotePredictWalking:": {
        "prefix": "components.playercontroller:OnRemotePredictWalking",
        "body": "components.playercontroller:OnRemotePredictWalking(${1:x},${2:z},${3:isdirectwalking},${4:isstart})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n   (isdirectwalking)<>[] \n   (isstart)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRemoteDragPosition:": {
        "prefix": "components.playercontroller:GetRemoteDragPosition",
        "body": "components.playercontroller:GetRemoteDragPosition()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteControllerActionButtonPoint:": {
        "prefix": "components.playercontroller:OnRemoteControllerActionButtonPoint",
        "body": "components.playercontroller:OnRemoteControllerActionButtonPoint(${1:actioncode},${2:position},${3:isreleased},${4:noforce},${5:mod_name},${6:isspecial},${7:spellbook},${8:spell_id})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (position)<>[] \n   (isreleased)<>[] \n   (noforce)<>[] \n   (mod_name)<>[] \n   (isspecial)<>[] \n   (spellbook)<>[] \n   (spell_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemotePredictOverrideLocomote:": {
        "prefix": "components.playercontroller:RemotePredictOverrideLocomote",
        "body": "components.playercontroller:RemotePredictOverrideLocomote()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoInspectButton:": {
        "prefix": "components.playercontroller:DoInspectButton",
        "body": "components.playercontroller:DoInspectButton()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteAttackButton:": {
        "prefix": "components.playercontroller:OnRemoteAttackButton",
        "body": "components.playercontroller:OnRemoteAttackButton(${1:target},${2:force_attack},${3:noforce})",
        "description": " ※参数: \n   (target)<>[] \n   (force_attack)<>[] \n   (noforce)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteControllerAltActionButton:": {
        "prefix": "components.playercontroller:OnRemoteControllerAltActionButton",
        "body": "components.playercontroller:OnRemoteControllerAltActionButton(${1:actioncode},${2:target},${3:isreleased},${4:noforce},${5:mod_name})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (target)<>[] \n   (isreleased)<>[] \n   (noforce)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearActionHold:": {
        "prefix": "components.playercontroller:ClearActionHold",
        "body": "components.playercontroller:ClearActionHold()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearControlMods:": {
        "prefix": "components.playercontroller:ClearControlMods",
        "body": "components.playercontroller:ClearControlMods()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAttackTarget:": {
        "prefix": "components.playercontroller:GetAttackTarget",
        "body": "components.playercontroller:GetAttackTarget(${1:force_attack},${2:force_target},${3:isretarget},${4:use_remote_predict})",
        "description": " ※参数: \n   (force_attack)<>[] \n   (force_target)<>[] \n   (isretarget)<>[] \n   (use_remote_predict)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetActiveSpellBook:": {
        "prefix": "components.playercontroller:GetActiveSpellBook",
        "body": "components.playercontroller:GetActiveSpellBook()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsMapControlsEnabled:": {
        "prefix": "components.playercontroller:IsMapControlsEnabled",
        "body": "components.playercontroller:IsMapControlsEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoResurrectButton:": {
        "prefix": "components.playercontroller:DoResurrectButton",
        "body": "components.playercontroller:DoResurrectButton()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnMapAction:": {
        "prefix": "components.playercontroller:OnMapAction",
        "body": "components.playercontroller:OnMapAction(${1:actioncode},${2:position},${3:maptarget})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (position)<>[] \n   (maptarget)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRightClick:": {
        "prefix": "components.playercontroller:OnRightClick",
        "body": "components.playercontroller:OnRightClick(${1:down})",
        "description": " ※参数: \n   (down)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSceneItemControllerAction:": {
        "prefix": "components.playercontroller:GetSceneItemControllerAction",
        "body": "components.playercontroller:GetSceneItemControllerAction(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetControllerTarget:": {
        "prefix": "components.playercontroller:GetControllerTarget",
        "body": "components.playercontroller:GetControllerTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteStopAllControls:": {
        "prefix": "components.playercontroller:OnRemoteStopAllControls",
        "body": "components.playercontroller:OnRemoteStopAllControls()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoActionButton:": {
        "prefix": "components.playercontroller:DoActionButton",
        "body": "components.playercontroller:DoActionButton()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoClientBusyOverrideLocomote:": {
        "prefix": "components.playercontroller:DoClientBusyOverrideLocomote",
        "body": "components.playercontroller:DoClientBusyOverrideLocomote()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteControllerUseItemOnSceneFromInvTile:": {
        "prefix": "components.playercontroller:RemoteControllerUseItemOnSceneFromInvTile",
        "body": "components.playercontroller:RemoteControllerUseItemOnSceneFromInvTile(${1:buffaction},${2:item})",
        "description": " ※参数: \n   (buffaction)<>[] \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartAOETargetingUsing:": {
        "prefix": "components.playercontroller:StartAOETargetingUsing",
        "body": "components.playercontroller:StartAOETargetingUsing(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoControllerAttackButton:": {
        "prefix": "components.playercontroller:DoControllerAttackButton",
        "body": "components.playercontroller:DoControllerAttackButton(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoBoatSteering:": {
        "prefix": "components.playercontroller:DoBoatSteering",
        "body": "components.playercontroller:DoBoatSteering(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteCastSpellBookFromInv:": {
        "prefix": "components.playercontroller:RemoteCastSpellBookFromInv",
        "body": "components.playercontroller:RemoteCastSpellBookFromInv(${1:item},${2:spell_id})",
        "description": " ※参数: \n   (item)<>[] \n   (spell_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EchoReticuleAt:": {
        "prefix": "components.playercontroller:EchoReticuleAt",
        "body": "components.playercontroller:EchoReticuleAt(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMapTarget:": {
        "prefix": "components.playercontroller:GetMapTarget",
        "body": "components.playercontroller:GetMapTarget(${1:act})",
        "description": " ※参数: \n   (act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteDragWalking:": {
        "prefix": "components.playercontroller:OnRemoteDragWalking",
        "body": "components.playercontroller:OnRemoteDragWalking(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCursorInventorySlotAndContainer:": {
        "prefix": "components.playercontroller:GetCursorInventorySlotAndContainer",
        "body": "components.playercontroller:GetCursorInventorySlotAndContainer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCombatRetarget:": {
        "prefix": "components.playercontroller:GetCombatRetarget",
        "body": "components.playercontroller:GetCombatRetarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteStopHopping:": {
        "prefix": "components.playercontroller:OnRemoteStopHopping",
        "body": "components.playercontroller:OnRemoteStopHopping()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRightMouseAction:": {
        "prefix": "components.playercontroller:GetRightMouseAction",
        "body": "components.playercontroller:GetRightMouseAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartBuildPlacementMode:": {
        "prefix": "components.playercontroller:StartBuildPlacementMode",
        "body": "components.playercontroller:StartBuildPlacementMode(${1:recipe},${2:skin})",
        "description": " ※参数: \n   (recipe)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAOETargetingPos:": {
        "prefix": "components.playercontroller:GetAOETargetingPos",
        "body": "components.playercontroller:GetAOETargetingPos()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CycleControllerAttackTargetBack:": {
        "prefix": "components.playercontroller:CycleControllerAttackTargetBack",
        "body": "components.playercontroller:CycleControllerAttackTargetBack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteResurrectButton:": {
        "prefix": "components.playercontroller:RemoteResurrectButton",
        "body": "components.playercontroller:RemoteResurrectButton()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CooldownRemoteController:": {
        "prefix": "components.playercontroller:CooldownRemoteController",
        "body": "components.playercontroller:CooldownRemoteController(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteDragWalking:": {
        "prefix": "components.playercontroller:RemoteDragWalking",
        "body": "components.playercontroller:RemoteDragWalking(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteDirectWalking:": {
        "prefix": "components.playercontroller:OnRemoteDirectWalking",
        "body": "components.playercontroller:OnRemoteDirectWalking(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteControllerAltActionButtonPoint:": {
        "prefix": "components.playercontroller:OnRemoteControllerAltActionButtonPoint",
        "body": "components.playercontroller:OnRemoteControllerAltActionButtonPoint(${1:actioncode},${2:position},${3:isreleased},${4:noforce},${5:isspecial},${6:mod_name})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (position)<>[] \n   (isreleased)<>[] \n   (noforce)<>[] \n   (isspecial)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasAOETargeting:": {
        "prefix": "components.playercontroller:HasAOETargeting",
        "body": "components.playercontroller:HasAOETargeting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoControllerDropItemFromInvTile:": {
        "prefix": "components.playercontroller:DoControllerDropItemFromInvTile",
        "body": "components.playercontroller:DoControllerDropItemFromInvTile(${1:item},${2:single})",
        "description": " ※参数: \n   (item)<>[] \n   (single)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoControllerInspectItemFromInvTile:": {
        "prefix": "components.playercontroller:DoControllerInspectItemFromInvTile",
        "body": "components.playercontroller:DoControllerInspectItemFromInvTile(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanUseMap:": {
        "prefix": "components.playercontroller:SetCanUseMap",
        "body": "components.playercontroller:SetCanUseMap(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteToggleMovementPrediction:": {
        "prefix": "components.playercontroller:OnRemoteToggleMovementPrediction",
        "body": "components.playercontroller:OnRemoteToggleMovementPrediction(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnControl:": {
        "prefix": "components.playercontroller:OnControl",
        "body": "components.playercontroller:OnControl(${1:control},${2:down})",
        "description": " ※参数: \n   (control)<>[] \n   (down)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteBufferedAction:": {
        "prefix": "components.playercontroller:OnRemoteBufferedAction",
        "body": "components.playercontroller:OnRemoteBufferedAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteBufferedAction:": {
        "prefix": "components.playercontroller:RemoteBufferedAction",
        "body": "components.playercontroller:RemoteBufferedAction(${1:buffaction})",
        "description": " ※参数: \n   (buffaction)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteMakeRecipeAtPoint:": {
        "prefix": "components.playercontroller:RemoteMakeRecipeAtPoint",
        "body": "components.playercontroller:RemoteMakeRecipeAtPoint(${1:recipe},${2:pt},${3:rot},${4:skin})",
        "description": " ※参数: \n   (recipe)<>[] \n   (pt)<>[] \n   (rot)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLeftUp:": {
        "prefix": "components.playercontroller:OnLeftUp",
        "body": "components.playercontroller:OnLeftUp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CooldownHeldAction:": {
        "prefix": "components.playercontroller:CooldownHeldAction",
        "body": "components.playercontroller:CooldownHeldAction(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteStopControl:": {
        "prefix": "components.playercontroller:OnRemoteStopControl",
        "body": "components.playercontroller:OnRemoteStopControl(${1:control})",
        "description": " ※参数: \n   (control)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteInspectItemFromInvTile:": {
        "prefix": "components.playercontroller:RemoteInspectItemFromInvTile",
        "body": "components.playercontroller:RemoteInspectItemFromInvTile(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoControllerActionButton:": {
        "prefix": "components.playercontroller:DoControllerActionButton",
        "body": "components.playercontroller:DoControllerActionButton()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteControllerUseItemOnSelfFromInvTile:": {
        "prefix": "components.playercontroller:RemoteControllerUseItemOnSelfFromInvTile",
        "body": "components.playercontroller:RemoteControllerUseItemOnSelfFromInvTile(${1:buffaction},${2:item})",
        "description": " ※参数: \n   (buffaction)<>[] \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteRightClick:": {
        "prefix": "components.playercontroller:OnRemoteRightClick",
        "body": "components.playercontroller:OnRemoteRightClick(${1:actioncode},${2:position},${3:target},${4:rotation},${5:isreleased},${6:controlmodscode},${7:noforce},${8:mod_name})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (position)<>[] \n   (target)<>[] \n   (rotation)<>[] \n   (isreleased)<>[] \n   (controlmodscode)<>[] \n   (noforce)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteStartHop:": {
        "prefix": "components.playercontroller:OnRemoteStartHop",
        "body": "components.playercontroller:OnRemoteStartHop(${1:x},${2:z},${3:platform})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n   (platform)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteResurrectButton:": {
        "prefix": "components.playercontroller:OnRemoteResurrectButton",
        "body": "components.playercontroller:OnRemoteResurrectButton()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetActionButtonAction:": {
        "prefix": "components.playercontroller:GetActionButtonAction",
        "body": "components.playercontroller:GetActionButtonAction(${1:force_target})",
        "description": " ※参数: \n   (force_target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateControllerTargets:": {
        "prefix": "components.playercontroller:UpdateControllerTargets",
        "body": "components.playercontroller:UpdateControllerTargets(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsControllerTargetLockEnabled:": {
        "prefix": "components.playercontroller:IsControllerTargetLockEnabled",
        "body": "components.playercontroller:IsControllerTargetLockEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteStopWalking:": {
        "prefix": "components.playercontroller:OnRemoteStopWalking",
        "body": "components.playercontroller:OnRemoteStopWalking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoCameraControl:": {
        "prefix": "components.playercontroller:DoCameraControl",
        "body": "components.playercontroller:DoCameraControl()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItemSelfAction:": {
        "prefix": "components.playercontroller:GetItemSelfAction",
        "body": "components.playercontroller:GetItemSelfAction(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLeftMouseAction:": {
        "prefix": "components.playercontroller:GetLeftMouseAction",
        "body": "components.playercontroller:GetLeftMouseAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteStopAllControls:": {
        "prefix": "components.playercontroller:RemoteStopAllControls",
        "body": "components.playercontroller:RemoteStopAllControls()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoControllerAltActionButton:": {
        "prefix": "components.playercontroller:DoControllerAltActionButton",
        "body": "components.playercontroller:DoControllerAltActionButton()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemotePredictOverrideLocomote:": {
        "prefix": "components.playercontroller:OnRemotePredictOverrideLocomote",
        "body": "components.playercontroller:OnRemotePredictOverrideLocomote(${1:dir})",
        "description": " ※参数: \n   (dir)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasGroundUseSpecialAction:": {
        "prefix": "components.playercontroller:HasGroundUseSpecialAction",
        "body": "components.playercontroller:HasGroundUseSpecialAction(${1:right})",
        "description": " ※参数: \n   (right)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMapActions:": {
        "prefix": "components.playercontroller:GetMapActions",
        "body": "components.playercontroller:GetMapActions(${1:position},${2:maptarget})",
        "description": " ※参数: \n   (position)<>[] \n   (maptarget)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteStopWalking:": {
        "prefix": "components.playercontroller:RemoteStopWalking",
        "body": "components.playercontroller:RemoteStopWalking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelDeployPlacement:": {
        "prefix": "components.playercontroller:CancelDeployPlacement",
        "body": "components.playercontroller:CancelDeployPlacement()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemapMapAction:": {
        "prefix": "components.playercontroller:RemapMapAction",
        "body": "components.playercontroller:RemapMapAction(${1:act},${2:position})",
        "description": " ※参数: \n   (act)<>[] \n   (position)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteInspectButton:": {
        "prefix": "components.playercontroller:RemoteInspectButton",
        "body": "components.playercontroller:RemoteInspectButton(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoControllerUseItemOnSceneFromInvTile:": {
        "prefix": "components.playercontroller:DoControllerUseItemOnSceneFromInvTile",
        "body": "components.playercontroller:DoControllerUseItemOnSceneFromInvTile(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRemotePredictPosition:": {
        "prefix": "components.playercontroller:GetRemotePredictPosition",
        "body": "components.playercontroller:GetRemotePredictPosition()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetGroundUseAction:": {
        "prefix": "components.playercontroller:GetGroundUseAction",
        "body": "components.playercontroller:GetGroundUseAction(${1:position},${2:spellbook})",
        "description": " ※参数: \n   (position)<>[] \n   (spellbook)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoDirectWalking:": {
        "prefix": "components.playercontroller:DoDirectWalking",
        "body": "components.playercontroller:DoDirectWalking(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CycleControllerAttackTargetForward:": {
        "prefix": "components.playercontroller:CycleControllerAttackTargetForward",
        "body": "components.playercontroller:CycleControllerAttackTargetForward()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoPredictWalking:": {
        "prefix": "components.playercontroller:DoPredictWalking",
        "body": "components.playercontroller:DoPredictWalking(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoPredictHopping:": {
        "prefix": "components.playercontroller:DoPredictHopping",
        "body": "components.playercontroller:DoPredictHopping(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCursorInventoryObject:": {
        "prefix": "components.playercontroller:GetCursorInventoryObject",
        "body": "components.playercontroller:GetCursorInventoryObject()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteUseItemFromInvTile:": {
        "prefix": "components.playercontroller:RemoteUseItemFromInvTile",
        "body": "components.playercontroller:RemoteUseItemFromInvTile(${1:buffaction},${2:item})",
        "description": " ※参数: \n   (buffaction)<>[] \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ControllerTargetLock:": {
        "prefix": "components.playercontroller:ControllerTargetLock",
        "body": "components.playercontroller:ControllerTargetLock(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLeftClick:": {
        "prefix": "components.playercontroller:OnLeftClick",
        "body": "components.playercontroller:OnLeftClick(${1:down})",
        "description": " ※参数: \n   (down)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteControllerUseItemOnItemFromInvTile:": {
        "prefix": "components.playercontroller:RemoteControllerUseItemOnItemFromInvTile",
        "body": "components.playercontroller:RemoteControllerUseItemOnItemFromInvTile(${1:buffaction},${2:item},${3:active_item})",
        "description": " ※参数: \n   (buffaction)<>[] \n   (item)<>[] \n   (active_item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPlatformRelativePosition:": {
        "prefix": "components.playercontroller:GetPlatformRelativePosition",
        "body": "components.playercontroller:GetPlatformRelativePosition(${1:absolute_x},${2:absolute_z})",
        "description": " ※参数: \n   (absolute_x)<>[] \n   (absolute_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRemoteDirectVector:": {
        "prefix": "components.playercontroller:GetRemoteDirectVector",
        "body": "components.playercontroller:GetRemoteDirectVector()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoDragWalking:": {
        "prefix": "components.playercontroller:DoDragWalking",
        "body": "components.playercontroller:DoDragWalking(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoControllerUseItemOnSelfFromInvTile:": {
        "prefix": "components.playercontroller:DoControllerUseItemOnSelfFromInvTile",
        "body": "components.playercontroller:DoControllerUseItemOnSelfFromInvTile(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsControllerTargetLocked:": {
        "prefix": "components.playercontroller:IsControllerTargetLocked",
        "body": "components.playercontroller:IsControllerTargetLocked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateActionsToMapActions:": {
        "prefix": "components.playercontroller:UpdateActionsToMapActions",
        "body": "components.playercontroller:UpdateActionsToMapActions(${1:position},${2:maptarget})",
        "description": " ※参数: \n   (position)<>[] \n   (maptarget)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemotePredictWalking:": {
        "prefix": "components.playercontroller:RemotePredictWalking",
        "body": "components.playercontroller:RemotePredictWalking(${1:x},${2:z},${3:isstart})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n   (isstart)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RepeatHeldAction:": {
        "prefix": "components.playercontroller:RepeatHeldAction",
        "body": "components.playercontroller:RepeatHeldAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteActionButton:": {
        "prefix": "components.playercontroller:OnRemoteActionButton",
        "body": "components.playercontroller:OnRemoteActionButton(${1:actioncode},${2:target},${3:isreleased},${4:noforce},${5:mod_name})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (target)<>[] \n   (isreleased)<>[] \n   (noforce)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UsingMouse:": {
        "prefix": "components.playercontroller:UsingMouse",
        "body": "components.playercontroller:UsingMouse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteDirectWalking:": {
        "prefix": "components.playercontroller:RemoteDirectWalking",
        "body": "components.playercontroller:RemoteDirectWalking(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetResurrectButtonAction:": {
        "prefix": "components.playercontroller:GetResurrectButtonAction",
        "body": "components.playercontroller:GetResurrectButtonAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetInspectButtonAction:": {
        "prefix": "components.playercontroller:GetInspectButtonAction",
        "body": "components.playercontroller:GetInspectButtonAction(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoteActionButton:": {
        "prefix": "components.playercontroller:RemoteActionButton",
        "body": "components.playercontroller:RemoteActionButton(${1:action},${2:isreleased})",
        "description": " ※参数: \n   (action)<>[] \n   (isreleased)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RotRight:": {
        "prefix": "components.playercontroller:RotRight",
        "body": "components.playercontroller:RotRight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelAOETargeting:": {
        "prefix": "components.playercontroller:CancelAOETargeting",
        "body": "components.playercontroller:CancelAOETargeting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryAOETargeting:": {
        "prefix": "components.playercontroller:TryAOETargeting",
        "body": "components.playercontroller:TryAOETargeting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelPlacement:": {
        "prefix": "components.playercontroller:CancelPlacement",
        "body": "components.playercontroller:CancelPlacement(${1:cache})",
        "description": " ※参数: \n   (cache)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RotLeft:": {
        "prefix": "components.playercontroller:RotLeft",
        "body": "components.playercontroller:RotLeft()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRemoteControllerActionButton:": {
        "prefix": "components.playercontroller:OnRemoteControllerActionButton",
        "body": "components.playercontroller:OnRemoteControllerActionButton(${1:actioncode},${2:target},${3:isreleased},${4:noforce},${5:mod_name})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (target)<>[] \n   (isreleased)<>[] \n   (noforce)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLocomotorBufferedAction:": {
        "prefix": "components.playercontroller:OnLocomotorBufferedAction",
        "body": "components.playercontroller:OnLocomotorBufferedAction(${1:act})",
        "description": " ※参数: \n   (act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateDSPTables:": {
        "prefix": "components.playerhearing:UpdateDSPTables",
        "body": "components.playerhearing:UpdateDSPTables()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDSPTables:": {
        "prefix": "components.playerhearing:GetDSPTables",
        "body": "components.playerhearing:GetDSPTables()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoStrike:": {
        "prefix": "components.playerlightningtarget:DoStrike",
        "body": "components.playerlightningtarget:DoStrike()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHitChance:": {
        "prefix": "components.playerlightningtarget:GetHitChance",
        "body": "components.playerlightningtarget:GetHitChance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHitChance:": {
        "prefix": "components.playerlightningtarget:SetHitChance",
        "body": "components.playerlightningtarget:SetHitChance(${1:chance})",
        "description": " ※参数: \n   (chance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStrikeFn:": {
        "prefix": "components.playerlightningtarget:SetOnStrikeFn",
        "body": "components.playerlightningtarget:SetOnStrikeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Schedule:设置定时任务的时间间隔，因为该组件是通过定时检测周围玩家来实现的。一般不用修改。": {
        "prefix": "components.playerprox:Schedule",
        "body": "components.playerprox:Schedule(${1:new_period})",
        "description": " ※参数: \n   (new_period)<num>[定时任务间隔] \n ※返回: \n ※说明: 设置定时任务的时间间隔，因为该组件是通过定时检测周围玩家来实现的。一般不用修改。\n ※贡献者: @御坂十七号"
    },
    "组件.IsPlayerClose:": {
        "prefix": "components.playerprox:IsPlayerClose",
        "body": "components.playerprox:IsPlayerClose()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLostTargetFn:": {
        "prefix": "components.playerprox:SetLostTargetFn",
        "body": "components.playerprox:SetLostTargetFn(${1:func})",
        "description": " ※参数: \n   (func)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDist:设置远离或靠近的距离,当玩家靠近到near距离时，会触发SetOnPlayerNear设置的方法，far同理。当玩家远离超过far距离时，会触发SetOnPlayerFar设置的方法": {
        "prefix": "components.playerprox:SetDist",
        "body": "components.playerprox:SetDist(${1:near},${2:far})",
        "description": " ※参数: \n   (near)<num>[靠近的距离] \n   (far)<num>[远离的距离] \n ※返回: \n ※说明: 设置远离或靠近的距离,当玩家靠近到near距离时，会触发SetOnPlayerNear设置的方法，far同理。当玩家远离超过far距离时，会触发SetOnPlayerFar设置的方法\n ※贡献者: @御坂十七号"
    },
    "组件.GetDebugString:打印日志，这里会返回玩家距离远还是近": {
        "prefix": "components.playerprox:GetDebugString",
        "body": "components.playerprox:GetDebugString()",
        "description": " ※参数: \n ※返回: \n ※说明: 打印日志，这里会返回玩家距离远还是近\n ※贡献者: @御坂十七号"
    },
    "组件.Stop:停止定时任务检测，一般不用修改": {
        "prefix": "components.playerprox:Stop",
        "body": "components.playerprox:Stop()",
        "description": " ※参数: \n ※返回: \n ※说明: 停止定时任务检测，一般不用修改\n ※贡献者: @御坂十七号"
    },
    "组件.SetTargetMode:设置检测目标的模式，共有五种，在playerprox.lua组件的TargetModes表中，分别为：AllPlayers、AnyPlayer、SpecificPlayer、LockOnPlayer、LockAndKeepPlayer，具体区别等大佬补充，一般用AllPlayers即可。": {
        "prefix": "components.playerprox:SetTargetMode",
        "body": "components.playerprox:SetTargetMode(${1:mode},${2:target},${3:override})",
        "description": " ※参数: \n   (mode)<>[] \n   (target)<>[] \n   (override)<>[] \n ※返回: \n ※说明: 设置检测目标的模式，共有五种，在playerprox.lua组件的TargetModes表中，分别为：AllPlayers、AnyPlayer、SpecificPlayer、LockOnPlayer、LockAndKeepPlayer，具体区别等大佬补充，一般用AllPlayers即可。\n ※贡献者: @御坂十七号"
    },
    "组件.SetOnPlayerFar:设置当玩家远离时触发的方法，例如：SetOnPlayerFar(function(inst, player) end) inst是有该组件的预制物，player是远离的玩家。": {
        "prefix": "components.playerprox:SetOnPlayerFar",
        "body": "components.playerprox:SetOnPlayerFar(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 设置当玩家远离时触发的方法，例如：SetOnPlayerFar(function(inst, player) end) inst是有该组件的预制物，player是远离的玩家。\n ※贡献者: @御坂十七号"
    },
    "组件.SetPlayerAliveMode:设置玩家的触发模式，有三种，在playerprox.lua组件的AliveModes表里，分别为 AliveOnly（只有活着的）、DeadOnly（只有死了的）、DeadOrAlive（死活都可以）": {
        "prefix": "components.playerprox:SetPlayerAliveMode",
        "body": "components.playerprox:SetPlayerAliveMode(${1:alivemode})",
        "description": " ※参数: \n   (alivemode)<bool>[触发模式] \n ※返回: \n ※说明: 设置玩家的触发模式，有三种，在playerprox.lua组件的AliveModes表里，分别为 AliveOnly（只有活着的）、DeadOnly（只有死了的）、DeadOrAlive（死活都可以）\n ※贡献者: @御坂十七号"
    },
    "组件.SetOnPlayerNear:设置当玩家靠近时会触发的方法，例如：SetOnPlayerNear(function(inst, player) end) inst是有该组件的预制物，player是靠近的玩家。": {
        "prefix": "components.playerprox:SetOnPlayerNear",
        "body": "components.playerprox:SetOnPlayerNear(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 设置当玩家靠近时会触发的方法，例如：SetOnPlayerNear(function(inst, player) end) inst是有该组件的预制物，player是靠近的玩家。\n ※贡献者: @御坂十七号"
    },
    "组件.ForceUpdate:": {
        "prefix": "components.transparentonsanity:ForceUpdate",
        "body": "components.transparentonsanity:ForceUpdate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceScrapMonoleVision:": {
        "prefix": "components.playervision:ForceScrapMonoleVision",
        "body": "components.playervision:ForceScrapMonoleVision(${1:force})",
        "description": " ※参数: \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasGhostVision:": {
        "prefix": "components.playervision:HasGhostVision",
        "body": "components.playervision:HasGhostVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasNightmareVision:": {
        "prefix": "components.playervision:HasNightmareVision",
        "body": "components.playervision:HasNightmareVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNightmareVision:": {
        "prefix": "components.playervision:SetNightmareVision",
        "body": "components.playervision:SetNightmareVision(${1:enabled})",
        "description": " ※参数: \n   (enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceInspectaclesVision:": {
        "prefix": "components.playervision:ForceInspectaclesVision",
        "body": "components.playervision:ForceInspectaclesVision(${1:force})",
        "description": " ※参数: \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasScrapMonoleVision:": {
        "prefix": "components.playervision:HasScrapMonoleVision",
        "body": "components.playervision:HasScrapMonoleVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasNutrientsVision:": {
        "prefix": "components.playervision:HasNutrientsVision",
        "body": "components.playervision:HasNutrientsVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasRoseGlassesVision:": {
        "prefix": "components.playervision:HasRoseGlassesVision",
        "body": "components.playervision:HasRoseGlassesVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasNightVision:": {
        "prefix": "components.playervision:HasNightVision",
        "body": "components.playervision:HasNightVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceNutrientVision:": {
        "prefix": "components.playervision:ForceNutrientVision",
        "body": "components.playervision:ForceNutrientVision(${1:force})",
        "description": " ※参数: \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceGoggleVision:": {
        "prefix": "components.playervision:ForceGoggleVision",
        "body": "components.playervision:ForceGoggleVision(${1:force})",
        "description": " ※参数: \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCCTable:": {
        "prefix": "components.playervision:GetCCTable",
        "body": "components.playervision:GetCCTable()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasGoggleVision:": {
        "prefix": "components.playervision:HasGoggleVision",
        "body": "components.playervision:HasGoggleVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateCCTable:": {
        "prefix": "components.playervision:UpdateCCTable",
        "body": "components.playervision:UpdateCCTable()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopForcedNightVision:": {
        "prefix": "components.playervision:PopForcedNightVision",
        "body": "components.playervision:PopForcedNightVision(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushForcedNightVision:": {
        "prefix": "components.playervision:PushForcedNightVision",
        "body": "components.playervision:PushForcedNightVision(${1:source},${2:priority},${3:customcctable},${4:blend})",
        "description": " ※参数: \n   (source)<>[] \n   (priority)<>[] \n   (customcctable)<>[] \n   (blend)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceNightVision:": {
        "prefix": "components.playervision:ForceNightVision",
        "body": "components.playervision:ForceNightVision(${1:force})",
        "description": " ※参数: \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetGhostVision:": {
        "prefix": "components.playervision:SetGhostVision",
        "body": "components.playervision:SetGhostVision(${1:enabled})",
        "description": " ※参数: \n   (enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCCPhaseFn:": {
        "prefix": "components.playervision:GetCCPhaseFn",
        "body": "components.playervision:GetCCPhaseFn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCustomCCTable:": {
        "prefix": "components.playervision:SetCustomCCTable",
        "body": "components.playervision:SetCustomCCTable(${1:cctable},${2:blend})",
        "description": " ※参数: \n   (cctable)<>[] \n   (blend)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasInspectaclesVision:": {
        "prefix": "components.playervision:HasInspectaclesVision",
        "body": "components.playervision:HasInspectaclesVision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceRoseGlassesVision:": {
        "prefix": "components.playervision:ForceRoseGlassesVision",
        "body": "components.playervision:ForceRoseGlassesVision(${1:force})",
        "description": " ※参数: \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasVoted:": {
        "prefix": "components.playervoter:HasVoted",
        "body": "components.playervoter:HasVoted()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSelection:": {
        "prefix": "components.playervoter:SetSelection",
        "body": "components.playervoter:SetSelection(${1:sel})",
        "description": " ※参数: \n   (sel)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSelection:": {
        "prefix": "components.playervoter:GetSelection",
        "body": "components.playervoter:GetSelection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSquelched:": {
        "prefix": "components.playervoter:IsSquelched",
        "body": "components.playervoter:IsSquelched()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SubmitVote:": {
        "prefix": "components.playervoter:SubmitVote",
        "body": "components.playervoter:SubmitVote(${1:sel})",
        "description": " ※参数: \n   (sel)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanVote:": {
        "prefix": "components.playervoter:CanVote",
        "body": "components.playervoter:CanVote()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSquelched:": {
        "prefix": "components.playervoter:SetSquelched",
        "body": "components.playervoter:SetSquelched(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Dismantle:": {
        "prefix": "components.portablestructure:Dismantle",
        "body": "components.portablestructure:Dismantle(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDismantle:": {
        "prefix": "components.pocketwatch_dismantler:CanDismantle",
        "body": "components.pocketwatch_dismantler:CanDismantle(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryStartUpdating:": {
        "prefix": "components.pointofinterest:TryStartUpdating",
        "body": "components.pointofinterest:TryStartUpdating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CreateWorldIndicator:": {
        "prefix": "components.pointofinterest:CreateWorldIndicator",
        "body": "components.pointofinterest:CreateWorldIndicator()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DebugForceShowIndicator:": {
        "prefix": "components.pointofinterest:DebugForceShowIndicator",
        "body": "components.pointofinterest:DebugForceShowIndicator()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TriggerRemove:": {
        "prefix": "components.pointofinterest:TriggerRemove",
        "body": "components.pointofinterest:TriggerRemove()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveHudIndicator:": {
        "prefix": "components.pointofinterest:RemoveHudIndicator",
        "body": "components.pointofinterest:RemoveHudIndicator()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldShowFn:": {
        "prefix": "components.pointofinterest:SetShouldShowFn",
        "body": "components.pointofinterest:SetShouldShowFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateRemovePulse:": {
        "prefix": "components.pointofinterest:UpdateRemovePulse",
        "body": "components.pointofinterest:UpdateRemovePulse(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TriggerPulse:": {
        "prefix": "components.pointofinterest:TriggerPulse",
        "body": "components.pointofinterest:TriggerPulse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateRing:": {
        "prefix": "components.pointofinterest:UpdateRing",
        "body": "components.pointofinterest:UpdateRing(${1:ring},${2:dt})",
        "description": " ※参数: \n   (ring)<>[] \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveEverything:": {
        "prefix": "components.pointofinterest:RemoveEverything",
        "body": "components.pointofinterest:RemoveEverything()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldShowHudIndicator:": {
        "prefix": "components.pointofinterest:ShouldShowHudIndicator",
        "body": "components.pointofinterest:ShouldShowHudIndicator(${1:distsq})",
        "description": " ※参数: \n   (distsq)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHeight:": {
        "prefix": "components.pointofinterest:SetHeight",
        "body": "components.pointofinterest:SetHeight(${1:height})",
        "description": " ※参数: \n   (height)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckFlowerDensity:": {
        "prefix": "components.pollinator:CheckFlowerDensity",
        "body": "components.pollinator:CheckFlowerDensity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CreateFlower:": {
        "prefix": "components.pollinator:CreateFlower",
        "body": "components.pollinator:CreateFlower()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasCollectedEnough:": {
        "prefix": "components.pollinator:HasCollectedEnough",
        "body": "components.pollinator:HasCollectedEnough()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Pollinate:": {
        "prefix": "components.pollinator:Pollinate",
        "body": "components.pollinator:Pollinate(${1:flower})",
        "description": " ※参数: \n   (flower)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanPollinate:": {
        "prefix": "components.pollinator:CanPollinate",
        "body": "components.pollinator:CanPollinate(${1:flower})",
        "description": " ※参数: \n   (flower)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Pop:": {
        "prefix": "components.poppable:Pop",
        "body": "components.poppable:Pop()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDismantleFn:": {
        "prefix": "components.portablestructure:SetOnDismantleFn",
        "body": "components.portablestructure:SetOnDismantleFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWarpBackDist:": {
        "prefix": "components.positionalwarp:SetWarpBackDist",
        "body": "components.positionalwarp:SetWarpBackDist(${1:num_cache_points})",
        "description": " ※参数: \n   (num_cache_points)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHistoryPosition:": {
        "prefix": "components.positionalwarp:GetHistoryPosition",
        "body": "components.positionalwarp:GetHistoryPosition(${1:rewind})",
        "description": " ※参数: \n   (rewind)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMarker:": {
        "prefix": "components.positionalwarp:SetMarker",
        "body": "components.positionalwarp:SetMarker(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableMarker:": {
        "prefix": "components.positionalwarp:EnableMarker",
        "body": "components.positionalwarp:EnableMarker(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateMarker:": {
        "prefix": "components.positionalwarp:UpdateMarker",
        "body": "components.positionalwarp:UpdateMarker()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._MakeMarker:": {
        "prefix": "components.positionalwarp:_MakeMarker",
        "body": "components.positionalwarp:_MakeMarker(${1:i},${2:prefab})",
        "description": " ※参数: \n   (i)<>[] \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CachePosition:": {
        "prefix": "components.positionalwarp:CachePosition",
        "body": "components.positionalwarp:CachePosition()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopWaitingForPlayer:": {
        "prefix": "components.possessedaxe:StopWaitingForPlayer",
        "body": "components.possessedaxe:StopWaitingForPlayer()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Revert:": {
        "prefix": "components.transformer:Revert",
        "body": "components.transformer:Revert()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WaitForPlayer:": {
        "prefix": "components.possessedaxe:WaitForPlayer",
        "body": "components.possessedaxe:WaitForPlayer(${1:userid},${2:delay})",
        "description": " ※参数: \n   (userid)<>[] \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Drop:": {
        "prefix": "components.possessedaxe:Drop",
        "body": "components.possessedaxe:Drop()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsIdle:": {
        "prefix": "components.powerload:IsIdle",
        "body": "components.powerload:IsIdle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLoad:": {
        "prefix": "components.powerload:SetLoad",
        "body": "components.powerload:SetLoad(${1:_load},${2:idle})",
        "description": " ※参数: \n   (_load)<>[] \n   (idle)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLoad:": {
        "prefix": "components.powerload:GetLoad",
        "body": "components.powerload:GetLoad()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPerishRateMultiplier:获取腐败率乘系数": {
        "prefix": "components.preserver:GetPerishRateMultiplier",
        "body": "components.preserver:GetPerishRateMultiplier(${1:item})",
        "description": " ※参数: \n   (item)<ent>[物品inst] \n ※返回: <num>[腐败率乘系数] \n ※说明: 获取腐败率乘系数\n ※贡献者: @Runar"
    },
    "组件.SetPerishRateMultiplier:设置腐败率乘函系数": {
        "prefix": "components.preserver:SetPerishRateMultiplier",
        "body": "components.preserver:SetPerishRateMultiplier(${1:rate})",
        "description": " ※参数: \n   (rate)<fn|num>[腐败率乘函系数]\n      {参数:\n         (inst)<ent>[容器inst] \n         (item)<ent>[物品inst] \n      返回:\n         <num>[腐败率乘系数]} \n ※返回: \n ※说明: 设置腐败率乘函系数\n ※贡献者: @Runar"
    },
    "组件.SetConstructTime:": {
        "prefix": "components.projectedeffects:SetConstructTime",
        "body": "components.projectedeffects:SetConstructTime(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDecayCallback:": {
        "prefix": "components.projectedeffects:SetOnDecayCallback",
        "body": "components.projectedeffects:SetOnDecayCallback(${1:callback})",
        "description": " ※参数: \n   (callback)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LockDecay:": {
        "prefix": "components.projectedeffects:LockDecay",
        "body": "components.projectedeffects:LockDecay(${1:locked})",
        "description": " ※参数: \n   (locked)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnConstructCallback:": {
        "prefix": "components.projectedeffects:SetOnConstructCallback",
        "body": "components.projectedeffects:SetOnConstructCallback(${1:callback})",
        "description": " ※参数: \n   (callback)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeOpaque:": {
        "prefix": "components.projectedeffects:MakeOpaque",
        "body": "components.projectedeffects:MakeOpaque()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIntensity:": {
        "prefix": "components.projectedeffects:SetIntensity",
        "body": "components.projectedeffects:SetIntensity(${1:intensity})",
        "description": " ※参数: \n   (intensity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Construct:": {
        "prefix": "components.projectedeffects:Construct",
        "body": "components.projectedeffects:Construct()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPaused:": {
        "prefix": "components.projectedeffects:SetPaused",
        "body": "components.projectedeffects:SetPaused(${1:paused})",
        "description": " ※参数: \n   (paused)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCutoffHeight:": {
        "prefix": "components.projectedeffects:SetCutoffHeight",
        "body": "components.projectedeffects:SetCutoffHeight(${1:cutoffheight})",
        "description": " ※参数: \n   (cutoffheight)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnThrownFn:": {
        "prefix": "components.projectile:SetOnThrownFn",
        "body": "components.projectile:SetOnThrownFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsThrown:": {
        "prefix": "components.projectile:IsThrown",
        "body": "components.projectile:IsThrown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RotateToTarget:": {
        "prefix": "components.projectile:RotateToTarget",
        "body": "components.projectile:RotateToTarget(${1:dest})",
        "description": " ※参数: \n   (dest)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHitDist:": {
        "prefix": "components.projectile:SetHitDist",
        "body": "components.projectile:SetHitDist(${1:dist})",
        "description": " ※参数: \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Catch:": {
        "prefix": "components.projectile:Catch",
        "body": "components.projectile:Catch(${1:catcher})",
        "description": " ※参数: \n   (catcher)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHoming:": {
        "prefix": "components.projectile:SetHoming",
        "body": "components.projectile:SetHoming(${1:homing})",
        "description": " ※参数: \n   (homing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpeed:": {
        "prefix": "components.projectile:SetSpeed",
        "body": "components.projectile:SetSpeed(${1:speed})",
        "description": " ※参数: \n   (speed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Throw:": {
        "prefix": "components.projectile:Throw",
        "body": "components.projectile:Throw(${1:owner},${2:target},${3:attacker})",
        "description": " ※参数: \n   (owner)<>[] \n   (target)<>[] \n   (attacker)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DelayVisibility:": {
        "prefix": "components.projectile:DelayVisibility",
        "body": "components.projectile:DelayVisibility(${1:duration})",
        "description": " ※参数: \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBounced:": {
        "prefix": "components.projectile:IsBounced",
        "body": "components.projectile:IsBounced()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBounced:": {
        "prefix": "components.projectile:SetBounced",
        "body": "components.projectile:SetBounced(${1:bounced})",
        "description": " ※参数: \n   (bounced)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Miss:": {
        "prefix": "components.projectile:Miss",
        "body": "components.projectile:Miss(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanCatch:": {
        "prefix": "components.projectile:SetCanCatch",
        "body": "components.projectile:SetCanCatch(${1:cancatch})",
        "description": " ※参数: \n   (cancatch)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnCaughtFn:": {
        "prefix": "components.projectile:SetOnCaughtFn",
        "body": "components.projectile:SetOnCaughtFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetHeatResistance:": {
        "prefix": "components.propagator:GetHeatResistance",
        "body": "components.propagator:GetHeatResistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnFlashPoint:": {
        "prefix": "components.propagator:SetOnFlashPoint",
        "body": "components.propagator:SetOnFlashPoint(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartSpreading:": {
        "prefix": "components.propagator:StartSpreading",
        "body": "components.propagator:StartSpreading(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSpreading:": {
        "prefix": "components.propagator:StopSpreading",
        "body": "components.propagator:StopSpreading(${1:reset},${2:heatpct})",
        "description": " ※参数: \n   (reset)<>[] \n   (heatpct)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddHeat:": {
        "prefix": "components.propagator:AddHeat",
        "body": "components.propagator:AddHeat(${1:amount},${2:source})",
        "description": " ※参数: \n   (amount)<>[] \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalculateHeatCap:": {
        "prefix": "components.propagator:CalculateHeatCap",
        "body": "components.propagator:CalculateHeatCap()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnHideFn:": {
        "prefix": "components.prophider:SetOnHideFn",
        "body": "components.prophider:SetOnHideFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPropCreationFn:": {
        "prefix": "components.prophider:SetPropCreationFn",
        "body": "components.prophider:SetPropCreationFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HideWithProp:": {
        "prefix": "components.prophider:HideWithProp",
        "body": "components.prophider:HideWithProp(${1:duration},${2:counter})",
        "description": " ※参数: \n   (duration)<>[] \n   (counter)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUnhideFn:": {
        "prefix": "components.prophider:SetOnUnhideFn",
        "body": "components.prophider:SetOnUnhideFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShowFromProp:": {
        "prefix": "components.prophider:ShowFromProp",
        "body": "components.prophider:ShowFromProp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GenerateHideTime:": {
        "prefix": "components.prophider:GenerateHideTime",
        "body": "components.prophider:GenerateHideTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnVisibleFn:": {
        "prefix": "components.prophider:SetOnVisibleFn",
        "body": "components.prophider:SetOnVisibleFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearHideTask:": {
        "prefix": "components.prophider:ClearHideTask",
        "body": "components.prophider:ClearHideTask()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWillUnhideFn:": {
        "prefix": "components.prophider:SetWillUnhideFn",
        "body": "components.prophider:SetWillUnhideFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTechTrees:": {
        "prefix": "components.prototyper:GetTechTrees",
        "body": "components.prototyper:GetTechTrees()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnCompleteQuest:": {
        "prefix": "components.questowner:SetOnCompleteQuest",
        "body": "components.questowner:SetOnCompleteQuest(${1:on_complete_quest})",
        "description": " ※参数: \n   (on_complete_quest)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AbandonQuest:": {
        "prefix": "components.questowner:AbandonQuest",
        "body": "components.questowner:AbandonQuest(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnBeginQuest:": {
        "prefix": "components.questowner:SetOnBeginQuest",
        "body": "components.questowner:SetOnBeginQuest(${1:on_begin_quest})",
        "description": " ※参数: \n   (on_begin_quest)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnAbandonQuest:": {
        "prefix": "components.questowner:SetOnAbandonQuest",
        "body": "components.questowner:SetOnAbandonQuest(${1:on_abandon_quest})",
        "description": " ※参数: \n   (on_abandon_quest)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CompleteQuest:": {
        "prefix": "components.questowner:CompleteQuest",
        "body": "components.questowner:CompleteQuest()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BeginQuest:": {
        "prefix": "components.questowner:BeginQuest",
        "body": "components.questowner:BeginQuest(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeginQuest:": {
        "prefix": "components.questowner:CanBeginQuest",
        "body": "components.questowner:CanBeginQuest(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAbandonQuest:": {
        "prefix": "components.questowner:CanAbandonQuest",
        "body": "components.questowner:CanAbandonQuest(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetActiveRadius_Internal:": {
        "prefix": "components.temperatureoverrider:SetActiveRadius_Internal",
        "body": "components.temperatureoverrider:SetActiveRadius_Internal(${1:new},${2:old})",
        "description": " ※参数: \n   (new)<>[] \n   (old)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetActiveRadius:": {
        "prefix": "components.temperatureoverrider:GetActiveRadius",
        "body": "components.temperatureoverrider:GetActiveRadius()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsUnderRainDome:": {
        "prefix": "components.raindomewatcher:IsUnderRainDome",
        "body": "components.raindomewatcher:IsUnderRainDome()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentWave:": {
        "prefix": "components.rampingspawner:GetCurrentWave",
        "body": "components.rampingspawner:GetCurrentWave()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoWave:": {
        "prefix": "components.rampingspawner:DoWave",
        "body": "components.rampingspawner:DoWave()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpawnRot:": {
        "prefix": "components.rampingspawner:GetSpawnRot",
        "body": "components.rampingspawner:GetSpawnRot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSpawnDeath:": {
        "prefix": "components.rampingspawner:OnSpawnDeath",
        "body": "components.rampingspawner:OnSpawnDeath(${1:spawn})",
        "description": " ※参数: \n   (spawn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TrackSpawn:": {
        "prefix": "components.rampingspawner:TrackSpawn",
        "body": "components.rampingspawner:TrackSpawn(${1:spawn})",
        "description": " ※参数: \n   (spawn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTrackingSpawn:": {
        "prefix": "components.rampingspawner:StopTrackingSpawn",
        "body": "components.rampingspawner:StopTrackingSpawn(${1:spawn})",
        "description": " ※参数: \n   (spawn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnEntity:": {
        "prefix": "components.rampingspawner:SpawnEntity",
        "body": "components.rampingspawner:SpawnEntity()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpawnPos:": {
        "prefix": "components.rampingspawner:GetSpawnPos",
        "body": "components.rampingspawner:GetSpawnPos()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWaveSize:": {
        "prefix": "components.rampingspawner:GetWaveSize",
        "body": "components.rampingspawner:GetWaveSize()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Read:": {
        "prefix": "components.simplebook:Read",
        "body": "components.simplebook:Read(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSanityPenaltyMultiplier:": {
        "prefix": "components.reader:GetSanityPenaltyMultiplier",
        "body": "components.reader:GetSanityPenaltyMultiplier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAspiringBookworm:": {
        "prefix": "components.reader:SetAspiringBookworm",
        "body": "components.reader:SetAspiringBookworm(${1:bookworm})",
        "description": " ※参数: \n   (bookworm)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAspiringBookworm:": {
        "prefix": "components.reader:IsAspiringBookworm",
        "body": "components.reader:IsAspiringBookworm()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSanityPenaltyMultiplier:": {
        "prefix": "components.reader:SetSanityPenaltyMultiplier",
        "body": "components.reader:SetSanityPenaltyMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnReadFn:": {
        "prefix": "components.reader:SetOnReadFn",
        "body": "components.reader:SetOnReadFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMarkedPosition:": {
        "prefix": "components.recallmark:GetMarkedPosition",
        "body": "components.recallmark:GetMarkedPosition()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsMarked:": {
        "prefix": "components.recallmark:IsMarked",
        "body": "components.recallmark:IsMarked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsMarkedForSameShard:": {
        "prefix": "components.recallmark:IsMarkedForSameShard",
        "body": "components.recallmark:IsMarkedForSameShard()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Copy:": {
        "prefix": "components.recallmark:Copy",
        "body": "components.recallmark:Copy(${1:rhs})",
        "description": " ※参数: \n   (rhs)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MarkPosition:": {
        "prefix": "components.recallmark:MarkPosition",
        "body": "components.recallmark:MarkPosition(${1:recall_x},${2:recall_y},${3:recall_z},${4:recall_worldid})",
        "description": " ※参数: \n   (recall_x)<>[] \n   (recall_y)<>[] \n   (recall_z)<>[] \n   (recall_worldid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCharge:": {
        "prefix": "components.rechargeable:SetCharge",
        "body": "components.rechargeable:SetCharge(${1:val},${2:overtime})",
        "description": " ※参数: \n   (val)<>[] \n   (overtime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDischargedFn:": {
        "prefix": "components.rechargeable:SetOnDischargedFn",
        "body": "components.rechargeable:SetOnDischargedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToCharge:": {
        "prefix": "components.rechargeable:GetTimeToCharge",
        "body": "components.rechargeable:GetTimeToCharge()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnChargedFn:": {
        "prefix": "components.rechargeable:SetOnChargedFn",
        "body": "components.rechargeable:SetOnChargedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetChargeTime:": {
        "prefix": "components.rechargeable:SetChargeTime",
        "body": "components.rechargeable:SetChargeTime(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRechargeTime:": {
        "prefix": "components.rechargeable:GetRechargeTime",
        "body": "components.rechargeable:GetRechargeTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetChargeTime:": {
        "prefix": "components.rechargeable:GetChargeTime",
        "body": "components.rechargeable:GetChargeTime()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetChargeTimeMod:": {
        "prefix": "components.rechargeable:SetChargeTimeMod",
        "body": "components.rechargeable:SetChargeTimeMod(${1:source},${2:key},${3:mod})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n   (mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxCharge:": {
        "prefix": "components.rechargeable:SetMaxCharge",
        "body": "components.rechargeable:SetMaxCharge(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCharge:": {
        "prefix": "components.rechargeable:GetCharge",
        "body": "components.rechargeable:GetCharge()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Discharge:": {
        "prefix": "components.rechargeable:Discharge",
        "body": "components.rechargeable:Discharge(${1:chargetime})",
        "description": " ※参数: \n   (chargetime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveChargeTimeMod:": {
        "prefix": "components.rechargeable:RemoveChargeTimeMod",
        "body": "components.rechargeable:RemoveChargeTimeMod(${1:source},${2:key})",
        "description": " ※参数: \n   (source)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Scan:": {
        "prefix": "components.recipescanner:Scan",
        "body": "components.recipescanner:Scan(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnScannedFn:": {
        "prefix": "components.recipescanner:SetOnScannedFn",
        "body": "components.recipescanner:SetOnScannedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveAllStock:": {
        "prefix": "components.recipestockpile:RemoveAllStock",
        "body": "components.recipestockpile:RemoveAllStock(${1:allow_restock})",
        "description": " ※参数: \n   (allow_restock)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnItemCrafted:": {
        "prefix": "components.worldoverseer:OnItemCrafted",
        "body": "components.worldoverseer:OnItemCrafted(${1:player},${2:data})",
        "description": " ※参数: \n   (player)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetupItem:": {
        "prefix": "components.recipestockpile:SetupItem",
        "body": "components.recipestockpile:SetupItem(${1:data},${2:start_restock_timer})",
        "description": " ※参数: \n   (data)<>[] \n   (start_restock_timer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FullyRestockItem:": {
        "prefix": "components.recipestockpile:FullyRestockItem",
        "body": "components.recipestockpile:FullyRestockItem(${1:recipe})",
        "description": " ※参数: \n   (recipe)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveStock:": {
        "prefix": "components.recipestockpile:RemoveStock",
        "body": "components.recipestockpile:RemoveStock(${1:recipe},${2:allow_restock})",
        "description": " ※参数: \n   (recipe)<>[] \n   (allow_restock)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasAnyStock:": {
        "prefix": "components.recipestockpile:HasAnyStock",
        "body": "components.recipestockpile:HasAnyStock()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStopTeleport:": {
        "prefix": "components.remoteteleporter:OnStopTeleport",
        "body": "components.remoteteleporter:OnStopTeleport(${1:doer},${2:success})",
        "description": " ※参数: \n   (doer)<>[] \n   (success)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStartTeleport:": {
        "prefix": "components.remoteteleporter:OnStartTeleport",
        "body": "components.remoteteleporter:OnStartTeleport(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopTeleportFn:": {
        "prefix": "components.remoteteleporter:SetOnStopTeleportFn",
        "body": "components.remoteteleporter:SetOnStopTeleportFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetItemTeleportRadius:": {
        "prefix": "components.remoteteleporter:SetItemTeleportRadius",
        "body": "components.remoteteleporter:SetItemTeleportRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Teleport_Internal:": {
        "prefix": "components.remoteteleporter:Teleport_Internal",
        "body": "components.remoteteleporter:Teleport_Internal(${1:target},${2:from_x},${3:from_z},${4:to_x},${5:to_z},${6:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (from_x)<>[] \n   (from_z)<>[] \n   (to_x)<>[] \n   (to_z)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNearbyItems:": {
        "prefix": "components.remoteteleporter:SetNearbyItems",
        "body": "components.remoteteleporter:SetNearbyItems(${1:nearbyitems})",
        "description": " ※参数: \n   (nearbyitems)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCheckDestinationFn:": {
        "prefix": "components.remoteteleporter:SetCheckDestinationFn",
        "body": "components.remoteteleporter:SetCheckDestinationFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Teleport_GetNearbyItems:": {
        "prefix": "components.remoteteleporter:Teleport_GetNearbyItems",
        "body": "components.remoteteleporter:Teleport_GetNearbyItems(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartTeleportFn:": {
        "prefix": "components.remoteteleporter:SetOnStartTeleportFn",
        "body": "components.remoteteleporter:SetOnStartTeleportFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTeleportedFn:": {
        "prefix": "components.remoteteleporter:SetOnTeleportedFn",
        "body": "components.remoteteleporter:SetOnTeleportedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanActivateFn:": {
        "prefix": "components.remoteteleporter:SetCanActivateFn",
        "body": "components.remoteteleporter:SetCanActivateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWorkRepairable:": {
        "prefix": "components.repairable:SetWorkRepairable",
        "body": "components.repairable:SetWorkRepairable(${1:repairable})",
        "description": " ※参数: \n   (repairable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHealthRepairable:": {
        "prefix": "components.repairable:SetHealthRepairable",
        "body": "components.repairable:SetHealthRepairable(${1:repairable})",
        "description": " ※参数: \n   (repairable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NeedsRepairs:": {
        "prefix": "components.repairable:NeedsRepairs",
        "body": "components.repairable:NeedsRepairs()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFiniteUsesRepairable:": {
        "prefix": "components.repairable:SetFiniteUsesRepairable",
        "body": "components.repairable:SetFiniteUsesRepairable(${1:repairable})",
        "description": " ※参数: \n   (repairable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Repel:": {
        "prefix": "components.repellent:Repel",
        "body": "components.repellent:Repel(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnlyRepelsFollowers:": {
        "prefix": "components.repellent:SetOnlyRepelsFollowers",
        "body": "components.repellent:SetOnlyRepelsFollowers(${1:enabled})",
        "description": " ※参数: \n   (enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveRepelTag:": {
        "prefix": "components.repellent:RemoveRepelTag",
        "body": "components.repellent:RemoveRepelTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddIgnoreTag:": {
        "prefix": "components.wateryprotection:AddIgnoreTag",
        "body": "components.wateryprotection:AddIgnoreTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveIgnoreTag:": {
        "prefix": "components.repellent:RemoveIgnoreTag",
        "body": "components.repellent:RemoveIgnoreTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnRepelFollowerFn:": {
        "prefix": "components.repellent:SetOnRepelFollowerFn",
        "body": "components.repellent:SetOnRepelFollowerFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRepelTag:": {
        "prefix": "components.repellent:AddRepelTag",
        "body": "components.repellent:AddRepelTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRealEntityPrefabName:": {
        "prefix": "components.replayproxy:SetRealEntityPrefabName",
        "body": "components.replayproxy:SetRealEntityPrefabName(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRealEntityPrefabName:": {
        "prefix": "components.replayproxy:GetRealEntityPrefabName",
        "body": "components.replayproxy:GetRealEntityPrefabName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRealEntityGUID:": {
        "prefix": "components.replayproxy:GetRealEntityGUID",
        "body": "components.replayproxy:GetRealEntityGUID()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRealEntityGUID:": {
        "prefix": "components.replayproxy:SetRealEntityGUID",
        "body": "components.replayproxy:SetRealEntityGUID(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveResistance:": {
        "prefix": "components.resistance:RemoveResistance",
        "body": "components.resistance:RemoveResistance(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResistDamage:": {
        "prefix": "components.resistance:ResistDamage",
        "body": "components.resistance:ResistDamage(${1:damage_amount})",
        "description": " ※参数: \n   (damage_amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldResistDamage:": {
        "prefix": "components.resistance:ShouldResistDamage",
        "body": "components.resistance:ShouldResistDamage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddResistance:": {
        "prefix": "components.resistance:AddResistance",
        "body": "components.resistance:AddResistance(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldResistFn:": {
        "prefix": "components.resistance:SetShouldResistFn",
        "body": "components.resistance:SetShouldResistFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnResistDamageFn:": {
        "prefix": "components.resistance:SetOnResistDamageFn",
        "body": "components.resistance:SetOnResistDamageFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasResistance:": {
        "prefix": "components.resistance:HasResistance",
        "body": "components.resistance:HasResistance(${1:attacker},${2:weapon})",
        "description": " ※参数: \n   (attacker)<>[] \n   (weapon)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasResistanceToTag:": {
        "prefix": "components.resistance:HasResistanceToTag",
        "body": "components.resistance:HasResistanceToTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CreateReticule:": {
        "prefix": "components.reticule:CreateReticule",
        "body": "components.reticule:CreateReticule()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DestroyReticule:": {
        "prefix": "components.reticule:DestroyReticule",
        "body": "components.reticule:DestroyReticule()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateColour:": {
        "prefix": "components.reticule:UpdateColour",
        "body": "components.reticule:UpdateColour()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateTwinStickMode2:": {
        "prefix": "components.reticule:UpdateTwinStickMode2",
        "body": "components.reticule:UpdateTwinStickMode2()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldHide:": {
        "prefix": "components.reticule:ShouldHide",
        "body": "components.reticule:ShouldHide()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCameraUpdate:": {
        "prefix": "components.reticule:OnCameraUpdate",
        "body": "components.reticule:OnCameraUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateTwinStickMode1:": {
        "prefix": "components.reticule:UpdateTwinStickMode1",
        "body": "components.reticule:UpdateTwinStickMode1()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearTwinStickOverrides:": {
        "prefix": "components.reticule:ClearTwinStickOverrides",
        "body": "components.reticule:ClearTwinStickOverrides()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Blip:": {
        "prefix": "components.reticule:Blip",
        "body": "components.reticule:Blip()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PingReticuleAt:": {
        "prefix": "components.reticule:PingReticuleAt",
        "body": "components.reticule:PingReticuleAt(${1:pos})",
        "description": " ※参数: \n   (pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCorpse:": {
        "prefix": "components.revivablecorpse:SetCorpse",
        "body": "components.revivablecorpse:SetCorpse(${1:corpse})",
        "description": " ※参数: \n   (corpse)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeRevivedBy:": {
        "prefix": "components.revivablecorpse:CanBeRevivedBy",
        "body": "components.revivablecorpse:CanBeRevivedBy(${1:reviver})",
        "description": " ※参数: \n   (reviver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Revive:": {
        "prefix": "components.revivablecorpse:Revive",
        "body": "components.revivablecorpse:Revive(${1:reviver})",
        "description": " ※参数: \n   (reviver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReviveSpeedMult:": {
        "prefix": "components.revivablecorpse:SetReviveSpeedMult",
        "body": "components.revivablecorpse:SetReviveSpeedMult(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetReviveHealthPercent:": {
        "prefix": "components.revivablecorpse:GetReviveHealthPercent",
        "body": "components.revivablecorpse:GetReviveHealthPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanBeRevivedByFn:": {
        "prefix": "components.revivablecorpse:SetCanBeRevivedByFn",
        "body": "components.revivablecorpse:SetCanBeRevivedByFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReviveHealthPercent:": {
        "prefix": "components.revivablecorpse:SetReviveHealthPercent",
        "body": "components.revivablecorpse:SetReviveHealthPercent(${1:percent})",
        "description": " ※参数: \n   (percent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetReviveSpeedMult:": {
        "prefix": "components.revivablecorpse:GetReviveSpeedMult",
        "body": "components.revivablecorpse:GetReviveSpeedMult(${1:reviver})",
        "description": " ※参数: \n   (reviver)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReviveSpeedMultForTag:": {
        "prefix": "components.revivablecorpse:SetReviveSpeedMultForTag",
        "body": "components.revivablecorpse:SetReviveSpeedMultForTag(${1:tag},${2:mult})",
        "description": " ※参数: \n   (tag)<>[] \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSaddle:": {
        "prefix": "components.rideable:SetSaddle",
        "body": "components.rideable:SetSaddle(${1:doer},${2:newsaddle})",
        "description": " ※参数: \n   (doer)<>[] \n   (newsaddle)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCustomRiderTest:": {
        "prefix": "components.rideable:SetCustomRiderTest",
        "body": "components.rideable:SetCustomRiderTest(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldSave:": {
        "prefix": "components.rideable:SetShouldSave",
        "body": "components.rideable:SetShouldSave(${1:shouldsave})",
        "description": " ※参数: \n   (shouldsave)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Buck:": {
        "prefix": "components.rideable:Buck",
        "body": "components.rideable:Buck(${1:gentle})",
        "description": " ※参数: \n   (gentle)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSaddleable:": {
        "prefix": "components.rideable:SetSaddleable",
        "body": "components.rideable:SetSaddleable(${1:saddleable})",
        "description": " ※参数: \n   (saddleable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSaddled:": {
        "prefix": "components.rideable:IsSaddled",
        "body": "components.rideable:IsSaddled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TimeSinceLastRide:": {
        "prefix": "components.rideable:TimeSinceLastRide",
        "body": "components.rideable:TimeSinceLastRide()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestRider:": {
        "prefix": "components.rideable:TestRider",
        "body": "components.rideable:TestRider(${1:potential_rider})",
        "description": " ※参数: \n   (potential_rider)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLoadDomesticatable:": {
        "prefix": "components.rideable:OnLoadDomesticatable",
        "body": "components.rideable:OnLoadDomesticatable(${1:data},${2:newents})",
        "description": " ※参数: \n   (data)<>[] \n   (newents)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestObedience:": {
        "prefix": "components.rideable:TestObedience",
        "body": "components.rideable:TestObedience()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldSave:": {
        "prefix": "components.rideable:ShouldSave",
        "body": "components.rideable:ShouldSave()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSaveDomesticatable:": {
        "prefix": "components.rideable:OnSaveDomesticatable",
        "body": "components.rideable:OnSaveDomesticatable()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRider:": {
        "prefix": "components.rideable:GetRider",
        "body": "components.rideable:GetRider()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRider:": {
        "prefix": "components.rideable:SetRider",
        "body": "components.rideable:SetRider(${1:rider})",
        "description": " ※参数: \n   (rider)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRequiredObedience:": {
        "prefix": "components.rideable:SetRequiredObedience",
        "body": "components.rideable:SetRequiredObedience(${1:required})",
        "description": " ※参数: \n   (required)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBeingRidden:": {
        "prefix": "components.rideable:IsBeingRidden",
        "body": "components.rideable:IsBeingRidden()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Mount:": {
        "prefix": "components.rider:Mount",
        "body": "components.rider:Mount(${1:target},${2:instant})",
        "description": " ※参数: \n   (target)<>[] \n   (instant)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSaddle:": {
        "prefix": "components.rider:GetSaddle",
        "body": "components.rider:GetSaddle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Dismount:": {
        "prefix": "components.walkingplankuser:Dismount",
        "body": "components.walkingplankuser:Dismount()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsRiding:": {
        "prefix": "components.rider:IsRiding",
        "body": "components.rider:IsRiding()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMount:": {
        "prefix": "components.rider:GetMount",
        "body": "components.rider:GetMount()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActualDismount:": {
        "prefix": "components.rider:ActualDismount",
        "body": "components.rider:ActualDismount()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEnabledSettingCave:": {
        "prefix": "components.riftspawner:SetEnabledSettingCave",
        "body": "components.riftspawner:SetEnabledSettingCave(${1:src},${2:enabled_difficulty})",
        "description": " ※参数: \n   (src)<>[] \n   (enabled_difficulty)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLunarPortalActive:": {
        "prefix": "components.riftspawner:IsLunarPortalActive",
        "body": "components.riftspawner:IsLunarPortalActive()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNextRiftPrefab:": {
        "prefix": "components.riftspawner:GetNextRiftPrefab",
        "body": "components.riftspawner:GetNextRiftPrefab()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLunarRiftMaxSize:": {
        "prefix": "components.riftspawner:OnLunarRiftMaxSize",
        "body": "components.riftspawner:OnLunarRiftMaxSize(${1:src},${2:rift})",
        "description": " ※参数: \n   (src)<>[] \n   (rift)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetXRiftsEnabled:": {
        "prefix": "components.riftspawner:GetXRiftsEnabled",
        "body": "components.riftspawner:GetXRiftsEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DebugHighlightRifts:": {
        "prefix": "components.riftspawner:DebugHighlightRifts",
        "body": "components.riftspawner:DebugHighlightRifts()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDebugRiftString:": {
        "prefix": "components.riftspawner:GetDebugRiftString",
        "body": "components.riftspawner:GetDebugRiftString()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEnabledSetting:": {
        "prefix": "components.riftspawner:SetEnabledSetting",
        "body": "components.riftspawner:SetEnabledSetting(${1:src},${2:enabled_difficulty})",
        "description": " ※参数: \n   (src)<>[] \n   (enabled_difficulty)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToStartTimer:": {
        "prefix": "components.riftspawner:TryToStartTimer",
        "body": "components.riftspawner:TryToStartTimer(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetLunarRiftsEnabled:": {
        "prefix": "components.riftspawner:GetLunarRiftsEnabled",
        "body": "components.riftspawner:GetLunarRiftsEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRiftsOfPrefab:": {
        "prefix": "components.riftspawner:GetRiftsOfPrefab",
        "body": "components.riftspawner:GetRiftsOfPrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableShadowRifts:": {
        "prefix": "components.riftspawner:EnableShadowRifts",
        "body": "components.riftspawner:EnableShadowRifts(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetShadowRiftsEnabled:": {
        "prefix": "components.riftspawner:GetShadowRiftsEnabled",
        "body": "components.riftspawner:GetShadowRiftsEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsXPortalActive:": {
        "prefix": "components.riftspawner:IsXPortalActive",
        "body": "components.riftspawner:IsXPortalActive()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToSpawnRift:": {
        "prefix": "components.riftspawner:TryToSpawnRift",
        "body": "components.riftspawner:TryToSpawnRift(${1:forced_pos})",
        "description": " ※参数: \n   (forced_pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsShadowPortalActive:": {
        "prefix": "components.riftspawner:IsShadowPortalActive",
        "body": "components.riftspawner:IsShadowPortalActive()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnRift:": {
        "prefix": "components.riftspawner:SpawnRift",
        "body": "components.riftspawner:SpawnRift(${1:forced_pos})",
        "description": " ※参数: \n   (forced_pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsPointNearPreviousSpawn:": {
        "prefix": "components.riftspawner:IsPointNearPreviousSpawn",
        "body": "components.riftspawner:IsPointNearPreviousSpawn(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRiftTimerDone:": {
        "prefix": "components.riftspawner:OnRiftTimerDone",
        "body": "components.riftspawner:OnRiftTimerDone()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRiftRemoved:": {
        "prefix": "components.riftspawner:OnRiftRemoved",
        "body": "components.riftspawner:OnRiftRemoved(${1:rift})",
        "description": " ※参数: \n   (rift)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRiftToPool:": {
        "prefix": "components.riftspawner:AddRiftToPool",
        "body": "components.riftspawner:AddRiftToPool(${1:rift},${2:rift_prefab})",
        "description": " ※参数: \n   (rift)<>[] \n   (rift_prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableLunarRifts:": {
        "prefix": "components.riftspawner:EnableLunarRifts",
        "body": "components.riftspawner:EnableLunarRifts(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEnabled:": {
        "prefix": "components.teleporter:GetEnabled",
        "body": "components.teleporter:GetEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableXRifts:": {
        "prefix": "components.riftspawner:EnableXRifts",
        "body": "components.riftspawner:EnableXRifts(${1:src})",
        "description": " ※参数: \n   (src)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRifts:": {
        "prefix": "components.riftspawner:GetRifts",
        "body": "components.riftspawner:GetRifts()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnShadowRiftMaxSize:": {
        "prefix": "components.riftspawner:OnShadowRiftMaxSize",
        "body": "components.riftspawner:OnShadowRiftMaxSize(${1:src},${2:rift})",
        "description": " ※参数: \n   (src)<>[] \n   (rift)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDifficulty:": {
        "prefix": "components.riftspawner:SetDifficulty",
        "body": "components.riftspawner:SetDifficulty(${1:src},${2:difficulty})",
        "description": " ※参数: \n   (src)<>[] \n   (difficulty)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnResidueCreated:": {
        "prefix": "components.roseinspectable:SetOnResidueCreated",
        "body": "components.roseinspectable:SetOnResidueCreated(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WillInduceCooldownOnActivate:": {
        "prefix": "components.roseinspectable:WillInduceCooldownOnActivate",
        "body": "components.roseinspectable:WillInduceCooldownOnActivate(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HookupResidue:": {
        "prefix": "components.roseinspectable:HookupResidue",
        "body": "components.roseinspectable:HookupResidue(${1:residueowner},${2:residue})",
        "description": " ※参数: \n   (residueowner)<>[] \n   (residue)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWillInduceCooldownOnActivate:": {
        "prefix": "components.roseinspectable:SetWillInduceCooldownOnActivate",
        "body": "components.roseinspectable:SetWillInduceCooldownOnActivate(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetForcedInduceCooldownOnActivate:": {
        "prefix": "components.roseinspectable:SetForcedInduceCooldownOnActivate",
        "body": "components.roseinspectable:SetForcedInduceCooldownOnActivate(${1:bool})",
        "description": " ※参数: \n   (bool)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanResidueBeSpawnedBy:": {
        "prefix": "components.roseinspectable:SetCanResidueBeSpawnedBy",
        "body": "components.roseinspectable:SetCanResidueBeSpawnedBy(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoRoseInspection:": {
        "prefix": "components.roseinspectable:DoRoseInspection",
        "body": "components.roseinspectable:DoRoseInspection(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanResidueBeSpawnedBy:": {
        "prefix": "components.roseinspectable:CanResidueBeSpawnedBy",
        "body": "components.roseinspectable:CanResidueBeSpawnedBy(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnResidueActivated:": {
        "prefix": "components.roseinspectable:SetOnResidueActivated",
        "body": "components.roseinspectable:SetOnResidueActivated(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRoseInpectionOnTarget:": {
        "prefix": "components.roseinspectableuser:SetRoseInpectionOnTarget",
        "body": "components.roseinspectableuser:SetRoseInpectionOnTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToDoRoseInspectionOnPoint:": {
        "prefix": "components.roseinspectableuser:TryToDoRoseInspectionOnPoint",
        "body": "components.roseinspectableuser:TryToDoRoseInspectionOnPoint(${1:pt})",
        "description": " ※参数: \n   (pt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryToDoRoseInspectionOnTarget:": {
        "prefix": "components.roseinspectableuser:TryToDoRoseInspectionOnTarget",
        "body": "components.roseinspectableuser:TryToDoRoseInspectionOnTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoRoseInspectionOnPoint:": {
        "prefix": "components.roseinspectableuser:DoRoseInspectionOnPoint",
        "body": "components.roseinspectableuser:DoRoseInspectionOnPoint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCooldown:": {
        "prefix": "components.roseinspectableuser:OnCooldown",
        "body": "components.roseinspectableuser:OnCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GoOnCooldown:": {
        "prefix": "components.roseinspectableuser:GoOnCooldown",
        "body": "components.roseinspectableuser:GoOnCooldown()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoQuip:": {
        "prefix": "components.roseinspectableuser:DoQuip",
        "body": "components.roseinspectableuser:DoQuip(${1:reason},${2:failed})",
        "description": " ※参数: \n   (reason)<>[] \n   (failed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnResidue:": {
        "prefix": "components.roseinspectableuser:SpawnResidue",
        "body": "components.roseinspectableuser:SpawnResidue()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceDecayResidue:": {
        "prefix": "components.roseinspectableuser:ForceDecayResidue",
        "body": "components.roseinspectableuser:ForceDecayResidue()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCharlieResidueActivated:": {
        "prefix": "components.roseinspectableuser:OnCharlieResidueActivated",
        "body": "components.roseinspectableuser:OnCharlieResidueActivated(${1:residue})",
        "description": " ※参数: \n   (residue)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRoseInpectionOnPoint:": {
        "prefix": "components.roseinspectableuser:SetRoseInpectionOnPoint",
        "body": "components.roseinspectableuser:SetRoseInpectionOnPoint(${1:point})",
        "description": " ※参数: \n   (point)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TrySpawnShadeling:": {
        "prefix": "components.ruinsshadelingspawner:TrySpawnShadeling",
        "body": "components.ruinsshadelingspawner:TrySpawnShadeling(${1:chair})",
        "description": " ※参数: \n   (chair)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSwaps:": {
        "prefix": "components.saddler:SetSwaps",
        "body": "components.saddler:SetSwaps(${1:build},${2:symbol},${3:skin_guid})",
        "description": " ※参数: \n   (build)<>[] \n   (symbol)<>[] \n   (skin_guid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBonusSpeedMult:": {
        "prefix": "components.saddler:SetBonusSpeedMult",
        "body": "components.saddler:SetBonusSpeedMult(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBonusDamage:": {
        "prefix": "components.saddler:SetBonusDamage",
        "body": "components.saddler:SetBonusDamage(${1:damage})",
        "description": " ※参数: \n   (damage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDiscardedCallback:": {
        "prefix": "components.saddler:SetDiscardedCallback",
        "body": "components.saddler:SetDiscardedCallback(${1:cb})",
        "description": " ※参数: \n   (cb)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBonusSpeedMult:": {
        "prefix": "components.saddler:GetBonusSpeedMult",
        "body": "components.saddler:GetBonusSpeedMult()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSalted:": {
        "prefix": "components.saltlicker:SetSalted",
        "body": "components.saltlicker:SetSalted(${1:salted})",
        "description": " ※参数: \n   (salted)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateSandstormWalkSpeed:": {
        "prefix": "components.sandstormwatcher:UpdateSandstormWalkSpeed",
        "body": "components.sandstormwatcher:UpdateSandstormWalkSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ToggleSandstorms:": {
        "prefix": "components.sandstormwatcher:ToggleSandstorms",
        "body": "components.sandstormwatcher:ToggleSandstorms(${1:active})",
        "description": " ※参数: \n   (active)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSandstormLevel:": {
        "prefix": "components.sandstormwatcher:GetSandstormLevel",
        "body": "components.sandstormwatcher:GetSandstormLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateSandstormWalkSpeed_Internal:": {
        "prefix": "components.sandstormwatcher:UpdateSandstormWalkSpeed_Internal",
        "body": "components.sandstormwatcher:UpdateSandstormWalkSpeed_Internal(${1:level})",
        "description": " ※参数: \n   (level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSandstormSpeedMultiplier:": {
        "prefix": "components.sandstormwatcher:SetSandstormSpeedMultiplier",
        "body": "components.sandstormwatcher:SetSandstormSpeedMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateSandstormLevel:": {
        "prefix": "components.sandstormwatcher:UpdateSandstormLevel",
        "body": "components.sandstormwatcher:UpdateSandstormLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLunacyMode:": {
        "prefix": "components.sanity:IsLunacyMode",
        "body": "components.sanity:IsLunacyMode()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNegativeAuraImmunity:": {
        "prefix": "components.sanity:SetNegativeAuraImmunity",
        "body": "components.sanity:SetNegativeAuraImmunity(${1:immunity})",
        "description": " ※参数: \n   (immunity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSanityPenalty:": {
        "prefix": "components.sanity:AddSanityPenalty",
        "body": "components.sanity:AddSanityPenalty(${1:key},${2:mod})",
        "description": " ※参数: \n   (key)<>[] \n   (mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInsane:": {
        "prefix": "components.sanity:IsInsane",
        "body": "components.sanity:IsInsane()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLightDrainImmune:": {
        "prefix": "components.sanity:SetLightDrainImmune",
        "body": "components.sanity:SetLightDrainImmune(${1:immunity})",
        "description": " ※参数: \n   (immunity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAuraMultipliers:": {
        "prefix": "components.sanity:GetAuraMultipliers",
        "body": "components.sanity:GetAuraMultipliers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableLunacy:": {
        "prefix": "components.sanity:EnableLunacy",
        "body": "components.sanity:EnableLunacy(${1:enable},${2:source})",
        "description": " ※参数: \n   (enable)<>[] \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsEnlightened:": {
        "prefix": "components.sanity:IsEnlightened",
        "body": "components.sanity:IsEnlightened()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSane:": {
        "prefix": "components.sanity:IsSane",
        "body": "components.sanity:IsSane()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPlayerGhostImmunity:": {
        "prefix": "components.sanity:SetPlayerGhostImmunity",
        "body": "components.sanity:SetPlayerGhostImmunity(${1:immunity})",
        "description": " ※参数: \n   (immunity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSanityMode:": {
        "prefix": "components.sanity:SetSanityMode",
        "body": "components.sanity:SetSanityMode(${1:mode})",
        "description": " ※参数: \n   (mode)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSanityAuraImmunity:": {
        "prefix": "components.sanity:AddSanityAuraImmunity",
        "body": "components.sanity:AddSanityAuraImmunity(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRealPercent:": {
        "prefix": "components.sanity:GetRealPercent",
        "body": "components.sanity:GetRealPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSanityMode:": {
        "prefix": "components.sanity:GetSanityMode",
        "body": "components.sanity:GetSanityMode()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveSanityAuraImmunity:": {
        "prefix": "components.sanity:RemoveSanityAuraImmunity",
        "body": "components.sanity:RemoveSanityAuraImmunity(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInducedInsanity:": {
        "prefix": "components.sanity:SetInducedInsanity",
        "body": "components.sanity:SetInducedInsanity(${1:src},${2:val})",
        "description": " ※参数: \n   (src)<>[] \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInsanityMode:": {
        "prefix": "components.sanity:IsInsanityMode",
        "body": "components.sanity:IsInsanityMode()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Recalc:": {
        "prefix": "components.sanity:Recalc",
        "body": "components.sanity:Recalc(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecalcGhostDrain:": {
        "prefix": "components.sanity:RecalcGhostDrain",
        "body": "components.sanity:RecalcGhostDrain()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCrazy:": {
        "prefix": "components.sanity:IsCrazy",
        "body": "components.sanity:IsCrazy()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFullAuraImmunity:": {
        "prefix": "components.sanity:SetFullAuraImmunity",
        "body": "components.sanity:SetFullAuraImmunity(${1:immunity})",
        "description": " ※参数: \n   (immunity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveSanityPenalty:": {
        "prefix": "components.sanity:RemoveSanityPenalty",
        "body": "components.sanity:RemoveSanityPenalty(${1:key})",
        "description": " ※参数: \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAura:": {
        "prefix": "components.sanityaura:GetAura",
        "body": "components.sanityaura:GetAura(${1:observer})",
        "description": " ※参数: \n   (observer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ApplyScale:": {
        "prefix": "components.scaler:ApplyScale",
        "body": "components.scaler:ApplyScale()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Run:": {
        "prefix": "components.scenariorunner:Run",
        "body": "components.scenariorunner:Run()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearScenario:": {
        "prefix": "components.scenariorunner:ClearScenario",
        "body": "components.scenariorunner:ClearScenario()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTeachFn:": {
        "prefix": "components.scrapbookable:SetOnTeachFn",
        "body": "components.scrapbookable:SetOnTeachFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Teach:": {
        "prefix": "components.teacher:Teach",
        "body": "components.teacher:Teach(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SwapBackToMainCharacter:": {
        "prefix": "components.seamlessplayerswapper:SwapBackToMainCharacter",
        "body": "components.seamlessplayerswapper:SwapBackToMainCharacter()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._StartSwap:": {
        "prefix": "components.seamlessplayerswapper:_StartSwap",
        "body": "components.seamlessplayerswapper:_StartSwap(${1:new_prefab})",
        "description": " ※参数: \n   (new_prefab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoMonkeyChange:": {
        "prefix": "components.seamlessplayerswapper:DoMonkeyChange",
        "body": "components.seamlessplayerswapper:DoMonkeyChange()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PostTransformSetup:": {
        "prefix": "components.seamlessplayerswapper:PostTransformSetup",
        "body": "components.seamlessplayerswapper:PostTransformSetup()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SaveForReroll:": {
        "prefix": "components.seamlessplayerswapper:SaveForReroll",
        "body": "components.seamlessplayerswapper:SaveForReroll()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnSeamlessCharacterSwap:": {
        "prefix": "components.seamlessplayerswapper:OnSeamlessCharacterSwap",
        "body": "components.seamlessplayerswapper:OnSeamlessCharacterSwap(${1:old_player})",
        "description": " ※参数: \n   (old_player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Search:": {
        "prefix": "components.searchable:Search",
        "body": "components.searchable:Search(${1:searcher})",
        "description": " ※参数: \n   (searcher)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoStack:": {
        "prefix": "components.selfstacker:DoStack",
        "body": "components.selfstacker:DoStack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindItemToStackWith:": {
        "prefix": "components.selfstacker:FindItemToStackWith",
        "body": "components.selfstacker:FindItemToStackWith()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIgnoreMovingFast:": {
        "prefix": "components.selfstacker:SetIgnoreMovingFast",
        "body": "components.selfstacker:SetIgnoreMovingFast(${1:ignorespeedcheck})",
        "description": " ※参数: \n   (ignorespeedcheck)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanSelfStack:": {
        "prefix": "components.selfstacker:CanSelfStack",
        "body": "components.selfstacker:CanSelfStack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnWereEaterChanged:": {
        "prefix": "components.sentientaxe:OnWereEaterChanged",
        "body": "components.sentientaxe:OnWereEaterChanged(${1:old},${2:new},${3:istransforming})",
        "description": " ※参数: \n   (old)<>[] \n   (new)<>[] \n   (istransforming)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ScheduleConversation:": {
        "prefix": "components.sentientaxe:ScheduleConversation",
        "body": "components.sentientaxe:ScheduleConversation(${1:delay})",
        "description": " ※参数: \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldMakeConversation:": {
        "prefix": "components.sentientaxe:ShouldMakeConversation",
        "body": "components.sentientaxe:ShouldMakeConversation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeConversation:": {
        "prefix": "components.sentientaxe:MakeConversation",
        "body": "components.sentientaxe:MakeConversation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnFinishedWork:": {
        "prefix": "components.sentientaxe:OnFinishedWork",
        "body": "components.sentientaxe:OnFinishedWork(${1:target},${2:action})",
        "description": " ※参数: \n   (target)<>[] \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnBecomeHuman:": {
        "prefix": "components.sentientaxe:OnBecomeHuman",
        "body": "components.sentientaxe:OnBecomeHuman()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnBecomeWere:": {
        "prefix": "components.sentientaxe:OnBecomeWere",
        "body": "components.sentientaxe:OnBecomeWere()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnBuildItem:": {
        "prefix": "components.sentientaxe:OnBuildItem",
        "body": "components.sentientaxe:OnBuildItem(${1:recipename})",
        "description": " ※参数: \n   (recipename)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateSetBonus:": {
        "prefix": "components.setbonus:UpdateSetBonus",
        "body": "components.setbonus:UpdateSetBonus(${1:inventory},${2:isequipping})",
        "description": " ※参数: \n   (inventory)<>[] \n   (isequipping)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnEnabledFn:": {
        "prefix": "components.setbonus:SetOnEnabledFn",
        "body": "components.setbonus:SetOnEnabledFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDisabledFn:": {
        "prefix": "components.setbonus:SetOnDisabledFn",
        "body": "components.setbonus:SetOnDisabledFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._HasSetBonus:": {
        "prefix": "components.setbonus:_HasSetBonus",
        "body": "components.setbonus:_HasSetBonus(${1:inventory})",
        "description": " ※参数: \n   (inventory)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoSewing:": {
        "prefix": "components.sewing:DoSewing",
        "body": "components.sewing:DoSewing(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentLevel:": {
        "prefix": "components.shadowlevel:GetCurrentLevel",
        "body": "components.shadowlevel:GetCurrentLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaultLevel:": {
        "prefix": "components.shadowlevel:SetDefaultLevel",
        "body": "components.shadowlevel:SetDefaultLevel(${1:level})",
        "description": " ※参数: \n   (level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLevelFn:": {
        "prefix": "components.shadowlevel:SetLevelFn",
        "body": "components.shadowlevel:SetLevelFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldSubmitToTarget:": {
        "prefix": "components.shadowsubmissive:ShouldSubmitToTarget",
        "body": "components.shadowsubmissive:ShouldSubmitToTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TargetHasDominance:": {
        "prefix": "components.shadowsubmissive:TargetHasDominance",
        "body": "components.shadowsubmissive:TargetHasDominance(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPrize:": {
        "prefix": "components.shaveable:SetPrize",
        "body": "components.shaveable:SetPrize(${1:prize_prefab},${2:prize_count})",
        "description": " ※参数: \n   (prize_prefab)<>[] \n   (prize_count)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanShave:": {
        "prefix": "components.shaveable:CanShave",
        "body": "components.shaveable:CanShave(${1:shaver},${2:shaving_implement})",
        "description": " ※参数: \n   (shaver)<>[] \n   (shaving_implement)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopShedding:": {
        "prefix": "components.shedder:StopShedding",
        "body": "components.shedder:StopShedding()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoMultiShed:": {
        "prefix": "components.shedder:DoMultiShed",
        "body": "components.shedder:DoMultiShed(${1:max},${2:random})",
        "description": " ※参数: \n   (max)<>[] \n   (random)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartShedding:": {
        "prefix": "components.shedder:StartShedding",
        "body": "components.shedder:StartShedding(${1:interval})",
        "description": " ※参数: \n   (interval)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoSingleShed:": {
        "prefix": "components.shedder:DoSingleShed",
        "body": "components.shedder:DoSingleShed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnShelfItem:": {
        "prefix": "components.shelf:SetOnShelfItem",
        "body": "components.shelf:SetOnShelfItem(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PutItemOnShelf:": {
        "prefix": "components.shelf:PutItemOnShelf",
        "body": "components.shelf:PutItemOnShelf(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTakeItem:": {
        "prefix": "components.shelf:SetOnTakeItem",
        "body": "components.shelf:SetOnTakeItem(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSheltered:": {
        "prefix": "components.sheltered:SetSheltered",
        "body": "components.sheltered:SetSheltered(${1:issheltered},${2:level})",
        "description": " ※参数: \n   (issheltered)<>[] \n   (level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStartTab:": {
        "prefix": "components.shop:SetStartTab",
        "body": "components.shop:SetStartTab(${1:tab})",
        "description": " ※参数: \n   (tab)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTitle:": {
        "prefix": "components.shop:SetTitle",
        "body": "components.shop:SetTitle(${1:title})",
        "description": " ※参数: \n   (title)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeliverItems:": {
        "prefix": "components.shop:DeliverItems",
        "body": "components.shop:DeliverItems(${1:items})",
        "description": " ※参数: \n   (items)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLastStage:": {
        "prefix": "components.simplemagicgrower:SetLastStage",
        "body": "components.simplemagicgrower:SetLastStage(${1:last_stage})",
        "description": " ※参数: \n   (last_stage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnSing:": {
        "prefix": "components.singable:SetOnSing",
        "body": "components.singable:SetOnSing(${1:onsingfn})",
        "description": " ※参数: \n   (onsingfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Sing:": {
        "prefix": "components.singable:Sing",
        "body": "components.singable:Sing(${1:singer})",
        "description": " ※参数: \n   (singer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSinging:": {
        "prefix": "components.singinginspiration:IsSinging",
        "body": "components.singinginspiration:IsSinging()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInspiration:": {
        "prefix": "components.singinginspiration:SetInspiration",
        "body": "components.singinginspiration:SetInspiration(${1:value})",
        "description": " ※参数: \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopSong:": {
        "prefix": "components.singinginspiration:PopSong",
        "body": "components.singinginspiration:PopSong()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxInspiration:": {
        "prefix": "components.singinginspiration:GetMaxInspiration",
        "body": "components.singinginspiration:GetMaxInspiration()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSongActive:": {
        "prefix": "components.singinginspiration:IsSongActive",
        "body": "components.singinginspiration:IsSongActive(${1:songdata})",
        "description": " ※参数: \n   (songdata)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDetachRadius:": {
        "prefix": "components.singinginspiration:GetDetachRadius",
        "body": "components.singinginspiration:GetDetachRadius()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetActiveSong:": {
        "prefix": "components.singinginspiration:GetActiveSong",
        "body": "components.singinginspiration:GetActiveSong(${1:slot_num})",
        "description": " ※参数: \n   (slot_num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Inspire:": {
        "prefix": "components.singinginspiration:Inspire",
        "body": "components.singinginspiration:Inspire()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.InstantInspire:": {
        "prefix": "components.singinginspiration:InstantInspire",
        "body": "components.singinginspiration:InstantInspire(${1:songdata})",
        "description": " ※参数: \n   (songdata)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSong:": {
        "prefix": "components.singinginspiration:AddSong",
        "body": "components.singinginspiration:AddSong(${1:songdata},${2:skip_inspire},${3:inst})",
        "description": " ※参数: \n   (songdata)<>[] \n   (skip_inspire)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCalcAvailableSlotsForInspirationFn:": {
        "prefix": "components.singinginspiration:SetCalcAvailableSlotsForInspirationFn",
        "body": "components.singinginspiration:SetCalcAvailableSlotsForInspirationFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DisplayFx:": {
        "prefix": "components.singinginspiration:DisplayFx",
        "body": "components.singinginspiration:DisplayFx()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnHitOther:": {
        "prefix": "components.singinginspiration:OnHitOther",
        "body": "components.singinginspiration:OnHitOther(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanAddSong:": {
        "prefix": "components.singinginspiration:CanAddSong",
        "body": "components.singinginspiration:CanAddSong(${1:songdata},${2:inst})",
        "description": " ※参数: \n   (songdata)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnAddInstantSong:": {
        "prefix": "components.singinginspiration:OnAddInstantSong",
        "body": "components.singinginspiration:OnAddInstantSong(${1:songdata},${2:inst})",
        "description": " ※参数: \n   (songdata)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxInspiration:": {
        "prefix": "components.singinginspiration:SetMaxInspiration",
        "body": "components.singinginspiration:SetMaxInspiration(${1:max})",
        "description": " ※参数: \n   (max)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRidingTick:": {
        "prefix": "components.singinginspiration:OnRidingTick",
        "body": "components.singinginspiration:OnRidingTick(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSinkholes:": {
        "prefix": "components.sinkholespawner:StopSinkholes",
        "body": "components.sinkholespawner:StopSinkholes()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoTargetWarning:": {
        "prefix": "components.sinkholespawner:DoTargetWarning",
        "body": "components.sinkholespawner:DoTargetWarning(${1:targetinfo})",
        "description": " ※参数: \n   (targetinfo)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoTargetAttack:": {
        "prefix": "components.sinkholespawner:DoTargetAttack",
        "body": "components.sinkholespawner:DoTargetAttack(${1:targetinfo})",
        "description": " ※参数: \n   (targetinfo)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnSinkhole:": {
        "prefix": "components.sinkholespawner:SpawnSinkhole",
        "body": "components.sinkholespawner:SpawnSinkhole(${1:spawnpt})",
        "description": " ※参数: \n   (spawnpt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateTarget:": {
        "prefix": "components.sinkholespawner:UpdateTarget",
        "body": "components.sinkholespawner:UpdateTarget(${1:targetinfo})",
        "description": " ※参数: \n   (targetinfo)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushRemoteTargets:": {
        "prefix": "components.sinkholespawner:PushRemoteTargets",
        "body": "components.sinkholespawner:PushRemoteTargets()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOccupier:": {
        "prefix": "components.sittable:SetOccupier",
        "body": "components.sittable:SetOccupier(${1:occupier})",
        "description": " ※参数: \n   (occupier)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOccupiedBy:": {
        "prefix": "components.sittable:IsOccupiedBy",
        "body": "components.sittable:IsOccupiedBy(${1:occupier})",
        "description": " ※参数: \n   (occupier)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTween:": {
        "prefix": "components.sizetweener:StartTween",
        "body": "components.sizetweener:StartTween(${1:size},${2:time},${3:callback})",
        "description": " ※参数: \n   (size)<>[] \n   (time)<>[] \n   (callback)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeactivateSkill_Client:": {
        "prefix": "components.skilltreeupdater:DeactivateSkill_Client",
        "body": "components.skilltreeupdater:DeactivateSkill_Client(${1:skill})",
        "description": " ※参数: \n   (skill)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CountSkillTag:": {
        "prefix": "components.skilltreeupdater:CountSkillTag",
        "body": "components.skilltreeupdater:CountSkillTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPlayerSkillSelection:": {
        "prefix": "components.skilltreeupdater:SetPlayerSkillSelection",
        "body": "components.skilltreeupdater:SetPlayerSkillSelection(${1:skillselection})",
        "description": " ※参数: \n   (skillselection)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSkillXP:": {
        "prefix": "components.skilltreeupdater:GetSkillXP",
        "body": "components.skilltreeupdater:GetSkillXP()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeactivateSkill_Server:": {
        "prefix": "components.skilltreeupdater:DeactivateSkill_Server",
        "body": "components.skilltreeupdater:DeactivateSkill_Server(${1:skill})",
        "description": " ※参数: \n   (skill)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetActivatedSkills:": {
        "prefix": "components.skilltreeupdater:GetActivatedSkills",
        "body": "components.skilltreeupdater:GetActivatedSkills()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSkillXP_Server:": {
        "prefix": "components.skilltreeupdater:AddSkillXP_Server",
        "body": "components.skilltreeupdater:AddSkillXP_Server(${1:amount},${2:total})",
        "description": " ※参数: \n   (amount)<>[] \n   (total)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActivateSkill_Client:": {
        "prefix": "components.skilltreeupdater:ActivateSkill_Client",
        "body": "components.skilltreeupdater:ActivateSkill_Client(${1:skill})",
        "description": " ※参数: \n   (skill)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPointsForSkillXP:": {
        "prefix": "components.skilltreeupdater:GetPointsForSkillXP",
        "body": "components.skilltreeupdater:GetPointsForSkillXP(${1:skillxp})",
        "description": " ※参数: \n   (skillxp)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SendFromSkillTreeBlob:": {
        "prefix": "components.skilltreeupdater:SendFromSkillTreeBlob",
        "body": "components.skilltreeupdater:SendFromSkillTreeBlob(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSkipValidation:": {
        "prefix": "components.skilltreeupdater:SetSkipValidation",
        "body": "components.skilltreeupdater:SetSkipValidation(${1:skip})",
        "description": " ※参数: \n   (skip)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSilent:": {
        "prefix": "components.skilltreeupdater:SetSilent",
        "body": "components.skilltreeupdater:SetSilent(${1:silent})",
        "description": " ※参数: \n   (silent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasSkillTag:": {
        "prefix": "components.skilltreeupdater:HasSkillTag",
        "body": "components.skilltreeupdater:HasSkillTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSkillXP_Client:": {
        "prefix": "components.skilltreeupdater:AddSkillXP_Client",
        "body": "components.skilltreeupdater:AddSkillXP_Client(${1:amount},${2:total})",
        "description": " ※参数: \n   (amount)<>[] \n   (total)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSkillXP:": {
        "prefix": "components.skilltreeupdater:AddSkillXP",
        "body": "components.skilltreeupdater:AddSkillXP(${1:amount},${2:prefab},${3:fromrpc})",
        "description": " ※参数: \n   (amount)<>[] \n   (prefab)<>[] \n   (fromrpc)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPlayerSkillSelection:": {
        "prefix": "components.skilltreeupdater:GetPlayerSkillSelection",
        "body": "components.skilltreeupdater:GetPlayerSkillSelection()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeactivateSkill:": {
        "prefix": "components.skilltreeupdater:DeactivateSkill",
        "body": "components.skilltreeupdater:DeactivateSkill(${1:skill},${2:prefab},${3:fromrpc})",
        "description": " ※参数: \n   (skill)<>[] \n   (prefab)<>[] \n   (fromrpc)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActivateSkill:": {
        "prefix": "components.skilltreeupdater:ActivateSkill",
        "body": "components.skilltreeupdater:ActivateSkill(${1:skill},${2:prefab},${3:fromrpc})",
        "description": " ※参数: \n   (skill)<>[] \n   (prefab)<>[] \n   (fromrpc)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActivateSkill_Server:": {
        "prefix": "components.skilltreeupdater:ActivateSkill_Server",
        "body": "components.skilltreeupdater:ActivateSkill_Server(${1:skill})",
        "description": " ※参数: \n   (skill)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNamesFromSkillSelection:": {
        "prefix": "components.skilltreeupdater:GetNamesFromSkillSelection",
        "body": "components.skilltreeupdater:GetNamesFromSkillSelection(${1:skillselection})",
        "description": " ※参数: \n   (skillselection)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAvailableSkillPoints:": {
        "prefix": "components.skilltreeupdater:GetAvailableSkillPoints",
        "body": "components.skilltreeupdater:GetAvailableSkillPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsValidSkill:": {
        "prefix": "components.skilltreeupdater:IsValidSkill",
        "body": "components.skilltreeupdater:IsValidSkill(${1:skill})",
        "description": " ※参数: \n   (skill)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSkinName:": {
        "prefix": "components.skinner:SetSkinName",
        "body": "components.skinner:SetSkinName(${1:skin_name},${2:skip_beard_setup},${3:skip_skins_set})",
        "description": " ※参数: \n   (skin_name)<>[] \n   (skip_beard_setup)<>[] \n   (skip_skins_set)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMonkeyCurse:": {
        "prefix": "components.skinner:GetMonkeyCurse",
        "body": "components.skinner:GetMonkeyCurse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearMonkeyCurse:": {
        "prefix": "components.skinner:ClearMonkeyCurse",
        "body": "components.skinner:ClearMonkeyCurse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CopySkinsFromPlayer:": {
        "prefix": "components.skinner:CopySkinsFromPlayer",
        "body": "components.skinner:CopySkinsFromPlayer(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetClothing:": {
        "prefix": "components.skinner_beefalo:GetClothing",
        "body": "components.skinner_beefalo:GetClothing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetupNonPlayerData:": {
        "prefix": "components.skinner:SetupNonPlayerData",
        "body": "components.skinner:SetupNonPlayerData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearClothing:": {
        "prefix": "components.skinner_beefalo:ClearClothing",
        "body": "components.skinner_beefalo:ClearClothing(${1:type})",
        "description": " ※参数: \n   (type)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetClothing:": {
        "prefix": "components.skinner_beefalo:SetClothing",
        "body": "components.skinner_beefalo:SetClothing(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearAllClothing:": {
        "prefix": "components.skinner_beefalo:ClearAllClothing",
        "body": "components.skinner_beefalo:ClearAllClothing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HideAllClothing:": {
        "prefix": "components.skinner_beefalo:HideAllClothing",
        "body": "components.skinner_beefalo:HideAllClothing(${1:anim_state})",
        "description": " ※参数: \n   (anim_state)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMonkeyCurse:": {
        "prefix": "components.skinner:SetMonkeyCurse",
        "body": "components.skinner:SetMonkeyCurse(${1:monkey_curse})",
        "description": " ※参数: \n   (monkey_curse)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSkinMode:": {
        "prefix": "components.skinner:SetSkinMode",
        "body": "components.skinner:SetSkinMode(${1:skintype},${2:default_build})",
        "description": " ※参数: \n   (skintype)<>[] \n   (default_build)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.reloadclothing:": {
        "prefix": "components.skinner_beefalo:reloadclothing",
        "body": "components.skinner_beefalo:reloadclothing(${1:clothing})",
        "description": " ※参数: \n   (clothing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNocturnal:": {
        "prefix": "components.sleeper:SetNocturnal",
        "body": "components.sleeper:SetNocturnal(${1:b})",
        "description": " ※参数: \n   (b)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsHibernating:": {
        "prefix": "components.sleeper:IsHibernating",
        "body": "components.sleeper:IsHibernating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAsleep:": {
        "prefix": "components.sleeper:IsAsleep",
        "body": "components.sleeper:IsAsleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeAsleep:": {
        "prefix": "components.sleeper:GetTimeAsleep",
        "body": "components.sleeper:GetTimeAsleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddSleepiness:": {
        "prefix": "components.sleeper:AddSleepiness",
        "body": "components.sleeper:AddSleepiness(${1:sleepiness},${2:sleeptime})",
        "description": " ※参数: \n   (sleepiness)<>[] \n   (sleeptime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WakeUp:": {
        "prefix": "components.sleeper:WakeUp",
        "body": "components.sleeper:WakeUp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSleepTimeMultiplier:": {
        "prefix": "components.sleeper:GetSleepTimeMultiplier",
        "body": "components.sleeper:GetSleepTimeMultiplier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeAwake:": {
        "prefix": "components.sleeper:GetTimeAwake",
        "body": "components.sleeper:GetTimeAwake()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTest:": {
        "prefix": "components.sleeper:SetTest",
        "body": "components.sleeper:SetTest(${1:fn},${2:time})",
        "description": " ※参数: \n   (fn)<>[] \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWakeTest:": {
        "prefix": "components.sleeper:SetWakeTest",
        "body": "components.sleeper:SetWakeTest(${1:fn},${2:time})",
        "description": " ※参数: \n   (fn)<>[] \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GoToSleep:": {
        "prefix": "components.sleeper:GoToSleep",
        "body": "components.sleeper:GoToSleep(${1:sleeptime})",
        "description": " ※参数: \n   (sleeptime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSleepTest:": {
        "prefix": "components.sleeper:SetSleepTest",
        "body": "components.sleeper:SetSleepTest(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInDeepSleep:": {
        "prefix": "components.sleeper:IsInDeepSleep",
        "body": "components.sleeper:IsInDeepSleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTemperatureTickFn:": {
        "prefix": "components.sleepingbag:SetTemperatureTickFn",
        "body": "components.sleepingbag:SetTemperatureTickFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoSleep:": {
        "prefix": "components.sleepingbaguser:DoSleep",
        "body": "components.sleepingbaguser:DoSleep(${1:bed})",
        "description": " ※参数: \n   (bed)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSleepPhase:": {
        "prefix": "components.sleepingbag:SetSleepPhase",
        "body": "components.sleepingbag:SetSleepPhase(${1:phase})",
        "description": " ※参数: \n   (phase)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoWakeUp:": {
        "prefix": "components.sleepingbaguser:DoWakeUp",
        "body": "components.sleepingbaguser:DoWakeUp(${1:nostatechange})",
        "description": " ※参数: \n   (nostatechange)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSleepPhase:": {
        "prefix": "components.sleepingbag:GetSleepPhase",
        "body": "components.sleepingbag:GetSleepPhase()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSanityBonusMult:": {
        "prefix": "components.sleepingbaguser:SetSanityBonusMult",
        "body": "components.sleepingbaguser:SetSanityBonusMult(${1:bonus})",
        "description": " ※参数: \n   (bonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SleepTick:": {
        "prefix": "components.sleepingbaguser:SleepTick",
        "body": "components.sleepingbaguser:SleepTick()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldSleep:": {
        "prefix": "components.sleepingbaguser:ShouldSleep",
        "body": "components.sleepingbaguser:ShouldSleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHungerBonusMult:": {
        "prefix": "components.sleepingbaguser:SetHungerBonusMult",
        "body": "components.sleepingbaguser:SetHungerBonusMult(${1:bonus})",
        "description": " ※参数: \n   (bonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanSleepFn:": {
        "prefix": "components.sleepingbaguser:SetCanSleepFn",
        "body": "components.sleepingbaguser:SetCanSleepFn(${1:cansleepfn})",
        "description": " ※参数: \n   (cansleepfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetHealthBonusMult:": {
        "prefix": "components.sleepingbaguser:SetHealthBonusMult",
        "body": "components.sleepingbaguser:SetHealthBonusMult(${1:bonus})",
        "description": " ※参数: \n   (bonus)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCurrent:": {
        "prefix": "components.slipperyfeet:SetCurrent",
        "body": "components.slipperyfeet:SetCurrent(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcAccumulatingSpeed:": {
        "prefix": "components.slipperyfeet:CalcAccumulatingSpeed",
        "body": "components.slipperyfeet:CalcAccumulatingSpeed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Stop_Internal:": {
        "prefix": "components.slipperyfeet:Stop_Internal",
        "body": "components.slipperyfeet:Stop_Internal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Start_Internal:": {
        "prefix": "components.slipperyfeet:Start_Internal",
        "body": "components.slipperyfeet:Start_Internal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSlipperyAndNearbyEnts:": {
        "prefix": "components.slipperyfeet:GetSlipperyAndNearbyEnts",
        "body": "components.slipperyfeet:GetSlipperyAndNearbyEnts()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSlipperySource:": {
        "prefix": "components.slipperyfeet:StopSlipperySource",
        "body": "components.slipperyfeet:StopSlipperySource(${1:src},${2:key})",
        "description": " ※参数: \n   (src)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoDecay:": {
        "prefix": "components.slipperyfeet:DoDecay",
        "body": "components.slipperyfeet:DoDecay(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopUpdating_Internal:": {
        "prefix": "components.slipperyfeet:StopUpdating_Internal",
        "body": "components.slipperyfeet:StopUpdating_Internal(${1:reason})",
        "description": " ※参数: \n   (reason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartSlipperySource:": {
        "prefix": "components.slipperyfeet:StartSlipperySource",
        "body": "components.slipperyfeet:StartSlipperySource(${1:src},${2:key})",
        "description": " ※参数: \n   (src)<>[] \n   (key)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartUpdating_Internal:": {
        "prefix": "components.slipperyfeet:StartUpdating_Internal",
        "body": "components.slipperyfeet:StartUpdating_Internal(${1:reason})",
        "description": " ※参数: \n   (reason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAccumulating_Internal:": {
        "prefix": "components.slipperyfeet:SetAccumulating_Internal",
        "body": "components.slipperyfeet:SetAccumulating_Internal(${1:accumulating})",
        "description": " ※参数: \n   (accumulating)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSlipperyRate:": {
        "prefix": "components.slipperyfeettarget:SetSlipperyRate",
        "body": "components.slipperyfeettarget:SetSlipperyRate(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsSlipperyAtPoint:": {
        "prefix": "components.slipperyfeettarget:SetIsSlipperyAtPoint",
        "body": "components.slipperyfeettarget:SetIsSlipperyAtPoint(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSlipperyAtPosition:": {
        "prefix": "components.slipperyfeettarget:IsSlipperyAtPosition",
        "body": "components.slipperyfeettarget:IsSlipperyAtPosition(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSlipperyRate:": {
        "prefix": "components.slipperyfeettarget:GetSlipperyRate",
        "body": "components.slipperyfeettarget:GetSlipperyRate(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnEatSoulFn:": {
        "prefix": "components.souleater:SetOnEatSoulFn",
        "body": "components.souleater:SetOnEatSoulFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EatSoul:": {
        "prefix": "components.souleater:EatSoul",
        "body": "components.souleater:EatSoul(${1:soul})",
        "description": " ※参数: \n   (soul)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnVacateFn:": {
        "prefix": "components.spawner:SetOnVacateFn",
        "body": "components.spawner:SetOnVacateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetQueueSpawning:": {
        "prefix": "components.spawner:SetQueueSpawning",
        "body": "components.spawner:SetQueueSpawning(${1:queued},${2:retryperiod})",
        "description": " ※参数: \n   (queued)<>[] \n   (retryperiod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelSpawning:": {
        "prefix": "components.spawner:CancelSpawning",
        "body": "components.spawner:CancelSpawning()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Configure:": {
        "prefix": "components.spawner:Configure",
        "body": "components.spawner:Configure(${1:childname},${2:delay},${3:startdelay})",
        "description": " ※参数: \n   (childname)<>[] \n   (delay)<>[] \n   (startdelay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSpawnPending:": {
        "prefix": "components.spawner:IsSpawnPending",
        "body": "components.spawner:IsSpawnPending()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWaterSpawning:": {
        "prefix": "components.spawner:SetWaterSpawning",
        "body": "components.spawner:SetWaterSpawning(${1:spawn_in_water},${2:spawn_on_boats})",
        "description": " ※参数: \n   (spawn_in_water)<>[] \n   (spawn_on_boats)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnWithDelay:": {
        "prefix": "components.spawner:SpawnWithDelay",
        "body": "components.spawner:SpawnWithDelay(${1:delay})",
        "description": " ※参数: \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnOccupiedFn:": {
        "prefix": "components.spawner:SetOnOccupiedFn",
        "body": "components.spawner:SetOnOccupiedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FadeIn:": {
        "prefix": "components.spawnfader:FadeIn",
        "body": "components.spawnfader:FadeIn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResumeSpell:": {
        "prefix": "components.spell:ResumeSpell",
        "body": "components.spell:ResumeSpell()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStart:": {
        "prefix": "components.spell:OnStart",
        "body": "components.spell:OnStart()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetVariables:": {
        "prefix": "components.spell:SetVariables",
        "body": "components.spell:SetVariables(${1:variables})",
        "description": " ※参数: \n   (variables)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartSpell:": {
        "prefix": "components.spell:StartSpell",
        "body": "components.spell:StartSpell()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnTarget:": {
        "prefix": "components.spell:OnTarget",
        "body": "components.spell:OnTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetItems:": {
        "prefix": "components.spellbook:SetItems",
        "body": "components.spellbook:SetItems(${1:items})",
        "description": " ※参数: \n   (items)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFocusRadius:": {
        "prefix": "components.spellbook:SetFocusRadius",
        "body": "components.spellbook:SetFocusRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnOpenFn:": {
        "prefix": "components.spellbook:SetOnOpenFn",
        "body": "components.spellbook:SetOnOpenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSelectedSpell:": {
        "prefix": "components.spellbook:GetSelectedSpell",
        "body": "components.spellbook:GetSelectedSpell()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeUsedBy:": {
        "prefix": "components.spellbook:CanBeUsedBy",
        "body": "components.spellbook:CanBeUsedBy(${1:user})",
        "description": " ※参数: \n   (user)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnCloseFn:": {
        "prefix": "components.spellbook:SetOnCloseFn",
        "body": "components.spellbook:SetOnCloseFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OpenSpellBook:": {
        "prefix": "components.spellbook:OpenSpellBook",
        "body": "components.spellbook:OpenSpellBook(${1:user})",
        "description": " ※参数: \n   (user)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpellName:": {
        "prefix": "components.spellbook:SetSpellName",
        "body": "components.spellbook:SetSpellName(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasSpellFn:": {
        "prefix": "components.spellbook:HasSpellFn",
        "body": "components.spellbook:HasSpellFn()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpellName:": {
        "prefix": "components.spellbook:GetSpellName",
        "body": "components.spellbook:GetSpellName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRequiredTag:": {
        "prefix": "components.spellbook:SetRequiredTag",
        "body": "components.spellbook:SetRequiredTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBgData:": {
        "prefix": "components.spellbook:SetBgData",
        "body": "components.spellbook:SetBgData(${1:bgdata})",
        "description": " ※参数: \n   (bgdata)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SelectSpell:": {
        "prefix": "components.spellbook:SelectSpell",
        "body": "components.spellbook:SelectSpell(${1:id})",
        "description": " ※参数: \n   (id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterSpellbookCooldown:": {
        "prefix": "components.spellbookcooldowns:RegisterSpellbookCooldown",
        "body": "components.spellbookcooldowns:RegisterSpellbookCooldown(${1:cd})",
        "description": " ※参数: \n   (cd)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpellCooldownPercent:": {
        "prefix": "components.spellbookcooldowns:GetSpellCooldownPercent",
        "body": "components.spellbookcooldowns:GetSpellCooldownPercent(${1:spellname})",
        "description": " ※参数: \n   (spellname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RestartSpellCooldown:": {
        "prefix": "components.spellbookcooldowns:RestartSpellCooldown",
        "body": "components.spellbookcooldowns:RestartSpellCooldown(${1:spellname},${2:duration})",
        "description": " ※参数: \n   (spellname)<>[] \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSpellCooldown:": {
        "prefix": "components.spellbookcooldowns:StopSpellCooldown",
        "body": "components.spellbookcooldowns:StopSpellCooldown(${1:spellname})",
        "description": " ※参数: \n   (spellname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnSpellCastFn:": {
        "prefix": "components.spellcaster:SetOnSpellCastFn",
        "body": "components.spellcaster:SetOnSpellCastFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpellType:": {
        "prefix": "components.spellcaster:SetSpellType",
        "body": "components.spellcaster:SetSpellType(${1:type})",
        "description": " ※参数: \n   (type)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanCastFn:": {
        "prefix": "components.spellcaster:SetCanCastFn",
        "body": "components.spellcaster:SetCanCastFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanMutate:": {
        "prefix": "components.spidermutator:CanMutate",
        "body": "components.spidermutator:CanMutate(${1:spider})",
        "description": " ※参数: \n   (spider)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMutationTarget:": {
        "prefix": "components.spidermutator:SetMutationTarget",
        "body": "components.spidermutator:SetMutationTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Spook:": {
        "prefix": "components.spooked:Spook",
        "body": "components.spooked:Spook(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldSpook:": {
        "prefix": "components.spooked:ShouldSpook",
        "body": "components.spooked:ShouldSpook()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInSquad:": {
        "prefix": "components.squadmember:IsInSquad",
        "body": "components.squadmember:IsInSquad()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.JoinSquad:": {
        "prefix": "components.squadmember:JoinSquad",
        "body": "components.squadmember:JoinSquad(${1:squadname})",
        "description": " ※参数: \n   (squadname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOtherMembers:": {
        "prefix": "components.squadmember:GetOtherMembers",
        "body": "components.squadmember:GetOtherMembers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LeaveSquad:": {
        "prefix": "components.squadmember:LeaveSquad",
        "body": "components.squadmember:LeaveSquad()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSquadName:": {
        "prefix": "components.squadmember:GetSquadName",
        "body": "components.squadmember:GetSquadName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIgnoreMaxSize:": {
        "prefix": "components.stackable:SetIgnoreMaxSize",
        "body": "components.stackable:SetIgnoreMaxSize(${1:ignoremaxsize})",
        "description": " ※参数: \n   (ignoremaxsize)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RoomLeft:": {
        "prefix": "components.stackable:RoomLeft",
        "body": "components.stackable:RoomLeft()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOverStacked:": {
        "prefix": "components.stackable:IsOverStacked",
        "body": "components.stackable:IsOverStacked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Put:": {
        "prefix": "components.stackable:Put",
        "body": "components.stackable:Put(${1:item},${2:source_pos})",
        "description": " ※参数: \n   (item)<>[] \n   (source_pos)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StackSize:": {
        "prefix": "components.stackable:StackSize",
        "body": "components.stackable:StackSize()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Get:": {
        "prefix": "components.stackable:Get",
        "body": "components.stackable:Get(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsStack:": {
        "prefix": "components.stackable:IsStack",
        "body": "components.stackable:IsStack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnDeStack:": {
        "prefix": "components.stackable:SetOnDeStack",
        "body": "components.stackable:SetOnDeStack(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoCastingDelta:": {
        "prefix": "components.staffsanity:DoCastingDelta",
        "body": "components.staffsanity:DoCastingDelta(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMultiplier:": {
        "prefix": "components.staffsanity:SetMultiplier",
        "body": "components.staffsanity:SetMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CollectCast:": {
        "prefix": "components.stageactingprop:CollectCast",
        "body": "components.stageactingprop:CollectCast(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnBirds:": {
        "prefix": "components.stageactingprop:SpawnBirds",
        "body": "components.stageactingprop:SpawnBirds(${1:arch})",
        "description": " ※参数: \n   (arch)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoPerformance:": {
        "prefix": "components.stageactingprop:DoPerformance",
        "body": "components.stageactingprop:DoPerformance(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDisabledFn:": {
        "prefix": "components.stageactingprop:SetDisabledFn",
        "body": "components.stageactingprop:SetDisabledFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEnabledFn:": {
        "prefix": "components.stageactingprop:SetEnabledFn",
        "body": "components.stageactingprop:SetEnabledFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishAct:": {
        "prefix": "components.stageactingprop:FinishAct",
        "body": "components.stageactingprop:FinishAct(${1:next_act})",
        "description": " ※参数: \n   (next_act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddGeneralScript:": {
        "prefix": "components.stageactingprop:AddGeneralScript",
        "body": "components.stageactingprop:AddGeneralScript(${1:script_name},${2:script_content})",
        "description": " ※参数: \n   (script_name)<>[] \n   (script_content)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddPlay:": {
        "prefix": "components.stageactingprop:AddPlay",
        "body": "components.stageactingprop:AddPlay(${1:playdata})",
        "description": " ※参数: \n   (playdata)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckCostume:": {
        "prefix": "components.stageactingprop:CheckCostume",
        "body": "components.stageactingprop:CheckCostume(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableProp:": {
        "prefix": "components.stageactingprop:EnableProp",
        "body": "components.stageactingprop:EnableProp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DisableProp:": {
        "prefix": "components.stageactingprop:DisableProp",
        "body": "components.stageactingprop:DisableProp(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindCostume:": {
        "prefix": "components.stageactingprop:FindCostume",
        "body": "components.stageactingprop:FindCostume(${1:head},${2:body})",
        "description": " ※参数: \n   (head)<>[] \n   (body)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearPerformance:": {
        "prefix": "components.stageactingprop:ClearPerformance",
        "body": "components.stageactingprop:ClearPerformance(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FindScript:": {
        "prefix": "components.stageactingprop:FindScript",
        "body": "components.stageactingprop:FindScript(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndPerformance:": {
        "prefix": "components.stageactingprop:EndPerformance",
        "body": "components.stageactingprop:EndPerformance(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTellingStory:": {
        "prefix": "components.storyteller:IsTellingStory",
        "body": "components.storyteller:IsTellingStory()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AbortStory:": {
        "prefix": "components.storyteller:AbortStory",
        "body": "components.storyteller:AbortStory(${1:reason})",
        "description": " ※参数: \n   (reason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStoryTick:": {
        "prefix": "components.storyteller:OnStoryTick",
        "body": "components.storyteller:OnStoryTick()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.performplay:": {
        "prefix": "components.stageactor:performplay",
        "body": "components.stageactor:performplay()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.performedplay:": {
        "prefix": "components.stageactor:performedplay",
        "body": "components.stageactor:performedplay(${1:story_id})",
        "description": " ※参数: \n   (story_id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStoryBeginFn:": {
        "prefix": "components.storyteller:SetOnStoryBeginFn",
        "body": "components.storyteller:SetOnStoryBeginFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TellStory:": {
        "prefix": "components.storyteller:TellStory",
        "body": "components.storyteller:TellStory(${1:storyprop})",
        "description": " ※参数: \n   (storyprop)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStoryOverFn:": {
        "prefix": "components.storyteller:SetOnStoryOverFn",
        "body": "components.storyteller:SetOnStoryOverFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnDone:": {
        "prefix": "components.storyteller:OnDone",
        "body": "components.storyteller:OnDone()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSteering:": {
        "prefix": "components.steeringwheel:StopSteering",
        "body": "components.steeringwheel:StopSteering()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartSteering:": {
        "prefix": "components.steeringwheel:StartSteering",
        "body": "components.steeringwheel:StartSteering(${1:sailor})",
        "description": " ※参数: \n   (sailor)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartSteeringFn:": {
        "prefix": "components.steeringwheel:SetOnStartSteeringFn",
        "body": "components.steeringwheel:SetOnStartSteeringFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopSteeringFn:": {
        "prefix": "components.steeringwheel:SetOnStopSteeringFn",
        "body": "components.steeringwheel:SetOnStopSteeringFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSteeringWheel:": {
        "prefix": "components.steeringwheeluser:SetSteeringWheel",
        "body": "components.steeringwheeluser:SetSteeringWheel(${1:steering_wheel})",
        "description": " ※参数: \n   (steering_wheel)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SteerInDir:": {
        "prefix": "components.steeringwheeluser:SteerInDir",
        "body": "components.steeringwheeluser:SteerInDir(${1:dir_x},${2:dir_z})",
        "description": " ※参数: \n   (dir_x)<>[] \n   (dir_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Steer:": {
        "prefix": "components.steeringwheeluser:Steer",
        "body": "components.steeringwheeluser:Steer(${1:pos_x},${2:pos_z})",
        "description": " ※参数: \n   (pos_x)<>[] \n   (pos_z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartCooking:": {
        "prefix": "components.stewer:StartCooking",
        "body": "components.stewer:StartCooking(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRecipeForProduct:": {
        "prefix": "components.stewer:GetRecipeForProduct",
        "body": "components.stewer:GetRecipeForProduct()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopCooking:": {
        "prefix": "components.stewer:StopCooking",
        "body": "components.stewer:StopCooking(${1:reason})",
        "description": " ※参数: \n   (reason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSpoiling:": {
        "prefix": "components.stewer:IsSpoiling",
        "body": "components.stewer:IsSpoiling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToCook:": {
        "prefix": "components.stewer:GetTimeToCook",
        "body": "components.stewer:GetTimeToCook()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCooking:": {
        "prefix": "components.stewer:IsCooking",
        "body": "components.stewer:IsCooking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetCurrentStorm:": {
        "prefix": "components.stormwatcher:GetCurrentStorm",
        "body": "components.stormwatcher:GetCurrentStorm(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckStorms:": {
        "prefix": "components.stormwatcher:CheckStorms",
        "body": "components.stormwatcher:CheckStorms(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetStormLevel:": {
        "prefix": "components.stormwatcher:GetStormLevel",
        "body": "components.stormwatcher:GetStormLevel(${1:stormtype})",
        "description": " ※参数: \n   (stormtype)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateStormLevel:": {
        "prefix": "components.stormwatcher:UpdateStormLevel",
        "body": "components.stormwatcher:UpdateStormLevel()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateStorms:": {
        "prefix": "components.stormwatcher:UpdateStorms",
        "body": "components.stormwatcher:UpdateStorms(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStoryToTellFn:": {
        "prefix": "components.storyteller:SetStoryToTellFn",
        "body": "components.storyteller:SetStoryToTellFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAiming:": {
        "prefix": "components.strafer:IsAiming",
        "body": "components.strafer:IsAiming()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWidthRatio:": {
        "prefix": "components.stretcher:SetWidthRatio",
        "body": "components.stretcher:SetWidthRatio(${1:ratio})",
        "description": " ※参数: \n   (ratio)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStretchTarget:": {
        "prefix": "components.stretcher:SetStretchTarget",
        "body": "components.stretcher:SetStretchTarget(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRestingLength:": {
        "prefix": "components.stretcher:SetRestingLength",
        "body": "components.stretcher:SetRestingLength(${1:length})",
        "description": " ※参数: \n   (length)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTimeToStuck:": {
        "prefix": "components.stuckdetection:SetTimeToStuck",
        "body": "components.stuckdetection:SetTimeToStuck(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDamageInPeriod:": {
        "prefix": "components.stunnable:GetDamageInPeriod",
        "body": "components.stunnable:GetDamageInPeriod()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Stun:": {
        "prefix": "components.stunnable:Stun",
        "body": "components.stunnable:Stun()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLanded:": {
        "prefix": "components.submersible:OnLanded",
        "body": "components.submersible:OnLanded()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Submerge:": {
        "prefix": "components.submersible:Submerge",
        "body": "components.submersible:Submerge()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeSunken:": {
        "prefix": "components.submersible:MakeSunken",
        "body": "components.submersible:MakeSunken(${1:x},${2:z},${3:ignore_boats},${4:nosplash})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n   (ignore_boats)<>[] \n   (nosplash)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetUnderwaterObject:": {
        "prefix": "components.submersible:GetUnderwaterObject",
        "body": "components.submersible:GetUnderwaterObject()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartTackleFn:": {
        "prefix": "components.tackler:SetOnStartTackleFn",
        "body": "components.tackler:SetOnStartTackleFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnCollideFn:": {
        "prefix": "components.tackler:SetOnCollideFn",
        "body": "components.tackler:SetOnCollideFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetStructureDamageMultiplier:": {
        "prefix": "components.tackler:SetStructureDamageMultiplier",
        "body": "components.tackler:SetStructureDamageMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDistance:": {
        "prefix": "components.tackler:SetDistance",
        "body": "components.tackler:SetDistance(${1:distance})",
        "description": " ※参数: \n   (distance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTackle:": {
        "prefix": "components.tackler:StartTackle",
        "body": "components.tackler:StartTackle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddWorkAction:": {
        "prefix": "components.tackler:AddWorkAction",
        "body": "components.tackler:AddWorkAction(${1:action},${2:amount})",
        "description": " ※参数: \n   (action)<>[] \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEdgeDistance:": {
        "prefix": "components.tackler:SetEdgeDistance",
        "body": "components.tackler:SetEdgeDistance(${1:distance})",
        "description": " ※参数: \n   (distance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTrampleFn:": {
        "prefix": "components.tackler:SetOnTrampleFn",
        "body": "components.tackler:SetOnTrampleFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckCollision:": {
        "prefix": "components.tackler:CheckCollision",
        "body": "components.tackler:CheckCollision(${1:ignores})",
        "description": " ※参数: \n   (ignores)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeChatter:": {
        "prefix": "components.talker:MakeChatter",
        "body": "components.talker:MakeChatter()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopIgnoringAll:": {
        "prefix": "components.talker:StopIgnoringAll",
        "body": "components.talker:StopIgnoringAll(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IgnoreAll:": {
        "prefix": "components.talker:IgnoreAll",
        "body": "components.talker:IgnoreAll(${1:source})",
        "description": " ※参数: \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShutUp:": {
        "prefix": "components.talker:ShutUp",
        "body": "components.talker:ShutUp()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsCloningTarget:": {
        "prefix": "components.targettracker:IsCloningTarget",
        "body": "components.targettracker:IsCloningTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetShouldKeepTrackingFn:": {
        "prefix": "components.targettracker:SetShouldKeepTrackingFn",
        "body": "components.targettracker:SetShouldKeepTrackingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeTracking:": {
        "prefix": "components.targettracker:GetTimeTracking",
        "body": "components.targettracker:GetTimeTracking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTimeUpdateFn:": {
        "prefix": "components.targettracker:SetOnTimeUpdateFn",
        "body": "components.targettracker:SetOnTimeUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnResumeFn:": {
        "prefix": "components.targettracker:SetOnResumeFn",
        "body": "components.targettracker:SetOnResumeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTracking:": {
        "prefix": "components.targettracker:IsTracking",
        "body": "components.targettracker:IsTracking(${1:testtarget})",
        "description": " ※参数: \n   (testtarget)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnPauseFn:": {
        "prefix": "components.targettracker:SetOnPauseFn",
        "body": "components.targettracker:SetOnPauseFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTimeTracking:": {
        "prefix": "components.targettracker:SetTimeTracking",
        "body": "components.targettracker:SetTimeTracking(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnResetTarget:": {
        "prefix": "components.targettracker:SetOnResetTarget",
        "body": "components.targettracker:SetOnResetTarget(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CloneTargetFrom:": {
        "prefix": "components.targettracker:CloneTargetFrom",
        "body": "components.targettracker:CloneTargetFrom(${1:item},${2:pausetime})",
        "description": " ※参数: \n   (item)<>[] \n   (pausetime)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRecipe:": {
        "prefix": "components.teacher:SetRecipe",
        "body": "components.teacher:SetRecipe(${1:recipe})",
        "description": " ※参数: \n   (recipe)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.JoinFormation:": {
        "prefix": "components.teamattacker:JoinFormation",
        "body": "components.teamattacker:JoinFormation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOrders:": {
        "prefix": "components.teamattacker:GetOrders",
        "body": "components.teamattacker:GetOrders()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SearchForTeam:": {
        "prefix": "components.teamattacker:SearchForTeam",
        "body": "components.teamattacker:SearchForTeam()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ShouldGoHome:": {
        "prefix": "components.teamattacker:ShouldGoHome",
        "body": "components.teamattacker:ShouldGoHome()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.LeaveTeam:": {
        "prefix": "components.teamattacker:LeaveTeam",
        "body": "components.teamattacker:LeaveTeam()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TeamSizeControl:": {
        "prefix": "components.teamleader:TeamSizeControl",
        "body": "components.teamleader:TeamSizeControl()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLostTeammate:": {
        "prefix": "components.teamleader:OnLostTeammate",
        "body": "components.teamleader:OnLostTeammate(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNewThreat:": {
        "prefix": "components.teamleader:SetNewThreat",
        "body": "components.teamleader:SetNewThreat(${1:threat})",
        "description": " ※参数: \n   (threat)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTeamSize:": {
        "prefix": "components.teamleader:GetTeamSize",
        "body": "components.teamleader:GetTeamSize()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AllInState:": {
        "prefix": "components.teamleader:AllInState",
        "body": "components.teamleader:AllInState(${1:state})",
        "description": " ※参数: \n   (state)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DisbandTeam:": {
        "prefix": "components.teamleader:DisbandTeam",
        "body": "components.teamleader:DisbandTeam()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAttackGrpSize:": {
        "prefix": "components.teamleader:SetAttackGrpSize",
        "body": "components.teamleader:SetAttackGrpSize(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ManageChase:": {
        "prefix": "components.teamleader:ManageChase",
        "body": "components.teamleader:ManageChase(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumberToAttack:": {
        "prefix": "components.teamleader:NumberToAttack",
        "body": "components.teamleader:NumberToAttack()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CenterLeader:": {
        "prefix": "components.teamleader:CenterLeader",
        "body": "components.teamleader:CenterLeader()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTeamEmpty:": {
        "prefix": "components.teamleader:IsTeamEmpty",
        "body": "components.teamleader:IsTeamEmpty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GiveOrdersToAllWithOrder:": {
        "prefix": "components.teamleader:GiveOrdersToAllWithOrder",
        "body": "components.teamleader:GiveOrdersToAllWithOrder(${1:order},${2:oldorder})",
        "description": " ※参数: \n   (order)<>[] \n   (oldorder)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GiveOrders:": {
        "prefix": "components.teamleader:GiveOrders",
        "body": "components.teamleader:GiveOrders(${1:order},${2:num})",
        "description": " ※参数: \n   (order)<>[] \n   (num)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTeamFull:": {
        "prefix": "components.teamleader:IsTeamFull",
        "body": "components.teamleader:IsTeamFull()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ValidateTeam:": {
        "prefix": "components.teamleader:ValidateTeam",
        "body": "components.teamleader:ValidateTeam()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NewTeammate:": {
        "prefix": "components.teamleader:NewTeammate",
        "body": "components.teamleader:NewTeammate(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BroadcastDistress:": {
        "prefix": "components.teamleader:BroadcastDistress",
        "body": "components.teamleader:BroadcastDistress(${1:member})",
        "description": " ※参数: \n   (member)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDestPositionFn:": {
        "prefix": "components.teleportedoverride:SetDestPositionFn",
        "body": "components.teleportedoverride:SetDestPositionFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDestTargetFn:": {
        "prefix": "components.teleportedoverride:SetDestTargetFn",
        "body": "components.teleportedoverride:SetDestTargetFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDestPosition:": {
        "prefix": "components.teleportedoverride:GetDestPosition",
        "body": "components.teleportedoverride:GetDestPosition()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDestTarget:": {
        "prefix": "components.teleportedoverride:GetDestTarget",
        "body": "components.teleportedoverride:GetDestTarget()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UseTemporaryExit:": {
        "prefix": "components.teleporter:UseTemporaryExit",
        "body": "components.teleporter:UseTemporaryExit(${1:doer},${2:temporaryexit})",
        "description": " ※参数: \n   (doer)<>[] \n   (temporaryexit)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnregisterTeleportee:": {
        "prefix": "components.teleporter:UnregisterTeleportee",
        "body": "components.teleporter:UnregisterTeleportee(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MigrationTarget:": {
        "prefix": "components.teleporter:MigrationTarget",
        "body": "components.teleporter:MigrationTarget(${1:worldid},${2:x},${3:y},${4:z})",
        "description": " ※参数: \n   (worldid)<>[] \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Target:": {
        "prefix": "components.teleporter:Target",
        "body": "components.teleporter:Target(${1:otherTeleporter})",
        "description": " ※参数: \n   (otherTeleporter)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReceivePlayer:": {
        "prefix": "components.teleporter:ReceivePlayer",
        "body": "components.teleporter:ReceivePlayer(${1:doer},${2:source})",
        "description": " ※参数: \n   (doer)<>[] \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterTeleportee:": {
        "prefix": "components.teleporter:RegisterTeleportee",
        "body": "components.teleporter:RegisterTeleportee(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsTargetBusy:": {
        "prefix": "components.teleporter:IsTargetBusy",
        "body": "components.teleporter:IsTargetBusy()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ReceiveItem:": {
        "prefix": "components.teleporter:ReceiveItem",
        "body": "components.teleporter:ReceiveItem(${1:item},${2:source})",
        "description": " ※参数: \n   (item)<>[] \n   (source)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushDoneTeleporting:": {
        "prefix": "components.teleporter:PushDoneTeleporting",
        "body": "components.teleporter:PushDoneTeleporting(${1:obj})",
        "description": " ※参数: \n   (obj)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTemperature:": {
        "prefix": "components.temperatureoverrider:SetTemperature",
        "body": "components.temperatureoverrider:SetTemperature(${1:temperature})",
        "description": " ※参数: \n   (temperature)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetFreezingHurtRate:": {
        "prefix": "components.temperature:SetFreezingHurtRate",
        "body": "components.temperature:SetFreezingHurtRate(${1:rate})",
        "description": " ※参数: \n   (rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IgnoreTags:": {
        "prefix": "components.temperature:IgnoreTags",
        "body": "components.temperature:IgnoreTags(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMoisturePenalty:": {
        "prefix": "components.temperature:GetMoisturePenalty",
        "body": "components.temperature:GetMoisturePenalty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsOverheating:": {
        "prefix": "components.temperature:IsOverheating",
        "body": "components.temperature:IsOverheating()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTemperatureInBelly:": {
        "prefix": "components.temperature:SetTemperatureInBelly",
        "body": "components.temperature:SetTemperatureInBelly(${1:delta},${2:duration})",
        "description": " ※参数: \n   (delta)<>[] \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetModifier:": {
        "prefix": "components.temperature:SetModifier",
        "body": "components.temperature:SetModifier(${1:name},${2:value})",
        "description": " ※参数: \n   (name)<>[] \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveModifier:": {
        "prefix": "components.temperature:RemoveModifier",
        "body": "components.temperature:RemoveModifier(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTemp:": {
        "prefix": "components.temperature:SetTemp",
        "body": "components.temperature:SetTemp(${1:temp})",
        "description": " ※参数: \n   (temp)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsFreezing:": {
        "prefix": "components.temperature:IsFreezing",
        "body": "components.temperature:IsFreezing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOverheatHurtRate:": {
        "prefix": "components.temperature:SetOverheatHurtRate",
        "body": "components.temperature:SetOverheatHurtRate(${1:rate})",
        "description": " ※参数: \n   (rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTemperature:": {
        "prefix": "components.temperatureoverrider:GetTemperature",
        "body": "components.temperatureoverrider:GetTemperature()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Terraform:": {
        "prefix": "components.terraformer:Terraform",
        "body": "components.terraformer:Terraform(${1:pt},${2:doer})",
        "description": " ※参数: \n   (pt)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StealItem:": {
        "prefix": "components.thief:StealItem",
        "body": "components.thief:StealItem(${1:victim},${2:itemtosteal},${3:attack})",
        "description": " ※参数: \n   (victim)<>[] \n   (itemtosteal)<>[] \n   (attack)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStolenFn:": {
        "prefix": "components.thief:SetOnStolenFn",
        "body": "components.thief:SetOnStolenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResumeTimer:": {
        "prefix": "components.worldsettingstimer:ResumeTimer",
        "body": "components.worldsettingstimer:ResumeTimer(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeLeft:": {
        "prefix": "components.worldsettingstimer:GetTimeLeft",
        "body": "components.worldsettingstimer:GetTimeLeft(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopTimer:": {
        "prefix": "components.worldsettingstimer:StopTimer",
        "body": "components.worldsettingstimer:StopTimer(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PauseTimer:": {
        "prefix": "components.worldsettingstimer:PauseTimer",
        "body": "components.worldsettingstimer:PauseTimer(${1:name},${2:blocklongupdate})",
        "description": " ※参数: \n   (name)<>[] \n   (blocklongupdate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTimeLeft:": {
        "prefix": "components.worldsettingstimer:SetTimeLeft",
        "body": "components.worldsettingstimer:SetTimeLeft(${1:name},${2:time})",
        "description": " ※参数: \n   (name)<>[] \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeElapsed:": {
        "prefix": "components.worldsettingstimer:GetTimeElapsed",
        "body": "components.worldsettingstimer:GetTimeElapsed(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TimerExists:": {
        "prefix": "components.worldsettingstimer:TimerExists",
        "body": "components.worldsettingstimer:TimerExists(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTimer:": {
        "prefix": "components.worldsettingstimer:StartTimer",
        "body": "components.worldsettingstimer:StartTimer(${1:name},${2:time},${3:paused},${4:initialtime_override},${5:blocklongupdate})",
        "description": " ※参数: \n   (name)<>[] \n   (time)<>[] \n   (paused)<>[] \n   (initialtime_override)<>[] \n   (blocklongupdate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnToggleFn:": {
        "prefix": "components.toggleableitem:SetOnToggleFn",
        "body": "components.toggleableitem:SetOnToggleFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ToggleItem:": {
        "prefix": "components.toggleableitem:ToggleItem",
        "body": "components.toggleableitem:ToggleItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanDoAction:判断是否可以有某种工具的功能，比如CanDoAction(ACTIONS.CHOP) 判断它是否有砍的功能": {
        "prefix": "components.tool:CanDoAction",
        "body": "components.tool:CanDoAction(${1:action})",
        "description": " ※参数: \n   (action)<tbl>[工具动作类型] \n ※返回: <bool>[是否有action的工具动作类型] \n ※说明: 判断是否可以有某种工具的功能，比如CanDoAction(ACTIONS.CHOP) 判断它是否有砍的功能\n ※贡献者: @御坂十七号"
    },
    "组件.SetAction:设置工作类型和效率，工具类型有:ACTIONS.CHOP、ACTIONS.DIG、ACTIONS.HAMMER、ACTIONS.MINE、ACTIONS.NET、ACTIONS.PLAY、ACTIONS.UNSADDLE、ACTIONS.REACH_HIGH、ACTIONS.SCYTHE, 比如粗壮常青树需要砍15次，普通斧效率为1，月光玻璃斧效率为2.5，普通斧头要砍15次，月光玻璃斧只要6次。": {
        "prefix": "components.tool:SetAction",
        "body": "components.tool:SetAction(${1:action},${2:effectiveness})",
        "description": " ※参数: \n   (action)<tbl>[工具动作类型] \n   (effectiveness)<num>[效率] \n ※返回: \n ※说明: 设置工作类型和效率，工具类型有:ACTIONS.CHOP、ACTIONS.DIG、ACTIONS.HAMMER、ACTIONS.MINE、ACTIONS.NET、ACTIONS.PLAY、ACTIONS.UNSADDLE、ACTIONS.REACH_HIGH、ACTIONS.SCYTHE, 比如粗壮常青树需要砍15次，普通斧效率为1，月光玻璃斧效率为2.5，普通斧头要砍15次，月光玻璃斧只要6次。\n ※贡献者: @御坂十七号"
    },
    "组件.CanDoToughWork:": {
        "prefix": "components.tool:CanDoToughWork",
        "body": "components.tool:CanDoToughWork()",
        "description": " ※参数: \n ※返回: <bool>[返回该工具是否可以在困难模式下工作] \n ※说明: \n ※贡献者: @御坂十七号"
    },
    "组件.EnableToughWork:是否可以在困难模式下工作，传入true就可以豁免workable组件中tough的影响，比如亮茄粉碎者就调用了inst.components.tool:EnableToughWork(true)": {
        "prefix": "components.tool:EnableToughWork",
        "body": "components.tool:EnableToughWork(${1:tough})",
        "description": " ※参数: \n   (tough)<bool>[困难的] \n ※返回: \n ※说明: 是否可以在困难模式下工作，传入true就可以豁免workable组件中tough的影响，比如亮茄粉碎者就调用了inst.components.tool:EnableToughWork(true)\n ※贡献者: @御坂十七号"
    },
    "组件.GetEffectiveness:": {
        "prefix": "components.worker:GetEffectiveness",
        "body": "components.worker:GetEffectiveness(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsUsed:": {
        "prefix": "components.touchstonetracker:IsUsed",
        "body": "components.touchstonetracker:IsUsed(${1:touchstone})",
        "description": " ※参数: \n   (touchstone)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AcceptGift:检查是否能够和愿意接受物品，根据堆叠处理，最后根据配决定是否删除物品或放入库存。触发回调函数/交易失败回调函数": {
        "prefix": "components.trader:AcceptGift",
        "body": "components.trader:AcceptGift(${1:giver},${2:item},${3:count})",
        "description": " ※参数: \n   (giver)<>[] \n   (item)<>[] \n   (count)<>[] \n ※返回: \n ※说明: 检查是否能够和愿意接受物品，根据堆叠处理，最后根据配决定是否删除物品或放入库存。触发回调函数/交易失败回调函数\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.IsAcceptingStacks:检查self.acceptstacks的值": {
        "prefix": "components.trader:IsAcceptingStacks",
        "body": "components.trader:IsAcceptingStacks()",
        "description": " ※参数: \n ※返回: \n ※说明: 检查self.acceptstacks的值\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.OnRemoveFromEntity:移除trader以及alltrader标签": {
        "prefix": "components.trader:OnRemoveFromEntity",
        "body": "components.trader:OnRemoveFromEntity()",
        "description": " ※参数: \n ※返回: \n ※说明: 移除trader以及alltrader标签\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.SetAbleToAcceptTest:可以用来覆盖 AbleToAccept 测试": {
        "prefix": "components.trader:SetAbleToAcceptTest",
        "body": "components.trader:SetAbleToAcceptTest(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: 可以用来覆盖 AbleToAccept 测试\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.GetDebugString:调试时快速检查 Trader 对象的交易功能是否启用。": {
        "prefix": "components.trader:GetDebugString",
        "body": "components.trader:GetDebugString()",
        "description": " ※参数: \n ※返回: \n ※说明: 调试时快速检查 Trader 对象的交易功能是否启用。\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.WantsToAccept:判断交易者是否愿意接受某个物品": {
        "prefix": "components.trader:WantsToAccept",
        "body": "components.trader:WantsToAccept(${1:item},${2:giver},${3:count})",
        "description": " ※参数: \n   (item)<>[] \n   (giver)<>[] \n   (count)<>[] \n ※返回: \n ※说明: 判断交易者是否愿意接受某个物品\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.Enable:设置self.enabled = true": {
        "prefix": "components.trader:Enable",
        "body": "components.trader:Enable()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置self.enabled = true\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.AbleToAccept:检查交易者是否具备物理上的能力来接受物品，例如是否在战斗中、是否在睡觉、或者是否已经死亡。": {
        "prefix": "components.trader:AbleToAccept",
        "body": "components.trader:AbleToAccept(${1:item},${2:giver},${3:count})",
        "description": " ※参数: \n   (item)<>[交易物品] \n   (giver)<>[] \n   (count)<>[] \n ※返回: \n ※说明: 检查交易者是否具备物理上的能力来接受物品，例如是否在战斗中、是否在睡觉、或者是否已经死亡。\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.Disable:设置self.enabled = false": {
        "prefix": "components.trader:Disable",
        "body": "components.trader:Disable()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置self.enabled = false\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.SetOnAccept:交易成功回调函数": {
        "prefix": "components.trader:SetOnAccept",
        "body": "components.trader:SetOnAccept(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: 交易成功回调函数\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.SetOnRefuse:交易失败回调函数": {
        "prefix": "components.trader:SetOnRefuse",
        "body": "components.trader:SetOnRefuse(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: 交易失败回调函数\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.IsTryingToTradeWithMe:正在尝试与当前 Trader 实例进行交易": {
        "prefix": "components.trader:IsTryingToTradeWithMe",
        "body": "components.trader:IsTryingToTradeWithMe(${1:inst})",
        "description": " ※参数: \n   (inst)<>[玩家] \n ※返回: <bool>[] \n ※说明: 正在尝试与当前 Trader 实例进行交易\n ※贡献者: @超能力拓芙铁拳 "
    },
    "组件.SetAcceptTest:在AbleToAccept通过后执行，用于进一步判断是否接受某个物品": {
        "prefix": "components.trader:SetAcceptTest",
        "body": "components.trader:SetAcceptTest(${1:fn})",
        "description": " ※参数: \n   (fn)<判断函数>[判断物品是否可交易] \n ※返回: \n ※说明: 在AbleToAccept通过后执行，用于进一步判断是否接受某个物品\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.SetAcceptStacks:设置self.acceptstacks = true": {
        "prefix": "components.trader:SetAcceptStacks",
        "body": "components.trader:SetAcceptStacks()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置self.acceptstacks = true\n ※贡献者: @超能力拓芙铁拳"
    },
    "组件.SetTransformWorldEvent:": {
        "prefix": "components.transformer:SetTransformWorldEvent",
        "body": "components.transformer:SetTransformWorldEvent(${1:event},${2:value})",
        "description": " ※参数: \n   (event)<>[] \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRevertWorldEvent:": {
        "prefix": "components.transformer:SetRevertWorldEvent",
        "body": "components.transformer:SetRevertWorldEvent(${1:event},${2:value})",
        "description": " ※参数: \n   (event)<>[] \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnRevertFn:": {
        "prefix": "components.transformer:SetOnRevertFn",
        "body": "components.transformer:SetOnRevertFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetObjectData:": {
        "prefix": "components.transformer:GetObjectData",
        "body": "components.transformer:GetObjectData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnTransformFn:": {
        "prefix": "components.transformer:SetOnTransformFn",
        "body": "components.transformer:SetOnTransformFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetObjectData:": {
        "prefix": "components.transformer:SetObjectData",
        "body": "components.transformer:SetObjectData(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Transform:": {
        "prefix": "components.transformer:Transform",
        "body": "components.transformer:Transform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnLoadCheck:": {
        "prefix": "components.transformer:SetOnLoadCheck",
        "body": "components.transformer:SetOnLoadCheck(${1:check})",
        "description": " ※参数: \n   (check)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRevertEvent:": {
        "prefix": "components.transformer:SetRevertEvent",
        "body": "components.transformer:SetRevertEvent(${1:event},${2:target})",
        "description": " ※参数: \n   (event)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TransformOnSleep:": {
        "prefix": "components.transformer:TransformOnSleep",
        "body": "components.transformer:TransformOnSleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTransformEvent:": {
        "prefix": "components.transformer:SetTransformEvent",
        "body": "components.transformer:SetTransformEvent(${1:event},${2:target})",
        "description": " ※参数: \n   (event)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartTransform:": {
        "prefix": "components.transformer:StartTransform",
        "body": "components.transformer:StartTransform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveSleepEvents:": {
        "prefix": "components.transformer:RemoveSleepEvents",
        "body": "components.transformer:RemoveSleepEvents()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RevertOnSleep:": {
        "prefix": "components.transformer:RevertOnSleep",
        "body": "components.transformer:RevertOnSleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartRevert:": {
        "prefix": "components.transformer:StartRevert",
        "body": "components.transformer:StartRevert()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcaulteTargetAlpha:": {
        "prefix": "components.transparentonsanity:CalcaulteTargetAlpha",
        "body": "components.transparentonsanity:CalcaulteTargetAlpha()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BaitTaken:": {
        "prefix": "components.trap:BaitTaken",
        "body": "components.trap:BaitTaken(${1:eater})",
        "description": " ※参数: \n   (eater)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveBait:": {
        "prefix": "components.trap:RemoveBait",
        "body": "components.trap:RemoveBait()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AcceptingBait:": {
        "prefix": "components.trap:AcceptingBait",
        "body": "components.trap:AcceptingBait()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnSpringFn:": {
        "prefix": "components.trap:SetOnSpringFn",
        "body": "components.trap:SetOnSpringFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnTrappedStarve:": {
        "prefix": "components.trap:OnTrappedStarve",
        "body": "components.trap:OnTrappedStarve()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBaited:": {
        "prefix": "components.trap:IsBaited",
        "body": "components.trap:IsBaited()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnBaitedFn:": {
        "prefix": "components.trap:SetOnBaitedFn",
        "body": "components.trap:SetOnBaitedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopStarvation:": {
        "prefix": "components.trap:StopStarvation",
        "body": "components.trap:StopStarvation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetBait:": {
        "prefix": "components.trap:SetBait",
        "body": "components.trap:SetBait(${1:bait})",
        "description": " ※参数: \n   (bait)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSprung:": {
        "prefix": "components.trap:IsSprung",
        "body": "components.trap:IsSprung()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DoSpring:": {
        "prefix": "components.trap:DoSpring",
        "body": "components.trap:DoSpring()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Set:": {
        "prefix": "components.trap:Set",
        "body": "components.trap:Set()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasLoot:": {
        "prefix": "components.trap:HasLoot",
        "body": "components.trap:HasLoot()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartStarvation:": {
        "prefix": "components.trap:StartStarvation",
        "body": "components.trap:StartStarvation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GrowTarget:": {
        "prefix": "components.treegrowthsolution:GrowTarget",
        "body": "components.treegrowthsolution:GrowTarget(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnAccept:": {
        "prefix": "components.tributable:OnAccept",
        "body": "components.tributable:OnAccept(${1:value},${2:tributer})",
        "description": " ※参数: \n   (value)<>[] \n   (tributer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRefuse:": {
        "prefix": "components.tributable:OnRefuse",
        "body": "components.tributable:OnRefuse()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HasPendingReward:": {
        "prefix": "components.tributable:HasPendingReward",
        "body": "components.tributable:HasPendingReward()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetItemData:": {
        "prefix": "components.trophyscale:GetItemData",
        "body": "components.trophyscale:GetItemData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ClearItemData:": {
        "prefix": "components.trophyscale:ClearItemData",
        "body": "components.trophyscale:ClearItemData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetComparePostFn:": {
        "prefix": "components.trophyscale:SetComparePostFn",
        "body": "components.trophyscale:SetComparePostFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnSpawnItemFromDataFn:": {
        "prefix": "components.trophyscale:SetOnSpawnItemFromDataFn",
        "body": "components.trophyscale:SetOnSpawnItemFromDataFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetItemCanBeTaken:": {
        "prefix": "components.trophyscale:SetItemCanBeTaken",
        "body": "components.trophyscale:SetItemCanBeTaken(${1:can_be_taken})",
        "description": " ※参数: \n   (can_be_taken)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Compare:": {
        "prefix": "components.trophyscale:Compare",
        "body": "components.trophyscale:Compare(${1:inst_compare},${2:doer})",
        "description": " ※参数: \n   (inst_compare)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnItemFromData:": {
        "prefix": "components.trophyscale:SpawnItemFromData",
        "body": "components.trophyscale:SpawnItemFromData(${1:override_data})",
        "description": " ※参数: \n   (override_data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTakeItemTestFn:": {
        "prefix": "components.trophyscale:SetTakeItemTestFn",
        "body": "components.trophyscale:SetTakeItemTestFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelTintTo:": {
        "prefix": "components.uianim:CancelTintTo",
        "body": "components.uianim:CancelTintTo(${1:run_complete_fn})",
        "description": " ※参数: \n   (run_complete_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateWhilePaused:": {
        "prefix": "components.uianim:UpdateWhilePaused",
        "body": "components.uianim:UpdateWhilePaused(${1:update_while_paused})",
        "description": " ※参数: \n   (update_while_paused)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TintTo:": {
        "prefix": "components.uianim:TintTo",
        "body": "components.uianim:TintTo(${1:start},${2:dest},${3:duration},${4:whendone})",
        "description": " ※参数: \n   (start)<>[] \n   (dest)<>[] \n   (duration)<>[] \n   (whendone)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishCurrentTint:": {
        "prefix": "components.uianim:FinishCurrentTint",
        "body": "components.uianim:FinishCurrentTint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RotateTo:": {
        "prefix": "components.uianim:RotateTo",
        "body": "components.uianim:RotateTo(${1:start},${2:dest},${3:duration},${4:whendone},${5:infinite})",
        "description": " ※参数: \n   (start)<>[] \n   (dest)<>[] \n   (duration)<>[] \n   (whendone)<>[] \n   (infinite)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ScaleTo:": {
        "prefix": "components.uianim:ScaleTo",
        "body": "components.uianim:ScaleTo(${1:start},${2:dest},${3:duration},${4:whendone})",
        "description": " ※参数: \n   (start)<>[] \n   (dest)<>[] \n   (duration)<>[] \n   (whendone)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelRotateTo:": {
        "prefix": "components.uianim:CancelRotateTo",
        "body": "components.uianim:CancelRotateTo(${1:run_complete_fn})",
        "description": " ※参数: \n   (run_complete_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelScaleTo:": {
        "prefix": "components.uianim:CancelScaleTo",
        "body": "components.uianim:CancelScaleTo(${1:run_complete_fn})",
        "description": " ※参数: \n   (run_complete_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MoveTo:": {
        "prefix": "components.uianim:MoveTo",
        "body": "components.uianim:MoveTo(${1:start},${2:dest},${3:duration},${4:whendone})",
        "description": " ※参数: \n   (start)<>[] \n   (dest)<>[] \n   (duration)<>[] \n   (whendone)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelMoveTo:": {
        "prefix": "components.uianim:CancelMoveTo",
        "body": "components.uianim:CancelMoveTo(${1:run_complete_fn})",
        "description": " ※参数: \n   (run_complete_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishCurrentScale:": {
        "prefix": "components.uianim:FinishCurrentScale",
        "body": "components.uianim:FinishCurrentScale()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNextID:": {
        "prefix": "components.uniqueprefabids:GetNextID",
        "body": "components.uniqueprefabids:GetNextID(${1:prefabname})",
        "description": " ※参数: \n   (prefabname)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnWrappedFn:": {
        "prefix": "components.unwrappable:SetOnWrappedFn",
        "body": "components.unwrappable:SetOnWrappedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WrapItems:": {
        "prefix": "components.unwrappable:WrapItems",
        "body": "components.unwrappable:WrapItems(${1:items},${2:doer})",
        "description": " ※参数: \n   (items)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUnwrappedFn:": {
        "prefix": "components.unwrappable:SetOnUnwrappedFn",
        "body": "components.unwrappable:SetOnUnwrappedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Unwrap:": {
        "prefix": "components.unwrappable:Unwrap",
        "body": "components.unwrappable:Unwrap(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddPostUpdateFn:": {
        "prefix": "components.updatelooper:AddPostUpdateFn",
        "body": "components.updatelooper:AddPostUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddLongUpdateFn:": {
        "prefix": "components.updatelooper:AddLongUpdateFn",
        "body": "components.updatelooper:AddLongUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemovePostUpdateFn:": {
        "prefix": "components.updatelooper:RemovePostUpdateFn",
        "body": "components.updatelooper:RemovePostUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddOnWallUpdateFn:": {
        "prefix": "components.updatelooper:AddOnWallUpdateFn",
        "body": "components.updatelooper:AddOnWallUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveOnWallUpdateFn:": {
        "prefix": "components.updatelooper:RemoveOnWallUpdateFn",
        "body": "components.updatelooper:RemoveOnWallUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddOnUpdateFn:": {
        "prefix": "components.updatelooper:AddOnUpdateFn",
        "body": "components.updatelooper:AddOnUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveLongUpdateFn:": {
        "prefix": "components.updatelooper:RemoveLongUpdateFn",
        "body": "components.updatelooper:RemoveLongUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveOnUpdateFn:": {
        "prefix": "components.updatelooper:RemoveOnUpdateFn",
        "body": "components.updatelooper:RemoveOnUpdateFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Upgrade:": {
        "prefix": "components.upgradeable:Upgrade",
        "body": "components.upgradeable:Upgrade(${1:obj},${2:upgrade_performer})",
        "description": " ※参数: \n   (obj)<>[] \n   (upgrade_performer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCanUpgradeFn:": {
        "prefix": "components.upgradeable:SetCanUpgradeFn",
        "body": "components.upgradeable:SetCanUpgradeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanUpgrade:": {
        "prefix": "components.upgrader:CanUpgrade",
        "body": "components.upgrader:CanUpgrade(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnUpgradeFn:": {
        "prefix": "components.upgradeable:SetOnUpgradeFn",
        "body": "components.upgradeable:SetOnUpgradeFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AdvanceStage:": {
        "prefix": "components.upgradeable:AdvanceStage",
        "body": "components.upgradeable:AdvanceStage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRequiredSlots:": {
        "prefix": "components.upgrademodule:SetRequiredSlots",
        "body": "components.upgrademodule:SetRequiredSlots(${1:slots})",
        "description": " ※参数: \n   (slots)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryDeactivate:": {
        "prefix": "components.upgrademodule:TryDeactivate",
        "body": "components.upgrademodule:TryDeactivate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TryActivate:": {
        "prefix": "components.upgrademodule:TryActivate",
        "body": "components.upgrademodule:TryActivate(${1:isloading})",
        "description": " ※参数: \n   (isloading)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UsedSlotCount:": {
        "prefix": "components.upgrademoduleowner:UsedSlotCount",
        "body": "components.upgrademoduleowner:UsedSlotCount()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopModule:": {
        "prefix": "components.upgrademoduleowner:PopModule",
        "body": "components.upgrademoduleowner:PopModule(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UpdateActivatedModules:": {
        "prefix": "components.upgrademoduleowner:UpdateActivatedModules",
        "body": "components.upgrademoduleowner:UpdateActivatedModules(${1:isloading})",
        "description": " ※参数: \n   (isloading)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetChargeLevel:": {
        "prefix": "components.upgrademoduleowner:SetChargeLevel",
        "body": "components.upgrademoduleowner:SetChargeLevel(${1:new_level})",
        "description": " ※参数: \n   (new_level)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetModuleTypeCount:": {
        "prefix": "components.upgrademoduleowner:GetModuleTypeCount",
        "body": "components.upgrademoduleowner:GetModuleTypeCount(${1:moduletype})",
        "description": " ※参数: \n   (moduletype)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetModuleInSlot:": {
        "prefix": "components.upgrademoduleowner:GetModuleInSlot",
        "body": "components.upgrademoduleowner:GetModuleInSlot(${1:slotnum})",
        "description": " ※参数: \n   (slotnum)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopAllModules:": {
        "prefix": "components.upgrademoduleowner:PopAllModules",
        "body": "components.upgrademoduleowner:PopAllModules()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PushModule:": {
        "prefix": "components.upgrademoduleowner:PushModule",
        "body": "components.upgrademoduleowner:PushModule(${1:module},${2:isloading})",
        "description": " ※参数: \n   (module)<>[] \n   (isloading)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsChargeEmpty:": {
        "prefix": "components.upgrademoduleowner:IsChargeEmpty",
        "body": "components.upgrademoduleowner:IsChargeEmpty()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddCharge:": {
        "prefix": "components.upgrademoduleowner:AddCharge",
        "body": "components.upgrademoduleowner:AddCharge(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NumModules:": {
        "prefix": "components.upgrademoduleowner:NumModules",
        "body": "components.upgrademoduleowner:NumModules()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ChargeIsMaxed:": {
        "prefix": "components.upgrademoduleowner:ChargeIsMaxed",
        "body": "components.upgrademoduleowner:ChargeIsMaxed()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PopOneModule:": {
        "prefix": "components.upgrademoduleowner:PopOneModule",
        "body": "components.upgrademoduleowner:PopOneModule()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStopUseFn:": {
        "prefix": "components.useabletargeteditem:SetOnStopUseFn",
        "body": "components.useabletargeteditem:SetOnStopUseFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopUsingItem:": {
        "prefix": "components.useabletargeteditem:StopUsingItem",
        "body": "components.useabletargeteditem:StopUsingItem()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartUsingItem:": {
        "prefix": "components.useabletargeteditem:StartUsingItem",
        "body": "components.useabletargeteditem:StartUsingItem(${1:target},${2:doer})",
        "description": " ※参数: \n   (target)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetInventoryDisable:": {
        "prefix": "components.useabletargeteditem:SetInventoryDisable",
        "body": "components.useabletargeteditem:SetInventoryDisable(${1:value})",
        "description": " ※参数: \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTargetPrefab:": {
        "prefix": "components.useabletargeteditem:SetTargetPrefab",
        "body": "components.useabletargeteditem:SetTargetPrefab(${1:prefab_name})",
        "description": " ※参数: \n   (prefab_name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.vanish:": {
        "prefix": "components.vanish_on_sleep:vanish",
        "body": "components.vanish_on_sleep:vanish()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Decorate:": {
        "prefix": "components.vase:Decorate",
        "body": "components.vase:Decorate(${1:giver},${2:item})",
        "description": " ※参数: \n   (giver)<>[] \n   (item)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetEntitiesOnPlatform:": {
        "prefix": "components.walkableplatform:GetEntitiesOnPlatform",
        "body": "components.walkableplatform:GetEntitiesOnPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetUID:": {
        "prefix": "components.walkableplatform:GetUID",
        "body": "components.walkableplatform:GetUID()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DestroyObjectsOnPlatform:": {
        "prefix": "components.walkableplatform:DestroyObjectsOnPlatform",
        "body": "components.walkableplatform:DestroyObjectsOnPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEntitiesOnPlatform:": {
        "prefix": "components.walkableplatform:SetEntitiesOnPlatform",
        "body": "components.walkableplatform:SetEntitiesOnPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddPlayerOnPlatform:": {
        "prefix": "components.walkableplatform:AddPlayerOnPlatform",
        "body": "components.walkableplatform:AddPlayerOnPlatform(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPlayersOnPlatform:": {
        "prefix": "components.walkableplatform:GetPlayersOnPlatform",
        "body": "components.walkableplatform:GetPlayersOnPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CommitPlayersOnPlatform:": {
        "prefix": "components.walkableplatform:CommitPlayersOnPlatform",
        "body": "components.walkableplatform:CommitPlayersOnPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DespawnPlayerCollision:": {
        "prefix": "components.walkableplatform:DespawnPlayerCollision",
        "body": "components.walkableplatform:DespawnPlayerCollision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnPlayerCollision:": {
        "prefix": "components.walkableplatform:SpawnPlayerCollision",
        "body": "components.walkableplatform:SpawnPlayerCollision()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveObject:": {
        "prefix": "components.walkableplatform:RemoveObject",
        "body": "components.walkableplatform:RemoveObject(${1:obj})",
        "description": " ※参数: \n   (obj)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddEntityToPlatform:": {
        "prefix": "components.walkableplatform:AddEntityToPlatform",
        "body": "components.walkableplatform:AddEntityToPlatform(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemovePlayerOnPlatform:": {
        "prefix": "components.walkableplatform:RemovePlayerOnPlatform",
        "body": "components.walkableplatform:RemovePlayerOnPlatform(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetPlatformWithUID:": {
        "prefix": "components.walkableplatformmanager:GetPlatformWithUID",
        "body": "components.walkableplatformmanager:GetPlatformWithUID(${1:uid})",
        "description": " ※参数: \n   (uid)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddPlatform:": {
        "prefix": "components.walkableplatformmanager:AddPlatform",
        "body": "components.walkableplatformmanager:AddPlatform(${1:platform})",
        "description": " ※参数: \n   (platform)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNewUID:": {
        "prefix": "components.walkableplatformmanager:GetNewUID",
        "body": "components.walkableplatformmanager:GetNewUID()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RegisterPlatform:": {
        "prefix": "components.walkableplatformmanager:RegisterPlatform",
        "body": "components.walkableplatformmanager:RegisterPlatform(${1:platform})",
        "description": " ※参数: \n   (platform)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.PostUpdate:": {
        "prefix": "components.walkableplatformmanager:PostUpdate",
        "body": "components.walkableplatformmanager:PostUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.UnregisterPlatform:": {
        "prefix": "components.walkableplatformmanager:UnregisterPlatform",
        "body": "components.walkableplatformmanager:UnregisterPlatform(${1:platform})",
        "description": " ※参数: \n   (platform)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemovePlatform:": {
        "prefix": "components.walkableplatformmanager:RemovePlatform",
        "body": "components.walkableplatformmanager:RemovePlatform(${1:platform})",
        "description": " ※参数: \n   (platform)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopBoatMusicTest:": {
        "prefix": "components.walkableplatformplayer:StopBoatMusicTest",
        "body": "components.walkableplatformplayer:StopBoatMusicTest()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopBoatCamera:": {
        "prefix": "components.walkableplatformplayer:StopBoatCamera",
        "body": "components.walkableplatformplayer:StopBoatCamera()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartBoatMusicTest:": {
        "prefix": "components.walkableplatformplayer:StartBoatMusicTest",
        "body": "components.walkableplatformplayer:StartBoatMusicTest()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestForPlatform:": {
        "prefix": "components.walkableplatformplayer:TestForPlatform",
        "body": "components.walkableplatformplayer:TestForPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopBoatCameraZooms:": {
        "prefix": "components.walkableplatformplayer:StopBoatCameraZooms",
        "body": "components.walkableplatformplayer:StopBoatCameraZooms()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartBoatCameraZooms:": {
        "prefix": "components.walkableplatformplayer:StartBoatCameraZooms",
        "body": "components.walkableplatformplayer:StartBoatCameraZooms()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOnPlatform:": {
        "prefix": "components.walkableplatformplayer:GetOnPlatform",
        "body": "components.walkableplatformplayer:GetOnPlatform(${1:platform})",
        "description": " ※参数: \n   (platform)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetOffPlatform:": {
        "prefix": "components.walkableplatformplayer:GetOffPlatform",
        "body": "components.walkableplatformplayer:GetOffPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartBoatCamera:": {
        "prefix": "components.walkableplatformplayer:StartBoatCamera",
        "body": "components.walkableplatformplayer:StartBoatCamera()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Retract:": {
        "prefix": "components.walkingplank:Retract",
        "body": "components.walkingplank:Retract()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AbandonShip:": {
        "prefix": "components.walkingplank:AbandonShip",
        "body": "components.walkingplank:AbandonShip(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MountPlank:": {
        "prefix": "components.walkingplank:MountPlank",
        "body": "components.walkingplank:MountPlank(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopMounting:": {
        "prefix": "components.walkingplank:StopMounting",
        "body": "components.walkingplank:StopMounting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetCurrentPlank:": {
        "prefix": "components.walkingplankuser:SetCurrentPlank",
        "body": "components.walkingplankuser:SetCurrentPlank(${1:plank})",
        "description": " ※参数: \n   (plank)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetEffectiveness:": {
        "prefix": "components.waterproofer:SetEffectiveness",
        "body": "components.waterproofer:SetEffectiveness(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpreadProtectionAtPoint:": {
        "prefix": "components.wateryprotection:SpreadProtectionAtPoint",
        "body": "components.wateryprotection:SpreadProtectionAtPoint(${1:x},${2:y},${3:z},${4:dist},${5:noextinguish})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (dist)<>[] \n   (noextinguish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpreadProtection:": {
        "prefix": "components.wateryprotection:SpreadProtection",
        "body": "components.wateryprotection:SpreadProtection(${1:inst},${2:dist},${3:noextinguish})",
        "description": " ※参数: \n   (inst)<>[] \n   (dist)<>[] \n   (noextinguish)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetIsSpray:": {
        "prefix": "components.wax:GetIsSpray",
        "body": "components.wax:GetIsSpray()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetIsSpray:": {
        "prefix": "components.wax:SetIsSpray",
        "body": "components.wax:SetIsSpray()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.NeedsSpray:": {
        "prefix": "components.waxable:NeedsSpray",
        "body": "components.waxable:NeedsSpray()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Wax:": {
        "prefix": "components.waxable:Wax",
        "body": "components.waxable:Wax(${1:doer},${2:waxitem})",
        "description": " ※参数: \n   (doer)<>[] \n   (waxitem)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNeedsSpray:": {
        "prefix": "components.waxable:SetNeedsSpray",
        "body": "components.waxable:SetNeedsSpray(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWaxfn:": {
        "prefix": "components.waxable:SetWaxfn",
        "body": "components.waxable:SetWaxfn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDamage:获取攻击者装备此武器时对目标的伤害": {
        "prefix": "components.weapon:GetDamage",
        "body": "components.weapon:GetDamage(${1:attacker},${2:target})",
        "description": " ※参数: \n   (attacker)<tbl>[攻击者的inst] \n   (target)<tbl>[攻击目标的inst] \n ※返回: <num>[通常伤害] <num>[特殊伤害] \n ※说明: 获取攻击者装备此武器时对目标的伤害\n ※贡献者: @Runar"
    },
    "组件.SetOnProjectileLaunch:发射投射物造成伤害前的回调函数": {
        "prefix": "components.weapon:SetOnProjectileLaunch",
        "body": "components.weapon:SetOnProjectileLaunch(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[回调函数]\n      {参数:\n         (inst)<>[武器] \n         (attacker)<>[攻击者] \n         (target)<>[目标]} \n ※返回: \n ※说明: 发射投射物造成伤害前的回调函数\n ※贡献者: @lan"
    },
    "组件.LaunchProjectile:发射投掷物(需先设置投射物)": {
        "prefix": "components.weapon:LaunchProjectile",
        "body": "components.weapon:LaunchProjectile(${1:attacker},${2:target})",
        "description": " ※参数: \n   (attacker)<>[攻击者] \n   (target)<>[目标] \n ※返回: \n ※说明: 发射投掷物(需先设置投射物)\n ※贡献者: @lan"
    },
    "组件.OnRemoveFromEntity:移除weapon标签, 恢复装备者攻击范围": {
        "prefix": "components.weapon:OnRemoveFromEntity",
        "body": "components.weapon:OnRemoveFromEntity()",
        "description": " ※参数: \n ※返回: \n ※说明: 移除weapon标签, 恢复装备者攻击范围\n ※贡献者: @Runar"
    },
    "组件.OnAttack:组件.combat:DoAttack中调用": {
        "prefix": "components.weapon:OnAttack",
        "body": "components.weapon:OnAttack(${1:attacker},${2:target},${3:projectile})",
        "description": " ※参数: \n   (attacker)<>[] \n   (target)<>[] \n   (projectile)<>[] \n ※返回: \n ※说明: 组件.combat:DoAttack中调用\n ※贡献者: @lan(触发回调函数,扣耐久等)"
    },
    "组件.SetAttackCallback:设置武器击中回调函数": {
        "prefix": "components.weapon:SetAttackCallback",
        "body": "components.weapon:SetAttackCallback(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[击中后执行的函数]\n      {参数:\n         (inst)<tbl>[武器的inst] \n         (attacker)<tbl>[攻击者的inst] \n         (target)<tbl>[攻击目标的inst] \n      返回:} \n ※返回: \n ※说明: 设置武器击中回调函数\n ※贡献者: @Runar"
    },
    "组件.SetOnProjectileLaunched:发射投射物造成伤害后的回调函数": {
        "prefix": "components.weapon:SetOnProjectileLaunched",
        "body": "components.weapon:SetOnProjectileLaunched(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[回调函数]\n      {参数:\n         (inst)<>[武器] \n         (attacker)<>[攻击者] \n         (target)<>[目标] \n         (proj)<>[投射物]} \n ※返回: \n ※说明: 发射投射物造成伤害后的回调函数\n ※贡献者: @lan"
    },
    "组件.CanRangedAttack:判断是否可以远程攻击(判断有没有projectile)": {
        "prefix": "components.weapon:CanRangedAttack",
        "body": "components.weapon:CanRangedAttack()",
        "description": " ※参数: \n ※返回: <bool>[可以远程攻击] \n ※说明: 判断是否可以远程攻击(判断有没有projectile)\n ※贡献者: @lan"
    },
    "组件.SetProjectileOffset:设置投射物偏移": {
        "prefix": "components.weapon:SetProjectileOffset",
        "body": "components.weapon:SetProjectileOffset(${1:offset})",
        "description": " ※参数: \n   (offset)<V3>[偏移向量] \n ※返回: \n ※说明: 设置投射物偏移\n ※贡献者: @lan(攻击者到目标的方向向量乘以这个offset)"
    },
    "组件.SetElectric:": {
        "prefix": "components.weapon:SetElectric",
        "body": "components.weapon:SetElectric(${1:damage_mult},${2:wet_damage_mult})",
        "description": " ※参数: \n   (damage_mult)<>[] \n   (wet_damage_mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOverrideStimuliFn:": {
        "prefix": "components.weapon:SetOverrideStimuliFn",
        "body": "components.weapon:SetOverrideStimuliFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDamage:设置武器伤害值。如果dmg为函数型参数，show me等信息模组无法显示正确的攻击力": {
        "prefix": "components.weapon:SetDamage",
        "body": "components.weapon:SetDamage(${1:dmg})",
        "description": " ※参数: \n   (dmg)<num|fn>[伤害值或伤害函数]\n      {参数:\n         (inst)<tbl>[武器的inst] \n         (attacker)<tbl>[攻击者的inst] \n         (target)<tbl>[攻击目标的inst] \n      返回:\n         <num>[伤害值]} \n ※返回: \n ※说明: 设置武器伤害值。如果dmg为函数型参数，show me等信息模组无法显示正确的攻击力\n ※贡献者: @Runar"
    },
    "组件.SetOnAttack:设置武器击中回调函数, 同SetAttackCallback": {
        "prefix": "components.weapon:SetOnAttack",
        "body": "components.weapon:SetOnAttack(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[击中后执行的函数]\n      {参数:\n         (inst)<tbl>[武器的inst] \n         (attacker)<tbl>[攻击者的inst] \n         (target)<tbl>[攻击目标的inst] \n      返回:} \n ※返回: \n ※说明: 设置武器击中回调函数, 同SetAttackCallback\n ※贡献者: @Runar"
    },
    "组件.SetProjectile:设置投射物(添加远程攻击)": {
        "prefix": "components.weapon:SetProjectile",
        "body": "components.weapon:SetProjectile(${1:projectile})",
        "description": " ※参数: \n   (projectile)<str>[投射物prefab] \n ※返回: \n ※说明: 设置投射物(添加远程攻击)\n ※贡献者: @lan"
    },
    "组件.SetRange:设置武器攻击距离。若hit为nil，则hit = attack": {
        "prefix": "components.weapon:SetRange",
        "body": "components.weapon:SetRange(${1:attack},${2:hit})",
        "description": " ※参数: \n   (attack)<num>[攻击预备距离] \n   (hit)<num|nil>[击中距离] \n ※返回: \n ※说明: 设置武器攻击距离。若hit为nil，则hit = attack\n ※贡献者: @Runar"
    },
    "组件.GetWeightPercent:": {
        "prefix": "components.weighable:GetWeightPercent",
        "body": "components.weighable:GetWeightPercent()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWeight:": {
        "prefix": "components.weighable:SetWeight",
        "body": "components.weighable:SetWeight(${1:weight})",
        "description": " ※参数: \n   (weight)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CopyWeighable:": {
        "prefix": "components.weighable:CopyWeighable",
        "body": "components.weighable:CopyWeighable(${1:src_weighable})",
        "description": " ※参数: \n   (src_weighable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWeight:": {
        "prefix": "components.weighable:GetWeight",
        "body": "components.weighable:GetWeight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetPlayerAsOwner:": {
        "prefix": "components.weighable:SetPlayerAsOwner",
        "body": "components.weighable:SetPlayerAsOwner(${1:owner})",
        "description": " ※参数: \n   (owner)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetTriggers:": {
        "prefix": "components.werebeast:ResetTriggers",
        "body": "components.werebeast:ResetTriggers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetNormal:": {
        "prefix": "components.werebeast:SetNormal",
        "body": "components.werebeast:SetNormal()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTriggerLimit:": {
        "prefix": "components.werebeast:SetTriggerLimit",
        "body": "components.werebeast:SetTriggerLimit(${1:limit})",
        "description": " ※参数: \n   (limit)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsInWereState:": {
        "prefix": "components.werebeast:IsInWereState",
        "body": "components.werebeast:IsInWereState()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWere:": {
        "prefix": "components.werebeast:SetWere",
        "body": "components.werebeast:SetWere(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TriggerDelta:": {
        "prefix": "components.werebeast:TriggerDelta",
        "body": "components.werebeast:TriggerDelta(${1:amount})",
        "description": " ※参数: \n   (amount)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnWereFn:": {
        "prefix": "components.werebeast:SetOnWereFn",
        "body": "components.werebeast:SetOnWereFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnNormalFn:": {
        "prefix": "components.werebeast:SetOnNormalFn",
        "body": "components.werebeast:SetOnNormalFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EatMosterFood:": {
        "prefix": "components.wereeater:EatMosterFood",
        "body": "components.wereeater:EatMosterFood(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetForceTransformFn:": {
        "prefix": "components.wereeater:SetForceTransformFn",
        "body": "components.wereeater:SetForceTransformFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceTransformToWere:": {
        "prefix": "components.wereeater:ForceTransformToWere",
        "body": "components.wereeater:ForceTransformToWere(${1:mode})",
        "description": " ※参数: \n   (mode)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResetFoodMemory:": {
        "prefix": "components.wereeater:ResetFoodMemory",
        "body": "components.wereeater:ResetFoodMemory()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDrainRate:": {
        "prefix": "components.wereness:SetDrainRate",
        "body": "components.wereness:SetDrainRate(${1:rate})",
        "description": " ※参数: \n   (rate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopDraining:": {
        "prefix": "components.wereness:StopDraining",
        "body": "components.wereness:StopDraining()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWereMode:": {
        "prefix": "components.wereness:GetWereMode",
        "body": "components.wereness:GetWereMode()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWereMode:": {
        "prefix": "components.wereness:SetWereMode",
        "body": "components.wereness:SetWereMode(${1:weremode})",
        "description": " ※参数: \n   (weremode)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartDraining:": {
        "prefix": "components.wereness:StartDraining",
        "body": "components.wereness:StartDraining()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOverrideGetCurrentDepthFn:": {
        "prefix": "components.winch:SetOverrideGetCurrentDepthFn",
        "body": "components.winch:SetOverrideGetCurrentDepthFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnFullyLoweredFn:": {
        "prefix": "components.winch:SetOnFullyLoweredFn",
        "body": "components.winch:SetOnFullyLoweredFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartRaising:": {
        "prefix": "components.winch:StartRaising",
        "body": "components.winch:StartRaising(${1:loading_in})",
        "description": " ※参数: \n   (loading_in)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetLoweringSpeedMultiplier:": {
        "prefix": "components.winch:SetLoweringSpeedMultiplier",
        "body": "components.winch:SetLoweringSpeedMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnFullyRaisedFn:": {
        "prefix": "components.winch:SetOnFullyRaisedFn",
        "body": "components.winch:SetOnFullyRaisedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartLowering:": {
        "prefix": "components.winch:StartLowering",
        "body": "components.winch:StartLowering(${1:loading_in})",
        "description": " ※参数: \n   (loading_in)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopDepthTesting:": {
        "prefix": "components.winch:StopDepthTesting",
        "body": "components.winch:StopDepthTesting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FullyLowered:": {
        "prefix": "components.winch:FullyLowered",
        "body": "components.winch:FullyLowered()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FullyRaised:": {
        "prefix": "components.winch:FullyRaised",
        "body": "components.winch:FullyRaised()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartDepthTesting:": {
        "prefix": "components.winch:StartDepthTesting",
        "body": "components.winch:StartDepthTesting(${1:is_raising})",
        "description": " ※参数: \n   (is_raising)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartLoweringFn:": {
        "prefix": "components.winch:SetOnStartLoweringFn",
        "body": "components.winch:SetOnStartLoweringFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnStartRaisingFn:": {
        "prefix": "components.winch:SetOnStartRaisingFn",
        "body": "components.winch:SetOnStartRaisingFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetUnloadFn:": {
        "prefix": "components.winch:SetUnloadFn",
        "body": "components.winch:SetUnloadFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRaisingSpeedMultiplier:": {
        "prefix": "components.winch:SetRaisingSpeedMultiplier",
        "body": "components.winch:SetRaisingSpeedMultiplier(${1:mult})",
        "description": " ※参数: \n   (mult)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Salvage:": {
        "prefix": "components.winchtarget:Salvage",
        "body": "components.winchtarget:Salvage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSalvageFn:": {
        "prefix": "components.winchtarget:SetSalvageFn",
        "body": "components.winchtarget:SetSalvageFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSunkenObject:": {
        "prefix": "components.winchtarget:GetSunkenObject",
        "body": "components.winchtarget:GetSunkenObject()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnRegisterWinonaTeleportPad:": {
        "prefix": "components.winonateleportpadmanager:OnRegisterWinonaTeleportPad",
        "body": "components.winonateleportpadmanager:OnRegisterWinonaTeleportPad(${1:winonateleportpad})",
        "description": " ※参数: \n   (winonateleportpad)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetAllWinonaTeleportPads:": {
        "prefix": "components.winonateleportpadmanager:GetAllWinonaTeleportPads",
        "body": "components.winonateleportpadmanager:GetAllWinonaTeleportPads()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DepleteFood:": {
        "prefix": "components.wintersfeasttable:DepleteFood",
        "body": "components.wintersfeasttable:DepleteFood(${1:feasters})",
        "description": " ※参数: \n   (feasters)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CancelFeasting:": {
        "prefix": "components.wintersfeasttable:CancelFeasting",
        "body": "components.wintersfeasttable:CancelFeasting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDaysSinceLastGift:": {
        "prefix": "components.wintertreegiftable:GetDaysSinceLastGift",
        "body": "components.wintertreegiftable:GetDaysSinceLastGift()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnGiftGiven:": {
        "prefix": "components.wintertreegiftable:OnGiftGiven",
        "body": "components.wintertreegiftable:OnGiftGiven()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetTree:": {
        "prefix": "components.winter_treeseed:SetTree",
        "body": "components.winter_treeseed:SetTree(${1:tree})",
        "description": " ※参数: \n   (tree)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanRejuvenate:": {
        "prefix": "components.witherable:CanRejuvenate",
        "body": "components.witherable:CanRejuvenate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceWither:": {
        "prefix": "components.witherable:ForceWither",
        "body": "components.witherable:ForceWither()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ForceRejuvenate:": {
        "prefix": "components.witherable:ForceRejuvenate",
        "body": "components.witherable:ForceRejuvenate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DelayWither:": {
        "prefix": "components.witherable:DelayWither",
        "body": "components.witherable:DelayWither(${1:delay})",
        "description": " ※参数: \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsProtected:": {
        "prefix": "components.witherable:IsProtected",
        "body": "components.witherable:IsProtected()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWithered:": {
        "prefix": "components.witherable:IsWithered",
        "body": "components.witherable:IsWithered()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DelayRejuvenate:": {
        "prefix": "components.witherable:DelayRejuvenate",
        "body": "components.witherable:DelayRejuvenate(${1:delay})",
        "description": " ※参数: \n   (delay)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanWither:": {
        "prefix": "components.witherable:CanWither",
        "body": "components.witherable:CanWither()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWorkLeft:返回剩余可被操作的次数，比如还可以被锤几次，就破坏掉": {
        "prefix": "components.workable:GetWorkLeft",
        "body": "components.workable:GetWorkLeft()",
        "description": " ※参数: \n ※返回: <num>[被操作的次数] \n ※说明: 返回剩余可被操作的次数，比如还可以被锤几次，就破坏掉\n ※贡献者: @御坂十七号"
    },
    "组件.SetShouldRecoilFn:设置被反弹时触发的方法，比如裂隙晶体就有这个。一般不用处理": {
        "prefix": "components.workable:SetShouldRecoilFn",
        "body": "components.workable:SetShouldRecoilFn(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 设置被反弹时触发的方法，比如裂隙晶体就有这个。一般不用处理\n ※贡献者: @御坂十七号"
    },
    "组件.SetRequiresToughWork:当设置为true时，则启用了困难模式，一般的操作动作会被弹开不消耗次数。只有拥有强力模式的工具或人物才可以。比如裂隙晶体、绝望石柱之类的。": {
        "prefix": "components.workable:SetRequiresToughWork",
        "body": "components.workable:SetRequiresToughWork(${1:tough})",
        "description": " ※参数: \n   (tough)<bool>[困难模式] \n ※返回: \n ※说明: 当设置为true时，则启用了困难模式，一般的操作动作会被弹开不消耗次数。只有拥有强力模式的工具或人物才可以。比如裂隙晶体、绝望石柱之类的。\n ※贡献者: @御坂十七号"
    },
    "组件.SetOnLoadFn:设置一个方法，当该组件被加载时触发。一般在世界从存档中恢复时用。": {
        "prefix": "components.workable:SetOnLoadFn",
        "body": "components.workable:SetOnLoadFn(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 设置一个方法，当该组件被加载时触发。一般在世界从存档中恢复时用。\n ※贡献者: @御坂十七号"
    },
    "组件.ShouldRecoil:": {
        "prefix": "components.workable:ShouldRecoil",
        "body": "components.workable:ShouldRecoil(${1:worker},${2:tool},${3:numworks})",
        "description": " ※参数: \n   (worker)<>[] \n   (tool)<>[] \n   (numworks)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanBeWorked:返回该对象是否可以被操作，这里面会判断workable（是否可用） 和workleft（次数）": {
        "prefix": "components.workable:CanBeWorked",
        "body": "components.workable:CanBeWorked()",
        "description": " ※参数: \n ※返回: <bool>[是否可以被操作] \n ※说明: 返回该对象是否可以被操作，这里面会判断workable（是否可用） 和workleft（次数）\n ※贡献者: @御坂十七号"
    },
    "组件.SetWorkable:设置该对象是否可以被操作，当调用 SetWorkLeft 时，它会自动被设为ture": {
        "prefix": "components.workable:SetWorkable",
        "body": "components.workable:SetWorkable(${1:able})",
        "description": " ※参数: \n   (able)<bool>[是否可以被操作] \n ※返回: \n ※说明: 设置该对象是否可以被操作，当调用 SetWorkLeft 时，它会自动被设为ture\n ※贡献者: @御坂十七号"
    },
    "组件.SetWorkAction:设置一个触发动作，比如建筑可以被锤子砸，就可以用 SetWorkAction(ACTIONS.HAMMER)": {
        "prefix": "components.workable:SetWorkAction",
        "body": "components.workable:SetWorkAction(${1:act})",
        "description": " ※参数: \n   (act)<>[动作] \n ※返回: \n ※说明: 设置一个触发动作，比如建筑可以被锤子砸，就可以用 SetWorkAction(ACTIONS.HAMMER)\n ※贡献者: @御坂十七号"
    },
    "组件.SetWorkMultiplierFn:": {
        "prefix": "components.workable:SetWorkMultiplierFn",
        "body": "components.workable:SetWorkMultiplierFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDebugString:返回字符串日志": {
        "prefix": "components.workable:GetDebugString",
        "body": "components.workable:GetDebugString()",
        "description": " ※参数: \n ※返回: \n ※说明: 返回字符串日志\n ※贡献者: @御坂十七号"
    },
    "组件.SetOnFinishCallback:设置一个方法，当全部次数消耗完毕后会触发，比如，一个箱子被锤两次后破坏掉，那锤两次后就会触发fn。例如：SetOnFinishCallback(function(inst,worker)end) inst是自身，worker是触发最后一次操作的对象。": {
        "prefix": "components.workable:SetOnFinishCallback",
        "body": "components.workable:SetOnFinishCallback(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 设置一个方法，当全部次数消耗完毕后会触发，比如，一个箱子被锤两次后破坏掉，那锤两次后就会触发fn。例如：SetOnFinishCallback(function(inst,worker)end) inst是自身，worker是触发最后一次操作的对象。\n ※贡献者: @御坂十七号"
    },
    "组件.SetOnWorkCallback:设置一个方法，当该对象被操作时触发，比如建筑可以被锤，那建筑被锤的时候就会触发这个方法。每锤一下就会触发一次,例如：SetOnWorkCallback(function(inst, worker, workleft, numworks)end) inst是有该组件的预制物，worker是触发该操作的对象，workleft是剩余可操作次数，numworks是本次操作扣除了几次操作次数。": {
        "prefix": "components.workable:SetOnWorkCallback",
        "body": "components.workable:SetOnWorkCallback(${1:fn})",
        "description": " ※参数: \n   (fn)<fn>[方法] \n ※返回: \n ※说明: 设置一个方法，当该对象被操作时触发，比如建筑可以被锤，那建筑被锤的时候就会触发这个方法。每锤一下就会触发一次,例如：SetOnWorkCallback(function(inst, worker, workleft, numworks)end) inst是有该组件的预制物，worker是触发该操作的对象，workleft是剩余可操作次数，numworks是本次操作扣除了几次操作次数。\n ※贡献者: @御坂十七号"
    },
    "组件.WorkedBy:": {
        "prefix": "components.workable:WorkedBy",
        "body": "components.workable:WorkedBy(${1:worker},${2:numworks})",
        "description": " ※参数: \n   (worker)<>[] \n   (numworks)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.WorkedBy_Internal:": {
        "prefix": "components.workable:WorkedBy_Internal",
        "body": "components.workable:WorkedBy_Internal(${1:worker},${2:numworks})",
        "description": " ※参数: \n   (worker)<>[] \n   (numworks)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnLoad:返回被保存的表数据，一般不用管": {
        "prefix": "components.workable:OnLoad",
        "body": "components.workable:OnLoad(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: <tbl>[表] \n ※说明: 返回被保存的表数据，一般不用管\n ※贡献者: @御坂十七号"
    },
    "组件.SetMaxWork:设置该对象最大可以被操作的次数，最小为1，当调用SetWorkLeft时设置的次数不会超过SetMaxWork设置次数": {
        "prefix": "components.workable:SetMaxWork",
        "body": "components.workable:SetMaxWork(${1:work})",
        "description": " ※参数: \n   (work)<num>[次数] \n ※返回: \n ※说明: 设置该对象最大可以被操作的次数，最小为1，当调用SetWorkLeft时设置的次数不会超过SetMaxWork设置次数\n ※贡献者: @御坂十七号"
    },
    "组件.GetWorkAction:返回这个对象可以被哪种动作触发，比如建筑一般可以被锤子锤，那就会返回 ACTIONS.HAMMER": {
        "prefix": "components.workable:GetWorkAction",
        "body": "components.workable:GetWorkAction()",
        "description": " ※参数: \n ※返回: <tbl>[被触发的动作类型] \n ※说明: 返回这个对象可以被哪种动作触发，比如建筑一般可以被锤子锤，那就会返回 ACTIONS.HAMMER\n ※贡献者: @御坂十七号"
    },
    "组件.Destroy:": {
        "prefix": "components.workable:Destroy",
        "body": "components.workable:Destroy(${1:destroyer})",
        "description": " ※参数: \n   (destroyer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWorkLeft:表示需要被操作多少次才触发最终结果的 onfinish 方法，": {
        "prefix": "components.workable:SetWorkLeft",
        "body": "components.workable:SetWorkLeft(${1:work})",
        "description": " ※参数: \n   (work)<num>[被操作的次数] \n ※返回: \n ※说明: 表示需要被操作多少次才触发最终结果的 onfinish 方法，\n ※贡献者: @御坂十七号"
    },
    "组件.CanDoAction:": {
        "prefix": "components.worker:CanDoAction",
        "body": "components.worker:CanDoAction(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAction:": {
        "prefix": "components.worker:SetAction",
        "body": "components.worker:SetAction(${1:action},${2:effectiveness})",
        "description": " ※参数: \n   (action)<>[] \n   (effectiveness)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ResolveSpecialWorkAmount:": {
        "prefix": "components.workmultiplier:ResolveSpecialWorkAmount",
        "body": "components.workmultiplier:ResolveSpecialWorkAmount(${1:action},${2:target},${3:tool},${4:numworks},${5:recoil})",
        "description": " ※参数: \n   (action)<>[] \n   (target)<>[] \n   (tool)<>[] \n   (numworks)<>[] \n   (recoil)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSpecialMultiplierFn:": {
        "prefix": "components.workmultiplier:SetSpecialMultiplierFn",
        "body": "components.workmultiplier:SetSpecialMultiplierFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsLinked:": {
        "prefix": "components.worldmigrator:IsLinked",
        "body": "components.worldmigrator:IsLinked()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetStatusString:": {
        "prefix": "components.worldmigrator:GetStatusString",
        "body": "components.worldmigrator:GetStatusString()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ValidateAndPushEvents:": {
        "prefix": "components.worldmigrator:ValidateAndPushEvents",
        "body": "components.worldmigrator:ValidateAndPushEvents()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsDestinationForPortal:": {
        "prefix": "components.worldmigrator:IsDestinationForPortal",
        "body": "components.worldmigrator:IsDestinationForPortal(${1:otherWorld},${2:otherPortal})",
        "description": " ※参数: \n   (otherWorld)<>[] \n   (otherPortal)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetReceivedPortal:": {
        "prefix": "components.worldmigrator:SetReceivedPortal",
        "body": "components.worldmigrator:SetReceivedPortal(${1:fromworld},${2:fromportal})",
        "description": " ※参数: \n   (fromworld)<>[] \n   (fromportal)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBound:": {
        "prefix": "components.worldmigrator:IsBound",
        "body": "components.worldmigrator:IsBound()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsAvailableForLinking:": {
        "prefix": "components.worldmigrator:IsAvailableForLinking",
        "body": "components.worldmigrator:IsAvailableForLinking()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActivatedByOther:": {
        "prefix": "components.worldmigrator:ActivatedByOther",
        "body": "components.worldmigrator:ActivatedByOther()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDestinationWorld:": {
        "prefix": "components.worldmigrator:SetDestinationWorld",
        "body": "components.worldmigrator:SetDestinationWorld(${1:world},${2:permanent})",
        "description": " ※参数: \n   (world)<>[] \n   (permanent)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetID:": {
        "prefix": "components.worldmigrator:SetID",
        "body": "components.worldmigrator:SetID(${1:id})",
        "description": " ※参数: \n   (id)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DumpIndividualPlayerStats:": {
        "prefix": "components.worldoverseer:DumpIndividualPlayerStats",
        "body": "components.worldoverseer:DumpIndividualPlayerStats(${1:stat},${2:event})",
        "description": " ※参数: \n   (stat)<>[] \n   (event)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPlayerChangedSkin:": {
        "prefix": "components.worldoverseer:OnPlayerChangedSkin",
        "body": "components.worldoverseer:OnPlayerChangedSkin(${1:player},${2:data})",
        "description": " ※参数: \n   (player)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DumpPlayerStats:": {
        "prefix": "components.worldoverseer:DumpPlayerStats",
        "body": "components.worldoverseer:DumpPlayerStats()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnEquipSkinnedItem:": {
        "prefix": "components.worldoverseer:OnEquipSkinnedItem",
        "body": "components.worldoverseer:OnEquipSkinnedItem(${1:player},${2:data})",
        "description": " ※参数: \n   (player)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnCyclesChanged:": {
        "prefix": "components.worldoverseer:OnCyclesChanged",
        "body": "components.worldoverseer:OnCyclesChanged(${1:cycles})",
        "description": " ※参数: \n   (cycles)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnPlayerDeath:": {
        "prefix": "components.worldoverseer:OnPlayerDeath",
        "body": "components.worldoverseer:OnPlayerDeath(${1:player},${2:data})",
        "description": " ※参数: \n   (player)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SendClientQuit:": {
        "prefix": "components.worldoverseer:SendClientQuit",
        "body": "components.worldoverseer:SendClientQuit(${1:userid},${2:data})",
        "description": " ※参数: \n   (userid)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcPlayerStats:": {
        "prefix": "components.worldoverseer:CalcPlayerStats",
        "body": "components.worldoverseer:CalcPlayerStats()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CalcIndividualPlayerStats:": {
        "prefix": "components.worldoverseer:CalcIndividualPlayerStats",
        "body": "components.worldoverseer:CalcIndividualPlayerStats(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SendClientHeartBeat:": {
        "prefix": "components.worldoverseer:SendClientHeartBeat",
        "body": "components.worldoverseer:SendClientHeartBeat(${1:userid},${2:data})",
        "description": " ※参数: \n   (userid)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SendClientJoin:": {
        "prefix": "components.worldoverseer:SendClientJoin",
        "body": "components.worldoverseer:SendClientJoin(${1:userid},${2:data})",
        "description": " ※参数: \n   (userid)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.QuitAll:": {
        "prefix": "components.worldoverseer:QuitAll",
        "body": "components.worldoverseer:QuitAll()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.HeartbeatPoll:": {
        "prefix": "components.worldoverseer:HeartbeatPoll",
        "body": "components.worldoverseer:HeartbeatPoll()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Heartbeat:": {
        "prefix": "components.worldoverseer:Heartbeat",
        "body": "components.worldoverseer:Heartbeat()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecordPlayerLeft:": {
        "prefix": "components.worldoverseer:RecordPlayerLeft",
        "body": "components.worldoverseer:RecordPlayerLeft(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWorldRecipeItems:": {
        "prefix": "components.worldoverseer:GetWorldRecipeItems",
        "body": "components.worldoverseer:GetWorldRecipeItems()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnClockTick:": {
        "prefix": "components.worldoverseer:OnClockTick",
        "body": "components.worldoverseer:OnClockTick(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecordPlayerJoined:": {
        "prefix": "components.worldoverseer:RecordPlayerJoined",
        "body": "components.worldoverseer:RecordPlayerJoined(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DumpSessionStats:": {
        "prefix": "components.worldoverseer:DumpSessionStats",
        "body": "components.worldoverseer:DumpSessionStats()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnUnequipSkinnedItem:": {
        "prefix": "components.worldoverseer:OnUnequipSkinnedItem",
        "body": "components.worldoverseer:OnUnequipSkinnedItem(${1:player},${2:data})",
        "description": " ※参数: \n   (player)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetSetting:": {
        "prefix": "components.worldsettings:SetSetting",
        "body": "components.worldsettings:SetSetting(${1:setting},${2:value})",
        "description": " ※参数: \n   (setting)<>[] \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSetting:": {
        "prefix": "components.worldsettings:GetSetting",
        "body": "components.worldsettings:GetSetting(${1:setting})",
        "description": " ※参数: \n   (setting)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetMaxTime:": {
        "prefix": "components.worldsettingstimer:SetMaxTime",
        "body": "components.worldsettingstimer:SetMaxTime(${1:name},${2:time})",
        "description": " ※参数: \n   (name)<>[] \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddTimer:": {
        "prefix": "components.worldsettingstimer:AddTimer",
        "body": "components.worldsettingstimer:AddTimer(${1:name},${2:maxtime},${3:enabled},${4:callback},${5:externallongupdate})",
        "description": " ※参数: \n   (name)<>[] \n   (maxtime)<>[] \n   (enabled)<>[] \n   (callback)<>[] \n   (externallongupdate)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ActiveTimerExists:": {
        "prefix": "components.worldsettingstimer:ActiveTimerExists",
        "body": "components.worldsettingstimer:ActiveTimerExists(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetMaxTime:": {
        "prefix": "components.worldsettingstimer:GetMaxTime",
        "body": "components.worldsettingstimer:GetMaxTime(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TimerEnabled:": {
        "prefix": "components.worldsettingstimer:TimerEnabled",
        "body": "components.worldsettingstimer:TimerEnabled(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetWindAngle:": {
        "prefix": "components.worldwind:GetWindAngle",
        "body": "components.worldwind:GetWindAngle()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsBeingWritten:": {
        "prefix": "components.writeable:IsBeingWritten",
        "body": "components.writeable:IsBeingWritten()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnWritingEndedFn:": {
        "prefix": "components.writeable:SetOnWritingEndedFn",
        "body": "components.writeable:SetOnWritingEndedFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetWriteableDistance:": {
        "prefix": "components.writeable:SetWriteableDistance",
        "body": "components.writeable:SetWriteableDistance(${1:dist})",
        "description": " ※参数: \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetAutomaticDescriptionEnabled:": {
        "prefix": "components.writeable:SetAutomaticDescriptionEnabled",
        "body": "components.writeable:SetAutomaticDescriptionEnabled(${1:ad_enabled})",
        "description": " ※参数: \n   (ad_enabled)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndWriting:": {
        "prefix": "components.writeable:EndWriting",
        "body": "components.writeable:EndWriting()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsWritten:": {
        "prefix": "components.writeable:IsWritten",
        "body": "components.writeable:IsWritten()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BeginWriting:": {
        "prefix": "components.writeable:BeginWriting",
        "body": "components.writeable:BeginWriting(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Write:": {
        "prefix": "components.writeable:Write",
        "body": "components.writeable:Write(${1:doer},${2:text})",
        "description": " ※参数: \n   (doer)<>[] \n   (text)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetText:": {
        "prefix": "components.writeable:SetText",
        "body": "components.writeable:SetText(${1:text})",
        "description": " ※参数: \n   (text)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetDefaultWriteable:": {
        "prefix": "components.writeable:SetDefaultWriteable",
        "body": "components.writeable:SetDefaultWriteable(${1:writeable_by_default})",
        "description": " ※参数: \n   (writeable_by_default)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetText:": {
        "prefix": "components.writeable:GetText",
        "body": "components.writeable:GetText()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetOnWrittenFn:": {
        "prefix": "components.writeable:SetOnWrittenFn",
        "body": "components.writeable:SetOnWrittenFn(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CanSew:": {
        "prefix": "components.yotb_sewer:CanSew",
        "body": "components.yotb_sewer:CanSew()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetTimeToSew:": {
        "prefix": "components.yotb_sewer:GetTimeToSew",
        "body": "components.yotb_sewer:GetTimeToSew()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartSewing:": {
        "prefix": "components.yotb_sewer:StartSewing",
        "body": "components.yotb_sewer:StartSewing(${1:doer})",
        "description": " ※参数: \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsSewing:": {
        "prefix": "components.yotb_sewer:IsSewing",
        "body": "components.yotb_sewer:IsSewing()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StopSewing:": {
        "prefix": "components.yotb_sewer:StopSewing",
        "body": "components.yotb_sewer:StopSewing(${1:reason})",
        "description": " ※参数: \n   (reason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSkin:": {
        "prefix": "components.yotb_skinunlocker:GetSkin",
        "body": "components.yotb_skinunlocker:GetSkin()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnContestCheckPoint:": {
        "prefix": "components.yotb_stagemanager:OnContestCheckPoint",
        "body": "components.yotb_stagemanager:OnContestCheckPoint(${1:stage})",
        "description": " ※参数: \n   (stage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnContestEnded:": {
        "prefix": "components.yotb_stagemanager:OnContestEnded",
        "body": "components.yotb_stagemanager:OnContestEnded()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStageDestroyed:": {
        "prefix": "components.yotb_stagemanager:OnStageDestroyed",
        "body": "components.yotb_stagemanager:OnStageDestroyed(${1:stage})",
        "description": " ※参数: \n   (stage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EnableContest:": {
        "prefix": "components.yotb_stager:EnableContest",
        "body": "components.yotb_stager:EnableContest()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnNewDay:": {
        "prefix": "components.yotb_stagemanager:OnNewDay",
        "body": "components.yotb_stagemanager:OnNewDay()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetActiveStage:": {
        "prefix": "components.yotb_stagemanager:GetActiveStage",
        "body": "components.yotb_stagemanager:GetActiveStage()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnStageBuilt:": {
        "prefix": "components.yotb_stagemanager:OnStageBuilt",
        "body": "components.yotb_stagemanager:OnStageBuilt(${1:stage})",
        "description": " ※参数: \n   (stage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsContestEnabled:": {
        "prefix": "components.yotb_stagemanager:IsContestEnabled",
        "body": "components.yotb_stagemanager:IsContestEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnContestBegun:": {
        "prefix": "components.yotb_stagemanager:OnContestBegun",
        "body": "components.yotb_stagemanager:OnContestBegun(${1:active_stage})",
        "description": " ※参数: \n   (active_stage)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetContestEnabled:": {
        "prefix": "components.yotb_stagemanager:SetContestEnabled",
        "body": "components.yotb_stagemanager:SetContestEnabled(${1:setting})",
        "description": " ※参数: \n   (setting)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsContestActive:": {
        "prefix": "components.yotb_stagemanager:IsContestActive",
        "body": "components.yotb_stagemanager:IsContestActive()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Start_phase3:": {
        "prefix": "components.yotb_stager:Start_phase3",
        "body": "components.yotb_stager:Start_phase3()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.unhighlitepost:": {
        "prefix": "components.yotb_stager:unhighlitepost",
        "body": "components.yotb_stager:unhighlitepost(${1:post})",
        "description": " ※参数: \n   (post)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBeefScore:": {
        "prefix": "components.yotb_stager:GetBeefScore",
        "body": "components.yotb_stager:GetBeefScore(${1:beef})",
        "description": " ※参数: \n   (beef)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.appraisedoll:": {
        "prefix": "components.yotb_stager:appraisedoll",
        "body": "components.yotb_stager:appraisedoll(${1:doll})",
        "description": " ※参数: \n   (doll)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.appraisedoll3:": {
        "prefix": "components.yotb_stager:appraisedoll3",
        "body": "components.yotb_stager:appraisedoll3()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetComment:": {
        "prefix": "components.yotb_stager:GetComment",
        "body": "components.yotb_stager:GetComment(${1:post})",
        "description": " ※参数: \n   (post)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.cleartimers:": {
        "prefix": "components.yotb_stager:cleartimers",
        "body": "components.yotb_stager:cleartimers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.appraisedoll2:": {
        "prefix": "components.yotb_stager:appraisedoll2",
        "body": "components.yotb_stager:appraisedoll2()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.MakeRandomBeef:": {
        "prefix": "components.yotb_stager:MakeRandomBeef",
        "body": "components.yotb_stager:MakeRandomBeef(${1:post},${2:name})",
        "description": " ※参数: \n   (post)<>[] \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StateParameters_Phase2:": {
        "prefix": "components.yotb_stager:StateParameters_Phase2",
        "body": "components.yotb_stager:StateParameters_Phase2()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Tossprizes:": {
        "prefix": "components.yotb_stager:Tossprizes",
        "body": "components.yotb_stager:Tossprizes()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Give_Patterns:": {
        "prefix": "components.yotb_stager:Give_Patterns",
        "body": "components.yotb_stager:Give_Patterns()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnVoice:": {
        "prefix": "components.yotb_stager:SpawnVoice",
        "body": "components.yotb_stager:SpawnVoice(${1:pos},${2:comment},${3:duration})",
        "description": " ※参数: \n   (pos)<>[] \n   (comment)<>[] \n   (duration)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndContest:": {
        "prefix": "components.yotb_stager:EndContest",
        "body": "components.yotb_stager:EndContest(${1:reason})",
        "description": " ※参数: \n   (reason)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRandom:": {
        "prefix": "components.yotb_stager:GetRandom",
        "body": "components.yotb_stager:GetRandom()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveTempTrainer:": {
        "prefix": "components.yotb_stager:RemoveTempTrainer",
        "body": "components.yotb_stager:RemoveTempTrainer(${1:trainer})",
        "description": " ※参数: \n   (trainer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetFurthest:": {
        "prefix": "components.yotb_stager:GetFurthest",
        "body": "components.yotb_stager:GetFurthest(${1:values})",
        "description": " ※参数: \n   (values)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AbortContest:": {
        "prefix": "components.yotb_stager:AbortContest",
        "body": "components.yotb_stager:AbortContest(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StateParameters:": {
        "prefix": "components.yotb_stager:StateParameters",
        "body": "components.yotb_stager:StateParameters()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CheckForMarks:": {
        "prefix": "components.yotb_stager:CheckForMarks",
        "body": "components.yotb_stager:CheckForMarks(${1:post},${2:doer})",
        "description": " ※参数: \n   (post)<>[] \n   (doer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Endppraisedoll:": {
        "prefix": "components.yotb_stager:Endppraisedoll",
        "body": "components.yotb_stager:Endppraisedoll()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Start_fail:": {
        "prefix": "components.yotb_stager:Start_fail",
        "body": "components.yotb_stager:Start_fail(${1:result})",
        "description": " ※参数: \n   (result)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.highlitepost:": {
        "prefix": "components.yotb_stager:highlitepost",
        "body": "components.yotb_stager:highlitepost(${1:post})",
        "description": " ※参数: \n   (post)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetParameterLineDoll:": {
        "prefix": "components.yotb_stager:GetParameterLineDoll",
        "body": "components.yotb_stager:GetParameterLineDoll(${1:category})",
        "description": " ※参数: \n   (category)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndContest_phase2:": {
        "prefix": "components.yotb_stager:EndContest_phase2",
        "body": "components.yotb_stager:EndContest_phase2()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Start_phase2:": {
        "prefix": "components.yotb_stager:Start_phase2",
        "body": "components.yotb_stager:Start_phase2()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Give_consoleprizes:": {
        "prefix": "components.yotb_stager:Give_consoleprizes",
        "body": "components.yotb_stager:Give_consoleprizes()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DisableContest:": {
        "prefix": "components.yotb_stager:DisableContest",
        "body": "components.yotb_stager:DisableContest()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartContest:": {
        "prefix": "components.yotb_stager:StartContest",
        "body": "components.yotb_stager:StartContest(${1:starter})",
        "description": " ※参数: \n   (starter)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AwardVictors:": {
        "prefix": "components.yotb_stager:AwardVictors",
        "body": "components.yotb_stager:AwardVictors()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AdvanceQueue:": {
        "prefix": "components.yotb_stager:AdvanceQueue",
        "body": "components.yotb_stager:AdvanceQueue(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.Tossprize:": {
        "prefix": "components.yotb_stager:Tossprize",
        "body": "components.yotb_stager:Tossprize(${1:target},${2:pattern},${3:other})",
        "description": " ※参数: \n   (target)<>[] \n   (pattern)<>[] \n   (other)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DeclareWinner:": {
        "prefix": "components.yotb_stager:DeclareWinner",
        "body": "components.yotb_stager:DeclareWinner()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SpawnVoiceName:": {
        "prefix": "components.yotb_stager:SpawnVoiceName",
        "body": "components.yotb_stager:SpawnVoiceName(${1:rank},${2:speech})",
        "description": " ※参数: \n   (rank)<>[] \n   (speech)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.BuildSuspense:": {
        "prefix": "components.yotb_stager:BuildSuspense",
        "body": "components.yotb_stager:BuildSuspense()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetClosest:": {
        "prefix": "components.yotb_stager:GetClosest",
        "body": "components.yotb_stager:GetClosest(${1:values})",
        "description": " ※参数: \n   (values)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveTrainer:": {
        "prefix": "components.yotb_stager:RemoveTrainer",
        "body": "components.yotb_stager:RemoveTrainer(${1:trainer})",
        "description": " ※参数: \n   (trainer)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RemoveTempBeef:": {
        "prefix": "components.yotb_stager:RemoveTempBeef",
        "body": "components.yotb_stager:RemoveTempBeef(${1:beefalo})",
        "description": " ※参数: \n   (beefalo)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.TestStartContest:": {
        "prefix": "components.yotb_stager:TestStartContest",
        "body": "components.yotb_stager:TestStartContest(${1:starter})",
        "description": " ※参数: \n   (starter)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetParameterLine:": {
        "prefix": "components.yotb_stager:GetParameterLine",
        "body": "components.yotb_stager:GetParameterLine(${1:category})",
        "description": " ※参数: \n   (category)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.RecoverStamina:": {
        "prefix": "components.yotc_racecompetitor:RecoverStamina",
        "body": "components.yotc_racecompetitor:RecoverStamina()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._SetCheckPoint:": {
        "prefix": "components.yotc_racecompetitor:_SetCheckPoint",
        "body": "components.yotc_racecompetitor:_SetCheckPoint(${1:checkpoint},${2:is_starting_line})",
        "description": " ※参数: \n   (checkpoint)<>[] \n   (is_starting_line)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.FinishRace:": {
        "prefix": "components.yotc_racecompetitor:FinishRace",
        "body": "components.yotc_racecompetitor:FinishRace()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRaceStartPoint:": {
        "prefix": "components.yotc_racecompetitor:SetRaceStartPoint",
        "body": "components.yotc_racecompetitor:SetRaceStartPoint(${1:start_point_entity})",
        "description": " ※参数: \n   (start_point_entity)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetRaceDistance:": {
        "prefix": "components.yotc_racecompetitor:GetRaceDistance",
        "body": "components.yotc_racecompetitor:GetRaceDistance()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件._FindNextCheckPoint:": {
        "prefix": "components.yotc_racecompetitor:_FindNextCheckPoint",
        "body": "components.yotc_racecompetitor:_FindNextCheckPoint()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsStartingLate:": {
        "prefix": "components.yotc_racecompetitor:IsStartingLate",
        "body": "components.yotc_racecompetitor:IsStartingLate()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRaceFinishedFn:": {
        "prefix": "components.yotc_racecompetitor:SetRaceFinishedFn",
        "body": "components.yotc_racecompetitor:SetRaceFinishedFn(${1:race_finished_fn})",
        "description": " ※参数: \n   (race_finished_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.IsExhausted:": {
        "prefix": "components.yotc_racecompetitor:IsExhausted",
        "body": "components.yotc_racecompetitor:IsExhausted()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRaceBegunFn:": {
        "prefix": "components.yotc_racecompetitor:SetRaceBegunFn",
        "body": "components.yotc_racecompetitor:SetRaceBegunFn(${1:race_begun_fn})",
        "description": " ※参数: \n   (race_begun_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.StartRace:": {
        "prefix": "components.yotc_racestart:StartRace",
        "body": "components.yotc_racestart:StartRace()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.OnAllRacersFinished:": {
        "prefix": "components.yotc_racecompetitor:OnAllRacersFinished",
        "body": "components.yotc_racecompetitor:OnAllRacersFinished(${1:prize_table})",
        "description": " ※参数: \n   (prize_table)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AbortRace:": {
        "prefix": "components.yotc_racecompetitor:AbortRace",
        "body": "components.yotc_racecompetitor:AbortRace(${1:prize_table})",
        "description": " ※参数: \n   (prize_table)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SetRaceOverFn:": {
        "prefix": "components.yotc_racecompetitor:SetRaceOverFn",
        "body": "components.yotc_racecompetitor:SetRaceOverFn(${1:race_over_fn})",
        "description": " ※参数: \n   (race_over_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.CollectPrize:": {
        "prefix": "components.yotc_racecompetitor:CollectPrize",
        "body": "components.yotc_racecompetitor:CollectPrize()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.EndRace:": {
        "prefix": "components.yotc_racestart:EndRace",
        "body": "components.yotc_racestart:EndRace()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ModifySpeed:": {
        "prefix": "components.yotc_racestats:ModifySpeed",
        "body": "components.yotc_racestats:ModifySpeed(${1:point_mod})",
        "description": " ※参数: \n   (point_mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.AddRandomPointSpread:": {
        "prefix": "components.yotc_racestats:AddRandomPointSpread",
        "body": "components.yotc_racestats:AddRandomPointSpread(${1:num_points})",
        "description": " ※参数: \n   (num_points)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.SaveCurrentStatsAsBaseline:": {
        "prefix": "components.yotc_racestats:SaveCurrentStatsAsBaseline",
        "body": "components.yotc_racestats:SaveCurrentStatsAsBaseline()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetSpeedModifier:": {
        "prefix": "components.yotc_racestats:GetSpeedModifier",
        "body": "components.yotc_racestats:GetSpeedModifier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetReactionModifier:": {
        "prefix": "components.yotc_racestats:GetReactionModifier",
        "body": "components.yotc_racestats:GetReactionModifier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetStaminaModifier:": {
        "prefix": "components.yotc_racestats:GetStaminaModifier",
        "body": "components.yotc_racestats:GetStaminaModifier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetDirectionModifier:": {
        "prefix": "components.yotc_racestats:GetDirectionModifier",
        "body": "components.yotc_racestats:GetDirectionModifier()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.DegradePoints:": {
        "prefix": "components.yotc_racestats:DegradePoints",
        "body": "components.yotc_racestats:DegradePoints(${1:num_points})",
        "description": " ※参数: \n   (num_points)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetNumStatPoints:": {
        "prefix": "components.yotc_racestats:GetNumStatPoints",
        "body": "components.yotc_racestats:GetNumStatPoints()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.GetBestStats:": {
        "prefix": "components.yotc_racestats:GetBestStats",
        "body": "components.yotc_racestats:GetBestStats()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ModifyReaction:": {
        "prefix": "components.yotc_racestats:ModifyReaction",
        "body": "components.yotc_racestats:ModifyReaction(${1:point_mod})",
        "description": " ※参数: \n   (point_mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ModifyStamina:": {
        "prefix": "components.yotc_racestats:ModifyStamina",
        "body": "components.yotc_racestats:ModifyStamina(${1:point_mod})",
        "description": " ※参数: \n   (point_mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "组件.ModifyDirection:": {
        "prefix": "components.yotc_racestats:ModifyDirection",
        "body": "components.yotc_racestats:ModifyDirection(${1:point_mod})",
        "description": " ※参数: \n   (point_mod)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "常量:CONTROL_ATTACK": {
        "prefix": "CONTROL_ATTACK",
        "body": "CONTROL_ATTACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:TECH.PERDOFFERING_ONE": {
        "prefix": "TECH.PERDOFFERING_ONE",
        "body": "TECH.PERDOFFERING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_ACCEPT": {
        "prefix": "CONTROL_ACCEPT",
        "body": "CONTROL_ACCEPT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 29)"
    },
    "常量:ITEMTAG.FOOD": {
        "prefix": "ITEMTAG.FOOD",
        "body": "ITEMTAG.FOOD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: food)"
    },
    "常量:GROUND.IMPASSABLE": {
        "prefix": "GROUND.IMPASSABLE",
        "body": "GROUND.IMPASSABLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:CONTROL_TARGET_LOCK": {
        "prefix": "CONTROL_TARGET_LOCK",
        "body": "CONTROL_TARGET_LOCK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 69)"
    },
    "常量:WEBCOLOURS.BURLYWOOD": {
        "prefix": "WEBCOLOURS.BURLYWOOD",
        "body": "WEBCOLOURS.BURLYWOOD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(222, 184, 135))"
    },
    "常量:GROUND.FUNGUS_NOISE": {
        "prefix": "GROUND.FUNGUS_NOISE",
        "body": "GROUND.FUNGUS_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 127)"
    },
    "常量:TECH.BOOKCRAFT_ONE": {
        "prefix": "TECH.BOOKCRAFT_ONE",
        "body": "TECH.BOOKCRAFT_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_OPEN_COMMAND_WHEEL": {
        "prefix": "CONTROL_OPEN_COMMAND_WHEEL",
        "body": "CONTROL_OPEN_COMMAND_WHEEL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 87)"
    },
    "常量:GROUND.PEBBLEBEACH": {
        "prefix": "GROUND.PEBBLEBEACH",
        "body": "GROUND.PEBBLEBEACH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 42)"
    },
    "常量:TECH.YOTC": {
        "prefix": "TECH.YOTC",
        "body": "TECH.YOTC",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_MENU_R2": {
        "prefix": "CONTROL_MENU_R2",
        "body": "CONTROL_MENU_R2",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 86)"
    },
    "常量:CAMERASHAKE.VERTICAL": {
        "prefix": "CAMERASHAKE.VERTICAL",
        "body": "CAMERASHAKE.VERTICAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:CONTROL_INV_12": {
        "prefix": "CONTROL_INV_12",
        "body": "CONTROL_INV_12",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 78)"
    },
    "常量:CONTROL_SECONDARY": {
        "prefix": "CONTROL_SECONDARY",
        "body": "CONTROL_SECONDARY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:TECH.HERMITCRABSHOP_SEVEN": {
        "prefix": "TECH.HERMITCRABSHOP_SEVEN",
        "body": "TECH.HERMITCRABSHOP_SEVEN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:ANIM_ORIENTATION.OnGroundFixed": {
        "prefix": "ANIM_ORIENTATION.OnGroundFixed",
        "body": "ANIM_ORIENTATION.OnGroundFixed",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:ITEMTAG.FUEL": {
        "prefix": "ITEMTAG.FUEL",
        "body": "ITEMTAG.FUEL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: fuel)"
    },
    "常量:CONTROL_INV_8": {
        "prefix": "CONTROL_INV_8",
        "body": "CONTROL_INV_8",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 22)"
    },
    "常量:GROUND.METEORMINE_NOISE": {
        "prefix": "GROUND.METEORMINE_NOISE",
        "body": "GROUND.METEORMINE_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 121)"
    },
    "常量:CONTROL_PUTSTACK": {
        "prefix": "CONTROL_PUTSTACK",
        "body": "CONTROL_PUTSTACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 55)"
    },
    "常量:CONTROL_TOGGLE_WHISPER": {
        "prefix": "CONTROL_TOGGLE_WHISPER",
        "body": "CONTROL_TOGGLE_WHISPER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 64)"
    },
    "常量:CONTROL_ZOOM_IN": {
        "prefix": "CONTROL_ZOOM_IN",
        "body": "CONTROL_ZOOM_IN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 9)"
    },
    "常量:LEVELTYPE.TEST": {
        "prefix": "LEVELTYPE.TEST",
        "body": "LEVELTYPE.TEST",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: TEST)"
    },
    "常量:RATE_SCALE.DECREASE_LOW": {
        "prefix": "RATE_SCALE.DECREASE_LOW",
        "body": "RATE_SCALE.DECREASE_LOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 6)"
    },
    "常量:WEBCOLOURS.BROWN": {
        "prefix": "WEBCOLOURS.BROWN",
        "body": "WEBCOLOURS.BROWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(165, 42, 42))"
    },
    "常量:GROUND.OCEAN_BRINEPOOL": {
        "prefix": "GROUND.OCEAN_BRINEPOOL",
        "body": "GROUND.OCEAN_BRINEPOOL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 205)"
    },
    "常量:TECH.SHADOW_TWO": {
        "prefix": "TECH.SHADOW_TWO",
        "body": "TECH.SHADOW_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:WEBCOLOURS.TAN": {
        "prefix": "WEBCOLOURS.TAN",
        "body": "WEBCOLOURS.TAN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(210, 180, 140))"
    },
    "常量:FACING_UP": {
        "prefix": "FACING_UP",
        "body": "FACING_UP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:GROUND.DESERT_DIRT": {
        "prefix": "GROUND.DESERT_DIRT",
        "body": "GROUND.DESERT_DIRT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 31)"
    },
    "常量:CONTROL_SPLITSTACK": {
        "prefix": "CONTROL_SPLITSTACK",
        "body": "CONTROL_SPLITSTACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 35)"
    },
    "常量:UICOLOURS.GOLD_SELECTED": {
        "prefix": "UICOLOURS.GOLD_SELECTED",
        "body": "UICOLOURS.GOLD_SELECTED",
        "description": " ※参数: \n ※返回: \n ※说明: titles and non-interactive important text\n ※贡献者: @lan (该常量值为: RGB(245, 243, 222))"
    },
    "常量:GROUND.OCEAN_BRINEPOOL_SHORE": {
        "prefix": "GROUND.OCEAN_BRINEPOOL_SHORE",
        "body": "GROUND.OCEAN_BRINEPOOL_SHORE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 206)"
    },
    "常量:GROUND.FAKE_GROUND": {
        "prefix": "GROUND.FAKE_GROUND",
        "body": "GROUND.FAKE_GROUND",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 200)"
    },
    "常量:TECH.MAGIC_TWO": {
        "prefix": "TECH.MAGIC_TWO",
        "body": "TECH.MAGIC_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:WEBCOLOURS.TURQUOISE": {
        "prefix": "WEBCOLOURS.TURQUOISE",
        "body": "WEBCOLOURS.TURQUOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(64, 224, 208))"
    },
    "常量:CONTROL_INVENTORY_DOWN": {
        "prefix": "CONTROL_INVENTORY_DOWN",
        "body": "CONTROL_INVENTORY_DOWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 50)"
    },
    "常量:CONTROL_FORCE_ATTACK": {
        "prefix": "CONTROL_FORCE_ATTACK",
        "body": "CONTROL_FORCE_ATTACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 39)"
    },
    "常量:GROUND.QUAGMIRE_PEATFOREST": {
        "prefix": "GROUND.QUAGMIRE_PEATFOREST",
        "body": "GROUND.QUAGMIRE_PEATFOREST",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 35)"
    },
    "常量:GROUND.CHECKER": {
        "prefix": "GROUND.CHECKER",
        "body": "GROUND.CHECKER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 12)"
    },
    "常量:FACING_DOWN": {
        "prefix": "FACING_DOWN",
        "body": "FACING_DOWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:GROUND.WALL_STONEEYE": {
        "prefix": "GROUND.WALL_STONEEYE",
        "body": "GROUND.WALL_STONEEYE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 162)"
    },
    "常量:LEVELTYPE.UNKNOWN": {
        "prefix": "LEVELTYPE.UNKNOWN",
        "body": "LEVELTYPE.UNKNOWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_INVENTORY_USEONSELF": {
        "prefix": "CONTROL_INVENTORY_USEONSELF",
        "body": "CONTROL_INVENTORY_USEONSELF",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 52)"
    },
    "常量:TECH.HERMITCRABSHOP_ONE": {
        "prefix": "TECH.HERMITCRABSHOP_ONE",
        "body": "TECH.HERMITCRABSHOP_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_MENU_BACK": {
        "prefix": "CONTROL_MENU_BACK",
        "body": "CONTROL_MENU_BACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 83)"
    },
    "常量:FACING_DOWNRIGHT": {
        "prefix": "FACING_DOWNRIGHT",
        "body": "FACING_DOWNRIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 6)"
    },
    "常量:GROUND.CAVE_NOISE": {
        "prefix": "GROUND.CAVE_NOISE",
        "body": "GROUND.CAVE_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 126)"
    },
    "常量:BGCOLOURS": {
        "prefix": "BGCOLOURS",
        "body": "BGCOLOURS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:WEBCOLOURS.CORAL": {
        "prefix": "WEBCOLOURS.CORAL",
        "body": "WEBCOLOURS.CORAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 127, 80))"
    },
    "常量:WEBCOLOURS.PLUM": {
        "prefix": "WEBCOLOURS.PLUM",
        "body": "WEBCOLOURS.PLUM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(221, 160, 221))"
    },
    "常量:TECH.CARNIVAL_HOSTSHOP_THREE": {
        "prefix": "TECH.CARNIVAL_HOSTSHOP_THREE",
        "body": "TECH.CARNIVAL_HOSTSHOP_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MOVE_UP": {
        "prefix": "MOVE_UP",
        "body": "MOVE_UP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:GROUND.CAVE": {
        "prefix": "GROUND.CAVE",
        "body": "GROUND.CAVE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 13)"
    },
    "常量:CONTROL_INVENTORY_USEONSCENE": {
        "prefix": "CONTROL_INVENTORY_USEONSCENE",
        "body": "CONTROL_INVENTORY_USEONSCENE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 53)"
    },
    "常量:GROUND.TRIM": {
        "prefix": "GROUND.TRIM",
        "body": "GROUND.TRIM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 22)"
    },
    "常量:GROUND.WALL_DIRT": {
        "prefix": "GROUND.WALL_DIRT",
        "body": "GROUND.WALL_DIRT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 152)"
    },
    "常量:ANIM_SORT_ORDER_BELOW_GROUND.BOAT_LIP": {
        "prefix": "ANIM_SORT_ORDER_BELOW_GROUND.BOAT_LIP",
        "body": "ANIM_SORT_ORDER_BELOW_GROUND.BOAT_LIP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:TECH.PERDOFFERING_THREE": {
        "prefix": "TECH.PERDOFFERING_THREE",
        "body": "TECH.PERDOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:BGCOLOURS.PURPLE": {
        "prefix": "BGCOLOURS.PURPLE",
        "body": "BGCOLOURS.PURPLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(184, 87,  198))"
    },
    "常量:GROUND.DIRT_NOISE": {
        "prefix": "GROUND.DIRT_NOISE",
        "body": "GROUND.DIRT_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 123)"
    },
    "常量:MATERIALS.GEARS": {
        "prefix": "MATERIALS.GEARS",
        "body": "MATERIALS.GEARS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: gears)"
    },
    "常量:CONTROL_TOGGLE_SLASH_COMMAND": {
        "prefix": "CONTROL_TOGGLE_SLASH_COMMAND",
        "body": "CONTROL_TOGGLE_SLASH_COMMAND",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 65)"
    },
    "常量:CONTROL_MAP": {
        "prefix": "CONTROL_MAP",
        "body": "CONTROL_MAP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 14)"
    },
    "常量:CONTROL_CONTROLLER_ALTACTION": {
        "prefix": "CONTROL_CONTROLLER_ALTACTION",
        "body": "CONTROL_CONTROLLER_ALTACTION",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 58)"
    },
    "常量:CONTROL_TARGET_CYCLE_FORWARD": {
        "prefix": "CONTROL_TARGET_CYCLE_FORWARD",
        "body": "CONTROL_TARGET_CYCLE_FORWARD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 12)"
    },
    "常量:CONTROL_TOGGLE_LOG": {
        "prefix": "CONTROL_TOGGLE_LOG",
        "body": "CONTROL_TOGGLE_LOG",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 43)"
    },
    "常量:COLLISION.LIMITS": {
        "prefix": "COLLISION.LIMITS",
        "body": "COLLISION.LIMITS",
        "description": " ※参数: \n ※返回: \n ※说明: BOAT_LIMITS + LAND_OCEAN_LIMITS\n ※贡献者: @lan (该常量值为: 128 + 64)"
    },
    "常量:LEVELTYPE.QUAGMIRE": {
        "prefix": "LEVELTYPE.QUAGMIRE",
        "body": "LEVELTYPE.QUAGMIRE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: QUAGMIRE)"
    },
    "常量:ANIM_SORT_ORDER": {
        "prefix": "ANIM_SORT_ORDER",
        "body": "ANIM_SORT_ORDER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:GROUND.FUNGUSRED": {
        "prefix": "GROUND.FUNGUSRED",
        "body": "GROUND.FUNGUSRED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 24)"
    },
    "常量:ITEMTAG.TOOL": {
        "prefix": "ITEMTAG.TOOL",
        "body": "ITEMTAG.TOOL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: tool)"
    },
    "常量:GROUND.QUAGMIRE_GATEWAY": {
        "prefix": "GROUND.QUAGMIRE_GATEWAY",
        "body": "GROUND.QUAGMIRE_GATEWAY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 38)"
    },
    "常量:TECH.MASHTURFCRAFTING_TWO": {
        "prefix": "TECH.MASHTURFCRAFTING_TWO",
        "body": "TECH.MASHTURFCRAFTING_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TENDENCY.RIDER": {
        "prefix": "TENDENCY.RIDER",
        "body": "TENDENCY.RIDER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RIDER)"
    },
    "常量:UICOLOURS.BRONZE": {
        "prefix": "UICOLOURS.BRONZE",
        "body": "UICOLOURS.BRONZE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(180, 116, 36, 1))"
    },
    "常量:RATE_SCALE": {
        "prefix": "RATE_SCALE",
        "body": "RATE_SCALE",
        "description": " ※参数: \n ※返回: \n ※说明: Badge/meter arrow sizes\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:MATERIALS.WOOD": {
        "prefix": "MATERIALS.WOOD",
        "body": "MATERIALS.WOOD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: wood)"
    },
    "常量:ANIM_SORT_ORDER.OCEAN_WHIRLPORTAL": {
        "prefix": "ANIM_SORT_ORDER.OCEAN_WHIRLPORTAL",
        "body": "ANIM_SORT_ORDER.OCEAN_WHIRLPORTAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:TECH.SEAFARING_TWO": {
        "prefix": "TECH.SEAFARING_TWO",
        "body": "TECH.SEAFARING_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_CANCEL": {
        "prefix": "CONTROL_CANCEL",
        "body": "CONTROL_CANCEL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 30)"
    },
    "常量:CONTROL_MOVE_DOWN": {
        "prefix": "CONTROL_MOVE_DOWN",
        "body": "CONTROL_MOVE_DOWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 6)"
    },
    "常量:NODE_TYPE.Default": {
        "prefix": "NODE_TYPE.Default",
        "body": "NODE_TYPE.Default",
        "description": " ※参数: \n ※返回: \n ※说明: Land can touch any other Default node in the task that is within range\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:CONTROL_TRADESTACK": {
        "prefix": "CONTROL_TRADESTACK",
        "body": "CONTROL_TRADESTACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 37)"
    },
    "常量:WORMHOLETYPE": {
        "prefix": "WORMHOLETYPE",
        "body": "WORMHOLETYPE",
        "description": " ※参数: \n ※返回: \n ※说明: Which wormhole\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:WEBCOLOURS.YELLOW": {
        "prefix": "WEBCOLOURS.YELLOW",
        "body": "WEBCOLOURS.YELLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 255, 0))"
    },
    "常量:RATE_SCALE.INCREASE_LOW": {
        "prefix": "RATE_SCALE.INCREASE_LOW",
        "body": "RATE_SCALE.INCREASE_LOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:WEBCOLOURS.THISTLE": {
        "prefix": "WEBCOLOURS.THISTLE",
        "body": "WEBCOLOURS.THISTLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(216, 191, 216))"
    },
    "常量:CONTROL_FOCUS_RIGHT": {
        "prefix": "CONTROL_FOCUS_RIGHT",
        "body": "CONTROL_FOCUS_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 28)"
    },
    "常量:WEBCOLOURS.ORANGE": {
        "prefix": "WEBCOLOURS.ORANGE",
        "body": "WEBCOLOURS.ORANGE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 165, 0))"
    },
    "常量:WEBCOLOURS.SPRINGGREEN": {
        "prefix": "WEBCOLOURS.SPRINGGREEN",
        "body": "WEBCOLOURS.SPRINGGREEN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB( 0, 255, 127))"
    },
    "常量:WEBCOLOURS.CHOCOLATE": {
        "prefix": "WEBCOLOURS.CHOCOLATE",
        "body": "WEBCOLOURS.CHOCOLATE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(210, 105, 30))"
    },
    "常量:MOVE_RIGHT": {
        "prefix": "MOVE_RIGHT",
        "body": "MOVE_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:CONTROL_INV_15": {
        "prefix": "CONTROL_INV_15",
        "body": "CONTROL_INV_15",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 81)"
    },
    "常量:CONTROL_OPEN_INVENTORY": {
        "prefix": "CONTROL_OPEN_INVENTORY",
        "body": "CONTROL_OPEN_INVENTORY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 45)"
    },
    "常量:WEBCOLOURS.SADDLEBROWN": {
        "prefix": "WEBCOLOURS.SADDLEBROWN",
        "body": "WEBCOLOURS.SADDLEBROWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(139, 69, 19))"
    },
    "常量:UICOLOURS.SLATE": {
        "prefix": "UICOLOURS.SLATE",
        "body": "UICOLOURS.SLATE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(155, 170, 177, 1))"
    },
    "常量:WEBCOLOURS.RED": {
        "prefix": "WEBCOLOURS.RED",
        "body": "WEBCOLOURS.RED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 0, 0))"
    },
    "常量:TECH.CELESTIAL_ONE": {
        "prefix": "TECH.CELESTIAL_ONE",
        "body": "TECH.CELESTIAL_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MATERIALS.NIGHTMARE": {
        "prefix": "MATERIALS.NIGHTMARE",
        "body": "MATERIALS.NIGHTMARE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: nightmare)"
    },
    "常量:WEBCOLOURS.PURPLE": {
        "prefix": "WEBCOLOURS.PURPLE",
        "body": "WEBCOLOURS.PURPLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(128, 0, 128))"
    },
    "常量:MATERIALS.KELP": {
        "prefix": "MATERIALS.KELP",
        "body": "MATERIALS.KELP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: kelp)"
    },
    "常量:WEBCOLOURS.PINK": {
        "prefix": "WEBCOLOURS.PINK",
        "body": "WEBCOLOURS.PINK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 192, 203))"
    },
    "常量:ROAD_PARAMETERS.MAX_EDGE_WIDTH": {
        "prefix": "ROAD_PARAMETERS.MAX_EDGE_WIDTH",
        "body": "ROAD_PARAMETERS.MAX_EDGE_WIDTH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:WEBCOLOURS.TEAL": {
        "prefix": "WEBCOLOURS.TEAL",
        "body": "WEBCOLOURS.TEAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(0, 128, 128))"
    },
    "常量:WEBCOLOURS.MEDIUMPURPLE": {
        "prefix": "WEBCOLOURS.MEDIUMPURPLE",
        "body": "WEBCOLOURS.MEDIUMPURPLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(147, 112, 219))"
    },
    "常量:GROUND.FUNGUSMOON": {
        "prefix": "GROUND.FUNGUSMOON",
        "body": "GROUND.FUNGUSMOON",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 46)"
    },
    "常量:BGCOLOURS.GREY": {
        "prefix": "BGCOLOURS.GREY",
        "body": "BGCOLOURS.GREY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(75,  75,  75 ))"
    },
    "常量:WEBCOLOURS.LIGHTSKYBLUE": {
        "prefix": "WEBCOLOURS.LIGHTSKYBLUE",
        "body": "WEBCOLOURS.LIGHTSKYBLUE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(135, 206, 250))"
    },
    "常量:COLLISION.BOAT_LIMITS": {
        "prefix": "COLLISION.BOAT_LIMITS",
        "body": "COLLISION.BOAT_LIMITS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 64)"
    },
    "常量:CONTROL_CRAFTING_PINLEFT": {
        "prefix": "CONTROL_CRAFTING_PINLEFT",
        "body": "CONTROL_CRAFTING_PINLEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 75)"
    },
    "常量:WEBCOLOURS.LAVENDER": {
        "prefix": "WEBCOLOURS.LAVENDER",
        "body": "WEBCOLOURS.LAVENDER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(230, 230, 250))"
    },
    "常量:CONTROL_INV_1": {
        "prefix": "CONTROL_INV_1",
        "body": "CONTROL_INV_1",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 15)"
    },
    "常量:CONTROL_INV_11": {
        "prefix": "CONTROL_INV_11",
        "body": "CONTROL_INV_11",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 77)"
    },
    "常量:WEBCOLOURS.KHAKI": {
        "prefix": "WEBCOLOURS.KHAKI",
        "body": "WEBCOLOURS.KHAKI",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(240, 230, 140))"
    },
    "常量:WEBCOLOURS.GREEN": {
        "prefix": "WEBCOLOURS.GREEN",
        "body": "WEBCOLOURS.GREEN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(0, 128, 0))"
    },
    "常量:UICOLOURS": {
        "prefix": "UICOLOURS",
        "body": "UICOLOURS",
        "description": " ※参数: \n ※返回: \n ※说明: A coherent palette for UI elements\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:GROUND.WALL_CAVE": {
        "prefix": "GROUND.WALL_CAVE",
        "body": "GROUND.WALL_CAVE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 154)"
    },
    "常量:GROUND.TILES_GLOW": {
        "prefix": "GROUND.TILES_GLOW",
        "body": "GROUND.TILES_GLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 21)"
    },
    "常量:WEBCOLOURS.FIREBRICK": {
        "prefix": "WEBCOLOURS.FIREBRICK",
        "body": "WEBCOLOURS.FIREBRICK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(178, 34, 34))"
    },
    "常量:GROUND.WALL_MUD": {
        "prefix": "GROUND.WALL_MUD",
        "body": "GROUND.WALL_MUD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 157)"
    },
    "常量:GROUND.TILES": {
        "prefix": "GROUND.TILES",
        "body": "GROUND.TILES",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 20)"
    },
    "常量:CONTROL_MOVE_LEFT": {
        "prefix": "CONTROL_MOVE_LEFT",
        "body": "CONTROL_MOVE_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 7)"
    },
    "常量:WEBCOLOURS.CRIMSON": {
        "prefix": "WEBCOLOURS.CRIMSON",
        "body": "WEBCOLOURS.CRIMSON",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(220, 20, 60))"
    },
    "常量:CONTROL_TOGGLE_DEBUGRENDER": {
        "prefix": "CONTROL_TOGGLE_DEBUGRENDER",
        "body": "CONTROL_TOGGLE_DEBUGRENDER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 44)"
    },
    "常量:WEBCOLOURS.CORNFLOWERBLUE": {
        "prefix": "WEBCOLOURS.CORNFLOWERBLUE",
        "body": "WEBCOLOURS.CORNFLOWERBLUE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(100, 149, 237))"
    },
    "常量:NODE_TYPE.Room": {
        "prefix": "NODE_TYPE.Room",
        "body": "NODE_TYPE.Room",
        "description": " ※参数: \n ※返回: \n ※说明: Land can only touch the room(s) it is connected to by the graph (adds impassable around its parameter with a single land bidge)\n ※贡献者: @lan (该常量值为: 5)"
    },
    "常量:CONTROL_INVENTORY_LEFT": {
        "prefix": "CONTROL_INVENTORY_LEFT",
        "body": "CONTROL_INVENTORY_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 47)"
    },
    "常量:WEBCOLOURS.BISQUE": {
        "prefix": "WEBCOLOURS.BISQUE",
        "body": "WEBCOLOURS.BISQUE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 228, 196))"
    },
    "常量:GROUND.WALL_ROCKY": {
        "prefix": "GROUND.WALL_ROCKY",
        "body": "GROUND.WALL_ROCKY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 151)"
    },
    "常量:COLLISION.GROUND": {
        "prefix": "COLLISION.GROUND",
        "body": "COLLISION.GROUND",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 32)"
    },
    "常量:CONTROL_PRIMARY": {
        "prefix": "CONTROL_PRIMARY",
        "body": "CONTROL_PRIMARY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:ITEMTAG.TREASURE": {
        "prefix": "ITEMTAG.TREASURE",
        "body": "ITEMTAG.TREASURE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: treasure)"
    },
    "常量:GROUND.INVALID": {
        "prefix": "GROUND.INVALID",
        "body": "GROUND.INVALID",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 65535)"
    },
    "常量:WEBCOLOURS": {
        "prefix": "WEBCOLOURS",
        "body": "WEBCOLOURS",
        "description": " ※参数: \n ※返回: \n ※说明: Standard html colours: https://en.wikipedia.org/wiki/Web_colors#X11_color_names\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:UICOLOURS.GOLD_UNIMPORTANT": {
        "prefix": "UICOLOURS.GOLD_UNIMPORTANT",
        "body": "UICOLOURS.GOLD_UNIMPORTANT",
        "description": " ※参数: \n ※返回: \n ※说明: non-interactive non-important text\n ※贡献者: @lan (该常量值为: RGB(213, 213, 203))"
    },
    "常量:ANIM_SORT_ORDER.OCEAN_BOAT": {
        "prefix": "ANIM_SORT_ORDER.OCEAN_BOAT",
        "body": "ANIM_SORT_ORDER.OCEAN_BOAT",
        "description": " ※参数: \n ※返回: \n ※说明: Keep at 2.\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:EQUIPSLOTS.BODY": {
        "prefix": "EQUIPSLOTS.BODY",
        "body": "EQUIPSLOTS.BODY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: body)"
    },
    "常量:WEBCOLOURS.ROSYBROWN": {
        "prefix": "WEBCOLOURS.ROSYBROWN",
        "body": "WEBCOLOURS.ROSYBROWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(188, 143, 143))"
    },
    "常量:UICOLOURS.SILVER": {
        "prefix": "UICOLOURS.SILVER",
        "body": "UICOLOURS.SILVER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(192, 192, 192, 1))"
    },
    "常量:UICOLOURS.RED": {
        "prefix": "UICOLOURS.RED",
        "body": "UICOLOURS.RED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(207, 61, 61, 1))"
    },
    "常量:BGCOLOURS.FULL": {
        "prefix": "BGCOLOURS.FULL",
        "body": "BGCOLOURS.FULL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 255, 255))"
    },
    "常量:GROUND.BRICK_GLOW": {
        "prefix": "GROUND.BRICK_GLOW",
        "body": "GROUND.BRICK_GLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 19)"
    },
    "常量:CONTROL_PAUSE": {
        "prefix": "CONTROL_PAUSE",
        "body": "CONTROL_PAUSE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 13)"
    },
    "常量:CONTROL_INV_5": {
        "prefix": "CONTROL_INV_5",
        "body": "CONTROL_INV_5",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 19)"
    },
    "常量:BLENDMODE.VFXTest": {
        "prefix": "BLENDMODE.VFXTest",
        "body": "BLENDMODE.VFXTest",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 6)"
    },
    "常量:UICOLOURS.IVORY": {
        "prefix": "UICOLOURS.IVORY",
        "body": "UICOLOURS.IVORY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(236, 232, 223, 1))"
    },
    "常量:UICOLOURS.HIGHLIGHT_GOLD": {
        "prefix": "UICOLOURS.HIGHLIGHT_GOLD",
        "body": "UICOLOURS.HIGHLIGHT_GOLD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(243, 217, 161))"
    },
    "常量:UICOLOURS.GREY": {
        "prefix": "UICOLOURS.GREY",
        "body": "UICOLOURS.GREY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: GREY)"
    },
    "常量:TECH.LUNARFORGING_TWO": {
        "prefix": "TECH.LUNARFORGING_TWO",
        "body": "TECH.LUNARFORGING_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MATERIALS.THULECITE": {
        "prefix": "MATERIALS.THULECITE",
        "body": "MATERIALS.THULECITE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: thulecite)"
    },
    "常量:UICOLOURS.WHITE": {
        "prefix": "UICOLOURS.WHITE",
        "body": "UICOLOURS.WHITE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: WHITE)"
    },
    "常量:GROUND.OCEAN_ROUGH": {
        "prefix": "GROUND.OCEAN_ROUGH",
        "body": "GROUND.OCEAN_ROUGH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 204)"
    },
    "常量:CONTROL_ZOOM_OUT": {
        "prefix": "CONTROL_ZOOM_OUT",
        "body": "CONTROL_ZOOM_OUT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 10)"
    },
    "常量:ORDERS.HOLD": {
        "prefix": "ORDERS.HOLD",
        "body": "ORDERS.HOLD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:UICOLOURS.GOLD_FOCUS": {
        "prefix": "UICOLOURS.GOLD_FOCUS",
        "body": "UICOLOURS.GOLD_FOCUS",
        "description": " ※参数: \n ※返回: \n ※说明: menu active item\n ※贡献者: @lan (该常量值为: RGB(251, 193, 92))"
    },
    "常量:CONTROL_PREVVALUE": {
        "prefix": "CONTROL_PREVVALUE",
        "body": "CONTROL_PREVVALUE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 33)"
    },
    "常量:GROUND.OCEAN_SWELL": {
        "prefix": "GROUND.OCEAN_SWELL",
        "body": "GROUND.OCEAN_SWELL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 203)"
    },
    "常量:CONTROL_FORCE_STACK": {
        "prefix": "CONTROL_FORCE_STACK",
        "body": "CONTROL_FORCE_STACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 41)"
    },
    "常量:TENDENCY.PUDGY": {
        "prefix": "TENDENCY.PUDGY",
        "body": "TENDENCY.PUDGY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: PUDGY)"
    },
    "常量:TECH.HERMITCRABSHOP_FIVE": {
        "prefix": "TECH.HERMITCRABSHOP_FIVE",
        "body": "TECH.HERMITCRABSHOP_FIVE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.CARTOGRAPHY_TWO": {
        "prefix": "TECH.CARTOGRAPHY_TWO",
        "body": "TECH.CARTOGRAPHY_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MATERIALS.SHELL": {
        "prefix": "MATERIALS.SHELL",
        "body": "MATERIALS.SHELL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: shell)"
    },
    "常量:ROAD_PARAMETERS.MIN_WIDTH": {
        "prefix": "ROAD_PARAMETERS.MIN_WIDTH",
        "body": "ROAD_PARAMETERS.MIN_WIDTH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:GROUND.WOODFLOOR": {
        "prefix": "GROUND.WOODFLOOR",
        "body": "GROUND.WOODFLOOR",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 10)"
    },
    "常量:ITEMTAG.MEAT": {
        "prefix": "ITEMTAG.MEAT",
        "body": "ITEMTAG.MEAT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: meat)"
    },
    "常量:UICOLOURS.GOLD_CLICKABLE": {
        "prefix": "UICOLOURS.GOLD_CLICKABLE",
        "body": "UICOLOURS.GOLD_CLICKABLE",
        "description": " ※参数: \n ※返回: \n ※说明: interactive text & menu\n ※贡献者: @lan (该常量值为: RGB(215, 210, 157))"
    },
    "常量:UICOLOURS.BLACK": {
        "prefix": "UICOLOURS.BLACK",
        "body": "UICOLOURS.BLACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: BLACK)"
    },
    "常量:UICOLOURS.GOLD": {
        "prefix": "UICOLOURS.GOLD",
        "body": "UICOLOURS.GOLD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: GOLD)"
    },
    "常量:TECH": {
        "prefix": "TECH",
        "body": "TECH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:CONTROL_INV_6": {
        "prefix": "CONTROL_INV_6",
        "body": "CONTROL_INV_6",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 20)"
    },
    "常量:ANIM_ORIENTATION.OnGround": {
        "prefix": "ANIM_ORIENTATION.OnGround",
        "body": "ANIM_ORIENTATION.OnGround",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:UICOLOURS.EGGSHELL": {
        "prefix": "UICOLOURS.EGGSHELL",
        "body": "UICOLOURS.EGGSHELL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(252, 230, 201))"
    },
    "常量:BLENDMODE.InverseAlpha": {
        "prefix": "BLENDMODE.InverseAlpha",
        "body": "BLENDMODE.InverseAlpha",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:GROUND.UNDERROCK": {
        "prefix": "GROUND.UNDERROCK",
        "body": "GROUND.UNDERROCK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 16)"
    },
    "常量:LEVELTYPE.CAVE": {
        "prefix": "LEVELTYPE.CAVE",
        "body": "LEVELTYPE.CAVE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: CAVE)"
    },
    "常量:WEBCOLOURS.SANDYBROWN": {
        "prefix": "WEBCOLOURS.SANDYBROWN",
        "body": "WEBCOLOURS.SANDYBROWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(244, 164, 96))"
    },
    "常量:CONTROL_INVENTORY_RIGHT": {
        "prefix": "CONTROL_INVENTORY_RIGHT",
        "body": "CONTROL_INVENTORY_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 48)"
    },
    "常量:UICOLOURS.BLUE": {
        "prefix": "UICOLOURS.BLUE",
        "body": "UICOLOURS.BLUE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(80, 143, 244))"
    },
    "常量:NODE_TYPE.Blank": {
        "prefix": "NODE_TYPE.Blank",
        "body": "NODE_TYPE.Blank",
        "description": " ※参数: \n ※返回: \n ※说明: empty room with impassable ground\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:CONTROL_MENU_START": {
        "prefix": "CONTROL_MENU_START",
        "body": "CONTROL_MENU_START",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 84)"
    },
    "常量:FACING_UPRIGHT": {
        "prefix": "FACING_UPRIGHT",
        "body": "FACING_UPRIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:SCALEMODE_PROPORTIONAL": {
        "prefix": "SCALEMODE_PROPORTIONAL",
        "body": "SCALEMODE_PROPORTIONAL",
        "description": " ※参数: \n ※返回: \n ※说明: preserve aspect ratio (picks the smaller of horizontal/vertical scale)\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:COLLISION.FLYERS": {
        "prefix": "COLLISION.FLYERS",
        "body": "COLLISION.FLYERS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2048)"
    },
    "常量:CONTROL_MENU_MISC_1": {
        "prefix": "CONTROL_MENU_MISC_1",
        "body": "CONTROL_MENU_MISC_1",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 68)"
    },
    "常量:TENDENCY.DEFAULT": {
        "prefix": "TENDENCY.DEFAULT",
        "body": "TENDENCY.DEFAULT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: DEFAULT)"
    },
    "常量:ORDERS.WARN": {
        "prefix": "ORDERS.WARN",
        "body": "ORDERS.WARN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:CONTROL_SCROLLBACK": {
        "prefix": "CONTROL_SCROLLBACK",
        "body": "CONTROL_SCROLLBACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 31)"
    },
    "常量:TENDENCY": {
        "prefix": "TENDENCY",
        "body": "TENDENCY",
        "description": " ※参数: \n ※返回: \n ※说明: 驯化趋势\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:BGCOLOURS.HALF": {
        "prefix": "BGCOLOURS.HALF",
        "body": "BGCOLOURS.HALF",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(128, 128, 128 ))"
    },
    "常量:TECH.CARRATOFFERING_THREE": {
        "prefix": "TECH.CARRATOFFERING_THREE",
        "body": "TECH.CARRATOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.YOT_CATCOON": {
        "prefix": "TECH.YOT_CATCOON",
        "body": "TECH.YOT_CATCOON",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:ROAD_PARAMETERS.MAX_WIDTH": {
        "prefix": "ROAD_PARAMETERS.MAX_WIDTH",
        "body": "ROAD_PARAMETERS.MAX_WIDTH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:BGCOLOURS.YELLOW": {
        "prefix": "BGCOLOURS.YELLOW",
        "body": "BGCOLOURS.YELLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 196, 45 ))"
    },
    "常量:TECH.YOTR": {
        "prefix": "TECH.YOTR",
        "body": "TECH.YOTR",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.YOTP": {
        "prefix": "TECH.YOTP",
        "body": "TECH.YOTP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MATERIALS.FOSSIL": {
        "prefix": "MATERIALS.FOSSIL",
        "body": "MATERIALS.FOSSIL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: fossil)"
    },
    "常量:TECH.FISHING_TWO": {
        "prefix": "TECH.FISHING_TWO",
        "body": "TECH.FISHING_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:BLENDMODE.AlphaAdditive": {
        "prefix": "BLENDMODE.AlphaAdditive",
        "body": "BLENDMODE.AlphaAdditive",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 5)"
    },
    "常量:ANIM_SORT_ORDER.OCEAN_BOAT_BUMPERS": {
        "prefix": "ANIM_SORT_ORDER.OCEAN_BOAT_BUMPERS",
        "body": "ANIM_SORT_ORDER.OCEAN_BOAT_BUMPERS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:TECH.YOTB": {
        "prefix": "TECH.YOTB",
        "body": "TECH.YOTB",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CAMERASHAKE.FULL": {
        "prefix": "CAMERASHAKE.FULL",
        "body": "CAMERASHAKE.FULL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:CONTROL_CRAFTING_PINRIGHT": {
        "prefix": "CONTROL_CRAFTING_PINRIGHT",
        "body": "CONTROL_CRAFTING_PINRIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 76)"
    },
    "常量:ANIM_SORT_ORDER_BELOW_GROUND.UNDERWATER": {
        "prefix": "ANIM_SORT_ORDER_BELOW_GROUND.UNDERWATER",
        "body": "ANIM_SORT_ORDER_BELOW_GROUND.UNDERWATER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:FACING_NONE": {
        "prefix": "FACING_NONE",
        "body": "FACING_NONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 8)"
    },
    "常量:CAMERASHAKE.SIDE": {
        "prefix": "CAMERASHAKE.SIDE",
        "body": "CAMERASHAKE.SIDE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:OCEAN_DEPTH.SHALLOW": {
        "prefix": "OCEAN_DEPTH.SHALLOW",
        "body": "OCEAN_DEPTH.SHALLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:BLENDMODE.Premultiplied": {
        "prefix": "BLENDMODE.Premultiplied",
        "body": "BLENDMODE.Premultiplied",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:TECH.CELESTIAL_THREE": {
        "prefix": "TECH.CELESTIAL_THREE",
        "body": "TECH.CELESTIAL_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:ANIM_ORIENTATION.BillBoard": {
        "prefix": "ANIM_ORIENTATION.BillBoard",
        "body": "ANIM_ORIENTATION.BillBoard",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:TECH.WINTERSFEASTCOOKING_ONE": {
        "prefix": "TECH.WINTERSFEASTCOOKING_ONE",
        "body": "TECH.WINTERSFEASTCOOKING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_MOVE_UP": {
        "prefix": "CONTROL_MOVE_UP",
        "body": "CONTROL_MOVE_UP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 5)"
    },
    "常量:TECH.WARGOFFERING_THREE": {
        "prefix": "TECH.WARGOFFERING_THREE",
        "body": "TECH.WARGOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_INV_14": {
        "prefix": "CONTROL_INV_14",
        "body": "CONTROL_INV_14",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 80)"
    },
    "常量:TECH.TURFCRAFTING_TWO": {
        "prefix": "TECH.TURFCRAFTING_TWO",
        "body": "TECH.TURFCRAFTING_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_TARGET_CYCLE": {
        "prefix": "CONTROL_TARGET_CYCLE",
        "body": "CONTROL_TARGET_CYCLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 89)"
    },
    "常量:TECH.TURFCRAFTING_ONE": {
        "prefix": "TECH.TURFCRAFTING_ONE",
        "body": "TECH.TURFCRAFTING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:RATE_SCALE.INCREASE_MED": {
        "prefix": "RATE_SCALE.INCREASE_MED",
        "body": "RATE_SCALE.INCREASE_MED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:ANIM_SORT_ORDER.OCEAN_WAVES": {
        "prefix": "ANIM_SORT_ORDER.OCEAN_WAVES",
        "body": "ANIM_SORT_ORDER.OCEAN_WAVES",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:TECH.SHADOWFORGING_TWO": {
        "prefix": "TECH.SHADOWFORGING_TWO",
        "body": "TECH.SHADOWFORGING_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:OCEAN_DEPTH": {
        "prefix": "OCEAN_DEPTH",
        "body": "OCEAN_DEPTH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:SCALEMODE_FIXEDPROPORTIONAL": {
        "prefix": "SCALEMODE_FIXEDPROPORTIONAL",
        "body": "SCALEMODE_FIXEDPROPORTIONAL",
        "description": " ※参数: \n ※返回: \n ※说明: same as SCALEMODE_FIXEDSCREEN_NONDYNAMIC, except for safe area on consoles\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:TECH.SHADOWFORGING_ONE": {
        "prefix": "TECH.SHADOWFORGING_ONE",
        "body": "TECH.SHADOWFORGING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.SEAFARING_ONE": {
        "prefix": "TECH.SEAFARING_ONE",
        "body": "TECH.SEAFARING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:PLAYERSTUNLOCK.NEVER": {
        "prefix": "PLAYERSTUNLOCK.NEVER",
        "body": "PLAYERSTUNLOCK.NEVER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:TECH.SCULPTING_ONE": {
        "prefix": "TECH.SCULPTING_ONE",
        "body": "TECH.SCULPTING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MATERIALS.ICE": {
        "prefix": "MATERIALS.ICE",
        "body": "MATERIALS.ICE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: ice)"
    },
    "常量:GROUND.QUAGMIRE_PARKSTONE": {
        "prefix": "GROUND.QUAGMIRE_PARKSTONE",
        "body": "GROUND.QUAGMIRE_PARKSTONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 37)"
    },
    "常量:TECH.CARPENTRY_TWO": {
        "prefix": "TECH.CARPENTRY_TWO",
        "body": "TECH.CARPENTRY_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.SCIENCE_THREE": {
        "prefix": "TECH.SCIENCE_THREE",
        "body": "TECH.SCIENCE_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:COLLISION.SANITY": {
        "prefix": "COLLISION.SANITY",
        "body": "COLLISION.SANITY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4096)"
    },
    "常量:MOUSEBUTTON_LEFT": {
        "prefix": "MOUSEBUTTON_LEFT",
        "body": "MOUSEBUTTON_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1000)"
    },
    "常量:TECH.LUNARFORGING_ONE": {
        "prefix": "TECH.LUNARFORGING_ONE",
        "body": "TECH.LUNARFORGING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.RABBITOFFERING_THREE": {
        "prefix": "TECH.RABBITOFFERING_THREE",
        "body": "TECH.RABBITOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:GROUND.FOREST": {
        "prefix": "GROUND.FOREST",
        "body": "GROUND.FOREST",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 7)"
    },
    "常量:HOUNDWARNINGTYPE.LVL1_WORM": {
        "prefix": "HOUNDWARNINGTYPE.LVL1_WORM",
        "body": "HOUNDWARNINGTYPE.LVL1_WORM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:FACING_UPLEFT": {
        "prefix": "FACING_UPLEFT",
        "body": "FACING_UPLEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 5)"
    },
    "常量:CONTROL_INVENTORY_DROP": {
        "prefix": "CONTROL_INVENTORY_DROP",
        "body": "CONTROL_INVENTORY_DROP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 54)"
    },
    "常量:CONTROL_NEXTVALUE": {
        "prefix": "CONTROL_NEXTVALUE",
        "body": "CONTROL_NEXTVALUE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 34)"
    },
    "常量:ITEMTAG.FX": {
        "prefix": "ITEMTAG.FX",
        "body": "ITEMTAG.FX",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: FX)"
    },
    "常量:MOUSEBUTTON_SCROLLDOWN": {
        "prefix": "MOUSEBUTTON_SCROLLDOWN",
        "body": "MOUSEBUTTON_SCROLLDOWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1004)"
    },
    "常量:WEBCOLOURS.TOMATO": {
        "prefix": "WEBCOLOURS.TOMATO",
        "body": "WEBCOLOURS.TOMATO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 99, 71))"
    },
    "常量:TECH.NONE": {
        "prefix": "TECH.NONE",
        "body": "TECH.NONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:LEVELTYPE.CUSTOMPRESET": {
        "prefix": "LEVELTYPE.CUSTOMPRESET",
        "body": "LEVELTYPE.CUSTOMPRESET",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: CUSTOMPRESET)"
    },
    "常量:TECH.MAGIC_THREE": {
        "prefix": "TECH.MAGIC_THREE",
        "body": "TECH.MAGIC_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:OCEAN_DEPTH.DEEP": {
        "prefix": "OCEAN_DEPTH.DEEP",
        "body": "OCEAN_DEPTH.DEEP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:TECH.MADSCIENCE_ONE": {
        "prefix": "TECH.MADSCIENCE_ONE",
        "body": "TECH.MADSCIENCE_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:NODE_TYPE.SeparatedRoom": {
        "prefix": "NODE_TYPE.SeparatedRoom",
        "body": "NODE_TYPE.SeparatedRoom",
        "description": " ※参数: \n ※返回: \n ※说明: adds impassable around its entire parameter\n ※贡献者: @lan (该常量值为: 7)"
    },
    "常量:MOVE_LEFT": {
        "prefix": "MOVE_LEFT",
        "body": "MOVE_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:CONTROL_ROTATE_LEFT": {
        "prefix": "CONTROL_ROTATE_LEFT",
        "body": "CONTROL_ROTATE_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 11)"
    },
    "常量:EQUIPSLOTS": {
        "prefix": "EQUIPSLOTS",
        "body": "EQUIPSLOTS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:LEVELTYPE.ADVENTURE": {
        "prefix": "LEVELTYPE.ADVENTURE",
        "body": "LEVELTYPE.ADVENTURE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: ADVENTURE)"
    },
    "常量:GROUND.METEORCOAST_NOISE": {
        "prefix": "GROUND.METEORCOAST_NOISE",
        "body": "GROUND.METEORCOAST_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 122)"
    },
    "常量:TECH.ROBOTMODULECRAFT_ONE": {
        "prefix": "TECH.ROBOTMODULECRAFT_ONE",
        "body": "TECH.ROBOTMODULECRAFT_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.LOST": {
        "prefix": "TECH.LOST",
        "body": "TECH.LOST",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.HALLOWED_NIGHTS": {
        "prefix": "TECH.HALLOWED_NIGHTS",
        "body": "TECH.HALLOWED_NIGHTS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:FACING_DOWNLEFT": {
        "prefix": "FACING_DOWNLEFT",
        "body": "FACING_DOWNLEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 7)"
    },
    "常量:TECH.HERMITCRABSHOP_THREE": {
        "prefix": "TECH.HERMITCRABSHOP_THREE",
        "body": "TECH.HERMITCRABSHOP_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:UICOLOURS.BROWN_DARK": {
        "prefix": "UICOLOURS.BROWN_DARK",
        "body": "UICOLOURS.BROWN_DARK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(80, 61, 39))"
    },
    "常量:TECH.YOTD": {
        "prefix": "TECH.YOTD",
        "body": "TECH.YOTD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.FISHING_ONE": {
        "prefix": "TECH.FISHING_ONE",
        "body": "TECH.FISHING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.DRAGONOFFERING_THREE": {
        "prefix": "TECH.DRAGONOFFERING_THREE",
        "body": "TECH.DRAGONOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.CATCOONOFFERING_THREE": {
        "prefix": "TECH.CATCOONOFFERING_THREE",
        "body": "TECH.CATCOONOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:GROUND.FUNGUSMOON_NOISE": {
        "prefix": "GROUND.FUNGUSMOON_NOISE",
        "body": "GROUND.FUNGUSMOON_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 120)"
    },
    "常量:GROUND.METEOR": {
        "prefix": "GROUND.METEOR",
        "body": "GROUND.METEOR",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 43)"
    },
    "常量:TECH.CARNIVAL_PRIZESHOP_ONE": {
        "prefix": "TECH.CARNIVAL_PRIZESHOP_ONE",
        "body": "TECH.CARNIVAL_PRIZESHOP_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_FOCUS_LEFT": {
        "prefix": "CONTROL_FOCUS_LEFT",
        "body": "CONTROL_FOCUS_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 27)"
    },
    "常量:TECH.CARNIVAL_HOSTSHOP_ONE": {
        "prefix": "TECH.CARNIVAL_HOSTSHOP_ONE",
        "body": "TECH.CARNIVAL_HOSTSHOP_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.BEEFOFFERING_THREE": {
        "prefix": "TECH.BEEFOFFERING_THREE",
        "body": "TECH.BEEFOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_USE_ITEM_ON_ITEM": {
        "prefix": "CONTROL_USE_ITEM_ON_ITEM",
        "body": "CONTROL_USE_ITEM_ON_ITEM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 59)"
    },
    "常量:ANCHOR_RIGHT": {
        "prefix": "ANCHOR_RIGHT",
        "body": "ANCHOR_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:TECH.ANCIENT_TWO": {
        "prefix": "TECH.ANCIENT_TWO",
        "body": "TECH.ANCIENT_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.ANCIENT_THREE": {
        "prefix": "TECH.ANCIENT_THREE",
        "body": "TECH.ANCIENT_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:COLLISION.LAND_OCEAN_LIMITS": {
        "prefix": "COLLISION.LAND_OCEAN_LIMITS",
        "body": "COLLISION.LAND_OCEAN_LIMITS",
        "description": " ※参数: \n ※返回: \n ※说明: physics wall between water and land\n ※贡献者: @lan (该常量值为: 128)"
    },
    "常量:TECH.ANCIENT_FOUR": {
        "prefix": "TECH.ANCIENT_FOUR",
        "body": "TECH.ANCIENT_FOUR",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.PIGOFFERING_THREE": {
        "prefix": "TECH.PIGOFFERING_THREE",
        "body": "TECH.PIGOFFERING_THREE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:SCALEMODE_FIXEDSCREEN_NONDYNAMIC": {
        "prefix": "SCALEMODE_FIXEDSCREEN_NONDYNAMIC",
        "body": "SCALEMODE_FIXEDSCREEN_NONDYNAMIC",
        "description": " ※参数: \n ※返回: \n ※说明: scale same amount as window scaling from 1280x720\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:ANIM_SORT_ORDER_BELOW_GROUND.UNUSED": {
        "prefix": "ANIM_SORT_ORDER_BELOW_GROUND.UNUSED",
        "body": "ANIM_SORT_ORDER_BELOW_GROUND.UNUSED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:SCALEMODE_FILLSCREEN": {
        "prefix": "SCALEMODE_FILLSCREEN",
        "body": "SCALEMODE_FILLSCREEN",
        "description": " ※参数: \n ※返回: \n ※说明: stretch art to fit/fill window\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:ITEMTAG": {
        "prefix": "ITEMTAG",
        "body": "ITEMTAG",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:ROAD_PARAMETERS.NUM_SUBDIVISIONS_PER_SEGMENT": {
        "prefix": "ROAD_PARAMETERS.NUM_SUBDIVISIONS_PER_SEGMENT",
        "body": "ROAD_PARAMETERS.NUM_SUBDIVISIONS_PER_SEGMENT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 50)"
    },
    "常量:ROAD_PARAMETERS.MIN_EDGE_WIDTH": {
        "prefix": "ROAD_PARAMETERS.MIN_EDGE_WIDTH",
        "body": "ROAD_PARAMETERS.MIN_EDGE_WIDTH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0.5)"
    },
    "常量:BLENDMODE.Additive": {
        "prefix": "BLENDMODE.Additive",
        "body": "BLENDMODE.Additive",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:BLENDMODE": {
        "prefix": "BLENDMODE",
        "body": "BLENDMODE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:NODE_TYPE": {
        "prefix": "NODE_TYPE",
        "body": "NODE_TYPE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:TECH.YOTV": {
        "prefix": "TECH.YOTV",
        "body": "TECH.YOTV",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:GROUND.BRICK": {
        "prefix": "GROUND.BRICK",
        "body": "GROUND.BRICK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 18)"
    },
    "常量:WEBCOLOURS.PALEVIOLETRED": {
        "prefix": "WEBCOLOURS.PALEVIOLETRED",
        "body": "WEBCOLOURS.PALEVIOLETRED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(219, 112, 147))"
    },
    "常量:ROAD_PARAMETERS": {
        "prefix": "ROAD_PARAMETERS",
        "body": "ROAD_PARAMETERS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:CONTROL_INV_4": {
        "prefix": "CONTROL_INV_4",
        "body": "CONTROL_INV_4",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 18)"
    },
    "常量:MATERIALS.MOONROCK": {
        "prefix": "MATERIALS.MOONROCK",
        "body": "MATERIALS.MOONROCK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: moonrock)"
    },
    "常量:RATE_SCALE.NEUTRAL": {
        "prefix": "RATE_SCALE.NEUTRAL",
        "body": "RATE_SCALE.NEUTRAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:RATE_SCALE.DECREASE_HIGH": {
        "prefix": "RATE_SCALE.DECREASE_HIGH",
        "body": "RATE_SCALE.DECREASE_HIGH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:MATERIALS.SALT": {
        "prefix": "MATERIALS.SALT",
        "body": "MATERIALS.SALT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: salt)"
    },
    "常量:TECH.SPIDERCRAFT_ONE": {
        "prefix": "TECH.SPIDERCRAFT_ONE",
        "body": "TECH.SPIDERCRAFT_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:TECH.ORPHANAGE_ONE": {
        "prefix": "TECH.ORPHANAGE_ONE",
        "body": "TECH.ORPHANAGE_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:RATE_SCALE.INCREASE_HIGH": {
        "prefix": "RATE_SCALE.INCREASE_HIGH",
        "body": "RATE_SCALE.INCREASE_HIGH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:GROUND.SINKHOLE": {
        "prefix": "GROUND.SINKHOLE",
        "body": "GROUND.SINKHOLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 15)"
    },
    "常量:CONTROL_FORCE_INSPECT": {
        "prefix": "CONTROL_FORCE_INSPECT",
        "body": "CONTROL_FORCE_INSPECT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 38)"
    },
    "常量:RATE_SCALE.DECREASE_MED": {
        "prefix": "RATE_SCALE.DECREASE_MED",
        "body": "RATE_SCALE.DECREASE_MED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 5)"
    },
    "常量:ANIM_SORT_ORDER.OCEAN_SKYSHADOWS": {
        "prefix": "ANIM_SORT_ORDER.OCEAN_SKYSHADOWS",
        "body": "ANIM_SORT_ORDER.OCEAN_SKYSHADOWS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:CONTROL_CONTROLLER_ATTACK": {
        "prefix": "CONTROL_CONTROLLER_ATTACK",
        "body": "CONTROL_CONTROLLER_ATTACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 56)"
    },
    "常量:COLLISION.GIANTS": {
        "prefix": "COLLISION.GIANTS",
        "body": "COLLISION.GIANTS",
        "description": " ※参数: \n ※返回: \n ※说明: collide with obstacles but not small obstacles\n ※贡献者: @lan (该常量值为: 16384)"
    },
    "常量:WORMHOLETYPE.WORM": {
        "prefix": "WORMHOLETYPE.WORM",
        "body": "WORMHOLETYPE.WORM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:GROUND.WEB": {
        "prefix": "GROUND.WEB",
        "body": "GROUND.WEB",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 9)"
    },
    "常量:FACING_LEFT": {
        "prefix": "FACING_LEFT",
        "body": "FACING_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:PLAYERSTUNLOCK.SOMETIMES": {
        "prefix": "PLAYERSTUNLOCK.SOMETIMES",
        "body": "PLAYERSTUNLOCK.SOMETIMES",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:GROUND.WALL_HUNESTONE": {
        "prefix": "GROUND.WALL_HUNESTONE",
        "body": "GROUND.WALL_HUNESTONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 160)"
    },
    "常量:ANIM_SORT_ORDER_BELOW_GROUND.BOAT_TRAIL": {
        "prefix": "ANIM_SORT_ORDER_BELOW_GROUND.BOAT_TRAIL",
        "body": "ANIM_SORT_ORDER_BELOW_GROUND.BOAT_TRAIL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:CONTROL_INV_9": {
        "prefix": "CONTROL_INV_9",
        "body": "CONTROL_INV_9",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 23)"
    },
    "常量:HOUNDWARNINGTYPE.LVL4_WORM": {
        "prefix": "HOUNDWARNINGTYPE.LVL4_WORM",
        "body": "HOUNDWARNINGTYPE.LVL4_WORM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 7)"
    },
    "常量:TECH.SCULPTING_TWO": {
        "prefix": "TECH.SCULPTING_TWO",
        "body": "TECH.SCULPTING_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:PLAYERSTUNLOCK.ALWAYS": {
        "prefix": "PLAYERSTUNLOCK.ALWAYS",
        "body": "PLAYERSTUNLOCK.ALWAYS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: nil,--0)"
    },
    "常量:GROUND.LAVAARENA_TRIM": {
        "prefix": "GROUND.LAVAARENA_TRIM",
        "body": "GROUND.LAVAARENA_TRIM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 34)"
    },
    "常量:PLAYERSTUNLOCK": {
        "prefix": "PLAYERSTUNLOCK",
        "body": "PLAYERSTUNLOCK",
        "description": " ※参数: \n ※返回: \n ※说明: How does this creature apply stunlock to the player\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:ORDERS.NONE": {
        "prefix": "ORDERS.NONE",
        "body": "ORDERS.NONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:EQUIPSLOTS.HANDS": {
        "prefix": "EQUIPSLOTS.HANDS",
        "body": "EQUIPSLOTS.HANDS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: hands)"
    },
    "常量:CONTROL_MENU_MISC_2": {
        "prefix": "CONTROL_MENU_MISC_2",
        "body": "CONTROL_MENU_MISC_2",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 69)"
    },
    "常量:ORDERS": {
        "prefix": "ORDERS",
        "body": "ORDERS",
        "description": " ※参数: \n ※返回: \n ※说明: TeamAttacker orders\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:OCEAN_DEPTH.VERY_DEEP": {
        "prefix": "OCEAN_DEPTH.VERY_DEEP",
        "body": "OCEAN_DEPTH.VERY_DEEP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:TECH.WINTERS_FEAST": {
        "prefix": "TECH.WINTERS_FEAST",
        "body": "TECH.WINTERS_FEAST",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:LEVELTYPE.LAVAARENA": {
        "prefix": "LEVELTYPE.LAVAARENA",
        "body": "LEVELTYPE.LAVAARENA",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: LAVAARENA)"
    },
    "常量:WEBCOLOURS.BLUE": {
        "prefix": "WEBCOLOURS.BLUE",
        "body": "WEBCOLOURS.BLUE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(0, 0, 255))"
    },
    "常量:HOUNDWARNINGTYPE.LVL3_WORM": {
        "prefix": "HOUNDWARNINGTYPE.LVL3_WORM",
        "body": "HOUNDWARNINGTYPE.LVL3_WORM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 6)"
    },
    "常量:NODE_TYPE.Random": {
        "prefix": "NODE_TYPE.Random",
        "body": "NODE_TYPE.Random",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:CONTROL_INV_10": {
        "prefix": "CONTROL_INV_10",
        "body": "CONTROL_INV_10",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 24)"
    },
    "常量:WORMHOLETYPE.OCEANWHIRLPORTAL": {
        "prefix": "WORMHOLETYPE.OCEANWHIRLPORTAL",
        "body": "WORMHOLETYPE.OCEANWHIRLPORTAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:GROUND.WALL_WOOD": {
        "prefix": "GROUND.WALL_WOOD",
        "body": "GROUND.WALL_WOOD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 159)"
    },
    "常量:NODE_TYPE.Blocker": {
        "prefix": "NODE_TYPE.Blocker",
        "body": "NODE_TYPE.Blocker",
        "description": " ※参数: \n ※返回: \n ※说明: Adds 2 Blank nodes beside it\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:TENDENCY.ORNERY": {
        "prefix": "TENDENCY.ORNERY",
        "body": "TENDENCY.ORNERY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: ORNERY)"
    },
    "常量:ANIM_SORT_ORDER_BELOW_GROUND": {
        "prefix": "ANIM_SORT_ORDER_BELOW_GROUND",
        "body": "ANIM_SORT_ORDER_BELOW_GROUND",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:MATERIALS.STONE": {
        "prefix": "MATERIALS.STONE",
        "body": "MATERIALS.STONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: stone)"
    },
    "常量:NODE_TYPE.BackgroundRoom": {
        "prefix": "NODE_TYPE.BackgroundRoom",
        "body": "NODE_TYPE.BackgroundRoom",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 6)"
    },
    "常量:CONTROL_OPEN_DEBUG_MENU": {
        "prefix": "CONTROL_OPEN_DEBUG_MENU",
        "body": "CONTROL_OPEN_DEBUG_MENU",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 70)"
    },
    "常量:UICOLOURS.BROWN_MEDIUM": {
        "prefix": "UICOLOURS.BROWN_MEDIUM",
        "body": "UICOLOURS.BROWN_MEDIUM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(107, 84, 58))"
    },
    "常量:CAMERASHAKE": {
        "prefix": "CAMERASHAKE",
        "body": "CAMERASHAKE",
        "description": " ※参数: \n ※返回: \n ※说明: Camera shake modes\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:GROUND.QUAGMIRE_PARKFIELD": {
        "prefix": "GROUND.QUAGMIRE_PARKFIELD",
        "body": "GROUND.QUAGMIRE_PARKFIELD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 36)"
    },
    "常量:GROUND.DIRT": {
        "prefix": "GROUND.DIRT",
        "body": "GROUND.DIRT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:EQUIPSLOTS.HEAD": {
        "prefix": "EQUIPSLOTS.HEAD",
        "body": "EQUIPSLOTS.HEAD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: head)"
    },
    "常量:GROUND.OCEAN_WATERLOG": {
        "prefix": "GROUND.OCEAN_WATERLOG",
        "body": "GROUND.OCEAN_WATERLOG",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 208)"
    },
    "常量:MOUSEBUTTON_SCROLLUP": {
        "prefix": "MOUSEBUTTON_SCROLLUP",
        "body": "MOUSEBUTTON_SCROLLUP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1003)"
    },
    "常量:MOUSEBUTTON_RIGHT": {
        "prefix": "MOUSEBUTTON_RIGHT",
        "body": "MOUSEBUTTON_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1001)"
    },
    "常量:MOUSEBUTTON_MIDDLE": {
        "prefix": "MOUSEBUTTON_MIDDLE",
        "body": "MOUSEBUTTON_MIDDLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1002)"
    },
    "常量:GROUND.ABYSS_NOISE": {
        "prefix": "GROUND.ABYSS_NOISE",
        "body": "GROUND.ABYSS_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 124)"
    },
    "常量:TECH.SCIENCE_ONE": {
        "prefix": "TECH.SCIENCE_ONE",
        "body": "TECH.SCIENCE_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:ANCHOR_LEFT": {
        "prefix": "ANCHOR_LEFT",
        "body": "ANCHOR_LEFT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:COLLISION.ITEMS": {
        "prefix": "COLLISION.ITEMS",
        "body": "COLLISION.ITEMS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 256)"
    },
    "常量:GROUND.WALL_HUNESTONE_GLOW": {
        "prefix": "GROUND.WALL_HUNESTONE_GLOW",
        "body": "GROUND.WALL_HUNESTONE_GLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 161)"
    },
    "常量:WORMHOLETYPE.TENTAPILLAR": {
        "prefix": "WORMHOLETYPE.TENTAPILLAR",
        "body": "WORMHOLETYPE.TENTAPILLAR",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:MATERIALS.VITAE": {
        "prefix": "MATERIALS.VITAE",
        "body": "MATERIALS.VITAE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: vitae)"
    },
    "常量:COLLISION.CHARACTERS": {
        "prefix": "COLLISION.CHARACTERS",
        "body": "COLLISION.CHARACTERS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1024)"
    },
    "常量:ANCHOR_MIDDLE": {
        "prefix": "ANCHOR_MIDDLE",
        "body": "ANCHOR_MIDDLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:WEBCOLOURS.PERU": {
        "prefix": "WEBCOLOURS.PERU",
        "body": "WEBCOLOURS.PERU",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(205, 133, 63))"
    },
    "常量:CONTROL_FORCE_TRADE": {
        "prefix": "CONTROL_FORCE_TRADE",
        "body": "CONTROL_FORCE_TRADE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 40)"
    },
    "常量:CONTROL_START_EMOJI": {
        "prefix": "CONTROL_START_EMOJI",
        "body": "CONTROL_START_EMOJI",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 82)"
    },
    "常量:LEVELTYPE.CUSTOM": {
        "prefix": "LEVELTYPE.CUSTOM",
        "body": "LEVELTYPE.CUSTOM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: CUSTOM)"
    },
    "常量:MATERIALS.SCULPTURE": {
        "prefix": "MATERIALS.SCULPTURE",
        "body": "MATERIALS.SCULPTURE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: sculpture)"
    },
    "常量:TECH.SCIENCE_TWO": {
        "prefix": "TECH.SCIENCE_TWO",
        "body": "TECH.SCIENCE_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MATERIALS.HAY": {
        "prefix": "MATERIALS.HAY",
        "body": "MATERIALS.HAY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: hay)"
    },
    "常量:MOVE_DOWN": {
        "prefix": "MOVE_DOWN",
        "body": "MOVE_DOWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:COLLISION.SMALLOBSTACLES": {
        "prefix": "COLLISION.SMALLOBSTACLES",
        "body": "COLLISION.SMALLOBSTACLES",
        "description": " ※参数: \n ※返回: \n ※说明: collide with characters but not giants\n ※贡献者: @lan (该常量值为: 8192)"
    },
    "常量:GROUND.MARSH": {
        "prefix": "GROUND.MARSH",
        "body": "GROUND.MARSH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 8)"
    },
    "常量:TECH.YOTG": {
        "prefix": "TECH.YOTG",
        "body": "TECH.YOTG",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:MATERIALS.DREADSTONE": {
        "prefix": "MATERIALS.DREADSTONE",
        "body": "MATERIALS.DREADSTONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: dreadstone)"
    },
    "常量:GROUND.WALL_FUNGUS": {
        "prefix": "GROUND.WALL_FUNGUS",
        "body": "GROUND.WALL_FUNGUS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 155)"
    },
    "常量:MATERIALS": {
        "prefix": "MATERIALS",
        "body": "MATERIALS",
        "description": " ※参数: \n ※返回: \n ※说明: Extended for DST\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:ITEMTAG.WEAPON": {
        "prefix": "ITEMTAG.WEAPON",
        "body": "ITEMTAG.WEAPON",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: weapon)"
    },
    "常量:CONTROL_INSPECT": {
        "prefix": "CONTROL_INSPECT",
        "body": "CONTROL_INSPECT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:OCEAN_DEPTH.NORMAL": {
        "prefix": "OCEAN_DEPTH.NORMAL",
        "body": "OCEAN_DEPTH.NORMAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:ANCHOR_BOTTOM": {
        "prefix": "ANCHOR_BOTTOM",
        "body": "ANCHOR_BOTTOM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:TECH.MOON_ALTAR_TWO": {
        "prefix": "TECH.MOON_ALTAR_TWO",
        "body": "TECH.MOON_ALTAR_TWO",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:GROUND.ARCHIVE": {
        "prefix": "GROUND.ARCHIVE",
        "body": "GROUND.ARCHIVE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 45)"
    },
    "常量:LEVELTYPE": {
        "prefix": "LEVELTYPE",
        "body": "LEVELTYPE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:LEVELTYPE.SURVIVAL": {
        "prefix": "LEVELTYPE.SURVIVAL",
        "body": "LEVELTYPE.SURVIVAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: SURVIVAL)"
    },
    "常量:ITEMTAG.STACKABLE": {
        "prefix": "ITEMTAG.STACKABLE",
        "body": "ITEMTAG.STACKABLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: stackable)"
    },
    "常量:ITEMTAG.FIRE": {
        "prefix": "ITEMTAG.FIRE",
        "body": "ITEMTAG.FIRE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: fire)"
    },
    "常量:PLAYERSTUNLOCK.OFTEN": {
        "prefix": "PLAYERSTUNLOCK.OFTEN",
        "body": "PLAYERSTUNLOCK.OFTEN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:HOUNDWARNINGTYPE.LVL4": {
        "prefix": "HOUNDWARNINGTYPE.LVL4",
        "body": "HOUNDWARNINGTYPE.LVL4",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:HOUNDWARNINGTYPE.LVL3": {
        "prefix": "HOUNDWARNINGTYPE.LVL3",
        "body": "HOUNDWARNINGTYPE.LVL3",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:HOUNDWARNINGTYPE.LVL2_WORM": {
        "prefix": "HOUNDWARNINGTYPE.LVL2_WORM",
        "body": "HOUNDWARNINGTYPE.LVL2_WORM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 5)"
    },
    "常量:CONTROL_OPEN_DEBUG_CONSOLE": {
        "prefix": "CONTROL_OPEN_DEBUG_CONSOLE",
        "body": "CONTROL_OPEN_DEBUG_CONSOLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 42)"
    },
    "常量:CONTROL_ROTATE_RIGHT": {
        "prefix": "CONTROL_ROTATE_RIGHT",
        "body": "CONTROL_ROTATE_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 12)"
    },
    "常量:GROUND.GROUND_NOISE": {
        "prefix": "GROUND.GROUND_NOISE",
        "body": "GROUND.GROUND_NOISE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 125)"
    },
    "常量:GROUND.TRIM_GLOW": {
        "prefix": "GROUND.TRIM_GLOW",
        "body": "GROUND.TRIM_GLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 23)"
    },
    "常量:SCALEMODE_NONE": {
        "prefix": "SCALEMODE_NONE",
        "body": "SCALEMODE_NONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:GROUND.SHELLBEACH": {
        "prefix": "GROUND.SHELLBEACH",
        "body": "GROUND.SHELLBEACH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 44)"
    },
    "常量:HOUNDWARNINGTYPE.LVL1": {
        "prefix": "HOUNDWARNINGTYPE.LVL1",
        "body": "HOUNDWARNINGTYPE.LVL1",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:ANIM_SORT_ORDER.OCEAN_UNDERWATER": {
        "prefix": "ANIM_SORT_ORDER.OCEAN_UNDERWATER",
        "body": "ANIM_SORT_ORDER.OCEAN_UNDERWATER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:GROUND": {
        "prefix": "GROUND",
        "body": "GROUND",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:HOUNDWARNINGTYPE": {
        "prefix": "HOUNDWARNINGTYPE",
        "body": "HOUNDWARNINGTYPE",
        "description": " ※参数: \n ※返回: \n ※说明: Houndwarning level\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:GROUND.WALL_TOP": {
        "prefix": "GROUND.WALL_TOP",
        "body": "GROUND.WALL_TOP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 158)"
    },
    "常量:CONTROL_MOVE_RIGHT": {
        "prefix": "CONTROL_MOVE_RIGHT",
        "body": "CONTROL_MOVE_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 8)"
    },
    "常量:GROUND.WALL_STONEEYE_GLOW": {
        "prefix": "GROUND.WALL_STONEEYE_GLOW",
        "body": "GROUND.WALL_STONEEYE_GLOW",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 163)"
    },
    "常量:GROUND.WALL_SINKHOLE": {
        "prefix": "GROUND.WALL_SINKHOLE",
        "body": "GROUND.WALL_SINKHOLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 156)"
    },
    "常量:WEBCOLOURS.DARKRED": {
        "prefix": "WEBCOLOURS.DARKRED",
        "body": "WEBCOLOURS.DARKRED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(139, 0, 0))"
    },
    "常量:GROUND.WALL_MARSH": {
        "prefix": "GROUND.WALL_MARSH",
        "body": "GROUND.WALL_MARSH",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 153)"
    },
    "常量:PLAYERSTUNLOCK.RARELY": {
        "prefix": "PLAYERSTUNLOCK.RARELY",
        "body": "PLAYERSTUNLOCK.RARELY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:WEBCOLOURS.GOLDENROD": {
        "prefix": "WEBCOLOURS.GOLDENROD",
        "body": "WEBCOLOURS.GOLDENROD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(218, 165, 32))"
    },
    "常量:CONTROL_INV_2": {
        "prefix": "CONTROL_INV_2",
        "body": "CONTROL_INV_2",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 16)"
    },
    "常量:CONTROL_CONTROLLER_ACTION": {
        "prefix": "CONTROL_CONTROLLER_ACTION",
        "body": "CONTROL_CONTROLLER_ACTION",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 57)"
    },
    "常量:GROUND.DECIDUOUS": {
        "prefix": "GROUND.DECIDUOUS",
        "body": "GROUND.DECIDUOUS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 30)"
    },
    "常量:GROUND.UNDERGROUND": {
        "prefix": "GROUND.UNDERGROUND",
        "body": "GROUND.UNDERGROUND",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 128)"
    },
    "常量:GROUND.SCALE": {
        "prefix": "GROUND.SCALE",
        "body": "GROUND.SCALE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 32)"
    },
    "常量:EQUIPSLOTS.BEARD": {
        "prefix": "EQUIPSLOTS.BEARD",
        "body": "EQUIPSLOTS.BEARD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: beard)"
    },
    "常量:CONTROL_FOCUS_DOWN": {
        "prefix": "CONTROL_FOCUS_DOWN",
        "body": "CONTROL_FOCUS_DOWN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 26)"
    },
    "常量:GROUND.ROAD": {
        "prefix": "GROUND.ROAD",
        "body": "GROUND.ROAD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:BGCOLOURS.RED": {
        "prefix": "BGCOLOURS.RED",
        "body": "BGCOLOURS.RED",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(255, 89,  46 ))"
    },
    "常量:GROUND.FUNGUSGREEN": {
        "prefix": "GROUND.FUNGUSGREEN",
        "body": "GROUND.FUNGUSGREEN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 25)"
    },
    "常量:GROUND.QUAGMIRE_SOIL": {
        "prefix": "GROUND.QUAGMIRE_SOIL",
        "body": "GROUND.QUAGMIRE_SOIL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 39)"
    },
    "常量:GROUND.QUAGMIRE_CITYSTONE": {
        "prefix": "GROUND.QUAGMIRE_CITYSTONE",
        "body": "GROUND.QUAGMIRE_CITYSTONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 41)"
    },
    "常量:GROUND.OCEAN_START": {
        "prefix": "GROUND.OCEAN_START",
        "body": "GROUND.OCEAN_START",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 201)"
    },
    "常量:GROUND.FARMING_SOIL": {
        "prefix": "GROUND.FARMING_SOIL",
        "body": "GROUND.FARMING_SOIL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 47)"
    },
    "常量:GROUND.OCEAN_HAZARDOUS": {
        "prefix": "GROUND.OCEAN_HAZARDOUS",
        "body": "GROUND.OCEAN_HAZARDOUS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 207)"
    },
    "常量:GROUND.OCEAN_END": {
        "prefix": "GROUND.OCEAN_END",
        "body": "GROUND.OCEAN_END",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 247)"
    },
    "常量:CONTROL_MAP_ZOOM_OUT": {
        "prefix": "CONTROL_MAP_ZOOM_OUT",
        "body": "CONTROL_MAP_ZOOM_OUT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 61)"
    },
    "常量:GROUND.OCEAN_COASTAL_SHORE": {
        "prefix": "GROUND.OCEAN_COASTAL_SHORE",
        "body": "GROUND.OCEAN_COASTAL_SHORE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 202)"
    },
    "常量:GROUND.OCEAN_COASTAL": {
        "prefix": "GROUND.OCEAN_COASTAL",
        "body": "GROUND.OCEAN_COASTAL",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 201)"
    },
    "常量:GROUND.MUD": {
        "prefix": "GROUND.MUD",
        "body": "GROUND.MUD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 17)"
    },
    "常量:CONTROL_TOGGLE_PLAYER_STATUS": {
        "prefix": "CONTROL_TOGGLE_PLAYER_STATUS",
        "body": "CONTROL_TOGGLE_PLAYER_STATUS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 66)"
    },
    "常量:CONTROL_SERVER_PAUSE": {
        "prefix": "CONTROL_SERVER_PAUSE",
        "body": "CONTROL_SERVER_PAUSE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 73)"
    },
    "常量:CONTROL_SCROLLFWD": {
        "prefix": "CONTROL_SCROLLFWD",
        "body": "CONTROL_SCROLLFWD",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 32)"
    },
    "常量:GROUND.LAVAARENA_FLOOR": {
        "prefix": "GROUND.LAVAARENA_FLOOR",
        "body": "GROUND.LAVAARENA_FLOOR",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 33)"
    },
    "常量:HOUNDWARNINGTYPE.LVL2": {
        "prefix": "HOUNDWARNINGTYPE.LVL2",
        "body": "HOUNDWARNINGTYPE.LVL2",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:CONTROL_MENU_MISC_4": {
        "prefix": "CONTROL_MENU_MISC_4",
        "body": "CONTROL_MENU_MISC_4",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 71)"
    },
    "常量:GROUND.GRASS": {
        "prefix": "GROUND.GRASS",
        "body": "GROUND.GRASS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 6)"
    },
    "常量:GROUND.CARPET": {
        "prefix": "GROUND.CARPET",
        "body": "GROUND.CARPET",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 11)"
    },
    "常量:GROUND.FUNGUS": {
        "prefix": "GROUND.FUNGUS",
        "body": "GROUND.FUNGUS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 14)"
    },
    "常量:UICOLOURS.PURPLE": {
        "prefix": "UICOLOURS.PURPLE",
        "body": "UICOLOURS.PURPLE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(152, 86, 232, 1))"
    },
    "常量:ANIM_ORIENTATION": {
        "prefix": "ANIM_ORIENTATION",
        "body": "ANIM_ORIENTATION",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 表)"
    },
    "常量:FACING_RIGHT": {
        "prefix": "FACING_RIGHT",
        "body": "FACING_RIGHT",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:ANCHOR_TOP": {
        "prefix": "ANCHOR_TOP",
        "body": "ANCHOR_TOP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:CONTROL_OPEN_CRAFTING": {
        "prefix": "CONTROL_OPEN_CRAFTING",
        "body": "CONTROL_OPEN_CRAFTING",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 46)"
    },
    "常量:CONTROL_INV_13": {
        "prefix": "CONTROL_INV_13",
        "body": "CONTROL_INV_13",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 79)"
    },
    "常量:ORDERS.ATTACK": {
        "prefix": "ORDERS.ATTACK",
        "body": "ORDERS.ATTACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:BLENDMODE.AlphaBlended": {
        "prefix": "BLENDMODE.AlphaBlended",
        "body": "BLENDMODE.AlphaBlended",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 1)"
    },
    "常量:GROUND.SAVANNA": {
        "prefix": "GROUND.SAVANNA",
        "body": "GROUND.SAVANNA",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 5)"
    },
    "常量:CONTROL_TRADEITEM": {
        "prefix": "CONTROL_TRADEITEM",
        "body": "CONTROL_TRADEITEM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 36)"
    },
    "常量:CONTROL_TOGGLE_SAY": {
        "prefix": "CONTROL_TOGGLE_SAY",
        "body": "CONTROL_TOGGLE_SAY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 63)"
    },
    "常量:CONTROL_INVENTORY_EXAMINE": {
        "prefix": "CONTROL_INVENTORY_EXAMINE",
        "body": "CONTROL_INVENTORY_EXAMINE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 51)"
    },
    "常量:CONTROL_MENU_L2": {
        "prefix": "CONTROL_MENU_L2",
        "body": "CONTROL_MENU_L2",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 85)"
    },
    "常量:CONTROL_TARGET_MODIFIER": {
        "prefix": "CONTROL_TARGET_MODIFIER",
        "body": "CONTROL_TARGET_MODIFIER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 69)"
    },
    "常量:CONTROL_TARGET_CYCLE_BACK": {
        "prefix": "CONTROL_TARGET_CYCLE_BACK",
        "body": "CONTROL_TARGET_CYCLE_BACK",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 11)"
    },
    "常量:MATERIALS.MOON_ALTAR": {
        "prefix": "MATERIALS.MOON_ALTAR",
        "body": "MATERIALS.MOON_ALTAR",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: moon_altar)"
    },
    "常量:MATERIALS.GEM": {
        "prefix": "MATERIALS.GEM",
        "body": "MATERIALS.GEM",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: gem)"
    },
    "常量:CONTROL_INV_7": {
        "prefix": "CONTROL_INV_7",
        "body": "CONTROL_INV_7",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 21)"
    },
    "常量:CONTROL_INVENTORY_UP": {
        "prefix": "CONTROL_INVENTORY_UP",
        "body": "CONTROL_INVENTORY_UP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 49)"
    },
    "常量:UICOLOURS.IVORY_70": {
        "prefix": "UICOLOURS.IVORY_70",
        "body": "UICOLOURS.IVORY_70",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(165, 162, 156, 1))"
    },
    "常量:CONTROL_MENU_MISC_3": {
        "prefix": "CONTROL_MENU_MISC_3",
        "body": "CONTROL_MENU_MISC_3",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 70)"
    },
    "常量:WEBCOLOURS.SALMON": {
        "prefix": "WEBCOLOURS.SALMON",
        "body": "WEBCOLOURS.SALMON",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: RGB(250, 128, 114))"
    },
    "常量:NODE_TYPE.Background": {
        "prefix": "NODE_TYPE.Background",
        "body": "NODE_TYPE.Background",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 2)"
    },
    "常量:COLLISION": {
        "prefix": "COLLISION",
        "body": "COLLISION",
        "description": " ※参数: \n ※返回: \n ※说明: keep up to date with COLLISION_GROUP in simconstants.h\n ※贡献者: @lan (该常量值为: 32)"
    },
    "常量:COLLISION.WORLD": {
        "prefix": "COLLISION.WORLD",
        "body": "COLLISION.WORLD",
        "description": " ※参数: \n ※返回: \n ※说明: BOAT_LIMITS + LAND_OCEAN_LIMITS + GROUND\n ※贡献者: @lan (该常量值为: 128 + 64 + 32)"
    },
    "常量:CONTROL_MAP_ZOOM_IN": {
        "prefix": "CONTROL_MAP_ZOOM_IN",
        "body": "CONTROL_MAP_ZOOM_IN",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 60)"
    },
    "常量:TECH.FOODPROCESSING_ONE": {
        "prefix": "TECH.FOODPROCESSING_ONE",
        "body": "TECH.FOODPROCESSING_ONE",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: UNKNOWN)"
    },
    "常量:CONTROL_INV_3": {
        "prefix": "CONTROL_INV_3",
        "body": "CONTROL_INV_3",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 17)"
    },
    "常量:CONTROL_INSPECT_SELF": {
        "prefix": "CONTROL_INSPECT_SELF",
        "body": "CONTROL_INSPECT_SELF",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 72)"
    },
    "常量:CONTROL_FOCUS_UP": {
        "prefix": "CONTROL_FOCUS_UP",
        "body": "CONTROL_FOCUS_UP",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 25)"
    },
    "常量:GROUND.ROCKY": {
        "prefix": "GROUND.ROCKY",
        "body": "GROUND.ROCKY",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 3)"
    },
    "常量:CONTROL_CUSTOM_START": {
        "prefix": "CONTROL_CUSTOM_START",
        "body": "CONTROL_CUSTOM_START",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 100)"
    },
    "常量:CONTROL_CRAFTING_MODIFIER": {
        "prefix": "CONTROL_CRAFTING_MODIFIER",
        "body": "CONTROL_CRAFTING_MODIFIER",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 74)"
    },
    "常量:BLENDMODE.Disabled": {
        "prefix": "BLENDMODE.Disabled",
        "body": "BLENDMODE.Disabled",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 0)"
    },
    "常量:CONTROL_ACTION": {
        "prefix": "CONTROL_ACTION",
        "body": "CONTROL_ACTION",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 4)"
    },
    "常量:COLLISION.OBSTACLES": {
        "prefix": "COLLISION.OBSTACLES",
        "body": "COLLISION.OBSTACLES",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 512)"
    },
    "常量:CONTROL_SHOW_PLAYER_STATUS": {
        "prefix": "CONTROL_SHOW_PLAYER_STATUS",
        "body": "CONTROL_SHOW_PLAYER_STATUS",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @lan (该常量值为: 67)"
    },
    "实体方法:AddOrRemoveTag:": {
        "prefix": "AddOrRemoveTag",
        "body": "AddOrRemoveTag(${1:tag},${2:condition})",
        "description": " ※参数: \n   (tag)<>[] \n   (condition)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetGroundTargetBlockerRadius:": {
        "prefix": "SetGroundTargetBlockerRadius",
        "body": "SetGroundTargetBlockerRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:ForceOutOfLimbo:": {
        "prefix": "ForceOutOfLimbo",
        "body": "ForceOutOfLimbo(${1:state})",
        "description": " ※参数: \n   (state)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsAsleep:": {
        "prefix": "IsAsleep",
        "body": "IsAsleep()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:ListenForEvent:监听事件": {
        "prefix": "ListenForEvent",
        "body": "ListenForEvent(${1:event},${2:fn},${3:source})",
        "description": " ※参数: \n   (event)<str>[事件] \n   (fn)<fn>[]\n      {参数:\n         (inst)<>[被监听对象] \n         (data)<tbl>[传递过来的表]} \n   (source)<>[监听对象,不填则监听自身] \n ※返回: \n ※说明: 监听事件\n ※贡献者: @lan"
    },
    "实体方法:StartUpdatingComponent:": {
        "prefix": "StartUpdatingComponent",
        "body": "StartUpdatingComponent(${1:cmp},${2:do_static_update})",
        "description": " ※参数: \n   (cmp)<>[] \n   (do_static_update)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetNearestPlayer:": {
        "prefix": "GetNearestPlayer",
        "body": "GetNearestPlayer(${1:isalive})",
        "description": " ※参数: \n   (isalive)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:DoPeriodicTask:周期定时器": {
        "prefix": "DoPeriodicTask",
        "body": "DoPeriodicTask(${1:time},${2:fn},${3:initialdelay},${4:...})",
        "description": " ※参数: \n   (time)<num>[间隔/s] \n   (fn)<fn>[] \n   (initialdelay)<num>[计时器创建多少秒后执行,默认为1] \n   (...)<>[] \n ※返回: \n ※说明: 周期定时器\n ※贡献者: @lan"
    },
    "实体方法:DoPeriodicTask:周期定时器+i": {
        "prefix": "DoPeriodicTask+i",
        "body": "DoPeriodicTask(${1:1},function()\n\t$2\nend)",
        "description": " ※参数: \n   (time)<num>[间隔/s] \n   (fn)<fn>[] \n   (initialdelay)<num>[计时器创建多少秒后执行,默认为1] \n   (...)<>[] \n ※返回: \n ※说明: 周期定时器\n ※贡献者: @lan\n ※启发模式: 周期定时器"
    },
    "实体方法:GetDistanceSqToInst:": {
        "prefix": "GetDistanceSqToInst",
        "body": "GetDistanceSqToInst(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:OnBuilt:": {
        "prefix": "OnBuilt",
        "body": "OnBuilt(${1:builder})",
        "description": " ※参数: \n   (builder)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetPhysicsRadius:": {
        "prefix": "GetPhysicsRadius",
        "body": "GetPhysicsRadius(${1:default})",
        "description": " ※参数: \n   (default)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:DoTaskInTime:倒计时": {
        "prefix": "DoTaskInTime",
        "body": "DoTaskInTime(${1:time},${2:fn},${3:...})",
        "description": " ※参数: \n   (time)<num>[倒计时多少秒] \n   (fn)<fn>[] \n   (...)<>[] \n ※返回: \n ※说明: 倒计时\n ※贡献者: @lan"
    },
    "实体方法:DoTaskInTime:倒计时+i": {
        "prefix": "DoTaskInTime+i",
        "body": "DoTaskInTime(${1:1},function()\n\t$2\nend)",
        "description": " ※参数: \n   (time)<num>[倒计时多少秒] \n   (fn)<fn>[] \n   (...)<>[] \n ※返回: \n ※说明: 倒计时\n ※贡献者: @lan\n ※启发模式: 倒计时"
    },
    "实体方法:IsOnValidGround:": {
        "prefix": "IsOnValidGround",
        "body": "IsOnValidGround()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetPrefabNameOverride:": {
        "prefix": "SetPrefabNameOverride",
        "body": "SetPrefabNameOverride(${1:nameoverride})",
        "description": " ※参数: \n   (nameoverride)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetBrain:": {
        "prefix": "SetBrain",
        "body": "SetBrain(${1:brainfn})",
        "description": " ※参数: \n   (brainfn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetInherentSceneAction:": {
        "prefix": "SetInherentSceneAction",
        "body": "SetInherentSceneAction(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetBufferedAction:": {
        "prefix": "GetBufferedAction",
        "body": "GetBufferedAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetDebugString:": {
        "prefix": "GetDebugString",
        "body": "GetDebugString()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:AddInherentAction:": {
        "prefix": "AddInherentAction",
        "body": "AddInherentAction(${1:act})",
        "description": " ※参数: \n   (act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetBoatIntersectingPhysics:": {
        "prefix": "GetBoatIntersectingPhysics",
        "body": "GetBoatIntersectingPhysics()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StackableSkinHack:": {
        "prefix": "StackableSkinHack",
        "body": "StackableSkinHack(${1:target})",
        "description": " ※参数: \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:ClearStateGraph:": {
        "prefix": "ClearStateGraph",
        "body": "ClearStateGraph()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:CanDoAction:": {
        "prefix": "CanDoAction",
        "body": "CanDoAction(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:AddDebuff:": {
        "prefix": "AddDebuff",
        "body": "AddDebuff(${1:name},${2:prefab},${3:data},${4:skip_test},${5:pre_buff_fn})",
        "description": " ※参数: \n   (name)<>[] \n   (prefab)<>[] \n   (data)<>[] \n   (skip_test)<>[] \n   (pre_buff_fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetDebuff:": {
        "prefix": "GetDebuff",
        "body": "GetDebuff(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetStateGraph:": {
        "prefix": "SetStateGraph",
        "body": "SetStateGraph(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetDistanceSqToClosestPlayer:": {
        "prefix": "GetDistanceSqToClosestPlayer",
        "body": "GetDistanceSqToClosestPlayer(${1:isalive})",
        "description": " ※参数: \n   (isalive)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:DebuffsEnabled:": {
        "prefix": "DebuffsEnabled",
        "body": "DebuffsEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveFromScene:": {
        "prefix": "RemoveFromScene",
        "body": "RemoveFromScene()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetPosition:": {
        "prefix": "GetPosition",
        "body": "GetPosition()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsAcidSizzling:": {
        "prefix": "IsAcidSizzling",
        "body": "IsAcidSizzling()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:KillTasks:": {
        "prefix": "KillTasks",
        "body": "KillTasks()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveTag:": {
        "prefix": "RemoveTag",
        "body": "RemoveTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:FaceAwayFromPoint:": {
        "prefix": "FaceAwayFromPoint",
        "body": "FaceAwayFromPoint(${1:dest},${2:force})",
        "description": " ※参数: \n   (dest)<>[] \n   (force)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsInLight:": {
        "prefix": "IsInLight",
        "body": "IsInLight()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetClientSideInventoryImageOverrideFlag:": {
        "prefix": "SetClientSideInventoryImageOverrideFlag",
        "body": "SetClientSideInventoryImageOverrideFlag(${1:name},${2:value})",
        "description": " ※参数: \n   (name)<>[] \n   (value)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetClientSideInventoryImageOverride:": {
        "prefix": "GetClientSideInventoryImageOverride",
        "body": "GetClientSideInventoryImageOverride(${1:imagenamehash})",
        "description": " ※参数: \n   (imagenamehash)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:PushEventInTime:": {
        "prefix": "PushEventInTime",
        "body": "PushEventInTime(${1:time},${2:eventname},${3:data})",
        "description": " ※参数: \n   (time)<>[] \n   (eventname)<>[] \n   (data)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StopWallUpdatingComponent:": {
        "prefix": "StopWallUpdatingComponent",
        "body": "StopWallUpdatingComponent(${1:cmp})",
        "description": " ※参数: \n   (cmp)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:HasClientSideInventoryImageOverrides:": {
        "prefix": "HasClientSideInventoryImageOverrides",
        "body": "HasClientSideInventoryImageOverrides()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:Remove:实体移除": {
        "prefix": "Remove",
        "body": "Remove()",
        "description": " ※参数: \n ※返回: \n ※说明: 实体移除\n ※贡献者: @lan"
    },
    "实体方法:ClearBufferedAction:": {
        "prefix": "ClearBufferedAction",
        "body": "ClearBufferedAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetInherentSceneAltAction:": {
        "prefix": "SetInherentSceneAltAction",
        "body": "SetInherentSceneAltAction(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetAdjective:": {
        "prefix": "GetAdjective",
        "body": "GetAdjective()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:LoadPostPass:": {
        "prefix": "LoadPostPass",
        "body": "LoadPostPass(${1:newents},${2:savedata})",
        "description": " ※参数: \n   (newents)<>[] \n   (savedata)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetPersistData:": {
        "prefix": "SetPersistData",
        "body": "SetPersistData(${1:data},${2:newents})",
        "description": " ※参数: \n   (data)<>[] \n   (newents)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetPersistData:": {
        "prefix": "GetPersistData",
        "body": "GetPersistData()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:PutBackOnGround:": {
        "prefix": "PutBackOnGround",
        "body": "PutBackOnGround(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveComponent:实体移除组件": {
        "prefix": "RemoveComponent",
        "body": "RemoveComponent(${1:name})",
        "description": " ※参数: \n   (name)<str>[组件名] \n ※返回: \n ※说明: 实体移除组件\n ※贡献者: @lan"
    },
    "实体方法:GetPositionAdjacentTo:": {
        "prefix": "GetPositionAdjacentTo",
        "body": "GetPositionAdjacentTo(${1:target},${2:distance})",
        "description": " ※参数: \n   (target)<>[] \n   (distance)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:ForceFacePoint:": {
        "prefix": "ForceFacePoint",
        "body": "ForceFacePoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:PushBufferedAction:": {
        "prefix": "PushBufferedAction",
        "body": "PushBufferedAction(${1:bufferedaction})",
        "description": " ※参数: \n   (bufferedaction)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsOnOcean:": {
        "prefix": "IsOnOcean",
        "body": "IsOnOcean(${1:allow_boats})",
        "description": " ※参数: \n   (allow_boats)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetSaveRecord:": {
        "prefix": "GetSaveRecord",
        "body": "GetSaveRecord()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RestartBrain:": {
        "prefix": "RestartBrain",
        "body": "RestartBrain()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StopUpdatingComponent:": {
        "prefix": "StopUpdatingComponent",
        "body": "StopUpdatingComponent(${1:cmp})",
        "description": " ※参数: \n   (cmp)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StopAllWatchingWorldStates:": {
        "prefix": "StopAllWatchingWorldStates",
        "body": "StopAllWatchingWorldStates()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveDebuff:": {
        "prefix": "RemoveDebuff",
        "body": "RemoveDebuff(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:HasTags:实体是否有这些标签": {
        "prefix": "HasTags",
        "body": "HasTags(${1:...})",
        "description": " ※参数: \n   (...)<str>[标签] \n ※返回: \n ※说明: 实体是否有这些标签\n ※贡献者: @lan"
    },
    "实体方法:GetCurrentTileType:": {
        "prefix": "GetCurrentTileType",
        "body": "GetCurrentTileType()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:CanInteractWith:": {
        "prefix": "CanInteractWith",
        "body": "CanInteractWith(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsValid:判断实体是否有效": {
        "prefix": "IsValid",
        "body": "IsValid()",
        "description": " ※参数: \n ※返回: <bool>[实体是有效的] \n ※说明: 判断实体是否有效\n ※贡献者: @lan(非常非常重要且常用的判断,无论是扫实体,还是判断对象存活,等等都应该加上这个判断)"
    },
    "实体方法:SetClientSideInventoryImageOverride:": {
        "prefix": "SetClientSideInventoryImageOverride",
        "body": "SetClientSideInventoryImageOverride(${1:flagname},${2:srcinventoryimage},${3:destinventoryimage},${4:destatlas})",
        "description": " ※参数: \n   (flagname)<>[] \n   (srcinventoryimage)<>[] \n   (destinventoryimage)<>[] \n   (destatlas)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:PerformBufferedAction:": {
        "prefix": "PerformBufferedAction",
        "body": "PerformBufferedAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:Hide:": {
        "prefix": "Hide",
        "body": "Hide()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetTerraformExtraSpacing:": {
        "prefix": "SetTerraformExtraSpacing",
        "body": "SetTerraformExtraSpacing(${1:spacing})",
        "description": " ※参数: \n   (spacing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:__tostring:": {
        "prefix": "__tostring",
        "body": "__tostring()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetCurrentPlatform:": {
        "prefix": "GetCurrentPlatform",
        "body": "GetCurrentPlatform()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:Show:": {
        "prefix": "Show",
        "body": "Show()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:DoStaticTaskInTime:": {
        "prefix": "DoStaticTaskInTime",
        "body": "DoStaticTaskInTime(${1:time},${2:fn},${3:...})",
        "description": " ※参数: \n   (time)<>[] \n   (fn)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetPrefabName:": {
        "prefix": "SetPrefabName",
        "body": "SetPrefabName(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:TimeRemainingInTask:": {
        "prefix": "TimeRemainingInTask",
        "body": "TimeRemainingInTask(${1:taskinfo})",
        "description": " ※参数: \n   (taskinfo)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:PerformPreviewBufferedAction:": {
        "prefix": "PerformPreviewBufferedAction",
        "body": "PerformPreviewBufferedAction()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StartWallUpdatingComponent:": {
        "prefix": "StartWallUpdatingComponent",
        "body": "StartWallUpdatingComponent(${1:cmp})",
        "description": " ※参数: \n   (cmp)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:PreviewBufferedAction:": {
        "prefix": "PreviewBufferedAction",
        "body": "PreviewBufferedAction(${1:bufferedaction})",
        "description": " ※参数: \n   (bufferedaction)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:LongUpdate:": {
        "prefix": "LongUpdate",
        "body": "LongUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:ResumeTask:": {
        "prefix": "ResumeTask",
        "body": "ResumeTask(${1:time},${2:fn},${3:...})",
        "description": " ※参数: \n   (time)<>[] \n   (fn)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetBrainString:": {
        "prefix": "GetBrainString",
        "body": "GetBrainString()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetRotation:": {
        "prefix": "GetRotation",
        "body": "GetRotation()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetTimeAlive:": {
        "prefix": "GetTimeAlive",
        "body": "GetTimeAlive()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:DoStaticPeriodicTask:": {
        "prefix": "DoStaticPeriodicTask",
        "body": "DoStaticPeriodicTask(${1:time},${2:fn},${3:initialdelay},${4:...})",
        "description": " ※参数: \n   (time)<>[] \n   (fn)<>[] \n   (initialdelay)<>[] \n   (...)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:CancelAllPendingTasks:": {
        "prefix": "CancelAllPendingTasks",
        "body": "CancelAllPendingTasks()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:AddComponent:实体添加组件": {
        "prefix": "AddComponent",
        "body": "AddComponent(${1:name})",
        "description": " ※参数: \n   (name)<str>[组件名] \n ※返回: \n ※说明: 实体添加组件\n ※贡献者: @lan"
    },
    "实体方法:IsLightGreaterThan:": {
        "prefix": "IsLightGreaterThan",
        "body": "IsLightGreaterThan(${1:lightThresh})",
        "description": " ※参数: \n   (lightThresh)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsNearPlayer:": {
        "prefix": "IsNearPlayer",
        "body": "IsNearPlayer(${1:range},${2:isalive})",
        "description": " ※参数: \n   (range)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:AddTag:": {
        "prefix": "AddTag",
        "body": "AddTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:HasTag:实体是否有某个标签": {
        "prefix": "HasTag",
        "body": "HasTag(${1:tag})",
        "description": " ※参数: \n   (tag)<str>[标签] \n ※返回: \n ※说明: 实体是否有某个标签\n ※贡献者: @lan"
    },
    "实体方法:GetDistanceSqToPoint:": {
        "prefix": "GetDistanceSqToPoint",
        "body": "GetDistanceSqToPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetComponentName:": {
        "prefix": "GetComponentName",
        "body": "GetComponentName(${1:cmp})",
        "description": " ※参数: \n   (cmp)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:PushEvent:推送事件": {
        "prefix": "PushEvent",
        "body": "PushEvent(${1:event},${2:data})",
        "description": " ※参数: \n   (event)<str>[推送的事件] \n   (data)<tbl>[推送时传入的表,可不填] \n ※返回: \n ※说明: 推送事件\n ※贡献者: @lan"
    },
    "实体方法:GetBasicDisplayName:": {
        "prefix": "GetBasicDisplayName",
        "body": "GetBasicDisplayName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetIsWet:": {
        "prefix": "GetIsWet",
        "body": "GetIsWet()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:FacePoint:": {
        "prefix": "FacePoint",
        "body": "FacePoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:OnUsedAsItem:": {
        "prefix": "OnUsedAsItem",
        "body": "OnUsedAsItem(${1:action},${2:doer},${3:target})",
        "description": " ※参数: \n   (action)<>[] \n   (doer)<>[] \n   (target)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveChild:": {
        "prefix": "RemoveChild",
        "body": "RemoveChild(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:WatchWorldState:": {
        "prefix": "WatchWorldState",
        "body": "WatchWorldState(${1:var},${2:fn})",
        "description": " ※参数: \n   (var)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SpawnChild:": {
        "prefix": "SpawnChild",
        "body": "SpawnChild(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetAngleToPoint:": {
        "prefix": "GetAngleToPoint",
        "body": "GetAngleToPoint(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetTaskInfo:": {
        "prefix": "GetTaskInfo",
        "body": "GetTaskInfo(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetPhysicsRadiusOverride:": {
        "prefix": "SetPhysicsRadiusOverride",
        "body": "SetPhysicsRadiusOverride(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StopWatchingWorldState:": {
        "prefix": "StopWatchingWorldState",
        "body": "StopWatchingWorldState(${1:var},${2:fn})",
        "description": " ※参数: \n   (var)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveAllEventCallbacks:移除所有监听": {
        "prefix": "RemoveAllEventCallbacks",
        "body": "RemoveAllEventCallbacks()",
        "description": " ※参数: \n ※返回: \n ※说明: 移除所有监听\n ※贡献者: @lan"
    },
    "实体方法:RemovePlatformFollower:": {
        "prefix": "RemovePlatformFollower",
        "body": "RemovePlatformFollower(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsInLimbo:": {
        "prefix": "IsInLimbo",
        "body": "IsInLimbo()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveEventCallback:移除监听器": {
        "prefix": "RemoveEventCallback",
        "body": "RemoveEventCallback(${1:event},${2:fn},${3:source})",
        "description": " ※参数: \n   (event)<str>[事件] \n   (fn)<>[函数名] \n   (source)<>[移除的对象,不填则是自身] \n ※返回: \n ※说明: 移除监听器\n ※贡献者: @lan(显而易见,如果ListenForEvent中使用的是匿名函数,则无法移除)"
    },
    "实体方法:HasDebuff:": {
        "prefix": "HasDebuff",
        "body": "HasDebuff(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:HasOneOfTags:实体是否有其中一个标签": {
        "prefix": "HasOneOfTags",
        "body": "HasOneOfTags(${1:...})",
        "description": " ※参数: \n   (...)<str>[标签] \n ※返回: \n ※说明: 实体是否有其中一个标签\n ※贡献者: @lan"
    },
    "实体方法:StopBrain:": {
        "prefix": "StopBrain",
        "body": "StopBrain()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetAdjectivedName:": {
        "prefix": "GetAdjectivedName",
        "body": "GetAdjectivedName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetDeploySmartRadius:": {
        "prefix": "SetDeploySmartRadius",
        "body": "SetDeploySmartRadius(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StopUpdatingComponent_Deferred:": {
        "prefix": "StopUpdatingComponent_Deferred",
        "body": "StopUpdatingComponent_Deferred(${1:cmp})",
        "description": " ※参数: \n   (cmp)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RemoveInherentAction:": {
        "prefix": "RemoveInherentAction",
        "body": "RemoveInherentAction(${1:act})",
        "description": " ※参数: \n   (act)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsOnPassablePoint:": {
        "prefix": "IsOnPassablePoint",
        "body": "IsOnPassablePoint(${1:include_water},${2:floating_platforms_are_not_passable})",
        "description": " ※参数: \n   (include_water)<>[] \n   (floating_platforms_are_not_passable)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:RunScript:": {
        "prefix": "RunScript",
        "body": "RunScript(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:StartThread:": {
        "prefix": "StartThread",
        "body": "StartThread(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetSkinName:": {
        "prefix": "GetSkinName",
        "body": "GetSkinName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetPlatformFollowers:": {
        "prefix": "GetPlatformFollowers",
        "body": "GetPlatformFollowers()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:AddChild:": {
        "prefix": "AddChild",
        "body": "AddChild(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:SetDeployExtraSpacing:": {
        "prefix": "SetDeployExtraSpacing",
        "body": "SetDeployExtraSpacing(${1:spacing})",
        "description": " ※参数: \n   (spacing)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:AddPlatformFollower:": {
        "prefix": "AddPlatformFollower",
        "body": "AddPlatformFollower(${1:child})",
        "description": " ※参数: \n   (child)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:IsNear:": {
        "prefix": "IsNear",
        "body": "IsNear(${1:otherinst},${2:dist})",
        "description": " ※参数: \n   (otherinst)<>[] \n   (dist)<>[] \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetDisplayName:": {
        "prefix": "GetDisplayName",
        "body": "GetDisplayName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:GetSkinBuild:": {
        "prefix": "GetSkinBuild",
        "body": "GetSkinBuild()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "实体方法:ReturnToScene:": {
        "prefix": "ReturnToScene",
        "body": "ReturnToScene()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @"
    },
    "全局.DoReload:UNKNOWN": {
        "prefix": "DoReload",
        "body": "DoReload(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 105"
    },
    "全局.shallowcopy:UNKNOWN": {
        "prefix": "shallowcopy",
        "body": "shallowcopy(${1:orig},${2:dest})",
        "description": " ※参数: \n   (orig)<>[] \n   (dest)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 940"
    },
    "全局.metaipairs:UNKNOWN": {
        "prefix": "metaipairs",
        "body": "metaipairs(${1:t},${2:...})",
        "description": " ※参数: \n   (t)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1674"
    },
    "全局.GetGameModeMaxPlayers:UNKNOWN": {
        "prefix": "GetGameModeMaxPlayers",
        "body": "GetGameModeMaxPlayers(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 319"
    },
    "全局.Shard_UpdateWorldState:UNKNOWN": {
        "prefix": "Shard_UpdateWorldState",
        "body": "Shard_UpdateWorldState(${1:world_id},${2:state},${3:tags},${4:world_data})",
        "description": " ※参数: \n   (world_id)<>[] \n   (state)<>[] \n   (tags)<>[] \n   (world_data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 63"
    },
    "全局.Networking_RegenerateMetricsEvent:UNKNOWN": {
        "prefix": "Networking_RegenerateMetricsEvent",
        "body": "Networking_RegenerateMetricsEvent(${1:caller})",
        "description": " ※参数: \n   (caller)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 118"
    },
    "全局.RunInEnvironmentSafe:UNKNOWN": {
        "prefix": "RunInEnvironmentSafe",
        "body": "RunInEnvironmentSafe(${1:fn},${2:fnenv})",
        "description": " ※参数: \n   (fn)<>[] \n   (fnenv)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 787"
    },
    "全局.c_doscenario:UNKNOWN": {
        "prefix": "c_doscenario",
        "body": "c_doscenario(${1:scenario})",
        "description": " ※参数: \n   (scenario)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 333"
    },
    "全局.RemoveEntity:UNKNOWN": {
        "prefix": "RemoveEntity",
        "body": "RemoveEntity(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 508"
    },
    "全局.minisign_drawn_init_fn:UNKNOWN": {
        "prefix": "minisign_drawn_init_fn",
        "body": "minisign_drawn_init_fn(${1:inst},${2:build_name},${3:anim_bank})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (anim_bank)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1601"
    },
    "全局.GetFestivalEventInfo:UNKNOWN": {
        "prefix": "GetFestivalEventInfo",
        "body": "GetFestivalEventInfo(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1028"
    },
    "全局.FirstToUpper:UNKNOWN": {
        "prefix": "FirstToUpper",
        "body": "FirstToUpper(${1:str})",
        "description": " ※参数: \n   (str)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 458"
    },
    "全局.d_teleportboat:UNKNOWN": {
        "prefix": "d_teleportboat",
        "body": "d_teleportboat(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 268"
    },
    "全局.SetHeroNameTexture_Gold:UNKNOWN": {
        "prefix": "g+SetHeroNameTexture_Gold",
        "body": "SetHeroNameTexture_Gold(${1:image_widget},${2:character})",
        "description": " ※参数: \n   (image_widget)<>[] \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 53"
    },
    "全局.str_play_time:UNKNOWN": {
        "prefix": "str_play_time",
        "body": "str_play_time(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 507"
    },
    "全局.GetScrapbookIconAtlas_Internal:UNKNOWN": {
        "prefix": "GetScrapbookIconAtlas_Internal",
        "body": "GetScrapbookIconAtlas_Internal(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 692"
    },
    "全局.ocean_trawler_kit_init_fn:UNKNOWN": {
        "prefix": "ocean_trawler_kit_init_fn",
        "body": "ocean_trawler_kit_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 285"
    },
    "全局.SetPurchases:UNKNOWN": {
        "prefix": "SetPurchases",
        "body": "SetPurchases(${1:purchases})",
        "description": " ※参数: \n   (purchases)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 932"
    },
    "全局.d_giveturfs:UNKNOWN": {
        "prefix": "d_giveturfs",
        "body": "d_giveturfs(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1009"
    },
    "全局.ShowLoading:UNKNOWN": {
        "prefix": "ShowLoading",
        "body": "ShowLoading(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 150"
    },
    "全局.hutch_clear_fn:UNKNOWN": {
        "prefix": "hutch_clear_fn",
        "body": "hutch_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1228"
    },
    "全局.ShakeAllCamerasOnPlatform:UNKNOWN": {
        "prefix": "ShakeAllCamerasOnPlatform",
        "body": "ShakeAllCamerasOnPlatform(${1:mode},${2:duration},${3:speed},${4:scale},${5:platform})",
        "description": " ※参数: \n   (mode)<>[] \n   (duration)<>[] \n   (speed)<>[] \n   (scale)<>[] \n   (platform)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 243"
    },
    "全局.abigail_flower_init_fn:UNKNOWN": {
        "prefix": "abigail_flower_init_fn",
        "body": "abigail_flower_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1292"
    },
    "全局.Start:UNKNOWN": {
        "prefix": "Start",
        "body": "Start(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1380"
    },
    "全局.Clamp:UNKNOWN": {
        "prefix": "Clamp",
        "body": "Clamp(${1:num},${2:min},${3:max})",
        "description": " ※参数: \n   (num)<>[] \n   (min)<>[] \n   (max)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 46"
    },
    "全局.StackTrace:UNKNOWN": {
        "prefix": "StackTrace",
        "body": "StackTrace(${1:err})",
        "description": " ※参数: \n   (err)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stacktrace 所在行数: 122"
    },
    "全局.optentity:UNKNOWN": {
        "prefix": "optentity",
        "body": "optentity(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 13"
    },
    "全局.c_selectnext:UNKNOWN": {
        "prefix": "c_selectnext",
        "body": "c_selectnext(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 990"
    },
    "全局.d_light:UNKNOWN": {
        "prefix": "d_light",
        "body": "d_light(${1:c1},${2:c2},${3:c3})",
        "description": " ※参数: \n   (c1)<>[] \n   (c2)<>[] \n   (c3)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 492"
    },
    "全局.MakeHauntableIgnite:UNKNOWN": {
        "prefix": "MakeHauntableIgnite",
        "body": "MakeHauntableIgnite(${1:inst},${2:chance},${3:cooldown},${4:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 955"
    },
    "全局.IsSpecialEventActive:UNKNOWN": {
        "prefix": "IsSpecialEventActive",
        "body": "IsSpecialEventActive(${1:event})",
        "description": " ※参数: \n   (event)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 956"
    },
    "全局.MakeFeedableSmallLivestock:UNKNOWN": {
        "prefix": "MakeFeedableSmallLivestock",
        "body": "MakeFeedableSmallLivestock(${1:inst},${2:starvetime},${3:oninventory},${4:ondropped})",
        "description": " ※参数: \n   (inst)<>[] \n   (starvetime)<>[] \n   (oninventory)<>[] \n   (ondropped)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 805"
    },
    "全局.d_domesticatedbeefalo:UNKNOWN": {
        "prefix": "d_domesticatedbeefalo",
        "body": "d_domesticatedbeefalo(${1:tendency},${2:saddle})",
        "description": " ※参数: \n   (tendency)<>[] \n   (saddle)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 409"
    },
    "全局.lureplantbulb_init_fn:UNKNOWN": {
        "prefix": "lureplantbulb_init_fn",
        "body": "lureplantbulb_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1027"
    },
    "全局.d_seeds:UNKNOWN": {
        "prefix": "d_seeds",
        "body": "d_seeds(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1398"
    },
    "全局.Networking_PartyServer:UNKNOWN": {
        "prefix": "Networking_PartyServer",
        "body": "Networking_PartyServer(${1:ip},${2:port})",
        "description": " ※参数: \n   (ip)<>[] \n   (port)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 992"
    },
    "全局.printwrap:UNKNOWN": {
        "prefix": "printwrap",
        "body": "printwrap(${1:msg},${2:...})",
        "description": " ※参数: \n   (msg)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 24"
    },
    "全局.StopAllThreads:UNKNOWN": {
        "prefix": "StopAllThreads",
        "body": "StopAllThreads(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 432"
    },
    "全局.GetScrapbookIconAtlas:UNKNOWN": {
        "prefix": "GetScrapbookIconAtlas",
        "body": "GetScrapbookIconAtlas(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 702"
    },
    "全局.c_makeboatspiral:UNKNOWN": {
        "prefix": "c_makeboatspiral",
        "body": "c_makeboatspiral(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1561"
    },
    "全局.GetIsModGameMode:UNKNOWN": {
        "prefix": "GetIsModGameMode",
        "body": "GetIsModGameMode(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 269"
    },
    "全局.DistXYSq:UNKNOWN": {
        "prefix": "DistXYSq",
        "body": "DistXYSq(${1:p1},${2:p2})",
        "description": " ※参数: \n   (p1)<>[] \n   (p2)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 54"
    },
    "全局.IsSimPaused:UNKNOWN": {
        "prefix": "IsSimPaused",
        "body": "IsSimPaused(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 831"
    },
    "全局.lureplant_init_fn:UNKNOWN": {
        "prefix": "lureplant_init_fn",
        "body": "lureplant_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1038"
    },
    "全局.VecUtil_RotateAroundPoint:UNKNOWN": {
        "prefix": "VecUtil_RotateAroundPoint",
        "body": "VecUtil_RotateAroundPoint(${1:a_x},${2:a_z},${3:b_x},${4:b_z},${5:theta})",
        "description": " ※参数: \n   (a_x)<>[] \n   (a_z)<>[] \n   (b_x)<>[] \n   (b_z)<>[] \n   (theta)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 100"
    },
    "全局.FrameEvent:UNKNOWN": {
        "prefix": "FrameEvent",
        "body": "FrameEvent(${1:frame},${2:fn})",
        "description": " ※参数: \n   (frame)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stategraph 所在行数: 193"
    },
    "全局.IsDefaultMisc:UNKNOWN": {
        "prefix": "IsDefaultMisc",
        "body": "IsDefaultMisc(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1391"
    },
    "全局.BuildColourCubeShader:UNKNOWN": {
        "prefix": "BuildColourCubeShader",
        "body": "BuildColourCubeShader(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 131"
    },
    "全局.Networking_LeaveAnnouncement:UNKNOWN": {
        "prefix": "Networking_LeaveAnnouncement",
        "body": "Networking_LeaveAnnouncement(${1:name},${2:colour})",
        "description": " ※参数: \n   (name)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 95"
    },
    "全局.OnPhysicsSleep:UNKNOWN": {
        "prefix": "OnPhysicsSleep",
        "body": "OnPhysicsSleep(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 720"
    },
    "全局.GetModConfigData:获取当前mod配置项的值": {
        "prefix": "GetModConfigData",
        "body": "GetModConfigData(${1:optionname},${2:get_local_config})",
        "description": " ※参数: \n   (optionname)<str>[配置项] \n   (get_local_config)<any>[是否获取本地设置,一般不填] \n ※返回: <any>[value] \n ※说明: 获取当前mod配置项的值\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 329"
    },
    "全局.mem_report:UNKNOWN": {
        "prefix": "mem_report",
        "body": "mem_report(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 689"
    },
    "全局.critter_puppy_clear_fn:UNKNOWN": {
        "prefix": "critter_puppy_clear_fn",
        "body": "critter_puppy_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1576"
    },
    "全局.Networking_KickMetricsEvent:UNKNOWN": {
        "prefix": "Networking_KickMetricsEvent",
        "body": "Networking_KickMetricsEvent(${1:caller},${2:target})",
        "description": " ※参数: \n   (caller)<>[] \n   (target)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 109"
    },
    "全局.sortedKeys:UNKNOWN": {
        "prefix": "sortedKeys",
        "body": "sortedKeys(${1:dict})",
        "description": " ※参数: \n   (dict)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 877"
    },
    "全局.GetClientMetricsData:UNKNOWN": {
        "prefix": "GetClientMetricsData",
        "body": "GetClientMetricsData(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 13"
    },
    "全局.IsCharacterOwned:UNKNOWN": {
        "prefix": "IsCharacterOwned",
        "body": "IsCharacterOwned(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1356"
    },
    "全局.UserToPlayer:UNKNOWN": {
        "prefix": "UserToPlayer",
        "body": "UserToPlayer(${1:input})",
        "description": " ※参数: \n   (input)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 653"
    },
    "全局.walkingplank_grass_clear_fn:UNKNOWN": {
        "prefix": "walkingplank_grass_clear_fn",
        "body": "walkingplank_grass_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 252"
    },
    "全局.EnableDebugOnEntity:UNKNOWN": {
        "prefix": "EnableDebugOnEntity",
        "body": "EnableDebugOnEntity(${1:thing},${2:items})",
        "description": " ※参数: \n   (thing)<>[] \n   (items)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 330"
    },
    "全局.cane_clear_fn:UNKNOWN": {
        "prefix": "cane_clear_fn",
        "body": "cane_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2185"
    },
    "全局.d_islandstart:UNKNOWN": {
        "prefix": "d_islandstart",
        "body": "d_islandstart(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 958"
    },
    "全局.boat_grass_item_clear_fn:UNKNOWN": {
        "prefix": "boat_grass_item_clear_fn",
        "body": "boat_grass_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 230"
    },
    "全局.d_createscrapbookdata:UNKNOWN": {
        "prefix": "d_createscrapbookdata",
        "body": "d_createscrapbookdata(${1:print_missing_icons},${2:noreset})",
        "description": " ※参数: \n   (print_missing_icons)<>[] \n   (noreset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 2488"
    },
    "全局.CanEntitySeeInStorm:UNKNOWN": {
        "prefix": "CanEntitySeeInStorm",
        "body": "CanEntitySeeInStorm(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 473"
    },
    "全局.subfmt:UNKNOWN": {
        "prefix": "subfmt",
        "body": "subfmt(${1:s},${2:tab})",
        "description": " ※参数: \n   (s)<>[] \n   (tab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 469"
    },
    "全局.d_spawnallhats_onstands:UNKNOWN": {
        "prefix": "d_spawnallhats_onstands",
        "body": "d_spawnallhats_onstands(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1581"
    },
    "全局.RegisterSkilltreeIconsAtlas:UNKNOWN": {
        "prefix": "RegisterSkilltreeIconsAtlas",
        "body": "RegisterSkilltreeIconsAtlas(${1:atlas},${2:tex})",
        "description": " ※参数: \n   (atlas)<>[] \n   (tex)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 969"
    },
    "全局.GetGhostSanityDrain:UNKNOWN": {
        "prefix": "GetGhostSanityDrain",
        "body": "GetGhostSanityDrain(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 274"
    },
    "全局.Networking_JoinedParty:UNKNOWN": {
        "prefix": "Networking_JoinedParty",
        "body": "Networking_JoinedParty(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 974"
    },
    "全局.bernie_active_clear_fn:UNKNOWN": {
        "prefix": "bernie_active_clear_fn",
        "body": "bernie_active_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2011"
    },
    "全局.c_pos:UNKNOWN": {
        "prefix": "c_pos",
        "body": "c_pos(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 572"
    },
    "全局.d_showalleventservers:UNKNOWN": {
        "prefix": "d_showalleventservers",
        "body": "d_showalleventservers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 765"
    },
    "全局.d_boatracepointers:UNKNOWN": {
        "prefix": "d_boatracepointers",
        "body": "d_boatracepointers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3634"
    },
    "全局.steeringwheel_item_clear_fn:UNKNOWN": {
        "prefix": "steeringwheel_item_clear_fn",
        "body": "steeringwheel_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1679"
    },
    "全局.BuildLunacyShader:UNKNOWN": {
        "prefix": "BuildLunacyShader",
        "body": "BuildLunacyShader(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 228"
    },
    "全局.PushEntityEvent:UNKNOWN": {
        "prefix": "PushEntityEvent",
        "body": "PushEntityEvent(${1:guid},${2:event},${3:data})",
        "description": " ※参数: \n   (guid)<>[] \n   (event)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 520"
    },
    "全局.PickSomeWithDups:UNKNOWN": {
        "prefix": "PickSomeWithDups",
        "body": "PickSomeWithDups(${1:num},${2:choices})",
        "description": " ※参数: \n   (num)<>[] \n   (choices)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 306"
    },
    "全局.dumplua:UNKNOWN": {
        "prefix": "dumplua",
        "body": "dumplua(${1:value},${2:ident},${3:path})",
        "description": " ※参数: \n   (value)<>[] \n   (ident)<>[] \n   (path)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dumper 所在行数: 249"
    },
    "全局.d_allfish:UNKNOWN": {
        "prefix": "d_allfish",
        "body": "d_allfish(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1081"
    },
    "全局.boat_grass_item_init_fn:UNKNOWN": {
        "prefix": "boat_grass_item_init_fn",
        "body": "boat_grass_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 225"
    },
    "全局.ShowCancelTip:UNKNOWN": {
        "prefix": "ShowCancelTip",
        "body": "ShowCancelTip(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 156"
    },
    "全局.RGB:UNKNOWN": {
        "prefix": "RGB",
        "body": "RGB(${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1527"
    },
    "全局.encodeString:UNKNOWN": {
        "prefix": "encodeString",
        "body": "encodeString(${1:s})",
        "description": " ※参数: \n   (s)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 474"
    },
    "全局.Tune:UNKNOWN": {
        "prefix": "Tune",
        "body": "Tune(${1:overrides})",
        "description": " ※参数: \n   (overrides)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/tuning 所在行数: 14"
    },
    "全局.wall_ruins_item_init_fn:UNKNOWN": {
        "prefix": "wall_ruins_item_init_fn",
        "body": "wall_ruins_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1801"
    },
    "全局.DoLoadingPortal:UNKNOWN": {
        "prefix": "DoLoadingPortal",
        "body": "DoLoadingPortal(${1:cb})",
        "description": " ※参数: \n   (cb)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1429"
    },
    "全局.GetSpecialFilters:UNKNOWN": {
        "prefix": "GetSpecialFilters",
        "body": "GetSpecialFilters(${1:recipe_data},${2:selected_items})",
        "description": " ※参数: \n   (recipe_data)<>[] \n   (selected_items)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinstradeutils 所在行数: 43"
    },
    "全局.RoundBiasedUp:UNKNOWN": {
        "prefix": "RoundBiasedUp",
        "body": "RoundBiasedUp(${1:num},${2:idp})",
        "description": " ※参数: \n   (num)<>[] \n   (idp)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 24"
    },
    "全局.isnan:UNKNOWN": {
        "prefix": "isnan",
        "body": "isnan(${1:x})",
        "description": " ※参数: \n   (x)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 674"
    },
    "全局.ProfileStatsAdd:UNKNOWN": {
        "prefix": "ProfileStatsAdd",
        "body": "ProfileStatsAdd(${1:item},${2:value})",
        "description": " ※参数: \n   (item)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 324"
    },
    "全局.tabletodictstring:UNKNOWN": {
        "prefix": "tabletodictstring",
        "body": "tabletodictstring(${1:obj},${2:fn})",
        "description": " ※参数: \n   (obj)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 161"
    },
    "全局.ZipAndEncodeString:UNKNOWN": {
        "prefix": "ZipAndEncodeString",
        "body": "ZipAndEncodeString(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1690"
    },
    "全局.coldfirepit_init_fn:UNKNOWN": {
        "prefix": "coldfirepit_init_fn",
        "body": "coldfirepit_init_fn(${1:inst},${2:build_name},${3:fxoffset})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (fxoffset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1478"
    },
    "全局.c_mermking:UNKNOWN": {
        "prefix": "c_mermking",
        "body": "c_mermking(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 83"
    },
    "全局.GetDescription_AddSpecialCases:UNKNOWN": {
        "prefix": "GetDescription_AddSpecialCases",
        "body": "GetDescription_AddSpecialCases(${1:ret},${2:charactertable},${3:inst},${4:item},${5:modifier})",
        "description": " ※参数: \n   (ret)<>[] \n   (charactertable)<>[] \n   (inst)<>[] \n   (item)<>[] \n   (modifier)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 338"
    },
    "全局.RemoveRemapSoundEvent:UNKNOWN": {
        "prefix": "RemoveRemapSoundEvent",
        "body": "RemoveRemapSoundEvent(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 847"
    },
    "全局.GetTimeForTick:UNKNOWN": {
        "prefix": "GetTimeForTick",
        "body": "GetTimeForTick(${1:target_tick})",
        "description": " ※参数: \n   (target_tick)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 842"
    },
    "全局.HandleRPCQueue:UNKNOWN": {
        "prefix": "HandleRPCQueue",
        "body": "HandleRPCQueue(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1351"
    },
    "全局.LongUpdate:UNKNOWN": {
        "prefix": "LongUpdate",
        "body": "LongUpdate(${1:dt},${2:ignore_player})",
        "description": " ※参数: \n   (dt)<>[] \n   (ignore_player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 301"
    },
    "全局.WorldSettings_Timer_PreLoad_Fix:UNKNOWN": {
        "prefix": "g+WorldSettings_Timer_PreLoad_Fix",
        "body": "WorldSettings_Timer_PreLoad_Fix(${1:inst},${2:data},${3:timername},${4:maxmultiplier})",
        "description": " ※参数: \n   (inst)<>[] \n   (data)<>[] \n   (timername)<>[] \n   (maxmultiplier)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 143"
    },
    "全局.GetActiveFestivalEventServerName:UNKNOWN": {
        "prefix": "GetActiveFestivalEventServerName",
        "body": "GetActiveFestivalEventServerName(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1037"
    },
    "全局.portablecookpot_init_fn:UNKNOWN": {
        "prefix": "portablecookpot_init_fn",
        "body": "portablecookpot_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1358"
    },
    "全局.event_server_data:UNKNOWN": {
        "prefix": "event_server_data",
        "body": "event_server_data(${1:eventname},${2:path})",
        "description": " ※参数: \n   (eventname)<>[] \n   (path)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/entityscript 所在行数: 77"
    },
    "全局.ErasePersistentString:UNKNOWN": {
        "prefix": "ErasePersistentString",
        "body": "ErasePersistentString(${1:name},${2:callback})",
        "description": " ※参数: \n   (name)<>[] \n   (callback)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 33"
    },
    "全局.SaveToString:UNKNOWN": {
        "prefix": "SaveToString",
        "body": "SaveToString(${1:v})",
        "description": " ※参数: \n   (v)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stacktrace 所在行数: 13"
    },
    "全局.GetNumberSelectedItems:UNKNOWN": {
        "prefix": "GetNumberSelectedItems",
        "body": "GetNumberSelectedItems(${1:selections})",
        "description": " ※参数: \n   (selections)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinstradeutils 所在行数: 4"
    },
    "全局.CountEntities:UNKNOWN": {
        "prefix": "CountEntities",
        "body": "CountEntities(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/perfutil 所在行数: 1"
    },
    "全局.ShowConnectingToGamePopup:UNKNOWN": {
        "prefix": "ShowConnectingToGamePopup",
        "body": "ShowConnectingToGamePopup(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 488"
    },
    "全局.d_radius:UNKNOWN": {
        "prefix": "d_radius",
        "body": "d_radius(${1:radius},${2:num},${3:lifetime})",
        "description": " ※参数: \n   (radius)<>[] \n   (num)<>[] \n   (lifetime)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1159"
    },
    "全局.VecUtil_GetAngleInRads:UNKNOWN": {
        "prefix": "VecUtil_GetAngleInRads",
        "body": "VecUtil_GetAngleInRads(${1:p1_x},${2:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 72"
    },
    "全局.RemoveByValue:UNKNOWN": {
        "prefix": "RemoveByValue",
        "body": "RemoveByValue(${1:t},${2:value})",
        "description": " ※参数: \n   (t)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 232"
    },
    "全局.IsItemMarketable:UNKNOWN": {
        "prefix": "IsItemMarketable",
        "body": "IsItemMarketable(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 584"
    },
    "全局.c_setmoisture:UNKNOWN": {
        "prefix": "c_setmoisture",
        "body": "c_setmoisture(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 447"
    },
    "全局.GetModVersion:UNKNOWN": {
        "prefix": "GetModVersion",
        "body": "GetModVersion(${1:mod_name},${2:mod_info_use})",
        "description": " ※参数: \n   (mod_name)<>[] \n   (mod_info_use)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 128"
    },
    "全局.AreAnyModsEnabled:UNKNOWN": {
        "prefix": "AreAnyModsEnabled",
        "body": "AreAnyModsEnabled(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 68"
    },
    "全局.IsMigrating:UNKNOWN": {
        "prefix": "IsMigrating",
        "body": "IsMigrating(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1664"
    },
    "全局.AddTuningModifier:UNKNOWN": {
        "prefix": "AddTuningModifier",
        "body": "AddTuningModifier(${1:tuning_var},${2:fn},${3:tuning_value})",
        "description": " ※参数: \n   (tuning_var)<>[] \n   (fn)<>[] \n   (tuning_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/tuning 所在行数: 7"
    },
    "全局.AddSimPostInit:UNKNOWN": {
        "prefix": "AddSimPostInit",
        "body": "AddSimPostInit(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 341"
    },
    "全局.OnSimPaused:UNKNOWN": {
        "prefix": "OnSimPaused",
        "body": "OnSimPaused(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 895"
    },
    "全局.IsDefaultBeefClothing:UNKNOWN": {
        "prefix": "IsDefaultBeefClothing",
        "body": "IsDefaultBeefClothing(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1387"
    },
    "全局.trophyscale_fish_clear_fn:UNKNOWN": {
        "prefix": "trophyscale_fish_clear_fn",
        "body": "trophyscale_fish_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2809"
    },
    "全局.AddPlayerPostInit:修改玩家": {
        "prefix": "AddPlayerPostInit",
        "body": "AddPlayerPostInit(function(inst)\n\t${0}\nend)",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: 修改玩家\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 586"
    },
    "全局.c_rotateccw:UNKNOWN": {
        "prefix": "c_rotateccw",
        "body": "c_rotateccw(${1:delta})",
        "description": " ※参数: \n   (delta)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1986"
    },
    "全局.c_goadventuring:UNKNOWN": {
        "prefix": "c_goadventuring",
        "body": "c_goadventuring(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1295"
    },
    "全局.GetPurchasePackCurrencyOutput:UNKNOWN": {
        "prefix": "GetPurchasePackCurrencyOutput",
        "body": "GetPurchasePackCurrencyOutput(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 507"
    },
    "全局.c_connect:UNKNOWN": {
        "prefix": "c_connect",
        "body": "c_connect(${1:ip},${2:port},${3:password})",
        "description": " ※参数: \n   (ip)<>[] \n   (port)<>[] \n   (password)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 470"
    },
    "全局.telebase_init_fn:UNKNOWN": {
        "prefix": "telebase_init_fn",
        "body": "telebase_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2720"
    },
    "全局.mushroom_farm_clear_fn:UNKNOWN": {
        "prefix": "mushroom_farm_clear_fn",
        "body": "mushroom_farm_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2777"
    },
    "全局.c_summonmalbatross:UNKNOWN": {
        "prefix": "c_summonmalbatross",
        "body": "c_summonmalbatross(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1031"
    },
    "全局.MakeLargeBurnable:UNKNOWN": {
        "prefix": "MakeLargeBurnable",
        "body": "MakeLargeBurnable(${1:inst},${2:time},${3:offset},${4:structure},${5:sym})",
        "description": " ※参数: \n   (inst)<>[] \n   (time)<>[] \n   (offset)<>[] \n   (structure)<>[] \n   (sym)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 183"
    },
    "全局.c_findnext:UNKNOWN": {
        "prefix": "c_findnext",
        "body": "c_findnext(${1:prefab},${2:radius},${3:inst})",
        "description": " ※参数: \n   (prefab)<>[] \n   (radius)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 714"
    },
    "全局.d_punchingbags:UNKNOWN": {
        "prefix": "d_punchingbags",
        "body": "d_punchingbags(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1791"
    },
    "全局.GetFirstOwnedItemId:UNKNOWN": {
        "prefix": "GetFirstOwnedItemId",
        "body": "GetFirstOwnedItemId(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1103"
    },
    "全局.c_giveingredients:UNKNOWN": {
        "prefix": "c_giveingredients",
        "body": "c_giveingredients(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 545"
    },
    "全局.GetSpecialCharacterPostProcess:UNKNOWN": {
        "prefix": "GetSpecialCharacterPostProcess",
        "body": "GetSpecialCharacterPostProcess(${1:character},${2:string})",
        "description": " ※参数: \n   (character)<>[] \n   (string)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 240"
    },
    "全局._BonusItemRewarded:UNKNOWN": {
        "prefix": "_BonusItemRewarded",
        "body": "_BonusItemRewarded(${1:bonus_item},${2:item_counts})",
        "description": " ※参数: \n   (bonus_item)<>[] \n   (item_counts)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1163"
    },
    "全局.GetLockedSkinFilter:UNKNOWN": {
        "prefix": "GetLockedSkinFilter",
        "body": "GetLockedSkinFilter(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1258"
    },
    "全局.CreateEntity:UNKNOWN": {
        "prefix": "CreateEntity",
        "body": "CreateEntity(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 460"
    },
    "全局.decode_scanConstant:UNKNOWN": {
        "prefix": "decode_scanConstant",
        "body": "decode_scanConstant(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 319"
    },
    "全局.d_resetruins:UNKNOWN": {
        "prefix": "d_resetruins",
        "body": "d_resetruins(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 647"
    },
    "全局.TickRPCQueue:UNKNOWN": {
        "prefix": "TickRPCQueue",
        "body": "TickRPCQueue(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1425"
    },
    "全局.Networking_RollAnnouncement:UNKNOWN": {
        "prefix": "Networking_RollAnnouncement",
        "body": "Networking_RollAnnouncement(${1:userid},${2:name},${3:prefab},${4:colour},${5:rolls},${6:max})",
        "description": " ※参数: \n   (userid)<>[] \n   (name)<>[] \n   (prefab)<>[] \n   (colour)<>[] \n   (rolls)<>[] \n   (max)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 135"
    },
    "全局.d_moonaltars:UNKNOWN": {
        "prefix": "d_moonaltars",
        "body": "d_moonaltars(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1431"
    },
    "全局.c_summonbearger:UNKNOWN": {
        "prefix": "c_summonbearger",
        "body": "c_summonbearger(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1023"
    },
    "全局.MakeInventoryPhysics:UNKNOWN": {
        "prefix": "MakeInventoryPhysics",
        "body": "MakeInventoryPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 366"
    },
    "全局.GetTaskRemaining:UNKNOWN": {
        "prefix": "GetTaskRemaining",
        "body": "GetTaskRemaining(${1:task})",
        "description": " ※参数: \n   (task)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 847"
    },
    "全局.AreServerModsEnabled:UNKNOWN": {
        "prefix": "AreServerModsEnabled",
        "body": "AreServerModsEnabled(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 58"
    },
    "全局.d_printskilltreestringsforcharacter:UNKNOWN": {
        "prefix": "d_printskilltreestringsforcharacter",
        "body": "d_printskilltreestringsforcharacter(${1:character})",
        "description": " ※参数: \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 336"
    },
    "全局.IsSteam:UNKNOWN": {
        "prefix": "IsSteam",
        "body": "IsSteam(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 25"
    },
    "全局.chester_eyebone_clear_fn:UNKNOWN": {
        "prefix": "chester_eyebone_clear_fn",
        "body": "chester_eyebone_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1186"
    },
    "全局.d_allsongs:UNKNOWN": {
        "prefix": "d_allsongs",
        "body": "d_allsongs(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 373"
    },
    "全局.c_findtag:UNKNOWN": {
        "prefix": "c_findtag",
        "body": "c_findtag(${1:tag},${2:radius},${3:inst})",
        "description": " ※参数: \n   (tag)<>[] \n   (radius)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 865"
    },
    "全局.RemapSoundEvent:UNKNOWN": {
        "prefix": "RemapSoundEvent",
        "body": "RemapSoundEvent(${1:name},${2:new_name})",
        "description": " ※参数: \n   (name)<>[] \n   (new_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 842"
    },
    "全局.SetDebugEntity:UNKNOWN": {
        "prefix": "SetDebugEntity",
        "body": "SetDebugEntity(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 624"
    },
    "全局.wall_wood_clear_fn:UNKNOWN": {
        "prefix": "wall_wood_clear_fn",
        "body": "wall_wood_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1863"
    },
    "全局.checkentity:UNKNOWN": {
        "prefix": "checkentity",
        "body": "checkentity(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 8"
    },
    "全局.DecodeAndUnzipString:UNKNOWN": {
        "prefix": "DecodeAndUnzipString",
        "body": "DecodeAndUnzipString(${1:str})",
        "description": " ※参数: \n   (str)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1698"
    },
    "全局.ProbeReload:UNKNOWN": {
        "prefix": "ProbeReload",
        "body": "ProbeReload(${1:ispressed})",
        "description": " ※参数: \n   (ispressed)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/reload 所在行数: 200"
    },
    "全局.AddLoadingTip:UNKNOWN": {
        "prefix": "AddLoadingTip",
        "body": "AddLoadingTip(${1:stringtable},${2:id},${3:tipstring},${4:controltipdata})",
        "description": " ※参数: \n   (stringtable)<>[] \n   (id)<>[] \n   (tipstring)<>[] \n   (controltipdata)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 975"
    },
    "全局.SinkEntity:UNKNOWN": {
        "prefix": "SinkEntity",
        "body": "SinkEntity(${1:entity})",
        "description": " ※参数: \n   (entity)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 182"
    },
    "全局.GetSkinInvIconName:UNKNOWN": {
        "prefix": "GetSkinInvIconName",
        "body": "GetSkinInvIconName(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 868"
    },
    "全局.ReconstructTopology:UNKNOWN": {
        "prefix": "ReconstructTopology",
        "body": "ReconstructTopology(${1:graph})",
        "description": " ※参数: \n   (graph)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 230"
    },
    "全局.anchor_init_fn:UNKNOWN": {
        "prefix": "anchor_init_fn",
        "body": "anchor_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1708"
    },
    "全局.GetDebugEntity:UNKNOWN": {
        "prefix": "GetDebugEntity",
        "body": "GetDebugEntity(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 620"
    },
    "全局.c_maintainmoisture:UNKNOWN": {
        "prefix": "c_maintainmoisture",
        "body": "c_maintainmoisture(${1:player},${2:percent})",
        "description": " ※参数: \n   (player)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1139"
    },
    "全局.GetCandidateRecipes:UNKNOWN": {
        "prefix": "GetCandidateRecipes",
        "body": "GetCandidateRecipes(${1:cooker},${2:ingdata})",
        "description": " ※参数: \n   (cooker)<>[] \n   (ingdata)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/cooking 所在行数: 228"
    },
    "全局.checkstring:UNKNOWN": {
        "prefix": "checkstring",
        "body": "checkstring(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 7"
    },
    "全局.Networking_PartyChanged:UNKNOWN": {
        "prefix": "Networking_PartyChanged",
        "body": "Networking_PartyChanged(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 986"
    },
    "全局.Vec3Util_NormalAndLength:UNKNOWN": {
        "prefix": "Vec3Util_NormalAndLength",
        "body": "Vec3Util_NormalAndLength(${1:p1_x},${2:p1_y},${3:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 44"
    },
    "全局.GetPlayerClientTable:UNKNOWN": {
        "prefix": "GetPlayerClientTable",
        "body": "GetPlayerClientTable(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 924"
    },
    "全局.PreloadSoundList:UNKNOWN": {
        "prefix": "PreloadSoundList",
        "body": "PreloadSoundList(${1:list})",
        "description": " ※参数: \n   (list)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/preloadsounds 所在行数: 230"
    },
    "全局.GetClientModRPCHandler:UNKNOWN": {
        "prefix": "GetClientModRPCHandler",
        "body": "GetClientModRPCHandler(${1:namespace},${2:name})",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 877"
    },
    "全局.GetPriceFromIAPDef:UNKNOWN": {
        "prefix": "GetPriceFromIAPDef",
        "body": "GetPriceFromIAPDef(${1:iap_def},${2:sale_active})",
        "description": " ※参数: \n   (iap_def)<>[] \n   (sale_active)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 339"
    },
    "全局.IsAnyFestivalEventActive:UNKNOWN": {
        "prefix": "IsAnyFestivalEventActive",
        "body": "IsAnyFestivalEventActive(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1020"
    },
    "全局.lantern_init_fn:UNKNOWN": {
        "prefix": "lantern_init_fn",
        "body": "lantern_init_fn(${1:inst},${2:build_name},${3:overridesymbols},${4:followoffset})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (overridesymbols)<>[] \n   (followoffset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2450"
    },
    "全局.DefaultBurntFn:UNKNOWN": {
        "prefix": "DefaultBurntFn",
        "body": "DefaultBurntFn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 17"
    },
    "全局.d_dumpItemsTXT:UNKNOWN": {
        "prefix": "d_dumpItemsTXT",
        "body": "d_dumpItemsTXT(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1884"
    },
    "全局.c_shutdown:UNKNOWN": {
        "prefix": "c_shutdown",
        "body": "c_shutdown(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 179"
    },
    "全局.SetDefaultTimeScale:UNKNOWN": {
        "prefix": "SetDefaultTimeScale",
        "body": "SetDefaultTimeScale(${1:scale})",
        "description": " ※参数: \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 837"
    },
    "全局.AddRecipe2:UNKNOWN": {
        "prefix": "AddRecipe2",
        "body": "AddRecipe2(${1:name},${2:ingredients},${3:tech},${4:config},${5:filters})",
        "description": " ※参数: \n   (name)<>[] \n   (ingredients)<>[] \n   (tech)<>[] \n   (config)<>[] \n   (filters)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 732"
    },
    "全局.ApplyKlumpToStringTable:UNKNOWN": {
        "prefix": "ApplyKlumpToStringTable",
        "body": "ApplyKlumpToStringTable(${1:string_id},${2:json_str})",
        "description": " ※参数: \n   (string_id)<>[] \n   (json_str)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/klump 所在行数: 73"
    },
    "全局.GetEnabledModsModInfoDetails:UNKNOWN": {
        "prefix": "GetEnabledModsModInfoDetails",
        "body": "GetEnabledModsModInfoDetails(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 141"
    },
    "全局.GetTableSize:UNKNOWN": {
        "prefix": "GetTableSize",
        "body": "GetTableSize(${1:table})",
        "description": " ※参数: \n   (table)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 243"
    },
    "全局.d_testwalls:UNKNOWN": {
        "prefix": "d_testwalls",
        "body": "d_testwalls(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 431"
    },
    "全局.MakeHauntableChangePrefab:UNKNOWN": {
        "prefix": "MakeHauntableChangePrefab",
        "body": "MakeHauntableChangePrefab(${1:inst},${2:newprefab},${3:chance},${4:haunt_value},${5:nofx})",
        "description": " ※参数: \n   (inst)<>[] \n   (newprefab)<>[] \n   (chance)<>[] \n   (haunt_value)<>[] \n   (nofx)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1037"
    },
    "全局.GetActionString:UNKNOWN": {
        "prefix": "GetActionString",
        "body": "GetActionString(${1:action},${2:modifier})",
        "description": " ※参数: \n   (action)<>[] \n   (modifier)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 331"
    },
    "全局.critter_perdling_builder_clear_fn:UNKNOWN": {
        "prefix": "critter_perdling_builder_clear_fn",
        "body": "critter_perdling_builder_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1572"
    },
    "全局.premiumwateringcan_init_fn:UNKNOWN": {
        "prefix": "premiumwateringcan_init_fn",
        "body": "premiumwateringcan_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2767"
    },
    "全局.c_rotatecw:UNKNOWN": {
        "prefix": "c_rotatecw",
        "body": "c_rotatecw(${1:delta})",
        "description": " ※参数: \n   (delta)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1975"
    },
    "全局.c_guitartab:UNKNOWN": {
        "prefix": "c_guitartab",
        "body": "c_guitartab(${1:songdata},${2:overrides},${3:dont_spawn_shells})",
        "description": " ※参数: \n   (songdata)<>[] \n   (overrides)<>[] \n   (dont_spawn_shells)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1909"
    },
    "全局.LoadAccessibleKlumpFiles:UNKNOWN": {
        "prefix": "LoadAccessibleKlumpFiles",
        "body": "LoadAccessibleKlumpFiles(${1:minimal_load})",
        "description": " ※参数: \n   (minimal_load)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/klump 所在行数: 5"
    },
    "全局.d_allcircuits:UNKNOWN": {
        "prefix": "d_allcircuits",
        "body": "d_allcircuits(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 79"
    },
    "全局.heatrock_clear_fn:UNKNOWN": {
        "prefix": "heatrock_clear_fn",
        "body": "heatrock_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2352"
    },
    "全局.IsPurchasePackCurrency:UNKNOWN": {
        "prefix": "IsPurchasePackCurrency",
        "body": "IsPurchasePackCurrency(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 499"
    },
    "全局.IsAnyPlayerInRangeSq:UNKNOWN": {
        "prefix": "IsAnyPlayerInRangeSq",
        "body": "IsAnyPlayerInRangeSq(${1:x},${2:y},${3:z},${4:rangesq},${5:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (rangesq)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 128"
    },
    "全局.c_migrationportal:UNKNOWN": {
        "prefix": "c_migrationportal",
        "body": "c_migrationportal(${1:worldId},${2:portalId})",
        "description": " ※参数: \n   (worldId)<>[] \n   (portalId)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1286"
    },
    "全局.IsSplitScreen:UNKNOWN": {
        "prefix": "IsSplitScreen",
        "body": "IsSplitScreen(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/splitscreenutils_pc 所在行数: 25"
    },
    "全局.checkbit:UNKNOWN": {
        "prefix": "checkbit",
        "body": "checkbit(${1:x},${2:b})",
        "description": " ※参数: \n   (x)<>[] \n   (b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1435"
    },
    "全局.VecUtil_Scale:UNKNOWN": {
        "prefix": "VecUtil_Scale",
        "body": "VecUtil_Scale(${1:p1_x},${2:p1_z},${3:scale})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 11"
    },
    "全局.GetInventoryItemAtlas_Internal:UNKNOWN": {
        "prefix": "GetInventoryItemAtlas_Internal",
        "body": "GetInventoryItemAtlas_Internal(${1:imagename},${2:no_fallback})",
        "description": " ※参数: \n   (imagename)<>[] \n   (no_fallback)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 622"
    },
    "全局.wall_moonrock_clear_fn:UNKNOWN": {
        "prefix": "wall_moonrock_clear_fn",
        "body": "wall_moonrock_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1793"
    },
    "全局.lantern_clear_fn:UNKNOWN": {
        "prefix": "lantern_clear_fn",
        "body": "lantern_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2476"
    },
    "全局.critter_kitten_clear_fn:UNKNOWN": {
        "prefix": "critter_kitten_clear_fn",
        "body": "critter_kitten_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1554"
    },
    "全局.Vec3Util_DistSq:UNKNOWN": {
        "prefix": "Vec3Util_DistSq",
        "body": "Vec3Util_DistSq(${1:p1_x},${2:p1_y},${3:p1_z},${4:p2_x},${5:p2_y},${6:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_y)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 23"
    },
    "全局.SetMiniMapTileProperty:UNKNOWN": {
        "prefix": "SetMiniMapTileProperty",
        "body": "SetMiniMapTileProperty(${1:tile_id},${2:propertyname},${3:value})",
        "description": " ※参数: \n   (tile_id)<>[] \n   (propertyname)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 399"
    },
    "全局.GetTileInfo:UNKNOWN": {
        "prefix": "GetTileInfo",
        "body": "GetTileInfo(${1:tile})",
        "description": " ※参数: \n   (tile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldtiledefs 所在行数: 66"
    },
    "全局.GetValidRecipe:UNKNOWN": {
        "prefix": "GetValidRecipe",
        "body": "GetValidRecipe(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/recipe 所在行数: 181"
    },
    "全局.GetTime:UNKNOWN": {
        "prefix": "GetTime",
        "body": "GetTime(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 159"
    },
    "全局.Shard_SyncMermKingTrident:UNKNOWN": {
        "prefix": "Shard_SyncMermKingTrident",
        "body": "Shard_SyncMermKingTrident(${1:exists},${2:shardid})",
        "description": " ※参数: \n   (exists)<>[] \n   (shardid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 228"
    },
    "全局.c_dumpentities:UNKNOWN": {
        "prefix": "c_dumpentities",
        "body": "c_dumpentities(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1646"
    },
    "全局.RemoveFromRegrowthManager:UNKNOWN": {
        "prefix": "RemoveFromRegrowthManager",
        "body": "RemoveFromRegrowthManager(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1606"
    },
    "全局.critter_dragonling_clear_fn:UNKNOWN": {
        "prefix": "critter_dragonling_clear_fn",
        "body": "critter_dragonling_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1538"
    },
    "全局.ReloadFrontEndAssets:UNKNOWN": {
        "prefix": "ReloadFrontEndAssets",
        "body": "ReloadFrontEndAssets(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 187"
    },
    "全局.c_equip:UNKNOWN": {
        "prefix": "c_equip",
        "body": "c_equip(${1:prefab},${2:count},${3:dontselect})",
        "description": " ※参数: \n   (prefab)<>[] \n   (count)<>[] \n   (dontselect)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 503"
    },
    "全局.MakeMediumBurnable:UNKNOWN": {
        "prefix": "MakeMediumBurnable",
        "body": "MakeMediumBurnable(${1:inst},${2:time},${3:offset},${4:structure},${5:sym})",
        "description": " ※参数: \n   (inst)<>[] \n   (time)<>[] \n   (offset)<>[] \n   (structure)<>[] \n   (sym)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 171"
    },
    "全局.SetPauseFromCode:UNKNOWN": {
        "prefix": "SetPauseFromCode",
        "body": "SetPauseFromCode(${1:pause})",
        "description": " ※参数: \n   (pause)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1651"
    },
    "全局.ControllerReticle_Blink_GetPosition_Direction:UNKNOWN": {
        "prefix": "ControllerReticle_Blink_GetPosition_Direction",
        "body": "ControllerReticle_Blink_GetPosition_Direction(${1:pos},${2:rotation},${3:maxrange},${4:validwalkablefn})",
        "description": " ※参数: \n   (pos)<>[] \n   (rotation)<>[] \n   (maxrange)<>[] \n   (validwalkablefn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1792"
    },
    "全局.d_oceanarena:UNKNOWN": {
        "prefix": "d_oceanarena",
        "body": "d_oceanarena(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 254"
    },
    "全局.ControllerPlacer_Boat_SpotFinder:UNKNOWN": {
        "prefix": "ControllerPlacer_Boat_SpotFinder",
        "body": "ControllerPlacer_Boat_SpotFinder(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1889"
    },
    "全局.mastupgrade_lamp_item_clear_fn:UNKNOWN": {
        "prefix": "mastupgrade_lamp_item_clear_fn",
        "body": "mastupgrade_lamp_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1726"
    },
    "全局.MakeNoGrowInWinter:UNKNOWN": {
        "prefix": "MakeNoGrowInWinter",
        "body": "MakeNoGrowInWinter(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 702"
    },
    "全局.LoadAchievements:UNKNOWN": {
        "prefix": "LoadAchievements",
        "body": "LoadAchievements(${1:filename})",
        "description": " ※参数: \n   (filename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 256"
    },
    "全局.GetPackTotalSets:UNKNOWN": {
        "prefix": "GetPackTotalSets",
        "body": "GetPackTotalSets(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 296"
    },
    "全局.eprint:UNKNOWN": {
        "prefix": "eprint",
        "body": "eprint(${1:inst},${2:...})",
        "description": " ※参数: \n   (inst)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 295"
    },
    "全局.dprint:UNKNOWN": {
        "prefix": "dprint",
        "body": "dprint(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 243"
    },
    "全局.PostPhysicsWallUpdate:UNKNOWN": {
        "prefix": "PostPhysicsWallUpdate",
        "body": "PostPhysicsWallUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 149"
    },
    "全局.tabletoliststring:UNKNOWN": {
        "prefix": "tabletoliststring",
        "body": "tabletoliststring(${1:obj},${2:fn})",
        "description": " ※参数: \n   (obj)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 179"
    },
    "全局.boat_item_init_fn:UNKNOWN": {
        "prefix": "boat_item_init_fn",
        "body": "boat_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1636"
    },
    "全局.IsRail:UNKNOWN": {
        "prefix": "IsRail",
        "body": "IsRail(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 37"
    },
    "全局.coldfirepit_clear_fn:UNKNOWN": {
        "prefix": "coldfirepit_clear_fn",
        "body": "coldfirepit_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1494"
    },
    "全局.GetRandomKey:UNKNOWN": {
        "prefix": "GetRandomKey",
        "body": "GetRandomKey(${1:choices})",
        "description": " ※参数: \n   (choices)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 513"
    },
    "全局.bernie_big_clear_fn:UNKNOWN": {
        "prefix": "bernie_big_clear_fn",
        "body": "bernie_big_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2026"
    },
    "全局.ResumeRequestLoadComplete:UNKNOWN": {
        "prefix": "ResumeRequestLoadComplete",
        "body": "ResumeRequestLoadComplete(${1:success})",
        "description": " ※参数: \n   (success)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1997"
    },
    "全局.GetFirstActiveSpecialEvent:UNKNOWN": {
        "prefix": "GetFirstActiveSpecialEvent",
        "body": "GetFirstActiveSpecialEvent(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 968"
    },
    "全局.ShowUpsellScreen:UNKNOWN": {
        "prefix": "ShowUpsellScreen",
        "body": "ShowUpsellScreen(${1:shouldquit})",
        "description": " ※参数: \n   (shouldquit)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 28"
    },
    "全局.glomling_init_fn:UNKNOWN": {
        "prefix": "glomling_init_fn",
        "body": "glomling_init_fn(${1:inst},${2:build_name},${3:default_build})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (default_build)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1528"
    },
    "全局.MonkeyPatchClass:UNKNOWN": {
        "prefix": "MonkeyPatchClass",
        "body": "MonkeyPatchClass(${1:mt})",
        "description": " ※参数: \n   (mt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/reload 所在行数: 105"
    },
    "全局.SetPause:UNKNOWN": {
        "prefix": "SetPause",
        "body": "SetPause(${1:val},${2:reason})",
        "description": " ※参数: \n   (val)<>[] \n   (reason)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 907"
    },
    "全局.Launch2:UNKNOWN": {
        "prefix": "Launch2",
        "body": "Launch2(${1:inst},${2:launcher},${3:basespeed},${4:speedmult},${5:startheight},${6:startradius},${7:vertical_speed},${8:force_angle})",
        "description": " ※参数: \n   (inst)<>[] \n   (launcher)<>[] \n   (basespeed)<>[] \n   (speedmult)<>[] \n   (startheight)<>[] \n   (startradius)<>[] \n   (vertical_speed)<>[] \n   (force_angle)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/physics 所在行数: 35"
    },
    "全局.c_inst:UNKNOWN": {
        "prefix": "c_inst",
        "body": "c_inst(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 618"
    },
    "全局.MakeHauntableLaunch:UNKNOWN": {
        "prefix": "MakeHauntableLaunch",
        "body": "MakeHauntableLaunch(${1:inst},${2:chance},${3:speed},${4:cooldown},${5:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (chance)<>[] \n   (speed)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 835"
    },
    "全局.IsWin32:UNKNOWN": {
        "prefix": "IsWin32",
        "body": "IsWin32(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 29"
    },
    "全局.CompareItemDataForSortByName:UNKNOWN": {
        "prefix": "CompareItemDataForSortByName",
        "body": "CompareItemDataForSortByName(${1:item_key_a},${2:item_key_b})",
        "description": " ※参数: \n   (item_key_a)<>[] \n   (item_key_b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 997"
    },
    "全局.Networking_ModOutOfDateAnnouncement:UNKNOWN": {
        "prefix": "Networking_ModOutOfDateAnnouncement",
        "body": "Networking_ModOutOfDateAnnouncement(${1:mod})",
        "description": " ※参数: \n   (mod)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 70"
    },
    "全局.AddRoomPreInit:UNKNOWN": {
        "prefix": "AddRoomPreInit",
        "body": "AddRoomPreInit(${1:roomname},${2:fn})",
        "description": " ※参数: \n   (roomname)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 275"
    },
    "全局.OnTwitchMessageReceived:UNKNOWN": {
        "prefix": "OnTwitchMessageReceived",
        "body": "OnTwitchMessageReceived(${1:username},${2:message},${3:colour})",
        "description": " ※参数: \n   (username)<>[] \n   (message)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 146"
    },
    "全局.AddComponentPostInit:修改已有的组件的初始化API": {
        "prefix": "AddComponentPostInit",
        "body": "AddComponentPostInit(\"${1:component}\", function(self)\n\t${0}\nend)",
        "description": " ※参数: \n   (component)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: 修改已有的组件的初始化API\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 567"
    },
    "全局.hutch_fishbowl_clear_fn:UNKNOWN": {
        "prefix": "hutch_fishbowl_clear_fn",
        "body": "hutch_fishbowl_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1215"
    },
    "全局.TranslateStringTable:UNKNOWN": {
        "prefix": "TranslateStringTable",
        "body": "TranslateStringTable(${1:tbl})",
        "description": " ※参数: \n   (tbl)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/translator 所在行数: 222"
    },
    "全局.Networking_DeathAnnouncement:UNKNOWN": {
        "prefix": "Networking_DeathAnnouncement",
        "body": "Networking_DeathAnnouncement(${1:message},${2:colour})",
        "description": " ※参数: \n   (message)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 78"
    },
    "全局.Wake:UNKNOWN": {
        "prefix": "Wake",
        "body": "Wake(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 340"
    },
    "全局.TrimString:UNKNOWN": {
        "prefix": "TrimString",
        "body": "TrimString(${1:s})",
        "description": " ※参数: \n   (s)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 462"
    },
    "全局.abigail_init_fn:UNKNOWN": {
        "prefix": "abigail_init_fn",
        "body": "abigail_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1308"
    },
    "全局.d_testdps:UNKNOWN": {
        "prefix": "d_testdps",
        "body": "d_testdps(${1:time},${2:target})",
        "description": " ※参数: \n   (time)<>[] \n   (target)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3578"
    },
    "全局.d_fertilizers:UNKNOWN": {
        "prefix": "d_fertilizers",
        "body": "d_fertilizers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1408"
    },
    "全局.AddClassPostConstruct:添加修改类API通用函数片段": {
        "prefix": "AddClassPostConstruct",
        "body": "AddClassPostConstruct(\"${1:package}\", function(self)\n\t${0}\nend)",
        "description": " ※参数: \n   (package)<str>[] \n   (fn)<fn>[] \n ※返回: \n ※说明: 添加修改类API通用函数片段\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 351"
    },
    "全局.RestoreSnapshotUserSession:UNKNOWN": {
        "prefix": "RestoreSnapshotUserSession",
        "body": "RestoreSnapshotUserSession(${1:sessionid},${2:userid})",
        "description": " ※参数: \n   (sessionid)<>[] \n   (userid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2057"
    },
    "全局.c_sounddebug:UNKNOWN": {
        "prefix": "c_sounddebug",
        "body": "c_sounddebug(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1333"
    },
    "全局.ocean_trawler_kit_clear_fn:UNKNOWN": {
        "prefix": "ocean_trawler_kit_clear_fn",
        "body": "ocean_trawler_kit_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 290"
    },
    "全局.critter_glomling_builder_clear_fn:UNKNOWN": {
        "prefix": "critter_glomling_builder_clear_fn",
        "body": "critter_glomling_builder_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1550"
    },
    "全局.Shard_IsMaster:UNKNOWN": {
        "prefix": "Shard_IsMaster",
        "body": "Shard_IsMaster(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 12"
    },
    "全局.UpdateSkinGrid:UNKNOWN": {
        "prefix": "UpdateSkinGrid",
        "body": "UpdateSkinGrid(${1:context},${2:list_widget},${3:data},${4:data_index})",
        "description": " ※参数: \n   (context)<>[] \n   (list_widget)<>[] \n   (data)<>[] \n   (data_index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 940"
    },
    "全局.ShadeEffectUpdate:UNKNOWN": {
        "prefix": "ShadeEffectUpdate",
        "body": "ShadeEffectUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shadeeffects 所在行数: 28"
    },
    "全局.GetSpecialCharacterString:UNKNOWN": {
        "prefix": "GetSpecialCharacterString",
        "body": "GetSpecialCharacterString(${1:character})",
        "description": " ※参数: \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 224"
    },
    "全局.GetCharacterRequiredForItem:UNKNOWN": {
        "prefix": "GetCharacterRequiredForItem",
        "body": "GetCharacterRequiredForItem(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 706"
    },
    "全局.IsGamePurchased:UNKNOWN": {
        "prefix": "IsGamePurchased",
        "body": "IsGamePurchased(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 6"
    },
    "全局.FindPlayersInRangeSq:UNKNOWN": {
        "prefix": "FindPlayersInRangeSq",
        "body": "FindPlayersInRangeSq(${1:x},${2:y},${3:z},${4:rangesq},${5:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (rangesq)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 112"
    },
    "全局.AddHauntableDropItemOrWork:UNKNOWN": {
        "prefix": "AddHauntableDropItemOrWork",
        "body": "AddHauntableDropItemOrWork(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1336"
    },
    "全局.SaveGame:UNKNOWN": {
        "prefix": "SaveGame",
        "body": "SaveGame(${1:isshutdown},${2:cb})",
        "description": " ※参数: \n   (isshutdown)<>[] \n   (cb)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1038"
    },
    "全局.AddRecipeToFilter:UNKNOWN": {
        "prefix": "AddRecipeToFilter",
        "body": "AddRecipeToFilter(${1:recipe_name},${2:filter_name})",
        "description": " ※参数: \n   (recipe_name)<>[] \n   (filter_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 713"
    },
    "全局.isEncodable:UNKNOWN": {
        "prefix": "isEncodable",
        "body": "isEncodable(${1:o})",
        "description": " ※参数: \n   (o)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 516"
    },
    "全局.ControllerReticle_Blink_GetPosition:UNKNOWN": {
        "prefix": "ControllerReticle_Blink_GetPosition",
        "body": "ControllerReticle_Blink_GetPosition(${1:player},${2:validwalkablefn})",
        "description": " ※参数: \n   (player)<>[] \n   (validwalkablefn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1805"
    },
    "全局.DumpUpvalues:UNKNOWN": {
        "prefix": "DumpUpvalues",
        "body": "DumpUpvalues(${1:func})",
        "description": " ※参数: \n   (func)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debughelpers 所在行数: 44"
    },
    "全局.DisplayError:UNKNOWN": {
        "prefix": "DisplayError",
        "body": "DisplayError(${1:error})",
        "description": " ※参数: \n   (error)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1556"
    },
    "全局.firepit_clear_fn:UNKNOWN": {
        "prefix": "firepit_clear_fn",
        "body": "firepit_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1437"
    },
    "全局.AddFontAssets:UNKNOWN": {
        "prefix": "AddFontAssets",
        "body": "AddFontAssets(${1:asset_table},${2:font_table})",
        "description": " ※参数: \n   (asset_table)<>[] \n   (font_table)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/fonthelper 所在行数: 1"
    },
    "全局.CreateCircleEmitter:UNKNOWN": {
        "prefix": "CreateCircleEmitter",
        "body": "CreateCircleEmitter(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 111"
    },
    "全局.RunInSandbox:UNKNOWN": {
        "prefix": "RunInSandbox",
        "body": "RunInSandbox(${1:untrusted_code})",
        "description": " ※参数: \n   (untrusted_code)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 793"
    },
    "全局.RecordEventAchievementSharedProgress:UNKNOWN": {
        "prefix": "RecordEventAchievementSharedProgress",
        "body": "RecordEventAchievementSharedProgress(${1:achievement},${2:data})",
        "description": " ※参数: \n   (achievement)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 97"
    },
    "全局.GetAvailablePlayerColours:UNKNOWN": {
        "prefix": "GetAvailablePlayerColours",
        "body": "GetAvailablePlayerColours(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 668"
    },
    "全局.HandleUserCmdQueue:UNKNOWN": {
        "prefix": "HandleUserCmdQueue",
        "body": "HandleUserCmdQueue(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 38"
    },
    "全局.BuildPriceStr:UNKNOWN": {
        "prefix": "BuildPriceStr",
        "body": "BuildPriceStr(${1:value},${2:iap_def},${3:sale_active})",
        "description": " ※参数: \n   (value)<>[] \n   (iap_def)<>[] \n   (sale_active)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 361"
    },
    "全局.critter_puppy_builder_clear_fn:UNKNOWN": {
        "prefix": "critter_puppy_builder_clear_fn",
        "body": "critter_puppy_builder_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1579"
    },
    "全局.LaunchAt:UNKNOWN": {
        "prefix": "LaunchAt",
        "body": "LaunchAt(${1:inst},${2:launcher},${3:target},${4:speedmult},${5:startheight},${6:startradius},${7:randomangleoffset})",
        "description": " ※参数: \n   (inst)<>[] \n   (launcher)<>[] \n   (target)<>[] \n   (speedmult)<>[] \n   (startheight)<>[] \n   (startradius)<>[] \n   (randomangleoffset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/physics 所在行数: 62"
    },
    "全局.convexHull:UNKNOWN": {
        "prefix": "convexHull",
        "body": "convexHull(${1:points})",
        "description": " ※参数: \n   (points)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 48"
    },
    "全局.GetLevelType:UNKNOWN": {
        "prefix": "GetLevelType",
        "body": "GetLevelType(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 307"
    },
    "全局.SetSkinnedOvalPortraitTexture:UNKNOWN": {
        "prefix": "g+SetSkinnedOvalPortraitTexture",
        "body": "SetSkinnedOvalPortraitTexture(${1:image_widget},${2:character},${3:skin})",
        "description": " ※参数: \n   (image_widget)<>[] \n   (character)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 11"
    },
    "全局.c_reregisterportals:UNKNOWN": {
        "prefix": "c_reregisterportals",
        "body": "c_reregisterportals(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1406"
    },
    "全局.GetFestivalEventSkinTag:UNKNOWN": {
        "prefix": "GetFestivalEventSkinTag",
        "body": "GetFestivalEventSkinTag(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1024"
    },
    "全局.RequestedLobbyCharacter:UNKNOWN": {
        "prefix": "RequestedLobbyCharacter",
        "body": "RequestedLobbyCharacter(${1:userid},${2:prefab_name},${3:skin_base},${4:clothing_body},${5:clothing_hand},${6:clothing_legs},${7:clothing_feet})",
        "description": " ※参数: \n   (userid)<>[] \n   (prefab_name)<>[] \n   (skin_base)<>[] \n   (clothing_body)<>[] \n   (clothing_hand)<>[] \n   (clothing_legs)<>[] \n   (clothing_feet)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 294"
    },
    "全局.FindWalkableOffset:UNKNOWN": {
        "prefix": "FindWalkableOffset",
        "body": "FindWalkableOffset(${1:position},${2:start_angle},${3:radius},${4:attempts},${5:check_los},${6:ignore_walls},${7:customcheckfn},${8:allow_water},${9:allow_boats})",
        "description": " ※参数: \n   (position)<>[] \n   (start_angle)<>[] \n   (radius)<>[] \n   (attempts)<>[] \n   (check_los)<>[] \n   (ignore_walls)<>[] \n   (customcheckfn)<>[] \n   (allow_water)<>[] \n   (allow_boats)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 291"
    },
    "全局.d_turfs:UNKNOWN": {
        "prefix": "d_turfs",
        "body": "d_turfs(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1016"
    },
    "全局.DoesItemHaveTag:UNKNOWN": {
        "prefix": "DoesItemHaveTag",
        "body": "DoesItemHaveTag(${1:item},${2:tag})",
        "description": " ※参数: \n   (item)<>[] \n   (tag)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 782"
    },
    "全局.GlobalInit:UNKNOWN": {
        "prefix": "GlobalInit",
        "body": "GlobalInit(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1417"
    },
    "全局.SpawnSeamlessPlayerReplacementFromSim:UNKNOWN": {
        "prefix": "SpawnSeamlessPlayerReplacementFromSim",
        "body": "SpawnSeamlessPlayerReplacementFromSim(${1:player_guid},${2:old_player_guid},${3:skin_base},${4:clothing_body},${5:clothing_hand},${6:clothing_legs},${7:clothing_feet})",
        "description": " ※参数: \n   (player_guid)<>[] \n   (old_player_guid)<>[] \n   (skin_base)<>[] \n   (clothing_body)<>[] \n   (clothing_hand)<>[] \n   (clothing_legs)<>[] \n   (clothing_feet)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 272"
    },
    "全局.SkinGridListConstructor:UNKNOWN": {
        "prefix": "SkinGridListConstructor",
        "body": "SkinGridListConstructor(${1:context},${2:parent},${3:scroll_list})",
        "description": " ※参数: \n   (context)<>[] \n   (parent)<>[] \n   (scroll_list)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 888"
    },
    "全局.ProfileStatsGet:UNKNOWN": {
        "prefix": "ProfileStatsGet",
        "body": "ProfileStatsGet(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 353"
    },
    "全局.LoadKlumpString:UNKNOWN": {
        "prefix": "LoadKlumpString",
        "body": "LoadKlumpString(${1:klump_file},${2:cipher},${3:suppress_print})",
        "description": " ※参数: \n   (klump_file)<>[] \n   (cipher)<>[] \n   (suppress_print)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/klump 所在行数: 58"
    },
    "全局.GetBasicFilters:UNKNOWN": {
        "prefix": "GetBasicFilters",
        "body": "GetBasicFilters(${1:recipe_name})",
        "description": " ※参数: \n   (recipe_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinstradeutils 所在行数: 35"
    },
    "全局.SetInstanceParameters:UNKNOWN": {
        "prefix": "SetInstanceParameters",
        "body": "SetInstanceParameters(${1:settings})",
        "description": " ※参数: \n   (settings)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 924"
    },
    "全局.RecordEventAchievementProgress:UNKNOWN": {
        "prefix": "RecordEventAchievementProgress",
        "body": "RecordEventAchievementProgress(${1:achievement},${2:src},${3:data})",
        "description": " ※参数: \n   (achievement)<>[] \n   (src)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 91"
    },
    "全局.CheckDemoTimeout:UNKNOWN": {
        "prefix": "CheckDemoTimeout",
        "body": "CheckDemoTimeout(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 57"
    },
    "全局.GetPackSavings:UNKNOWN": {
        "prefix": "GetPackSavings",
        "body": "GetPackSavings(${1:iap_def},${2:total_value},${3:sale_active})",
        "description": " ※参数: \n   (iap_def)<>[] \n   (total_value)<>[] \n   (sale_active)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 407"
    },
    "全局.yellowstaff_clear_fn:UNKNOWN": {
        "prefix": "yellowstaff_clear_fn",
        "body": "yellowstaff_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2325"
    },
    "全局.mast_malbatross_init_fn:UNKNOWN": {
        "prefix": "mast_malbatross_init_fn",
        "body": "mast_malbatross_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1979"
    },
    "全局.optstring:UNKNOWN": {
        "prefix": "optstring",
        "body": "optstring(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 12"
    },
    "全局.GetTickForTime:UNKNOWN": {
        "prefix": "GetTickForTime",
        "body": "GetTickForTime(${1:target_time})",
        "description": " ※参数: \n   (target_time)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 838"
    },
    "全局.GetOceanDepthAtPoint:UNKNOWN": {
        "prefix": "GetOceanDepthAtPoint",
        "body": "GetOceanDepthAtPoint(${1:pt})",
        "description": " ※参数: \n   (pt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 25"
    },
    "全局.GetDescription:UNKNOWN": {
        "prefix": "GetDescription",
        "body": "GetDescription(${1:inst},${2:item},${3:modifier})",
        "description": " ※参数: \n   (inst)<>[] \n   (item)<>[] \n   (modifier)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 364"
    },
    "全局.fence_init_fn:UNKNOWN": {
        "prefix": "fence_init_fn",
        "body": "fence_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1880"
    },
    "全局.DecayCharlieResidueIfItExists:UNKNOWN": {
        "prefix": "DecayCharlieResidueIfItExists",
        "body": "DecayCharlieResidueIfItExists(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 101"
    },
    "全局.critter_perdling_clear_fn:UNKNOWN": {
        "prefix": "critter_perdling_clear_fn",
        "body": "critter_perdling_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1568"
    },
    "全局.IfThenDoWhileNode:UNKNOWN": {
        "prefix": "IfThenDoWhileNode",
        "body": "IfThenDoWhileNode(${1:ifcond},${2:whilecond},${3:name},${4:node})",
        "description": " ※参数: \n   (ifcond)<>[] \n   (whilecond)<>[] \n   (name)<>[] \n   (node)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/behaviourtree 所在行数: 792"
    },
    "全局.CacheCurrentVanityItems:UNKNOWN": {
        "prefix": "CacheCurrentVanityItems",
        "body": "CacheCurrentVanityItems(${1:user_profile})",
        "description": " ※参数: \n   (user_profile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1474"
    },
    "全局.hutch_init_fn:UNKNOWN": {
        "prefix": "hutch_init_fn",
        "body": "hutch_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1222"
    },
    "全局.d_waxwellworker:UNKNOWN": {
        "prefix": "d_waxwellworker",
        "body": "d_waxwellworker(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 981"
    },
    "全局.weighted_random_choices:UNKNOWN": {
        "prefix": "weighted_random_choices",
        "body": "weighted_random_choices(${1:choices},${2:num_choices})",
        "description": " ※参数: \n   (choices)<>[] \n   (num_choices)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 730"
    },
    "全局.LoadMapFile:UNKNOWN": {
        "prefix": "LoadMapFile",
        "body": "LoadMapFile(${1:map_name})",
        "description": " ※参数: \n   (map_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1441"
    },
    "全局.d_spiders:UNKNOWN": {
        "prefix": "d_spiders",
        "body": "d_spiders(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 127"
    },
    "全局.CompareRarities:UNKNOWN": {
        "prefix": "CompareRarities",
        "body": "CompareRarities(${1:item_key_a},${2:item_key_b})",
        "description": " ※参数: \n   (item_key_a)<>[] \n   (item_key_b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 88"
    },
    "全局.CalcQuickJoinServerScore:UNKNOWN": {
        "prefix": "CalcQuickJoinServerScore",
        "body": "CalcQuickJoinServerScore(${1:server})",
        "description": " ※参数: \n   (server)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 885"
    },
    "全局.RegisterSinglePrefab:UNKNOWN": {
        "prefix": "RegisterSinglePrefab",
        "body": "RegisterSinglePrefab(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 139"
    },
    "全局.mast_item_init_fn:UNKNOWN": {
        "prefix": "mast_item_init_fn",
        "body": "mast_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1918"
    },
    "全局.dock_woodposts_clear_fn:UNKNOWN": {
        "prefix": "dock_woodposts_clear_fn",
        "body": "dock_woodposts_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2785"
    },
    "全局.removesetter:UNKNOWN": {
        "prefix": "removesetter",
        "body": "removesetter(${1:t},${2:k})",
        "description": " ※参数: \n   (t)<>[] \n   (k)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/class 所在行数: 75"
    },
    "全局.UpdateGamePurchasedState:UNKNOWN": {
        "prefix": "UpdateGamePurchasedState",
        "body": "UpdateGamePurchasedState(${1:complete_callback})",
        "description": " ※参数: \n   (complete_callback)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 11"
    },
    "全局.SetSuper:UNKNOWN": {
        "prefix": "SetSuper",
        "body": "SetSuper(${1:value})",
        "description": " ※参数: \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 396"
    },
    "全局.null:UNKNOWN": {
        "prefix": "null",
        "body": "null(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 255"
    },
    "全局.GetClientModRPC:UNKNOWN": {
        "prefix": "GetClientModRPC",
        "body": "GetClientModRPC(${1:namespace},${2:name})",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 910"
    },
    "全局.d_boatitems:UNKNOWN": {
        "prefix": "d_boatitems",
        "body": "d_boatitems(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1001"
    },
    "全局.Networking_PartyChat:UNKNOWN": {
        "prefix": "Networking_PartyChat",
        "body": "Networking_PartyChat(${1:chatline})",
        "description": " ※参数: \n   (chatline)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 996"
    },
    "全局.reviver_clear_fn:UNKNOWN": {
        "prefix": "reviver_clear_fn",
        "body": "reviver_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2086"
    },
    "全局.JoinArrays:UNKNOWN": {
        "prefix": "JoinArrays",
        "body": "JoinArrays(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 328"
    },
    "全局.trophyscale_oversizedveggies_init_fn:UNKNOWN": {
        "prefix": "trophyscale_oversizedveggies_init_fn",
        "body": "trophyscale_oversizedveggies_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2813"
    },
    "全局.WorldSettings_Spawner_SpawnDelay:UNKNOWN": {
        "prefix": "g+WorldSettings_Spawner_SpawnDelay",
        "body": "WorldSettings_Spawner_SpawnDelay(${1:inst},${2:startdelay},${3:enabled})",
        "description": " ※参数: \n   (inst)<>[] \n   (startdelay)<>[] \n   (enabled)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 193"
    },
    "全局.GetRandomMinMax:UNKNOWN": {
        "prefix": "GetRandomMinMax",
        "body": "GetRandomMinMax(${1:min},${2:max})",
        "description": " ※参数: \n   (min)<>[] \n   (max)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 532"
    },
    "全局.IsHeirloomRarity:UNKNOWN": {
        "prefix": "IsHeirloomRarity",
        "body": "IsHeirloomRarity(${1:rarity})",
        "description": " ※参数: \n   (rarity)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 106"
    },
    "全局.instrument_userdata:UNKNOWN": {
        "prefix": "instrument_userdata",
        "body": "instrument_userdata(${1:instance})",
        "description": " ※参数: \n   (instance)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 81"
    },
    "全局.RegisterStaticComponentLongUpdate:UNKNOWN": {
        "prefix": "RegisterStaticComponentLongUpdate",
        "body": "RegisterStaticComponentLongUpdate(${1:classname},${2:fn})",
        "description": " ※参数: \n   (classname)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 159"
    },
    "全局.d_reloadskilltreedefs:UNKNOWN": {
        "prefix": "d_reloadskilltreedefs",
        "body": "d_reloadskilltreedefs(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 328"
    },
    "全局.GetPackTotalItems:UNKNOWN": {
        "prefix": "GetPackTotalItems",
        "body": "GetPackTotalItems(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 176"
    },
    "全局.CreateSphereEmitter:UNKNOWN": {
        "prefix": "CreateSphereEmitter",
        "body": "CreateSphereEmitter(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 140"
    },
    "全局.GetPlayer:UNKNOWN": {
        "prefix": "GetPlayer",
        "body": "GetPlayer(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 26"
    },
    "全局.decode_scanArray:UNKNOWN": {
        "prefix": "decode_scanArray",
        "body": "decode_scanArray(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 270"
    },
    "全局.IsPackFeatured:UNKNOWN": {
        "prefix": "IsPackFeatured",
        "body": "IsPackFeatured(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 449"
    },
    "全局.RegisterTileRange:UNKNOWN": {
        "prefix": "RegisterTileRange",
        "body": "RegisterTileRange(${1:range_name},${2:range_start},${3:range_end})",
        "description": " ※参数: \n   (range_name)<>[] \n   (range_start)<>[] \n   (range_end)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 357"
    },
    "全局.GetTotalMysteryBoxCount:UNKNOWN": {
        "prefix": "GetTotalMysteryBoxCount",
        "body": "GetTotalMysteryBoxCount(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1291"
    },
    "全局.DoAutopause:UNKNOWN": {
        "prefix": "DoAutopause",
        "body": "DoAutopause(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 884"
    },
    "全局.BuildZoomBlurShader:UNKNOWN": {
        "prefix": "BuildZoomBlurShader",
        "body": "BuildZoomBlurShader(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 174"
    },
    "全局.OwnsSkinPack:UNKNOWN": {
        "prefix": "OwnsSkinPack",
        "body": "OwnsSkinPack(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 486"
    },
    "全局.SimBreakPoint:UNKNOWN": {
        "prefix": "SimBreakPoint",
        "body": "SimBreakPoint(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 95"
    },
    "全局.GetProfilerServerStats:UNKNOWN": {
        "prefix": "GetProfilerServerStats",
        "body": "GetProfilerServerStats(${1:results})",
        "description": " ※参数: \n   (results)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/perfutil 所在行数: 78"
    },
    "全局.c_maintaintemperature:UNKNOWN": {
        "prefix": "c_maintaintemperature",
        "body": "c_maintaintemperature(${1:player},${2:temp})",
        "description": " ※参数: \n   (player)<>[] \n   (temp)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1129"
    },
    "全局.str_date:UNKNOWN": {
        "prefix": "str_date",
        "body": "str_date(${1:os_time})",
        "description": " ※参数: \n   (os_time)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 501"
    },
    "全局.deepcopynometa:UNKNOWN": {
        "prefix": "deepcopynometa",
        "body": "deepcopynometa(${1:object})",
        "description": " ※参数: \n   (object)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 935"
    },
    "全局.winch_clear_fn:UNKNOWN": {
        "prefix": "winch_clear_fn",
        "body": "winch_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 266"
    },
    "全局.HandleUpsellClose:UNKNOWN": {
        "prefix": "HandleUpsellClose",
        "body": "HandleUpsellClose(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 66"
    },
    "全局.molehat_clear_fn:UNKNOWN": {
        "prefix": "molehat_clear_fn",
        "body": "molehat_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2761"
    },
    "全局.wall_ruins_init_fn:UNKNOWN": {
        "prefix": "wall_ruins_init_fn",
        "body": "wall_ruins_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1811"
    },
    "全局.deepcopy:UNKNOWN": {
        "prefix": "deepcopy",
        "body": "deepcopy(${1:object})",
        "description": " ※参数: \n   (object)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 900"
    },
    "全局.MakeHauntableLaunchAndIgnite:UNKNOWN": {
        "prefix": "MakeHauntableLaunchAndIgnite",
        "body": "MakeHauntableLaunchAndIgnite(${1:inst},${2:launchchance},${3:ignitechance},${4:speed},${5:cooldown},${6:launch_haunt_value},${7:ignite_haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (launchchance)<>[] \n   (ignitechance)<>[] \n   (speed)<>[] \n   (cooldown)<>[] \n   (launch_haunt_value)<>[] \n   (ignite_haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 973"
    },
    "全局.mast_init_fn:UNKNOWN": {
        "prefix": "mast_init_fn",
        "body": "mast_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1927"
    },
    "全局.HexToRGB:UNKNOWN": {
        "prefix": "HexToRGB",
        "body": "HexToRGB(${1:hex})",
        "description": " ※参数: \n   (hex)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1572"
    },
    "全局.GetClosestNodeToPlayer:UNKNOWN": {
        "prefix": "GetClosestNodeToPlayer",
        "body": "GetClosestNodeToPlayer(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 30"
    },
    "全局.Dist2dSq:UNKNOWN": {
        "prefix": "Dist2dSq",
        "body": "Dist2dSq(${1:p1},${2:p2})",
        "description": " ※参数: \n   (p1)<>[] \n   (p2)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1593"
    },
    "全局.d_spawnfilelist:UNKNOWN": {
        "prefix": "d_spawnfilelist",
        "body": "d_spawnfilelist(${1:filename},${2:spacing})",
        "description": " ※参数: \n   (filename)<>[] \n   (spacing)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1551"
    },
    "全局.d_skilltreestats:UNKNOWN": {
        "prefix": "d_skilltreestats",
        "body": "d_skilltreestats(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1796"
    },
    "全局.generic_error:UNKNOWN": {
        "prefix": "generic_error",
        "body": "generic_error(${1:err})",
        "description": " ※参数: \n   (err)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1773"
    },
    "全局.c_groundtype:UNKNOWN": {
        "prefix": "c_groundtype",
        "body": "c_groundtype(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1056"
    },
    "全局.MakeLargeBurnableCharacter:UNKNOWN": {
        "prefix": "MakeLargeBurnableCharacter",
        "body": "MakeLargeBurnableCharacter(${1:inst},${2:sym},${3:offset},${4:scale})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 266"
    },
    "全局.MakeTinyFlyingCharacterPhysics:UNKNOWN": {
        "prefix": "MakeTinyFlyingCharacterPhysics",
        "body": "MakeTinyFlyingCharacterPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 427"
    },
    "全局.GetGameModeString:UNKNOWN": {
        "prefix": "GetGameModeString",
        "body": "GetGameModeString(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 245"
    },
    "全局.CheckFiles:UNKNOWN": {
        "prefix": "CheckFiles",
        "body": "CheckFiles(${1:cb},${2:files})",
        "description": " ※参数: \n   (cb)<>[] \n   (files)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/fileutil 所在行数: 54"
    },
    "全局.DoesPackHaveBelongings:UNKNOWN": {
        "prefix": "DoesPackHaveBelongings",
        "body": "DoesPackHaveBelongings(${1:pack_key})",
        "description": " ※参数: \n   (pack_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 520"
    },
    "全局.GetEntityDisplayName:UNKNOWN": {
        "prefix": "GetEntityDisplayName",
        "body": "GetEntityDisplayName(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 527"
    },
    "全局.OnEntityWake:UNKNOWN": {
        "prefix": "OnEntityWake",
        "body": "OnEntityWake(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 673"
    },
    "全局.LoadPrefabFile:UNKNOWN": {
        "prefix": "LoadPrefabFile",
        "body": "LoadPrefabFile(${1:filename},${2:async_batch_validation},${3:search_asset_first_path})",
        "description": " ※参数: \n   (filename)<>[] \n   (async_batch_validation)<>[] \n   (search_asset_first_path)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 145"
    },
    "全局.ShowBadHashUI:UNKNOWN": {
        "prefix": "ShowBadHashUI",
        "body": "ShowBadHashUI(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2269"
    },
    "全局.Networking_PartyInvite:UNKNOWN": {
        "prefix": "Networking_PartyInvite",
        "body": "Networking_PartyInvite(${1:inviter},${2:partyid})",
        "description": " ※参数: \n   (inviter)<>[] \n   (partyid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 968"
    },
    "全局.d_recipecards:UNKNOWN": {
        "prefix": "d_recipecards",
        "body": "d_recipecards(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1535"
    },
    "全局.hutch_fishbowl_init_fn:UNKNOWN": {
        "prefix": "hutch_fishbowl_init_fn",
        "body": "hutch_fishbowl_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1206"
    },
    "全局.RailUserCommandInject:UNKNOWN": {
        "prefix": "RailUserCommandInject",
        "body": "RailUserCommandInject(${1:name},${2:displayname},${3:displayparams},${4:extra_alias})",
        "description": " ※参数: \n   (name)<>[] \n   (displayname)<>[] \n   (displayparams)<>[] \n   (extra_alias)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 530"
    },
    "全局.GetDebugTable:UNKNOWN": {
        "prefix": "GetDebugTable",
        "body": "GetDebugTable(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 636"
    },
    "全局.VecUtil_DistSq:UNKNOWN": {
        "prefix": "VecUtil_DistSq",
        "body": "VecUtil_DistSq(${1:p1_x},${2:p1_z},${3:p2_x},${4:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 23"
    },
    "全局.GetString:UNKNOWN": {
        "prefix": "GetString",
        "body": "GetString(${1:inst},${2:stringtype},${3:modifier},${4:nil_missing})",
        "description": " ※参数: \n   (inst)<>[] \n   (stringtype)<>[] \n   (modifier)<>[] \n   (nil_missing)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 265"
    },
    "全局.GrabSubGraphAroundNode:UNKNOWN": {
        "prefix": "GrabSubGraphAroundNode",
        "body": "GrabSubGraphAroundNode(${1:node},${2:numnodes})",
        "description": " ※参数: \n   (node)<>[] \n   (numnodes)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 81"
    },
    "全局.SetDebugTable:UNKNOWN": {
        "prefix": "SetDebugTable",
        "body": "SetDebugTable(${1:tbl})",
        "description": " ※参数: \n   (tbl)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 640"
    },
    "全局.GetTypeForItem:UNKNOWN": {
        "prefix": "GetTypeForItem",
        "body": "GetTypeForItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 764"
    },
    "全局.Shard_OnShardConnected:UNKNOWN": {
        "prefix": "Shard_OnShardConnected",
        "body": "Shard_OnShardConnected(${1:world_id},${2:tags},${3:world_data})",
        "description": " ※参数: \n   (world_id)<>[] \n   (tags)<>[] \n   (world_data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 43"
    },
    "全局.d_statues:UNKNOWN": {
        "prefix": "d_statues",
        "body": "d_statues(${1:material})",
        "description": " ※参数: \n   (material)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1463"
    },
    "全局.ProfileStatsAppendToField:UNKNOWN": {
        "prefix": "ProfileStatsAppendToField",
        "body": "ProfileStatsAppendToField(${1:field},${2:value})",
        "description": " ※参数: \n   (field)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 383"
    },
    "全局.GetPopupFromPopupCode:UNKNOWN": {
        "prefix": "GetPopupFromPopupCode",
        "body": "GetPopupFromPopupCode(${1:popupcode},${2:mod_name})",
        "description": " ※参数: \n   (popupcode)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/popupmanager 所在行数: 47"
    },
    "全局.MergeMapsDeep:UNKNOWN": {
        "prefix": "MergeMapsDeep",
        "body": "MergeMapsDeep(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 405"
    },
    "全局.GetProfilerPlayers:UNKNOWN": {
        "prefix": "GetProfilerPlayers",
        "body": "GetProfilerPlayers(${1:results})",
        "description": " ※参数: \n   (results)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/perfutil 所在行数: 60"
    },
    "全局.HideCancelTip:UNKNOWN": {
        "prefix": "HideCancelTip",
        "body": "HideCancelTip(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 162"
    },
    "全局.GetResetTime:UNKNOWN": {
        "prefix": "GetResetTime",
        "body": "GetResetTime(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 298"
    },
    "全局.c_printpos:UNKNOWN": {
        "prefix": "c_printpos",
        "body": "c_printpos(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 576"
    },
    "全局.debuglocals:UNKNOWN": {
        "prefix": "debuglocals",
        "body": "debuglocals(${1:level})",
        "description": " ※参数: \n   (level)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 93"
    },
    "全局.d_riftspawns:UNKNOWN": {
        "prefix": "d_riftspawns",
        "body": "d_riftspawns(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 220"
    },
    "全局.c_startvote:UNKNOWN": {
        "prefix": "c_startvote",
        "body": "c_startvote(${1:commandname},${2:playeroruserid})",
        "description": " ※参数: \n   (commandname)<>[] \n   (playeroruserid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1425"
    },
    "全局.researchlab2_init_fn:UNKNOWN": {
        "prefix": "researchlab2_init_fn",
        "body": "researchlab2_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2599"
    },
    "全局.SetGlobalErrorWidget:UNKNOWN": {
        "prefix": "SetGlobalErrorWidget",
        "body": "SetGlobalErrorWidget(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 56"
    },
    "全局.GetDebugString:UNKNOWN": {
        "prefix": "GetDebugString",
        "body": "GetDebugString(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 198"
    },
    "全局.RunScript:UNKNOWN": {
        "prefix": "RunScript",
        "body": "RunScript(${1:filename})",
        "description": " ※参数: \n   (filename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 191"
    },
    "全局.d_lunarrift:UNKNOWN": {
        "prefix": "d_lunarrift",
        "body": "d_lunarrift(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 236"
    },
    "全局.lureplantbulb_clear_fn:UNKNOWN": {
        "prefix": "lureplantbulb_clear_fn",
        "body": "lureplantbulb_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1032"
    },
    "全局.ConcatArrays:UNKNOWN": {
        "prefix": "ConcatArrays",
        "body": "ConcatArrays(${1:ret},${2:...})",
        "description": " ※参数: \n   (ret)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 317"
    },
    "全局.MakeDragonflyBait:UNKNOWN": {
        "prefix": "MakeDragonflyBait",
        "body": "MakeDragonflyBait(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 825"
    },
    "全局.IsPackClothingOnly:UNKNOWN": {
        "prefix": "IsPackClothingOnly",
        "body": "IsPackClothingOnly(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 417"
    },
    "全局.GetStackSize:UNKNOWN": {
        "prefix": "GetStackSize",
        "body": "GetStackSize(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 22"
    },
    "全局.c_removeat:UNKNOWN": {
        "prefix": "c_removeat",
        "body": "c_removeat(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1245"
    },
    "全局.Shard_SyncMermKingCrown:UNKNOWN": {
        "prefix": "Shard_SyncMermKingCrown",
        "body": "Shard_SyncMermKingCrown(${1:exists},${2:shardid})",
        "description": " ※参数: \n   (exists)<>[] \n   (shardid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 243"
    },
    "全局.orderedNext:UNKNOWN": {
        "prefix": "orderedNext",
        "body": "orderedNext(${1:t},${2:state})",
        "description": " ※参数: \n   (t)<>[] \n   (state)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1625"
    },
    "全局.portablecookpot_item_clear_fn:UNKNOWN": {
        "prefix": "portablecookpot_item_clear_fn",
        "body": "portablecookpot_item_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1354"
    },
    "全局.cleartable:UNKNOWN": {
        "prefix": "cleartable",
        "body": "cleartable(${1:object})",
        "description": " ※参数: \n   (object)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 953"
    },
    "全局.metanext:UNKNOWN": {
        "prefix": "metanext",
        "body": "metanext(${1:t},${2:k},${3:...})",
        "description": " ※参数: \n   (t)<>[] \n   (k)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1662"
    },
    "全局.ipairs_reverse:UNKNOWN": {
        "prefix": "ipairs_reverse",
        "body": "ipairs_reverse(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 212"
    },
    "全局.clearbit:UNKNOWN": {
        "prefix": "clearbit",
        "body": "clearbit(${1:x},${2:b})",
        "description": " ※参数: \n   (x)<>[] \n   (b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1443"
    },
    "全局.fence_gate_item_init_fn:UNKNOWN": {
        "prefix": "fence_gate_item_init_fn",
        "body": "fence_gate_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1893"
    },
    "全局.GetActiveCharacterList:UNKNOWN": {
        "prefix": "GetActiveCharacterList",
        "body": "GetActiveCharacterList(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 101"
    },
    "全局.AddModShadersInit:UNKNOWN": {
        "prefix": "AddModShadersInit",
        "body": "AddModShadersInit(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 545"
    },
    "全局.MarkUserIDRPC:UNKNOWN": {
        "prefix": "MarkUserIDRPC",
        "body": "MarkUserIDRPC(${1:namespace},${2:name})",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1607"
    },
    "全局.c_goto:UNKNOWN": {
        "prefix": "c_goto",
        "body": "c_goto(${1:dest},${2:inst})",
        "description": " ※参数: \n   (dest)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 599"
    },
    "全局.Umlautify:UNKNOWN": {
        "prefix": "Umlautify",
        "body": "Umlautify(${1:string})",
        "description": " ※参数: \n   (string)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 190"
    },
    "全局.Shard_IsWorldFull:UNKNOWN": {
        "prefix": "Shard_IsWorldFull",
        "body": "Shard_IsWorldFull(${1:world_id})",
        "description": " ※参数: \n   (world_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 20"
    },
    "全局.AddModUserCommand:UNKNOWN": {
        "prefix": "AddModUserCommand",
        "body": "AddModUserCommand(${1:mod},${2:name},${3:data})",
        "description": " ※参数: \n   (mod)<>[] \n   (name)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 559"
    },
    "全局.c_stopvote:UNKNOWN": {
        "prefix": "c_stopvote",
        "body": "c_stopvote(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1438"
    },
    "全局.StringContainsAnyInArray:UNKNOWN": {
        "prefix": "StringContainsAnyInArray",
        "body": "StringContainsAnyInArray(${1:input},${2:array})",
        "description": " ※参数: \n   (input)<>[] \n   (array)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 383"
    },
    "全局.GetFarmTillSpacing:UNKNOWN": {
        "prefix": "GetFarmTillSpacing",
        "body": "GetFarmTillSpacing(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 315"
    },
    "全局.fastdump:UNKNOWN": {
        "prefix": "fastdump",
        "body": "fastdump(${1:value})",
        "description": " ※参数: \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 967"
    },
    "全局.d_printscrapbookrepairmaterialsdata:UNKNOWN": {
        "prefix": "d_printscrapbookrepairmaterialsdata",
        "body": "d_printscrapbookrepairmaterialsdata(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 2401"
    },
    "全局.MakeAllSuffixes:UNKNOWN": {
        "prefix": "MakeAllSuffixes",
        "body": "MakeAllSuffixes(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport_strings 所在行数: 49"
    },
    "全局.d_allmutators:UNKNOWN": {
        "prefix": "d_allmutators",
        "body": "d_allmutators(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 70"
    },
    "全局.OnPlayerLeave:UNKNOWN": {
        "prefix": "OnPlayerLeave",
        "body": "OnPlayerLeave(${1:player_guid},${2:expected})",
        "description": " ※参数: \n   (player_guid)<>[] \n   (expected)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1731"
    },
    "全局.checkuint:UNKNOWN": {
        "prefix": "checkuint",
        "body": "checkuint(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 6"
    },
    "全局.GetUniquePotentialCharacterStartingInventoryItems:UNKNOWN": {
        "prefix": "g+GetUniquePotentialCharacterStartingInventoryItems",
        "body": "GetUniquePotentialCharacterStartingInventoryItems(${1:character},${2:with_bonus_items})",
        "description": " ※参数: \n   (character)<>[] \n   (with_bonus_items)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 127"
    },
    "全局.metarawset:UNKNOWN": {
        "prefix": "metarawset",
        "body": "metarawset(${1:t},${2:k},${3:v})",
        "description": " ※参数: \n   (t)<>[] \n   (k)<>[] \n   (v)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1680"
    },
    "全局.c_kitcoon:UNKNOWN": {
        "prefix": "c_kitcoon",
        "body": "c_kitcoon(${1:name},${2:age},${3:build})",
        "description": " ※参数: \n   (name)<>[] \n   (age)<>[] \n   (build)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 641"
    },
    "全局.IsAnyPlayerInRange:UNKNOWN": {
        "prefix": "IsAnyPlayerInRange",
        "body": "IsAnyPlayerInRange(${1:x},${2:y},${3:z},${4:range},${5:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (range)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 139"
    },
    "全局.DumpEntity:UNKNOWN": {
        "prefix": "DumpEntity",
        "body": "DumpEntity(${1:ent})",
        "description": " ※参数: \n   (ent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debughelpers 所在行数: 20"
    },
    "全局.firesuppressor_clear_fn:UNKNOWN": {
        "prefix": "firesuppressor_clear_fn",
        "body": "firesuppressor_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1392"
    },
    "全局.c_listtag:UNKNOWN": {
        "prefix": "c_listtag",
        "body": "c_listtag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 632"
    },
    "全局.__genOrderedIndex:UNKNOWN": {
        "prefix": "__genOrderedIndex",
        "body": "__genOrderedIndex(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1616"
    },
    "全局.DecodeAndUnzipSaveData:UNKNOWN": {
        "prefix": "DecodeAndUnzipSaveData",
        "body": "DecodeAndUnzipSaveData(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1709"
    },
    "全局.c_listplayers:UNKNOWN": {
        "prefix": "c_listplayers",
        "body": "c_listplayers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 279"
    },
    "全局.c_tile:UNKNOWN": {
        "prefix": "c_tile",
        "body": "c_tile(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 313"
    },
    "全局.IOprint:UNKNOWN": {
        "prefix": "IOprint",
        "body": "IOprint(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 275"
    },
    "全局.d_test_skins_popup:UNKNOWN": {
        "prefix": "d_test_skins_popup",
        "body": "d_test_skins_popup(${1:param})",
        "description": " ※参数: \n   (param)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 562"
    },
    "全局.DisableLoadingProtection:UNKNOWN": {
        "prefix": "DisableLoadingProtection",
        "body": "DisableLoadingProtection(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 800"
    },
    "全局.DisableRPCSending:UNKNOWN": {
        "prefix": "DisableRPCSending",
        "body": "DisableRPCSending(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1624"
    },
    "全局.mast_clear_fn:UNKNOWN": {
        "prefix": "mast_clear_fn",
        "body": "mast_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1933"
    },
    "全局.c_gotoroom:UNKNOWN": {
        "prefix": "c_gotoroom",
        "body": "c_gotoroom(${1:roomname},${2:inst})",
        "description": " ※参数: \n   (roomname)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 667"
    },
    "全局.HasNewSkinDLCEntitlements:UNKNOWN": {
        "prefix": "HasNewSkinDLCEntitlements",
        "body": "HasNewSkinDLCEntitlements(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1642"
    },
    "全局.StartNextInstance:UNKNOWN": {
        "prefix": "StartNextInstance",
        "body": "StartNextInstance(${1:in_params})",
        "description": " ※参数: \n   (in_params)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1462"
    },
    "全局.Launch:UNKNOWN": {
        "prefix": "Launch",
        "body": "Launch(${1:inst},${2:launcher},${3:basespeed})",
        "description": " ※参数: \n   (inst)<>[] \n   (launcher)<>[] \n   (basespeed)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/physics 所在行数: 19"
    },
    "全局.NotifyPlayerPresence:UNKNOWN": {
        "prefix": "NotifyPlayerPresence",
        "body": "NotifyPlayerPresence(${1:name},${2:level},${3:days},${4:player})",
        "description": " ※参数: \n   (name)<>[] \n   (level)<>[] \n   (days)<>[] \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 303"
    },
    "全局.c_teleport:UNKNOWN": {
        "prefix": "c_teleport",
        "body": "c_teleport(${1:x},${2:y},${3:z},${4:inst})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 580"
    },
    "全局.Shard_WorldSave:UNKNOWN": {
        "prefix": "Shard_WorldSave",
        "body": "Shard_WorldSave(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 137"
    },
    "全局.isinf:UNKNOWN": {
        "prefix": "isinf",
        "body": "isinf(${1:x})",
        "description": " ※参数: \n   (x)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 676"
    },
    "全局.ProxyInstance:UNKNOWN": {
        "prefix": "ProxyInstance",
        "body": "ProxyInstance(${1:obj})",
        "description": " ※参数: \n   (obj)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/entityscriptproxy 所在行数: 58"
    },
    "全局.c_removeall:UNKNOWN": {
        "prefix": "c_removeall",
        "body": "c_removeall(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1252"
    },
    "全局.IsModCookingProduct:UNKNOWN": {
        "prefix": "IsModCookingProduct",
        "body": "IsModCookingProduct(${1:cooker},${2:name})",
        "description": " ※参数: \n   (cooker)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/cooking 所在行数: 74"
    },
    "全局.d_require:UNKNOWN": {
        "prefix": "d_require",
        "body": "d_require(${1:file})",
        "description": " ※参数: \n   (file)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3485"
    },
    "全局.Vec3Util_Length:UNKNOWN": {
        "prefix": "Vec3Util_Length",
        "body": "Vec3Util_Length(${1:p1_x},${2:p1_y},${3:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 19"
    },
    "全局.DisplayCharacterUnownedPopup:UNKNOWN": {
        "prefix": "DisplayCharacterUnownedPopup",
        "body": "DisplayCharacterUnownedPopup(${1:character},${2:skins_subscreener})",
        "description": " ※参数: \n   (character)<>[] \n   (skins_subscreener)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1694"
    },
    "全局.DrawLine:UNKNOWN": {
        "prefix": "DrawLine",
        "body": "DrawLine(${1:pos1},${2:pos2})",
        "description": " ※参数: \n   (pos1)<>[] \n   (pos2)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 394"
    },
    "全局.c_rollback:UNKNOWN": {
        "prefix": "c_rollback",
        "body": "c_rollback(${1:count})",
        "description": " ※参数: \n   (count)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 116"
    },
    "全局.c_setinspiration:UNKNOWN": {
        "prefix": "c_setinspiration",
        "body": "c_setinspiration(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 380"
    },
    "全局.GetPurchasePackDisplayItems:UNKNOWN": {
        "prefix": "GetPurchasePackDisplayItems",
        "body": "GetPurchasePackDisplayItems(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 511"
    },
    "全局.GetSkilltreeBG:UNKNOWN": {
        "prefix": "GetSkilltreeBG",
        "body": "GetSkilltreeBG(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 745"
    },
    "全局.ShowWalkableGrid:UNKNOWN": {
        "prefix": "ShowWalkableGrid",
        "body": "ShowWalkableGrid(${1:graph})",
        "description": " ※参数: \n   (graph)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 184"
    },
    "全局.ShowClosestNodeToPlayer:UNKNOWN": {
        "prefix": "ShowClosestNodeToPlayer",
        "body": "ShowClosestNodeToPlayer(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 35"
    },
    "全局.ocean_trawler_init_fn:UNKNOWN": {
        "prefix": "ocean_trawler_init_fn",
        "body": "ocean_trawler_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 270"
    },
    "全局.JoinServerFilter:UNKNOWN": {
        "prefix": "JoinServerFilter",
        "body": "JoinServerFilter(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 881"
    },
    "全局.d_skin_name:UNKNOWN": {
        "prefix": "d_skin_name",
        "body": "d_skin_name(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 596"
    },
    "全局.mast_malbatross_item_init_fn:UNKNOWN": {
        "prefix": "mast_malbatross_item_init_fn",
        "body": "mast_malbatross_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1970"
    },
    "全局.c_dumpseasons:UNKNOWN": {
        "prefix": "c_dumpseasons",
        "body": "c_dumpseasons(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 967"
    },
    "全局.GetClosest:UNKNOWN": {
        "prefix": "GetClosest",
        "body": "GetClosest(${1:target},${2:entities})",
        "description": " ※参数: \n   (target)<>[] \n   (entities)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 33"
    },
    "全局.LookupPlayerInstByUserID:UNKNOWN": {
        "prefix": "LookupPlayerInstByUserID",
        "body": "LookupPlayerInstByUserID(${1:userid})",
        "description": " ※参数: \n   (userid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 915"
    },
    "全局.gemsocket_init_fn:UNKNOWN": {
        "prefix": "gemsocket_init_fn",
        "body": "gemsocket_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2742"
    },
    "全局.MakeLargeBurnableCorpse:UNKNOWN": {
        "prefix": "MakeLargeBurnableCorpse",
        "body": "MakeLargeBurnableCorpse(${1:inst},${2:time},${3:sym},${4:offset},${5:scale})",
        "description": " ※参数: \n   (inst)<>[] \n   (time)<>[] \n   (sym)<>[] \n   (offset)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 305"
    },
    "全局.GroundAtlas:UNKNOWN": {
        "prefix": "GroundAtlas",
        "body": "GroundAtlas(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldtiledefs 所在行数: 11"
    },
    "全局.MakeLargePropagator:UNKNOWN": {
        "prefix": "MakeLargePropagator",
        "body": "MakeLargePropagator(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 225"
    },
    "全局.FindNearbyLand:UNKNOWN": {
        "prefix": "FindNearbyLand",
        "body": "FindNearbyLand(${1:position},${2:range})",
        "description": " ※参数: \n   (position)<>[] \n   (range)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 170"
    },
    "全局.OnSimUnpaused:UNKNOWN": {
        "prefix": "OnSimUnpaused",
        "body": "OnSimUnpaused(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 900"
    },
    "全局.GetMysteryBoxCounts:UNKNOWN": {
        "prefix": "GetMysteryBoxCounts",
        "body": "GetMysteryBoxCounts(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1273"
    },
    "全局.Networking_BanAnnouncement:UNKNOWN": {
        "prefix": "Networking_BanAnnouncement",
        "body": "Networking_BanAnnouncement(${1:name},${2:colour})",
        "description": " ※参数: \n   (name)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 103"
    },
    "全局.PostUpdate:UNKNOWN": {
        "prefix": "PostUpdate",
        "body": "PostUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 142"
    },
    "全局.ClearClientRequestedAction:UNKNOWN": {
        "prefix": "ClearClientRequestedAction",
        "body": "ClearClientRequestedAction(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/actions 所在行数: 187"
    },
    "全局.d_testruins:UNKNOWN": {
        "prefix": "d_testruins",
        "body": "d_testruins(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 455"
    },
    "全局.FindClosestEntity:UNKNOWN": {
        "prefix": "FindClosestEntity",
        "body": "FindClosestEntity(${1:inst},${2:radius},${3:ignoreheight},${4:musttags},${5:canttags},${6:mustoneoftags},${7:fn})",
        "description": " ※参数: \n   (inst)<>[] \n   (radius)<>[] \n   (ignoreheight)<>[] \n   (musttags)<>[] \n   (canttags)<>[] \n   (mustoneoftags)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 44"
    },
    "全局.ConsoleWorldPosition:获取指针位置的世界坐标(客户端)": {
        "prefix": "ConsoleWorldPosition",
        "body": "ConsoleWorldPosition()",
        "description": " ※参数: \n ※返回: <V3>[指针位置的世界坐标] \n ※说明: 获取指针位置的世界坐标(客户端)\n ※贡献者: @lan(若需要服务器知悉该坐标,则需要发RPC等方法,注意返回的是Vector3,可用:Get()方法来获取x,y,z)\n ※路径: scripts/consolecommands 所在行数: 6"
    },
    "全局.d_cookbook:UNKNOWN": {
        "prefix": "d_cookbook",
        "body": "d_cookbook(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1450"
    },
    "全局.IsPaused:UNKNOWN": {
        "prefix": "IsPaused",
        "body": "IsPaused(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 827"
    },
    "全局.chester_eyebone_init_fn:UNKNOWN": {
        "prefix": "chester_eyebone_init_fn",
        "body": "chester_eyebone_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1177"
    },
    "全局.OnRemoveEntity:UNKNOWN": {
        "prefix": "OnRemoveEntity",
        "body": "OnRemoveEntity(${1:entityguid})",
        "description": " ※参数: \n   (entityguid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 475"
    },
    "全局.UserToName:UNKNOWN": {
        "prefix": "UserToName",
        "body": "UserToName(${1:input})",
        "description": " ※参数: \n   (input)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 641"
    },
    "全局.d_togglelunarhail:UNKNOWN": {
        "prefix": "d_togglelunarhail",
        "body": "d_togglelunarhail(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 359"
    },
    "全局.MakeDeployableFertilizer:UNKNOWN": {
        "prefix": "MakeDeployableFertilizer",
        "body": "MakeDeployableFertilizer(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1591"
    },
    "全局.Server_IsTournamentActive:UNKNOWN": {
        "prefix": "Server_IsTournamentActive",
        "body": "Server_IsTournamentActive(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1067"
    },
    "全局.icebox_init_fn:UNKNOWN": {
        "prefix": "icebox_init_fn",
        "body": "icebox_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2679"
    },
    "全局.mastupgrade_lamp_item_init_fn:UNKNOWN": {
        "prefix": "mastupgrade_lamp_item_init_fn",
        "body": "mastupgrade_lamp_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1721"
    },
    "全局.OnDynamicCloudSyncReload:UNKNOWN": {
        "prefix": "OnDynamicCloudSyncReload",
        "body": "OnDynamicCloudSyncReload(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1720"
    },
    "全局.WorldSettings_Pickable_RegenTime:UNKNOWN": {
        "prefix": "g+WorldSettings_Pickable_RegenTime",
        "body": "WorldSettings_Pickable_RegenTime(${1:inst},${2:regentime},${3:enabled})",
        "description": " ※参数: \n   (inst)<>[] \n   (regentime)<>[] \n   (enabled)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 252"
    },
    "全局.RegisterSkilltreeBGAtlas:UNKNOWN": {
        "prefix": "RegisterSkilltreeBGAtlas",
        "body": "RegisterSkilltreeBGAtlas(${1:atlas},${2:imagename})",
        "description": " ※参数: \n   (atlas)<>[] \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 721"
    },
    "全局.Client_IsTournamentActive:UNKNOWN": {
        "prefix": "Client_IsTournamentActive",
        "body": "Client_IsTournamentActive(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1072"
    },
    "全局.ApplyLocalWordFilter:UNKNOWN": {
        "prefix": "ApplyLocalWordFilter",
        "body": "ApplyLocalWordFilter(${1:text},${2:text_filter_context},${3:net_id})",
        "description": " ※参数: \n   (text)<>[] \n   (text_filter_context)<>[] \n   (net_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1720"
    },
    "全局.ApplySpecialEvent:UNKNOWN": {
        "prefix": "ApplySpecialEvent",
        "body": "ApplySpecialEvent(${1:event})",
        "description": " ※参数: \n   (event)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 582"
    },
    "全局.IsItemInCollection:UNKNOWN": {
        "prefix": "IsItemInCollection",
        "body": "IsItemInCollection(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1139"
    },
    "全局.OnMouseButton:UNKNOWN": {
        "prefix": "OnMouseButton",
        "body": "OnMouseButton(${1:button},${2:is_up},${3:x},${4:y})",
        "description": " ※参数: \n   (button)<>[] \n   (is_up)<>[] \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 437"
    },
    "全局.GetTimeReal:UNKNOWN": {
        "prefix": "GetTimeReal",
        "body": "GetTimeReal(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 175"
    },
    "全局.CopySkinsList:UNKNOWN": {
        "prefix": "CopySkinsList",
        "body": "CopySkinsList(${1:list})",
        "description": " ※参数: \n   (list)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1113"
    },
    "全局.FindClosestPlayerToInstOnLand:UNKNOWN": {
        "prefix": "FindClosestPlayerToInstOnLand",
        "body": "FindClosestPlayerToInstOnLand(${1:inst},${2:range},${3:isalive})",
        "description": " ※参数: \n   (inst)<>[] \n   (range)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 107"
    },
    "全局.SpawnAt:UNKNOWN": {
        "prefix": "SpawnAt",
        "body": "SpawnAt(${1:prefab},${2:loc},${3:scale},${4:offset})",
        "description": " ※参数: \n   (prefab)<>[] \n   (loc)<>[] \n   (scale)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 51"
    },
    "全局.Networking_VoteAnnouncement:UNKNOWN": {
        "prefix": "Networking_VoteAnnouncement",
        "body": "Networking_VoteAnnouncement(${1:commandid},${2:targetname},${3:passed})",
        "description": " ※参数: \n   (commandid)<>[] \n   (targetname)<>[] \n   (passed)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 122"
    },
    "全局.d_testsound:UNKNOWN": {
        "prefix": "d_testsound",
        "body": "d_testsound(${1:soundpath},${2:loopname},${3:volume})",
        "description": " ※参数: \n   (soundpath)<>[] \n   (loopname)<>[] \n   (volume)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3648"
    },
    "全局.d_spawn_ds:UNKNOWN": {
        "prefix": "d_spawn_ds",
        "body": "d_spawn_ds(${1:prefab},${2:scenario})",
        "description": " ※参数: \n   (prefab)<>[] \n   (scenario)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 528"
    },
    "全局.d_craftingstations:UNKNOWN": {
        "prefix": "d_craftingstations",
        "body": "d_craftingstations(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1516"
    },
    "全局.AddModShadersSortAndEnable:UNKNOWN": {
        "prefix": "AddModShadersSortAndEnable",
        "body": "AddModShadersSortAndEnable(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 551"
    },
    "全局.d_test_skins_gift:UNKNOWN": {
        "prefix": "d_test_skins_gift",
        "body": "d_test_skins_gift(${1:param})",
        "description": " ※参数: \n   (param)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 569"
    },
    "全局.d_unlockscrapbook:UNKNOWN": {
        "prefix": "d_unlockscrapbook",
        "body": "d_unlockscrapbook(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3344"
    },
    "全局.anchor_item_init_fn:UNKNOWN": {
        "prefix": "anchor_item_init_fn",
        "body": "anchor_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1698"
    },
    "全局.BuildMoonPulseGradingShader:UNKNOWN": {
        "prefix": "BuildMoonPulseGradingShader",
        "body": "BuildMoonPulseGradingShader(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 247"
    },
    "全局.anchor_clear_fn:UNKNOWN": {
        "prefix": "anchor_clear_fn",
        "body": "anchor_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1714"
    },
    "全局.mastupgrade_lightningrod_top_init_fn:UNKNOWN": {
        "prefix": "mastupgrade_lightningrod_top_init_fn",
        "body": "mastupgrade_lightningrod_top_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1763"
    },
    "全局.checkbool:UNKNOWN": {
        "prefix": "checkbool",
        "body": "checkbool(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 4"
    },
    "全局.d_gofishing:UNKNOWN": {
        "prefix": "d_gofishing",
        "body": "d_gofishing(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1150"
    },
    "全局.FindCharlieRezSpotFor:UNKNOWN": {
        "prefix": "FindCharlieRezSpotFor",
        "body": "FindCharlieRezSpotFor(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 327"
    },
    "全局.c_dump:UNKNOWN": {
        "prefix": "c_dump",
        "body": "c_dump(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 959"
    },
    "全局.MakeHauntableWorkAndIgnite:UNKNOWN": {
        "prefix": "MakeHauntableWorkAndIgnite",
        "body": "MakeHauntableWorkAndIgnite(${1:inst},${2:work_chance},${3:ignite_chance},${4:cooldown},${5:work_haunt_value},${6:ignite_haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (work_chance)<>[] \n   (ignite_chance)<>[] \n   (cooldown)<>[] \n   (work_haunt_value)<>[] \n   (ignite_haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 906"
    },
    "全局.d_testhashes_random:UNKNOWN": {
        "prefix": "d_testhashes_random",
        "body": "d_testhashes_random(${1:bitswanted},${2:tests})",
        "description": " ※参数: \n   (bitswanted)<>[] \n   (tests)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3440"
    },
    "全局.OnInputText:UNKNOWN": {
        "prefix": "OnInputText",
        "body": "OnInputText(${1:text})",
        "description": " ※参数: \n   (text)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 449"
    },
    "全局.checknumber:UNKNOWN": {
        "prefix": "checknumber",
        "body": "checknumber(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 5"
    },
    "全局.d_combatsimulator:UNKNOWN": {
        "prefix": "d_combatsimulator",
        "body": "d_combatsimulator(${1:prefab},${2:count},${3:force})",
        "description": " ※参数: \n   (prefab)<>[] \n   (count)<>[] \n   (force)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 497"
    },
    "全局.mast_item_clear_fn:UNKNOWN": {
        "prefix": "mast_item_clear_fn",
        "body": "mast_item_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1923"
    },
    "全局.c_summondeerclops:UNKNOWN": {
        "prefix": "c_summondeerclops",
        "body": "c_summondeerclops(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1016"
    },
    "全局.global:UNKNOWN": {
        "prefix": "global",
        "body": "global(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/strict 所在行数: 28"
    },
    "全局.mast_malbatross_clear_fn:UNKNOWN": {
        "prefix": "mast_malbatross_clear_fn",
        "body": "mast_malbatross_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1985"
    },
    "全局.GetIsSpawnModeFixed:UNKNOWN": {
        "prefix": "GetIsSpawnModeFixed",
        "body": "GetIsSpawnModeFixed(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 278"
    },
    "全局.isArray:UNKNOWN": {
        "prefix": "isArray",
        "body": "isArray(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 492"
    },
    "全局.IsClothingItem:UNKNOWN": {
        "prefix": "IsClothingItem",
        "body": "IsClothingItem(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 562"
    },
    "全局.CreateAreaEmitter:UNKNOWN": {
        "prefix": "CreateAreaEmitter",
        "body": "CreateAreaEmitter(${1:polygon},${2:centroid})",
        "description": " ※参数: \n   (polygon)<>[] \n   (centroid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 169"
    },
    "全局.SimReset:UNKNOWN": {
        "prefix": "SimReset",
        "body": "SimReset(${1:instanceparameters})",
        "description": " ※参数: \n   (instanceparameters)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1491"
    },
    "全局.d_farmplants:UNKNOWN": {
        "prefix": "d_farmplants",
        "body": "d_farmplants(${1:grow_stage},${2:oversized})",
        "description": " ※参数: \n   (grow_stage)<>[] \n   (oversized)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1350"
    },
    "全局.ConsoleCommandPlayer:UNKNOWN": {
        "prefix": "ConsoleCommandPlayer",
        "body": "ConsoleCommandPlayer(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 2"
    },
    "全局.d_allkitcoons:UNKNOWN": {
        "prefix": "d_allkitcoons",
        "body": "d_allkitcoons(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 920"
    },
    "全局.SetMemoizedFilePaths:UNKNOWN": {
        "prefix": "SetMemoizedFilePaths",
        "body": "SetMemoizedFilePaths(${1:memoized_file_paths})",
        "description": " ※参数: \n   (memoized_file_paths)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 562"
    },
    "全局.DefaultExtinguishFn:UNKNOWN": {
        "prefix": "DefaultExtinguishFn",
        "body": "DefaultExtinguishFn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 45"
    },
    "全局.OnEntitySleep:UNKNOWN": {
        "prefix": "OnEntitySleep",
        "body": "OnEntitySleep(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 644"
    },
    "全局.c_boatcollision:UNKNOWN": {
        "prefix": "c_boatcollision",
        "body": "c_boatcollision(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1624"
    },
    "全局.GetExtendedDebugString:UNKNOWN": {
        "prefix": "GetExtendedDebugString",
        "body": "GetExtendedDebugString(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 592"
    },
    "全局.RGBToPercentColor:UNKNOWN": {
        "prefix": "RGBToPercentColor",
        "body": "RGBToPercentColor(${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1578"
    },
    "全局.d_hunt:UNKNOWN": {
        "prefix": "d_hunt",
        "body": "d_hunt(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 948"
    },
    "全局.MakeHauntableGoToState:UNKNOWN": {
        "prefix": "MakeHauntableGoToState",
        "body": "MakeHauntableGoToState(${1:inst},${2:state},${3:chance},${4:cooldown},${5:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (state)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1204"
    },
    "全局.decode_scanString:UNKNOWN": {
        "prefix": "decode_scanString",
        "body": "decode_scanString(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 417"
    },
    "全局.winch_init_fn:UNKNOWN": {
        "prefix": "winch_init_fn",
        "body": "winch_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 256"
    },
    "全局.GetMinimapAtlas_Internal:UNKNOWN": {
        "prefix": "GetMinimapAtlas_Internal",
        "body": "GetMinimapAtlas_Internal(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 652"
    },
    "全局.SetClientRequestedAction:UNKNOWN": {
        "prefix": "SetClientRequestedAction",
        "body": "SetClientRequestedAction(${1:actioncode},${2:mod_name})",
        "description": " ※参数: \n   (actioncode)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/actions 所在行数: 179"
    },
    "全局.getdebuglocals:UNKNOWN": {
        "prefix": "getdebuglocals",
        "body": "getdebuglocals(${1:res},${2:level})",
        "description": " ※参数: \n   (res)<>[] \n   (level)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stacktrace 所在行数: 31"
    },
    "全局.c_shellsfromtable:UNKNOWN": {
        "prefix": "c_shellsfromtable",
        "body": "c_shellsfromtable(${1:song},${2:startpos},${3:placementfn},${4:spacing_multiplier},${5:out_of_range_mode})",
        "description": " ※参数: \n   (song)<>[] \n   (startpos)<>[] \n   (placementfn)<>[] \n   (spacing_multiplier)<>[] \n   (out_of_range_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1712"
    },
    "全局.IsAnySpecialEventActive:UNKNOWN": {
        "prefix": "IsAnySpecialEventActive",
        "body": "IsAnySpecialEventActive(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 960"
    },
    "全局.ControllerReticle_Blink_GetPosition_Oneshot:UNKNOWN": {
        "prefix": "ControllerReticle_Blink_GetPosition_Oneshot",
        "body": "ControllerReticle_Blink_GetPosition_Oneshot(${1:pos},${2:rotation},${3:rmin},${4:rmax},${5:riter},${6:validwalkablefn})",
        "description": " ※参数: \n   (pos)<>[] \n   (rotation)<>[] \n   (rmin)<>[] \n   (rmax)<>[] \n   (riter)<>[] \n   (validwalkablefn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1779"
    },
    "全局.EnableDLC:UNKNOWN": {
        "prefix": "EnableDLC",
        "body": "EnableDLC(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 133"
    },
    "全局.d_madsciencemats:UNKNOWN": {
        "prefix": "d_madsciencemats",
        "body": "d_madsciencemats(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 756"
    },
    "全局.MakeFeedableSmallLivestockPristine:UNKNOWN": {
        "prefix": "MakeFeedableSmallLivestockPristine",
        "body": "MakeFeedableSmallLivestockPristine(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 800"
    },
    "全局.InitAllDLC:UNKNOWN": {
        "prefix": "InitAllDLC",
        "body": "InitAllDLC(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 88"
    },
    "全局.IsUserCommerceAllowedOnItemData:UNKNOWN": {
        "prefix": "IsUserCommerceAllowedOnItemData",
        "body": "IsUserCommerceAllowedOnItemData(${1:item_data})",
        "description": " ※参数: \n   (item_data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 686"
    },
    "全局.MakeHauntableGoToStateWithChanceFunction:UNKNOWN": {
        "prefix": "MakeHauntableGoToStateWithChanceFunction",
        "body": "MakeHauntableGoToStateWithChanceFunction(${1:inst},${2:state},${3:chancefn},${4:cooldown},${5:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (state)<>[] \n   (chancefn)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1221"
    },
    "全局.OnDemoTimeout:UNKNOWN": {
        "prefix": "OnDemoTimeout",
        "body": "OnDemoTimeout(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1765"
    },
    "全局.GetShardModRPCHandler:UNKNOWN": {
        "prefix": "GetShardModRPCHandler",
        "body": "GetShardModRPCHandler(${1:namespace},${2:name})",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 882"
    },
    "全局.AreAnyClientModsEnabled:UNKNOWN": {
        "prefix": "AreAnyClientModsEnabled",
        "body": "AreAnyClientModsEnabled(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 78"
    },
    "全局.nightsword_init_fn:UNKNOWN": {
        "prefix": "nightsword_init_fn",
        "body": "nightsword_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2213"
    },
    "全局.WaitingForPurchaseState:UNKNOWN": {
        "prefix": "WaitingForPurchaseState",
        "body": "WaitingForPurchaseState(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 23"
    },
    "全局.DefaultBurnFn:UNKNOWN": {
        "prefix": "DefaultBurnFn",
        "body": "DefaultBurnFn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 11"
    },
    "全局.GetBasicRecipeMatch:UNKNOWN": {
        "prefix": "GetBasicRecipeMatch",
        "body": "GetBasicRecipeMatch(${1:selections})",
        "description": " ※参数: \n   (selections)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinstradeutils 所在行数: 15"
    },
    "全局.DoStackTrace:UNKNOWN": {
        "prefix": "DoStackTrace",
        "body": "DoStackTrace(${1:err})",
        "description": " ※参数: \n   (err)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stacktrace 所在行数: 109"
    },
    "全局.StackTraceToLog:UNKNOWN": {
        "prefix": "StackTraceToLog",
        "body": "StackTraceToLog(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stacktrace 所在行数: 129"
    },
    "全局.boat_grass_init_fn:UNKNOWN": {
        "prefix": "boat_grass_init_fn",
        "body": "boat_grass_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 235"
    },
    "全局.getdebugstack:UNKNOWN": {
        "prefix": "getdebugstack",
        "body": "getdebugstack(${1:res},${2:start},${3:top},${4:bottom})",
        "description": " ※参数: \n   (res)<>[] \n   (start)<>[] \n   (top)<>[] \n   (bottom)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stacktrace 所在行数: 79"
    },
    "全局.c_give:UNKNOWN": {
        "prefix": "c_give",
        "body": "c_give(${1:prefab},${2:count},${3:dontselect})",
        "description": " ※参数: \n   (prefab)<>[] \n   (count)<>[] \n   (dontselect)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 479"
    },
    "全局.Recipe:UNKNOWN": {
        "prefix": "Recipe",
        "body": "Recipe(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 818"
    },
    "全局.c_migrateto:UNKNOWN": {
        "prefix": "c_migrateto",
        "body": "c_migrateto(${1:worldId},${2:portalId})",
        "description": " ※参数: \n   (worldId)<>[] \n   (portalId)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1351"
    },
    "全局.c_save:UNKNOWN": {
        "prefix": "c_save",
        "body": "c_save(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 167"
    },
    "全局.wall_ruins_item_clear_fn:UNKNOWN": {
        "prefix": "wall_ruins_item_clear_fn",
        "body": "wall_ruins_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1806"
    },
    "全局.MakePondPhysics:UNKNOWN": {
        "prefix": "MakePondPhysics",
        "body": "MakePondPhysics(${1:inst},${2:rad},${3:height})",
        "description": " ※参数: \n   (inst)<>[] \n   (rad)<>[] \n   (height)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 670"
    },
    "全局.IsRecipeValidInGameMode:UNKNOWN": {
        "prefix": "IsRecipeValidInGameMode",
        "body": "IsRecipeValidInGameMode(${1:game_mode},${2:recipe_name})",
        "description": " ※参数: \n   (game_mode)<>[] \n   (recipe_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 302"
    },
    "全局.LandFlyingCreature:UNKNOWN": {
        "prefix": "LandFlyingCreature",
        "body": "LandFlyingCreature(${1:creature})",
        "description": " ※参数: \n   (creature)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 152"
    },
    "全局.rawstring:UNKNOWN": {
        "prefix": "rawstring",
        "body": "rawstring(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1733"
    },
    "全局.IsXB1:UNKNOWN": {
        "prefix": "IsXB1",
        "body": "IsXB1(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 21"
    },
    "全局.d_weirdfloaters:UNKNOWN": {
        "prefix": "d_weirdfloaters",
        "body": "d_weirdfloaters(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 700"
    },
    "全局.IsNotConsole:UNKNOWN": {
        "prefix": "IsNotConsole",
        "body": "IsNotConsole(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 13"
    },
    "全局.d_halloween:UNKNOWN": {
        "prefix": "d_halloween",
        "body": "d_halloween(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 657"
    },
    "全局.CheckMapSaveData:UNKNOWN": {
        "prefix": "CheckMapSaveData",
        "body": "CheckMapSaveData(${1:savedata})",
        "description": " ※参数: \n   (savedata)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 241"
    },
    "全局.IsConsole:UNKNOWN": {
        "prefix": "IsConsole",
        "body": "IsConsole(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 9"
    },
    "全局.d_unlockfoodachievements:UNKNOWN": {
        "prefix": "d_unlockfoodachievements",
        "body": "d_unlockfoodachievements(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 817"
    },
    "全局.GetTickTime:UNKNOWN": {
        "prefix": "GetTickTime",
        "body": "GetTickTime(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 155"
    },
    "全局.IsSteamDeck:UNKNOWN": {
        "prefix": "IsSteamDeck",
        "body": "IsSteamDeck(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 41"
    },
    "全局.c_spawnrift:UNKNOWN": {
        "prefix": "c_spawnrift",
        "body": "c_spawnrift(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 2008"
    },
    "全局.walkingplank_init_fn:UNKNOWN": {
        "prefix": "walkingplank_init_fn",
        "body": "walkingplank_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1660"
    },
    "全局.GetProfilerModInfo:UNKNOWN": {
        "prefix": "GetProfilerModInfo",
        "body": "GetProfilerModInfo(${1:results})",
        "description": " ※参数: \n   (results)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/perfutil 所在行数: 90"
    },
    "全局.PROFILE_world_gen:UNKNOWN": {
        "prefix": "PROFILE_world_gen",
        "body": "PROFILE_world_gen(${1:debug})",
        "description": " ※参数: \n   (debug)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 203"
    },
    "全局.bernie_inactive_clear_fn:UNKNOWN": {
        "prefix": "bernie_inactive_clear_fn",
        "body": "bernie_inactive_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2000"
    },
    "全局.glasscutter_init_fn:UNKNOWN": {
        "prefix": "glasscutter_init_fn",
        "body": "glasscutter_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2238"
    },
    "全局.ShowDebug:UNKNOWN": {
        "prefix": "ShowDebug",
        "body": "ShowDebug(${1:savedata})",
        "description": " ※参数: \n   (savedata)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 223"
    },
    "全局.VecUtil_NormalizeNoNaN:UNKNOWN": {
        "prefix": "VecUtil_NormalizeNoNaN",
        "body": "VecUtil_NormalizeNoNaN(${1:p1_x},${2:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 40"
    },
    "全局.OnNetworkDisconnect:UNKNOWN": {
        "prefix": "OnNetworkDisconnect",
        "body": "OnNetworkDisconnect(${1:message},${2:should_reset},${3:force_immediate_reset},${4:details},${5:miscdata})",
        "description": " ※参数: \n   (message)<>[] \n   (should_reset)<>[] \n   (force_immediate_reset)<>[] \n   (details)<>[] \n   (miscdata)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1780"
    },
    "全局.c_addelectricity:UNKNOWN": {
        "prefix": "c_addelectricity",
        "body": "c_addelectricity(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 427"
    },
    "全局.resolvefilepath_soft:UNKNOWN": {
        "prefix": "resolvefilepath_soft",
        "body": "resolvefilepath_soft(${1:filepath},${2:force_path_search},${3:search_first_path})",
        "description": " ※参数: \n   (filepath)<>[] \n   (force_path_search)<>[] \n   (search_first_path)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 612"
    },
    "全局.AddPrefabPostInitAny:UNKNOWN": {
        "prefix": "AddPrefabPostInitAny",
        "body": "AddPrefabPostInitAny(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 580"
    },
    "全局.critter_lamb_builder_clear_fn:UNKNOWN": {
        "prefix": "critter_lamb_builder_clear_fn",
        "body": "critter_lamb_builder_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1564"
    },
    "全局.RegisterAchievements:UNKNOWN": {
        "prefix": "RegisterAchievements",
        "body": "RegisterAchievements(${1:achievements})",
        "description": " ※参数: \n   (achievements)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 249"
    },
    "全局.DefaultBurntCorpseFn:UNKNOWN": {
        "prefix": "DefaultBurntCorpseFn",
        "body": "DefaultBurntCorpseFn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 127"
    },
    "全局.GenerateNew:UNKNOWN": {
        "prefix": "GenerateNew",
        "body": "GenerateNew(${1:debug},${2:world_gen_data})",
        "description": " ※参数: \n   (debug)<>[] \n   (world_gen_data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 370"
    },
    "全局.circular_index:UNKNOWN": {
        "prefix": "circular_index",
        "body": "circular_index(${1:t},${2:index})",
        "description": " ※参数: \n   (t)<>[] \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1035"
    },
    "全局.IsPS4:UNKNOWN": {
        "prefix": "IsPS4",
        "body": "IsPS4(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 17"
    },
    "全局.c_mat:UNKNOWN": {
        "prefix": "c_mat",
        "body": "c_mat(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 558"
    },
    "全局.IsUserCommerceBuyRestrictedDueType:UNKNOWN": {
        "prefix": "IsUserCommerceBuyRestrictedDueType",
        "body": "IsUserCommerceBuyRestrictedDueType(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 714"
    },
    "全局.IsLinux:UNKNOWN": {
        "prefix": "IsLinux",
        "body": "IsLinux(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 33"
    },
    "全局.loadfile:UNKNOWN": {
        "prefix": "loadfile",
        "body": "loadfile(${1:filename})",
        "description": " ※参数: \n   (filename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/main 所在行数: 147"
    },
    "全局.SetWorldGenSeed:UNKNOWN": {
        "prefix": "SetWorldGenSeed",
        "body": "SetWorldGenSeed(${1:seed})",
        "description": " ※参数: \n   (seed)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 6"
    },
    "全局.IsWorkshopMod:UNKNOWN": {
        "prefix": "IsWorkshopMod",
        "body": "IsWorkshopMod(${1:modname})",
        "description": " ※参数: \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modindex 所在行数: 230"
    },
    "全局.ResolveModname:UNKNOWN": {
        "prefix": "ResolveModname",
        "body": "ResolveModname(${1:modname})",
        "description": " ※参数: \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modindex 所在行数: 216"
    },
    "全局.GetWorkshopIdNumber:UNKNOWN": {
        "prefix": "GetWorkshopIdNumber",
        "body": "GetWorkshopIdNumber(${1:modname})",
        "description": " ※参数: \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modindex 所在行数: 237"
    },
    "全局.AddRecipePostInitAny:UNKNOWN": {
        "prefix": "AddRecipePostInitAny",
        "body": "AddRecipePostInitAny(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 602"
    },
    "全局.encode_compliant:UNKNOWN": {
        "prefix": "encode_compliant",
        "body": "encode_compliant(${1:v})",
        "description": " ※参数: \n   (v)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 163"
    },
    "全局.AddCookerRecipe:UNKNOWN": {
        "prefix": "AddCookerRecipe",
        "body": "AddCookerRecipe(${1:cooker},${2:recipe})",
        "description": " ※参数: \n   (cooker)<>[] \n   (recipe)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 643"
    },
    "全局.SetLoadingTipCategoryIcon:UNKNOWN": {
        "prefix": "SetLoadingTipCategoryIcon",
        "body": "SetLoadingTipCategoryIcon(${1:category},${2:categoryatlas},${3:categoryicon})",
        "description": " ※参数: \n   (category)<>[] \n   (categoryatlas)<>[] \n   (categoryicon)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 1008"
    },
    "全局.AreClientModsDisabled:UNKNOWN": {
        "prefix": "AreClientModsDisabled",
        "body": "AreClientModsDisabled(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 93"
    },
    "全局.GetTypeFromTag:UNKNOWN": {
        "prefix": "GetTypeFromTag",
        "body": "GetTypeFromTag(${1:tag})",
        "description": " ※参数: \n   (tag)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 831"
    },
    "全局.AddVoteCommand:UNKNOWN": {
        "prefix": "AddVoteCommand",
        "body": "AddVoteCommand(${1:command_name},${2:init_options_fn},${3:process_result_fn},${4:vote_timeout})",
        "description": " ※参数: \n   (command_name)<>[] \n   (init_options_fn)<>[] \n   (process_result_fn)<>[] \n   (vote_timeout)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 933"
    },
    "全局.ChangeMiniMapTileRenderOrder:UNKNOWN": {
        "prefix": "ChangeMiniMapTileRenderOrder",
        "body": "ChangeMiniMapTileRenderOrder(${1:tile_id},${2:target_tile_id},${3:moveafter})",
        "description": " ※参数: \n   (tile_id)<>[] \n   (target_tile_id)<>[] \n   (moveafter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 392"
    },
    "全局.GetModRPC:UNKNOWN": {
        "prefix": "GetModRPC",
        "body": "GetModRPC(${1:namespace},${2:name})",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 906"
    },
    "全局.campfire_init_fn:UNKNOWN": {
        "prefix": "campfire_init_fn",
        "body": "campfire_init_fn(${1:inst},${2:build_name},${3:fxoffset})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (fxoffset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1453"
    },
    "全局.AddLevelPreInit:UNKNOWN": {
        "prefix": "AddLevelPreInit",
        "body": "AddLevelPreInit(${1:levelid},${2:fn})",
        "description": " ※参数: \n   (levelid)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 238"
    },
    "全局.GetPurchasePackOutputItems:UNKNOWN": {
        "prefix": "GetPurchasePackOutputItems",
        "body": "GetPurchasePackOutputItems(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 515"
    },
    "全局.AddStategraphEvent:添加SG的事件监听器API通用函数片段": {
        "prefix": "AddStategraphEvent",
        "body": "AddStategraphEvent(\"${1:StateGraph}\", EventHandler(\"event\", function(inst)\n\nend))",
        "description": " ※参数: \n   (stategraph)<>[] \n   (event)<>[] \n ※返回: \n ※说明: 添加SG的事件监听器API通用函数片段\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 536"
    },
    "全局.BuildMoonPulseShader:UNKNOWN": {
        "prefix": "BuildMoonPulseShader",
        "body": "BuildMoonPulseShader(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 240"
    },
    "全局.RailUserCommandRemove:UNKNOWN": {
        "prefix": "RailUserCommandRemove",
        "body": "RailUserCommandRemove(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 546"
    },
    "全局.HookLoginButtonForDataBundleFileHashes:UNKNOWN": {
        "prefix": "HookLoginButtonForDataBundleFileHashes",
        "body": "HookLoginButtonForDataBundleFileHashes(${1:button})",
        "description": " ※参数: \n   (button)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2312"
    },
    "全局.GroundImage:UNKNOWN": {
        "prefix": "GroundImage",
        "body": "GroundImage(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldtiledefs 所在行数: 7"
    },
    "全局.AddMinimapAtlas:添加小地图图标": {
        "prefix": "AddMinimapAtlas",
        "body": "AddMinimapAtlas(\"map_icons/${1:prefab}.xml\")",
        "description": " ※参数: \n   (atlaspath)<str>[路径] \n ※返回: \n ※说明: 添加小地图图标\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 512"
    },
    "全局.c_maintainhealth:UNKNOWN": {
        "prefix": "c_maintainhealth",
        "body": "c_maintainhealth(${1:player},${2:percent})",
        "description": " ※参数: \n   (player)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1099"
    },
    "全局.AddStategraphPostInit:添加修改修改状态图(SG)API通用函数片段,初始化时最后执行": {
        "prefix": "AddStategraphPostInit",
        "body": "AddStategraphPostInit(\"${1:StateGraph}\", function(self)\n\t${0}\nend)",
        "description": " ※参数: \n   (stategraph)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: 添加修改修改状态图(SG)API通用函数片段,初始化时最后执行\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 557"
    },
    "全局.minisign_item_init_fn:UNKNOWN": {
        "prefix": "minisign_item_init_fn",
        "body": "minisign_item_init_fn(${1:inst},${2:build_name},${3:anim_bank})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (anim_bank)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1587"
    },
    "全局.c_sethealth:UNKNOWN": {
        "prefix": "c_sethealth",
        "body": "c_sethealth(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 388"
    },
    "全局.Networking_ResurrectAnnouncement:UNKNOWN": {
        "prefix": "Networking_ResurrectAnnouncement",
        "body": "Networking_ResurrectAnnouncement(${1:message},${2:colour})",
        "description": " ※参数: \n   (message)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 82"
    },
    "全局.AddShardModRPCHandler:注册服务器分片rpc": {
        "prefix": "AddShardModRPCHandler",
        "body": "AddShardModRPCHandler(\"${1:name}\",\"${2:$1}\", function(wordid, str)\n\tif wordid == nil or str == nil then return end\n\tlocal success, savedata = RunInSandboxSafe(str)\n\tif success then\n\n\telse\n\t\tprint(\"分片接收RPC失败\")\n\tend\nend)",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: 注册服务器分片rpc\n ※贡献者: @月 \n\t参数1:命名空间;参数2:RPC名称;参数3:执行函数(...).前两个是唯一标识符\n ※路径: scripts/modutil 所在行数: 867"
    },
    "全局.AddLevel:UNKNOWN": {
        "prefix": "AddLevel",
        "body": "AddLevel(${1:arg1},${2:arg2},${3:...})",
        "description": " ※参数: \n   (arg1)<>[] \n   (arg2)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 287"
    },
    "全局.AddPrefabPostInit:修改已有的预制物的初始化API": {
        "prefix": "AddPrefabPostInit",
        "body": "AddPrefabPostInit(\"${1:PrefabName}\", function(inst)\n\t${0}\nend)",
        "description": " ※参数: \n   (prefab)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: 修改已有的预制物的初始化API\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 593"
    },
    "全局.IsGameplayItem:UNKNOWN": {
        "prefix": "IsGameplayItem",
        "body": "IsGameplayItem(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 570"
    },
    "全局.AddModReleaseID:UNKNOWN": {
        "prefix": "AddModReleaseID",
        "body": "AddModReleaseID(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 18"
    },
    "全局.c_gonext:UNKNOWN": {
        "prefix": "c_gonext",
        "body": "c_gonext(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 870"
    },
    "全局.MakeWaxablePlant:UNKNOWN": {
        "prefix": "MakeWaxablePlant",
        "body": "MakeWaxablePlant(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1656"
    },
    "全局.MakeHauntableWork:UNKNOWN": {
        "prefix": "MakeHauntableWork",
        "body": "MakeHauntableWork(${1:inst},${2:chance},${3:cooldown},${4:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 889"
    },
    "全局.GetActiveFestivalProductName:UNKNOWN": {
        "prefix": "GetActiveFestivalProductName",
        "body": "GetActiveFestivalProductName(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1043"
    },
    "全局.MakeHugeFreezableCharacter:UNKNOWN": {
        "prefix": "MakeHugeFreezableCharacter",
        "body": "MakeHugeFreezableCharacter(${1:inst},${2:sym},${3:offset})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 357"
    },
    "全局.AddRecipePostInit:修改配方API": {
        "prefix": "AddRecipePostInit",
        "body": "AddRecipePostInit(\"${1:recipename}\", function(self)\n\t${0}\nend)",
        "description": " ※参数: \n   (recipename)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: 修改配方API\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 613"
    },
    "全局.AddRecipeFilter:UNKNOWN": {
        "prefix": "AddRecipeFilter",
        "body": "AddRecipeFilter(${1:filter_def},${2:index})",
        "description": " ※参数: \n   (filter_def)<>[] \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 674"
    },
    "全局.GetSkinCollectionCompletionForHero:UNKNOWN": {
        "prefix": "GetSkinCollectionCompletionForHero",
        "body": "GetSkinCollectionCompletionForHero(${1:herocharacter})",
        "description": " ※参数: \n   (herocharacter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1215"
    },
    "全局.NotifyPlayerProgress:UNKNOWN": {
        "prefix": "NotifyPlayerProgress",
        "body": "NotifyPlayerProgress(${1:name},${2:value},${3:player})",
        "description": " ※参数: \n   (name)<>[] \n   (value)<>[] \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 293"
    },
    "全局.critter_glomling_clear_fn:UNKNOWN": {
        "prefix": "critter_glomling_clear_fn",
        "body": "critter_glomling_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1545"
    },
    "全局.Vec3Util_Normalize:UNKNOWN": {
        "prefix": "Vec3Util_Normalize",
        "body": "Vec3Util_Normalize(${1:p1_x},${2:p1_y},${3:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 39"
    },
    "全局.GetAllGameplayItems:UNKNOWN": {
        "prefix": "GetAllGameplayItems",
        "body": "GetAllGameplayItems(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1411"
    },
    "全局.MakeCharacterPhysics:UNKNOWN": {
        "prefix": "MakeCharacterPhysics",
        "body": "MakeCharacterPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 398"
    },
    "全局.steeringwheel_clear_fn:UNKNOWN": {
        "prefix": "steeringwheel_clear_fn",
        "body": "steeringwheel_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1690"
    },
    "全局.AddRecipe:UNKNOWN": {
        "prefix": "AddRecipe",
        "body": "AddRecipe(${1:arg1},${2:...})",
        "description": " ※参数: \n   (arg1)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 794"
    },
    "全局.AddDeconstructRecipe:添加分解配方API,供分解法杖拆解": {
        "prefix": "AddDeconstructRecipe",
        "body": "AddDeconstructRecipe(\"${1:prefab}\", {Ingredient(\"${2:prefab}\", 1)})",
        "description": " ※参数: \n   (name)<>[] \n   (return_ingredients)<>[] \n ※返回: \n ※说明: 添加分解配方API,供分解法杖拆解\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 784"
    },
    "全局.d_combatgear:UNKNOWN": {
        "prefix": "d_combatgear",
        "body": "d_combatgear(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 474"
    },
    "全局.RegisterInventoryItemAtlas:UNKNOWN": {
        "prefix": "RegisterInventoryItemAtlas",
        "body": "RegisterInventoryItemAtlas(${1:atlas},${2:prefabname})",
        "description": " ※参数: \n   (atlas)<>[] \n   (prefabname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 954"
    },
    "全局.GetSoundDebugString:UNKNOWN": {
        "prefix": "GetSoundDebugString",
        "body": "GetSoundDebugString(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugsounds 所在行数: 185"
    },
    "全局.WorldRollbackFromSim:UNKNOWN": {
        "prefix": "WorldRollbackFromSim",
        "body": "WorldRollbackFromSim(${1:count})",
        "description": " ※参数: \n   (count)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 730"
    },
    "全局.wall_stone_clear_fn:UNKNOWN": {
        "prefix": "wall_stone_clear_fn",
        "body": "wall_stone_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1840"
    },
    "全局.VerifySpawnNewPlayerOnServerRequest:UNKNOWN": {
        "prefix": "VerifySpawnNewPlayerOnServerRequest",
        "body": "VerifySpawnNewPlayerOnServerRequest(${1:user_id})",
        "description": " ※参数: \n   (user_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 183"
    },
    "全局.AddClientModRPCHandler:注册客户端rpc,接收服务器的数据用的": {
        "prefix": "AddClientModRPCHandler",
        "body": "AddClientModRPCHandler(${1:namespace}, ${2:name}, function(player)\n\tif player and player:IsValid() and not player:HasTag(\"playerghost\") then\n\t\t$3\n\tend\nend)",
        "description": " ※参数: \n   (namespace)<str>[命名空间(写mod名即可)] \n   (name)<str>[当前命名空间下的rpc名字] \n   ()<fn>[]\n      {参数:\n         (player)<ent>[发rpc的玩家] \n         (...)<any>[接收的数据]} \n ※返回: \n ※说明: 注册客户端rpc,接收服务器的数据用的\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 862"
    },
    "全局.AddGamePostInit:UNKNOWN": {
        "prefix": "AddGamePostInit",
        "body": "AddGamePostInit(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 335"
    },
    "全局.ExceptionArrays:UNKNOWN": {
        "prefix": "ExceptionArrays",
        "body": "ExceptionArrays(${1:tSource},${2:tException})",
        "description": " ※参数: \n   (tSource)<>[] \n   (tException)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 339"
    },
    "全局.SendModRPCToServer:向服务器发RPC": {
        "prefix": "SendModRPCToServer",
        "body": "SendModRPCToServer(MOD_RPC[${1:namespace}][${2:name}])",
        "description": " ※参数: \n   (id_table)<>[MOD_RPC[命名空间][rpcID]] \n   (...)<any>[要传到服务器的数据,不可以是表,可不填] \n ※返回: \n ※说明: 向服务器发RPC\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 887"
    },
    "全局.RemoveAllRecipes:UNKNOWN": {
        "prefix": "RemoveAllRecipes",
        "body": "RemoveAllRecipes(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/recipe 所在行数: 193"
    },
    "全局.d_skin_mode:UNKNOWN": {
        "prefix": "d_skin_mode",
        "body": "d_skin_mode(${1:mode})",
        "description": " ※参数: \n   (mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 592"
    },
    "全局.ForceAuthenticationDialog:UNKNOWN": {
        "prefix": "ForceAuthenticationDialog",
        "body": "ForceAuthenticationDialog(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 104"
    },
    "全局.orderedPairs:UNKNOWN": {
        "prefix": "orderedPairs",
        "body": "orderedPairs(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1655"
    },
    "全局.PrintTable:UNKNOWN": {
        "prefix": "PrintTable",
        "body": "PrintTable(${1:tab})",
        "description": " ※参数: \n   (tab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 758"
    },
    "全局.ReloadPreloadAssets:UNKNOWN": {
        "prefix": "ReloadPreloadAssets",
        "body": "ReloadPreloadAssets(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 203"
    },
    "全局.SetCraftingAutopaused:UNKNOWN": {
        "prefix": "SetCraftingAutopaused",
        "body": "SetCraftingAutopaused(${1:autopause})",
        "description": " ※参数: \n   (autopause)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 873"
    },
    "全局.EnableShadeRenderer:UNKNOWN": {
        "prefix": "EnableShadeRenderer",
        "body": "EnableShadeRenderer(${1:enable})",
        "description": " ※参数: \n   (enable)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shadeeffects 所在行数: 35"
    },
    "全局.AddModRPCHandler:注册服务器ModRPC": {
        "prefix": "AddModRPCHandler",
        "body": "AddModRPCHandler(${1:namespace}, ${2:name}, function(player)\n\tif player and player:IsValid() and not player:HasTag(\"playerghost\") then\n\t\t$3\n\tend\nend)",
        "description": " ※参数: \n   (namespace)<str>[命名空间(写mod名即可)] \n   (name)<str>[当前命名空间下的rpc名字] \n   ()<fn>[]\n      {参数:\n         (player)<ent>[发rpc的玩家] \n         (...)<any>[接收的数据]} \n ※返回: \n ※说明: 注册服务器ModRPC\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 857"
    },
    "全局.boat_clear_fn:UNKNOWN": {
        "prefix": "boat_clear_fn",
        "body": "boat_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1652"
    },
    "全局.GetModifiedRarityStringForItem:UNKNOWN": {
        "prefix": "GetModifiedRarityStringForItem",
        "body": "GetModifiedRarityStringForItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 605"
    },
    "全局.ChangeFalloffRenderOrder:UNKNOWN": {
        "prefix": "ChangeFalloffRenderOrder",
        "body": "ChangeFalloffRenderOrder(${1:falloff_id},${2:falloff_id_id},${3:moveafter})",
        "description": " ※参数: \n   (falloff_id)<>[] \n   (falloff_id_id)<>[] \n   (moveafter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 413"
    },
    "全局.AddIngredientValues:UNKNOWN": {
        "prefix": "AddIngredientValues",
        "body": "AddIngredientValues(${1:names},${2:tags},${3:cancook},${4:candry})",
        "description": " ※参数: \n   (names)<>[] \n   (tags)<>[] \n   (cancook)<>[] \n   (candry)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 636"
    },
    "全局.ChangeToInventoryPhysics:UNKNOWN": {
        "prefix": "ChangeToInventoryPhysics",
        "body": "ChangeToInventoryPhysics(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 578"
    },
    "全局.AddLevelPreInitAny:添加修改世界配置API通用函数片段": {
        "prefix": "AddLevelPreInitAny",
        "body": "AddLevelPreInitAny(function(self)\n\t${0}\nend)",
        "description": " ※参数: \n   (fn)<fn>[] \n ※返回: \n ※说明: 添加修改世界配置API通用函数片段\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 246"
    },
    "全局.HandleDugGround:UNKNOWN": {
        "prefix": "HandleDugGround",
        "body": "HandleDugGround(${1:dug_ground},${2:x},${3:y},${4:z})",
        "description": " ※参数: \n   (dug_ground)<>[] \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 27"
    },
    "全局.d_getwidget:UNKNOWN": {
        "prefix": "d_getwidget",
        "body": "d_getwidget(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 653"
    },
    "全局.SetDailyGiftItem:UNKNOWN": {
        "prefix": "SetDailyGiftItem",
        "body": "SetDailyGiftItem(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1615"
    },
    "全局.AddUserCommand:UNKNOWN": {
        "prefix": "AddUserCommand",
        "body": "AddUserCommand(${1:command_name},${2:data})",
        "description": " ※参数: \n   (command_name)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 928"
    },
    "全局.steeringwheel_init_fn:UNKNOWN": {
        "prefix": "steeringwheel_init_fn",
        "body": "steeringwheel_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1684"
    },
    "全局.VecUtil_Length:UNKNOWN": {
        "prefix": "VecUtil_Length",
        "body": "VecUtil_Length(${1:p1_x},${2:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 19"
    },
    "全局.GetFeaturedPacks:UNKNOWN": {
        "prefix": "GetFeaturedPacks",
        "body": "GetFeaturedPacks(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 193"
    },
    "全局.ExcludeClothingSymbolForModCharacter:UNKNOWN": {
        "prefix": "ExcludeClothingSymbolForModCharacter",
        "body": "ExcludeClothingSymbolForModCharacter(${1:name},${2:symbol})",
        "description": " ※参数: \n   (name)<>[] \n   (symbol)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 942"
    },
    "全局.AddToRegrowthManager:UNKNOWN": {
        "prefix": "AddToRegrowthManager",
        "body": "AddToRegrowthManager(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1611"
    },
    "全局.GetGameModeTag:UNKNOWN": {
        "prefix": "GetGameModeTag",
        "body": "GetGameModeTag(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 237"
    },
    "全局.c_sel_health:UNKNOWN": {
        "prefix": "c_sel_health",
        "body": "c_sel_health(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 366"
    },
    "全局.SendRPCToServer:UNKNOWN": {
        "prefix": "SendRPCToServer",
        "body": "SendRPCToServer(${1:code},${2:...})",
        "description": " ※参数: \n   (code)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1263"
    },
    "全局.AddFalloffTexture:UNKNOWN": {
        "prefix": "AddFalloffTexture",
        "body": "AddFalloffTexture(${1:falloff_id},${2:falloff_def})",
        "description": " ※参数: \n   (falloff_id)<>[] \n   (falloff_def)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 406"
    },
    "全局.MakeMediumPropagator:UNKNOWN": {
        "prefix": "MakeMediumPropagator",
        "body": "MakeMediumPropagator(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 210"
    },
    "全局.GetDailyGiftItem:UNKNOWN": {
        "prefix": "GetDailyGiftItem",
        "body": "GetDailyGiftItem(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1621"
    },
    "全局.RemoveOnAccountEventListener:UNKNOWN": {
        "prefix": "RemoveOnAccountEventListener",
        "body": "RemoveOnAccountEventListener(${1:listener_to_remove})",
        "description": " ※参数: \n   (listener_to_remove)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1907"
    },
    "全局.AddTile:UNKNOWN": {
        "prefix": "AddTile",
        "body": "AddTile(${1:tile_name},${2:tile_range},${3:tile_data},${4:ground_tile_def},${5:minimap_tile_def},${6:turf_def})",
        "description": " ※参数: \n   (tile_name)<>[] \n   (tile_range)<>[] \n   (tile_data)<>[] \n   (ground_tile_def)<>[] \n   (minimap_tile_def)<>[] \n   (turf_def)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 364"
    },
    "全局.AddTaskSetPreInit:UNKNOWN": {
        "prefix": "AddTaskSetPreInit",
        "body": "AddTaskSetPreInit(${1:tasksetname},${2:fn})",
        "description": " ※参数: \n   (tasksetname)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 251"
    },
    "全局.c_move:UNKNOWN": {
        "prefix": "c_move",
        "body": "c_move(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 591"
    },
    "全局.OnSaveLoadError:UNKNOWN": {
        "prefix": "OnSaveLoadError",
        "body": "OnSaveLoadError(${1:operation},${2:filename},${3:status})",
        "description": " ※参数: \n   (operation)<>[] \n   (filename)<>[] \n   (status)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/frontend 所在行数: 1400"
    },
    "全局.c_select:UNKNOWN": {
        "prefix": "c_select",
        "body": "c_select(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 303"
    },
    "全局.GetLoaderAtlasAndTex:UNKNOWN": {
        "prefix": "GetLoaderAtlasAndTex",
        "body": "GetLoaderAtlasAndTex(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1578"
    },
    "全局.researchlab2_clear_fn:UNKNOWN": {
        "prefix": "researchlab2_clear_fn",
        "body": "researchlab2_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2633"
    },
    "全局.ModInfoname:UNKNOWN": {
        "prefix": "ModInfoname",
        "body": "ModInfoname(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 3"
    },
    "全局.RemoveCustomizeItem:UNKNOWN": {
        "prefix": "RemoveCustomizeItem",
        "body": "RemoveCustomizeItem(${1:category},${2:name})",
        "description": " ※参数: \n   (category)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 227"
    },
    "全局.AddRecipeTab:UNKNOWN": {
        "prefix": "AddRecipeTab",
        "body": "AddRecipeTab(${1:rec_str},${2:rec_sort},${3:rec_atlas},${4:rec_icon},${5:rec_owner_tag},${6:rec_crafting_station})",
        "description": " ※参数: \n   (rec_str)<>[] \n   (rec_sort)<>[] \n   (rec_atlas)<>[] \n   (rec_icon)<>[] \n   (rec_owner_tag)<>[] \n   (rec_crafting_station)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 823"
    },
    "全局.SetLoadingTipCategoryWeights:UNKNOWN": {
        "prefix": "SetLoadingTipCategoryWeights",
        "body": "SetLoadingTipCategoryWeights(${1:weighttable},${2:weightdata})",
        "description": " ※参数: \n   (weighttable)<>[] \n   (weightdata)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 1002"
    },
    "全局.AddTask:UNKNOWN": {
        "prefix": "AddTask",
        "body": "AddTask(${1:arg1},${2:...})",
        "description": " ※参数: \n   (arg1)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 298"
    },
    "全局.GetInventoryTimestamp:UNKNOWN": {
        "prefix": "GetInventoryTimestamp",
        "body": "GetInventoryTimestamp(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1040"
    },
    "全局.Vec3Util_Dist:UNKNOWN": {
        "prefix": "Vec3Util_Dist",
        "body": "Vec3Util_Dist(${1:p1_x},${2:p1_y},${3:p1_z},${4:p2_x},${5:p2_y},${6:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_y)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 27"
    },
    "全局.DebugSpawn:UNKNOWN": {
        "prefix": "DebugSpawn",
        "body": "DebugSpawn(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 20"
    },
    "全局.CreateEnvironment:UNKNOWN": {
        "prefix": "CreateEnvironment",
        "body": "CreateEnvironment(${1:modname},${2:isworldgen},${3:isfrontend})",
        "description": " ※参数: \n   (modname)<>[] \n   (isworldgen)<>[] \n   (isfrontend)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 289"
    },
    "全局.AddTaskSet:UNKNOWN": {
        "prefix": "AddTaskSet",
        "body": "AddTaskSet(${1:arg1},${2:...})",
        "description": " ※参数: \n   (arg1)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 294"
    },
    "全局.GetCustomizeDescription:UNKNOWN": {
        "prefix": "GetCustomizeDescription",
        "body": "GetCustomizeDescription(${1:description})",
        "description": " ※参数: \n   (description)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 232"
    },
    "全局.c_makegrassboat:UNKNOWN": {
        "prefix": "c_makegrassboat",
        "body": "c_makegrassboat(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1492"
    },
    "全局.AddTaskPreInit:UNKNOWN": {
        "prefix": "AddTaskPreInit",
        "body": "AddTaskPreInit(${1:taskname},${2:fn})",
        "description": " ※参数: \n   (taskname)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 267"
    },
    "全局.DefaultIgniteFn:UNKNOWN": {
        "prefix": "DefaultIgniteFn",
        "body": "DefaultIgniteFn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 5"
    },
    "全局.AddTaskSetPreInitAny:UNKNOWN": {
        "prefix": "AddTaskSetPreInitAny",
        "body": "AddTaskSetPreInitAny(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 259"
    },
    "全局.MakeRoseTarget_CreateFuel:UNKNOWN": {
        "prefix": "MakeRoseTarget_CreateFuel",
        "body": "MakeRoseTarget_CreateFuel(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 146"
    },
    "全局.AddStategraphActionHandler:添加SG的动作触发器API通用函数片段": {
        "prefix": "AddStategraphActionHandler",
        "body": "AddStategraphActionHandler(\"${1:StateGraph}\", ActionHandler(ACTIONS.${2:XXX}, \"give\"))",
        "description": " ※参数: \n   (stategraph)<>[] \n   (handler)<>[] \n ※返回: \n ※说明: 添加SG的动作触发器API通用函数片段\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 518"
    },
    "全局.gemsocket_clear_fn:UNKNOWN": {
        "prefix": "gemsocket_clear_fn",
        "body": "gemsocket_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2748"
    },
    "全局.RemoveLoadingTip:UNKNOWN": {
        "prefix": "RemoveLoadingTip",
        "body": "RemoveLoadingTip(${1:stringtable},${2:id})",
        "description": " ※参数: \n   (stringtable)<>[] \n   (id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 990"
    },
    "全局.StaticUpdate:UNKNOWN": {
        "prefix": "StaticUpdate",
        "body": "StaticUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 169"
    },
    "全局.modprint:UNKNOWN": {
        "prefix": "modprint",
        "body": "modprint(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 128"
    },
    "全局.AddModCharacter:添加Mod角色API": {
        "prefix": "AddModCharacter",
        "body": "AddModCharacter(${1:name},${2:gender},${3:modes})",
        "description": " ※参数: \n   (name)<>[] \n   (gender)<>[] \n   (modes)<>[] \n ※返回: \n ※说明: 添加Mod角色API\n ※贡献者: @lan 所有MOD角色都要注册\n ※路径: scripts/modutil 所在行数: 655"
    },
    "全局.critter_dragonling_builder_clear_fn:UNKNOWN": {
        "prefix": "critter_dragonling_builder_clear_fn",
        "body": "critter_dragonling_builder_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1541"
    },
    "全局.AddPrototyperDef:添加自定义原型机API通用函数片段,is_crafting_station在附近才能制作": {
        "prefix": "AddPrototyperDef",
        "body": "AddPrototyperDef(\"${1:prefab}\", {\n \ticon_atlas = \"images/xxxx.xml\",\n \ticon_image = \"xxxx.tex\",\n \tis_crafting_station = true,\n \taction_str = \"制作\",\n \tfilter_text = \"过滤器名称\"\n})",
        "description": " ※参数: \n   (prototyper_prefab)<>[] \n   (data)<>[] \n ※返回: \n ※说明: 添加自定义原型机API通用函数片段,is_crafting_station在附近才能制作\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 666"
    },
    "全局.AddBrainPostInit:修改脑子API": {
        "prefix": "AddBrainPostInit",
        "body": "AddBrainPostInit(\"${1:brain}\", function(self)\n\t${0}\nend)",
        "description": " ※参数: \n   (brain)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: 修改脑子API\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 627"
    },
    "全局.AddStartLocation:UNKNOWN": {
        "prefix": "AddStartLocation",
        "body": "AddStartLocation(${1:arg1},${2:...})",
        "description": " ※参数: \n   (arg1)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 306"
    },
    "全局.ShakeAllCameras:UNKNOWN": {
        "prefix": "ShakeAllCameras",
        "body": "ShakeAllCameras(${1:mode},${2:duration},${3:speed},${4:scale},${5:source_or_pt},${6:maxDist})",
        "description": " ※参数: \n   (mode)<>[] \n   (duration)<>[] \n   (speed)<>[] \n   (scale)<>[] \n   (source_or_pt)<>[] \n   (maxDist)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 237"
    },
    "全局.d_test_thank_you:UNKNOWN": {
        "prefix": "d_test_thank_you",
        "body": "d_test_thank_you(${1:param})",
        "description": " ※参数: \n   (param)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 557"
    },
    "全局.cookpot_init_fn:UNKNOWN": {
        "prefix": "cookpot_init_fn",
        "body": "cookpot_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1339"
    },
    "全局.AddGameMode:UNKNOWN": {
        "prefix": "AddGameMode",
        "body": "AddGameMode(${1:game_mode},${2:game_mode_text})",
        "description": " ※参数: \n   (game_mode)<>[] \n   (game_mode_text)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 311"
    },
    "全局.RegisterOnAccountEventListener:UNKNOWN": {
        "prefix": "RegisterOnAccountEventListener",
        "body": "RegisterOnAccountEventListener(${1:listener})",
        "description": " ※参数: \n   (listener)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1903"
    },
    "全局.boat_item_clear_fn:UNKNOWN": {
        "prefix": "boat_item_clear_fn",
        "body": "boat_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1641"
    },
    "全局.modassert:UNKNOWN": {
        "prefix": "modassert",
        "body": "modassert(${1:test},${2:message})",
        "description": " ※参数: \n   (test)<>[] \n   (message)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 120"
    },
    "全局.PlayerSub:UNKNOWN": {
        "prefix": "PlayerSub",
        "body": "PlayerSub(${1:count})",
        "description": " ※参数: \n   (count)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 117"
    },
    "全局.AddCustomizeGroup:UNKNOWN": {
        "prefix": "AddCustomizeGroup",
        "body": "AddCustomizeGroup(${1:category},${2:name},${3:text},${4:desc},${5:atlas},${6:order})",
        "description": " ※参数: \n   (category)<>[] \n   (name)<>[] \n   (text)<>[] \n   (desc)<>[] \n   (atlas)<>[] \n   (order)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 212"
    },
    "全局.WorldSettings_ChildSpawner_PreLoad:UNKNOWN": {
        "prefix": "g+WorldSettings_ChildSpawner_PreLoad",
        "body": "WorldSettings_ChildSpawner_PreLoad(${1:inst},${2:data},${3:spawnperiod_max},${4:regenperiod_max})",
        "description": " ※参数: \n   (inst)<>[] \n   (data)<>[] \n   (spawnperiod_max)<>[] \n   (regenperiod_max)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 71"
    },
    "全局.SendModRPCToShard:发送服务器其他世界RPC调用": {
        "prefix": "SendModRPCToShard",
        "body": "SendModRPCToShard(GetShardModRPC(\"${1:name}\", \"${2:$1}\"), sender_list or nil, DataDumper({\"参数\"}, nil, true))",
        "description": " ※参数: \n   (id_table)<>[] \n   (...)<>[] \n ※返回: \n ※说明: 发送服务器其他世界RPC调用\n ※贡献者: @月 \n\t从主机分片发送指令给主机其他分片.参数1:GetShardModRPC(形参1:命名空间,形参2:RPC名称)获取对应RPC;参数2:sender_list<code>可为nil|字符串|字符串表</code>;参数3:附带参数对应str\n ※路径: scripts/modutil 所在行数: 897"
    },
    "全局.DataDumper:UNKNOWN": {
        "prefix": "DataDumper",
        "body": "DataDumper(${1:value},${2:varname},${3:fastmode},${4:ident})",
        "description": " ※参数: \n   (value)<>[] \n   (varname)<>[] \n   (fastmode)<>[] \n   (ident)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dumper 所在行数: 82"
    },
    "全局.GetGenderStrings:UNKNOWN": {
        "prefix": "GetGenderStrings",
        "body": "GetGenderStrings(${1:charactername})",
        "description": " ※参数: \n   (charactername)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 51"
    },
    "全局.GetModRPCHandler:UNKNOWN": {
        "prefix": "GetModRPCHandler",
        "body": "GetModRPCHandler(${1:namespace},${2:name})",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 872"
    },
    "全局.d_fishing:UNKNOWN": {
        "prefix": "d_fishing",
        "body": "d_fishing(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1105"
    },
    "全局.trophyscale_oversizedveggies_clear_fn:UNKNOWN": {
        "prefix": "trophyscale_oversizedveggies_clear_fn",
        "body": "trophyscale_oversizedveggies_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2816"
    },
    "全局.RegisterSkilltreeBGForCharacter:UNKNOWN": {
        "prefix": "RegisterSkilltreeBGForCharacter",
        "body": "RegisterSkilltreeBGForCharacter(${1:atlas},${2:charactername})",
        "description": " ※参数: \n   (atlas)<>[] \n   (charactername)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 964"
    },
    "全局.BuildListOfSelectedItems:UNKNOWN": {
        "prefix": "BuildListOfSelectedItems",
        "body": "BuildListOfSelectedItems(${1:user_profile},${2:item_type})",
        "description": " ※参数: \n   (user_profile)<>[] \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1507"
    },
    "全局.IsUserCommerceSellAllowedOnItem:UNKNOWN": {
        "prefix": "IsUserCommerceSellAllowedOnItem",
        "body": "IsUserCommerceSellAllowedOnItem(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 701"
    },
    "全局.PreloadSounds:UNKNOWN": {
        "prefix": "PreloadSounds",
        "body": "PreloadSounds(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/preloadsounds 所在行数: 236"
    },
    "全局.MakeSmallFreezableCharacter:UNKNOWN": {
        "prefix": "MakeSmallFreezableCharacter",
        "body": "MakeSmallFreezableCharacter(${1:inst},${2:sym},${3:offset})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 331"
    },
    "全局.MakeGhostPhysics:UNKNOWN": {
        "prefix": "MakeGhostPhysics",
        "body": "MakeGhostPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 469"
    },
    "全局.ClientAuthenticationComplete:UNKNOWN": {
        "prefix": "ClientAuthenticationComplete",
        "body": "ClientAuthenticationComplete(${1:userid})",
        "description": " ※参数: \n   (userid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 942"
    },
    "全局.HexToPercentColor:UNKNOWN": {
        "prefix": "HexToPercentColor",
        "body": "HexToPercentColor(${1:hex})",
        "description": " ※参数: \n   (hex)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1583"
    },
    "全局.MakeDeployableFertilizerPristine:UNKNOWN": {
        "prefix": "MakeDeployableFertilizerPristine",
        "body": "MakeDeployableFertilizerPristine(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1584"
    },
    "全局.MakeHauntableLaunchAndPerish:UNKNOWN": {
        "prefix": "MakeHauntableLaunchAndPerish",
        "body": "MakeHauntableLaunchAndPerish(${1:inst},${2:launchchance},${3:perishchance},${4:speed},${5:perishpct},${6:cooldown},${7:launch_haunt_value},${8:perish_haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (launchchance)<>[] \n   (perishchance)<>[] \n   (speed)<>[] \n   (perishpct)<>[] \n   (cooldown)<>[] \n   (launch_haunt_value)<>[] \n   (perish_haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1093"
    },
    "全局.ChangeToCharacterPhysics:UNKNOWN": {
        "prefix": "ChangeToCharacterPhysics",
        "body": "ChangeToCharacterPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 507"
    },
    "全局.MakeLargeFreezableCharacter:UNKNOWN": {
        "prefix": "MakeLargeFreezableCharacter",
        "body": "MakeLargeFreezableCharacter(${1:inst},${2:sym},${3:offset})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 348"
    },
    "全局.MakeSmallBurnable:UNKNOWN": {
        "prefix": "MakeSmallBurnable",
        "body": "MakeSmallBurnable(${1:inst},${2:time},${3:offset},${4:structure},${5:sym})",
        "description": " ※参数: \n   (inst)<>[] \n   (time)<>[] \n   (offset)<>[] \n   (structure)<>[] \n   (sym)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 159"
    },
    "全局.ToggleOffAllObjectCollisions:UNKNOWN": {
        "prefix": "ToggleOffAllObjectCollisions",
        "body": "ToggleOffAllObjectCollisions(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1429"
    },
    "全局.portablecookpot_item_init_fn:UNKNOWN": {
        "prefix": "portablecookpot_item_init_fn",
        "body": "portablecookpot_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1349"
    },
    "全局.wall_wood_item_init_fn:UNKNOWN": {
        "prefix": "wall_wood_item_init_fn",
        "body": "wall_wood_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1847"
    },
    "全局._profiler_hook_wrapper_by_time:UNKNOWN": {
        "prefix": "_profiler_hook_wrapper_by_time",
        "body": "_profiler_hook_wrapper_by_time(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/profiler 所在行数: 189"
    },
    "全局.MakeObstaclePhysics:UNKNOWN": {
        "prefix": "MakeObstaclePhysics",
        "body": "MakeObstaclePhysics(${1:inst},${2:rad},${3:height})",
        "description": " ※参数: \n   (inst)<>[] \n   (rad)<>[] \n   (height)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 588"
    },
    "全局.d_hidekitcoon:UNKNOWN": {
        "prefix": "d_hidekitcoon",
        "body": "d_hidekitcoon(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 908"
    },
    "全局.firepit_init_fn:UNKNOWN": {
        "prefix": "firepit_init_fn",
        "body": "firepit_init_fn(${1:inst},${2:build_name},${3:fxoffset})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (fxoffset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1404"
    },
    "全局.wall_ruins_clear_fn:UNKNOWN": {
        "prefix": "wall_ruins_clear_fn",
        "body": "wall_ruins_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1817"
    },
    "全局.OnServerPauseDirty:UNKNOWN": {
        "prefix": "OnServerPauseDirty",
        "body": "OnServerPauseDirty(${1:pause},${2:autopause},${3:gameautopause},${4:source})",
        "description": " ※参数: \n   (pause)<>[] \n   (autopause)<>[] \n   (gameautopause)<>[] \n   (source)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 739"
    },
    "全局.bundlewrap_clear_fn:UNKNOWN": {
        "prefix": "bundlewrap_clear_fn",
        "body": "bundlewrap_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1268"
    },
    "全局.MakeHauntable:UNKNOWN": {
        "prefix": "MakeHauntable",
        "body": "MakeHauntable(${1:inst},${2:cooldown},${3:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 829"
    },
    "全局.d_playeritems:UNKNOWN": {
        "prefix": "d_playeritems",
        "body": "d_playeritems(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 45"
    },
    "全局.GetModFancyName:UNKNOWN": {
        "prefix": "GetModFancyName",
        "body": "GetModFancyName(${1:mod_name})",
        "description": " ※参数: \n   (mod_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 896"
    },
    "全局.HandleClientModRPC:UNKNOWN": {
        "prefix": "HandleClientModRPC",
        "body": "HandleClientModRPC(${1:tick},${2:namespace},${3:code},${4:data})",
        "description": " ※参数: \n   (tick)<>[] \n   (namespace)<>[] \n   (code)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1557"
    },
    "全局.DisableDLC:UNKNOWN": {
        "prefix": "DisableDLC",
        "body": "DisableDLC(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 124"
    },
    "全局.IsUserCommerceAllowedOnItemType:UNKNOWN": {
        "prefix": "IsUserCommerceAllowedOnItemType",
        "body": "IsUserCommerceAllowedOnItemType(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 693"
    },
    "全局.MakeHeavyObstaclePhysics:UNKNOWN": {
        "prefix": "MakeHeavyObstaclePhysics",
        "body": "MakeHeavyObstaclePhysics(${1:inst},${2:rad},${3:height})",
        "description": " ※参数: \n   (inst)<>[] \n   (rad)<>[] \n   (height)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 633"
    },
    "全局.GetGameModeDescriptionString:UNKNOWN": {
        "prefix": "GetGameModeDescriptionString",
        "body": "GetGameModeDescriptionString(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 255"
    },
    "全局.IsAnyItemNew:UNKNOWN": {
        "prefix": "IsAnyItemNew",
        "body": "IsAnyItemNew(${1:user_profile})",
        "description": " ※参数: \n   (user_profile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1335"
    },
    "全局.cane_init_fn:UNKNOWN": {
        "prefix": "cane_init_fn",
        "body": "cane_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2163"
    },
    "全局.d_unlockallachievements:UNKNOWN": {
        "prefix": "d_unlockallachievements",
        "body": "d_unlockallachievements(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 793"
    },
    "全局.GetPlayerBadgeData:UNKNOWN": {
        "prefix": "GetPlayerBadgeData",
        "body": "GetPlayerBadgeData(${1:character},${2:ghost},${3:state_1},${4:state_2},${5:state_3})",
        "description": " ※参数: \n   (character)<>[] \n   (ghost)<>[] \n   (state_1)<>[] \n   (state_2)<>[] \n   (state_3)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1853"
    },
    "全局.MakeSmallHeavyObstaclePhysics:UNKNOWN": {
        "prefix": "MakeSmallHeavyObstaclePhysics",
        "body": "MakeSmallHeavyObstaclePhysics(${1:inst},${2:rad},${3:height})",
        "description": " ※参数: \n   (inst)<>[] \n   (rad)<>[] \n   (height)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 653"
    },
    "全局.IsPreviousFestivalEvent:UNKNOWN": {
        "prefix": "IsPreviousFestivalEvent",
        "body": "IsPreviousFestivalEvent(${1:event})",
        "description": " ※参数: \n   (event)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1011"
    },
    "全局.MakeHauntableFreeze:UNKNOWN": {
        "prefix": "MakeHauntableFreeze",
        "body": "MakeHauntableFreeze(${1:inst},${2:chance},${3:cooldown},${4:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 937"
    },
    "全局.RemoveRecipeFromFilter:UNKNOWN": {
        "prefix": "RemoveRecipeFromFilter",
        "body": "RemoveRecipeFromFilter(${1:recipe_name},${2:filter_name})",
        "description": " ※参数: \n   (recipe_name)<>[] \n   (filter_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 722"
    },
    "全局.d_oversized:UNKNOWN": {
        "prefix": "d_oversized",
        "body": "d_oversized(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1412"
    },
    "全局.MakeHauntablePlayAnim:UNKNOWN": {
        "prefix": "MakeHauntablePlayAnim",
        "body": "MakeHauntablePlayAnim(${1:inst},${2:anim},${3:animloop},${4:pushanim},${5:animduration},${6:endanim},${7:endanimloop},${8:soundevent},${9:soundname},${10:soundduration},${11:chance},${12:cooldown},${13:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (anim)<>[] \n   (animloop)<>[] \n   (pushanim)<>[] \n   (animduration)<>[] \n   (endanim)<>[] \n   (endanimloop)<>[] \n   (soundevent)<>[] \n   (soundname)<>[] \n   (soundduration)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1166"
    },
    "全局.d_allstscostumes:UNKNOWN": {
        "prefix": "d_allstscostumes",
        "body": "d_allstscostumes(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 384"
    },
    "全局.SetTileProperty:UNKNOWN": {
        "prefix": "SetTileProperty",
        "body": "SetTileProperty(${1:tile_id},${2:propertyname},${3:value})",
        "description": " ※参数: \n   (tile_id)<>[] \n   (propertyname)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 385"
    },
    "全局.d_dumpCreatureTXT:UNKNOWN": {
        "prefix": "d_dumpCreatureTXT",
        "body": "d_dumpCreatureTXT(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1852"
    },
    "全局.MakeHauntableLaunchOrChangePrefab:UNKNOWN": {
        "prefix": "MakeHauntableLaunchOrChangePrefab",
        "body": "MakeHauntableLaunchOrChangePrefab(${1:inst},${2:launchchance},${3:prefabchance},${4:speed},${5:cooldown},${6:newprefab},${7:prefab_haunt_value},${8:launch_haunt_value},${9:nofx})",
        "description": " ※参数: \n   (inst)<>[] \n   (launchchance)<>[] \n   (prefabchance)<>[] \n   (speed)<>[] \n   (cooldown)<>[] \n   (newprefab)<>[] \n   (prefab_haunt_value)<>[] \n   (launch_haunt_value)<>[] \n   (nofx)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1054"
    },
    "全局.GetCharacterDescription:UNKNOWN": {
        "prefix": "GetCharacterDescription",
        "body": "GetCharacterDescription(${1:herocharacter})",
        "description": " ※参数: \n   (herocharacter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 416"
    },
    "全局.SpawnAttackWave:UNKNOWN": {
        "prefix": "SpawnAttackWave",
        "body": "SpawnAttackWave(${1:position},${2:rotation},${3:waveSpeed},${4:wavePrefab},${5:idleTime},${6:instantActive})",
        "description": " ※参数: \n   (position)<>[] \n   (rotation)<>[] \n   (waveSpeed)<>[] \n   (wavePrefab)<>[] \n   (idleTime)<>[] \n   (instantActive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 74"
    },
    "全局.Shard_SyncMermKingExists:UNKNOWN": {
        "prefix": "Shard_SyncMermKingExists",
        "body": "Shard_SyncMermKingExists(${1:exists},${2:shardid})",
        "description": " ※参数: \n   (exists)<>[] \n   (shardid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 214"
    },
    "全局.GetNextOwnedSkin:UNKNOWN": {
        "prefix": "GetNextOwnedSkin",
        "body": "GetNextOwnedSkin(${1:prefab},${2:cur_skin})",
        "description": " ※参数: \n   (prefab)<>[] \n   (cur_skin)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1519"
    },
    "全局.MakeMediumBurnableCorpse:UNKNOWN": {
        "prefix": "MakeMediumBurnableCorpse",
        "body": "MakeMediumBurnableCorpse(${1:inst},${2:time},${3:sym},${4:offset},${5:scale})",
        "description": " ※参数: \n   (inst)<>[] \n   (time)<>[] \n   (sym)<>[] \n   (offset)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 292"
    },
    "全局.d_startmoonstorm:UNKNOWN": {
        "prefix": "d_startmoonstorm",
        "body": "d_startmoonstorm(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1422"
    },
    "全局.MakeHauntableDropFirstItem:UNKNOWN": {
        "prefix": "MakeHauntableDropFirstItem",
        "body": "MakeHauntableDropFirstItem(${1:inst},${2:chance},${3:cooldown},${4:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1237"
    },
    "全局.MakeHauntableLaunchAndDropFirstItem:UNKNOWN": {
        "prefix": "MakeHauntableLaunchAndDropFirstItem",
        "body": "MakeHauntableLaunchAndDropFirstItem(${1:inst},${2:launchchance},${3:dropchance},${4:speed},${5:cooldown},${6:launch_haunt_value},${7:drop_haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (launchchance)<>[] \n   (dropchance)<>[] \n   (speed)<>[] \n   (cooldown)<>[] \n   (launch_haunt_value)<>[] \n   (drop_haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1268"
    },
    "全局.AddHauntableCustomReaction:UNKNOWN": {
        "prefix": "AddHauntableCustomReaction",
        "body": "AddHauntableCustomReaction(${1:inst},${2:fn},${3:secondrxn},${4:ignoreinitialresult},${5:ignoresecondaryresult})",
        "description": " ※参数: \n   (inst)<>[] \n   (fn)<>[] \n   (secondrxn)<>[] \n   (ignoreinitialresult)<>[] \n   (ignoresecondaryresult)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1310"
    },
    "全局.bugnet_init_fn:UNKNOWN": {
        "prefix": "bugnet_init_fn",
        "body": "bugnet_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1321"
    },
    "全局.MakeSmallPropagator:UNKNOWN": {
        "prefix": "MakeSmallPropagator",
        "body": "MakeSmallPropagator(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 195"
    },
    "全局.IsFestivalEventActive:UNKNOWN": {
        "prefix": "IsFestivalEventActive",
        "body": "IsFestivalEventActive(${1:event})",
        "description": " ※参数: \n   (event)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1007"
    },
    "全局.firesuppressor_init_fn:UNKNOWN": {
        "prefix": "firesuppressor_init_fn",
        "body": "firesuppressor_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1374"
    },
    "全局.MakeForgeRepairable:UNKNOWN": {
        "prefix": "MakeForgeRepairable",
        "body": "MakeForgeRepairable(${1:inst},${2:material},${3:onbroken},${4:onrepaired})",
        "description": " ※参数: \n   (inst)<>[] \n   (material)<>[] \n   (onbroken)<>[] \n   (onrepaired)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1619"
    },
    "全局.GetInventoryItemAtlas:UNKNOWN": {
        "prefix": "GetInventoryItemAtlas",
        "body": "GetInventoryItemAtlas(${1:imagename},${2:no_fallback})",
        "description": " ※参数: \n   (imagename)<>[] \n   (no_fallback)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 637"
    },
    "全局.MigrateToServer:UNKNOWN": {
        "prefix": "MigrateToServer",
        "body": "MigrateToServer(${1:serverIp},${2:serverPort},${3:serverPassword},${4:serverNetId})",
        "description": " ※参数: \n   (serverIp)<>[] \n   (serverPort)<>[] \n   (serverPassword)<>[] \n   (serverNetId)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 643"
    },
    "全局.MakeFlyingCharacterPhysics:UNKNOWN": {
        "prefix": "MakeFlyingCharacterPhysics",
        "body": "MakeFlyingCharacterPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 414"
    },
    "全局.DistXZSq:UNKNOWN": {
        "prefix": "DistXZSq",
        "body": "DistXZSq(${1:p1},${2:p2})",
        "description": " ※参数: \n   (p1)<>[] \n   (p2)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 58"
    },
    "全局.mast_malbatross_item_clear_fn:UNKNOWN": {
        "prefix": "mast_malbatross_item_clear_fn",
        "body": "mast_malbatross_item_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1975"
    },
    "全局.AddDefaultRippleSymbols:UNKNOWN": {
        "prefix": "AddDefaultRippleSymbols",
        "body": "AddDefaultRippleSymbols(${1:inst},${2:ripple},${3:shadow})",
        "description": " ※参数: \n   (inst)<>[] \n   (ripple)<>[] \n   (shadow)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1530"
    },
    "全局.GetEmotesWordPredictionDictionary:UNKNOWN": {
        "prefix": "GetEmotesWordPredictionDictionary",
        "body": "GetEmotesWordPredictionDictionary(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 666"
    },
    "全局.SpawnAttackWaves:UNKNOWN": {
        "prefix": "SpawnAttackWaves",
        "body": "SpawnAttackWaves(${1:position},${2:rotation},${3:spawn_radius},${4:numWaves},${5:totalAngle},${6:waveSpeed},${7:wavePrefab},${8:idleTime},${9:instantActive})",
        "description": " ※参数: \n   (position)<>[] \n   (rotation)<>[] \n   (spawn_radius)<>[] \n   (numWaves)<>[] \n   (totalAngle)<>[] \n   (waveSpeed)<>[] \n   (wavePrefab)<>[] \n   (idleTime)<>[] \n   (instantActive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 30"
    },
    "全局.PreventTargetingOnAttacked:UNKNOWN": {
        "prefix": "PreventTargetingOnAttacked",
        "body": "PreventTargetingOnAttacked(${1:inst},${2:attacker},${3:tag})",
        "description": " ※参数: \n   (inst)<>[] \n   (attacker)<>[] \n   (tag)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1515"
    },
    "全局.MakeTinyFreezableCharacter:UNKNOWN": {
        "prefix": "MakeTinyFreezableCharacter",
        "body": "MakeTinyFreezableCharacter(${1:inst},${2:sym},${3:offset})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 323"
    },
    "全局.GetTimePlaying:UNKNOWN": {
        "prefix": "GetTimePlaying",
        "body": "GetTimePlaying(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 353"
    },
    "全局.ToggleOnAllObjectCollisionsAt:UNKNOWN": {
        "prefix": "ToggleOnAllObjectCollisionsAt",
        "body": "ToggleOnAllObjectCollisionsAt(${1:inst},${2:x},${3:z})",
        "description": " ※参数: \n   (inst)<>[] \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1447"
    },
    "全局.encodeString_compliant:UNKNOWN": {
        "prefix": "encodeString_compliant",
        "body": "encodeString_compliant(${1:s})",
        "description": " ※参数: \n   (s)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 150"
    },
    "全局.ToggleOffCharacterCollisions:UNKNOWN": {
        "prefix": "ToggleOffCharacterCollisions",
        "body": "ToggleOffCharacterCollisions(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1408"
    },
    "全局.MakeTinyGhostPhysics:UNKNOWN": {
        "prefix": "MakeTinyGhostPhysics",
        "body": "MakeTinyGhostPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 484"
    },
    "全局.AddAction:添加动作API": {
        "prefix": "AddAction",
        "body": "AddAction(\"${1:id}\", \"${2:动作译名}\", function(act)\n\tlocal doer = act.doer\n\tlocal tar = act.target\n\tlocal invobj = act.invobject\n\tlocal pos = act.pos\n\t$3\n\treturn true\nend)",
        "description": " ※参数: \n   (id)<str>[动作id] \n   (str)<str>[动作译名] \n   (fn)<fn>[]\n      {参数:\n         (act)<tbl>[] \n      返回:} \n ※返回: \n ※说明: 添加动作API\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 442"
    },
    "全局.DamLevDist:UNKNOWN": {
        "prefix": "DamLevDist",
        "body": "DamLevDist(${1:a},${2:b},${3:limit})",
        "description": " ※参数: \n   (a)<>[] \n   (b)<>[] \n   (limit)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 535"
    },
    "全局.ErodeAway:UNKNOWN": {
        "prefix": "ErodeAway",
        "body": "ErodeAway(${1:inst},${2:erode_time})",
        "description": " ※参数: \n   (inst)<>[] \n   (erode_time)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 523"
    },
    "全局.AddRoom:UNKNOWN": {
        "prefix": "AddRoom",
        "body": "AddRoom(${1:arg1},${2:...})",
        "description": " ※参数: \n   (arg1)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 302"
    },
    "全局.MakeGiantCharacterPhysics:UNKNOWN": {
        "prefix": "MakeGiantCharacterPhysics",
        "body": "MakeGiantCharacterPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 439"
    },
    "全局.ChangeToInventoryItemPhysics:UNKNOWN": {
        "prefix": "ChangeToInventoryItemPhysics",
        "body": "ChangeToInventoryItemPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 561"
    },
    "全局.IsPackABundle:UNKNOWN": {
        "prefix": "IsPackABundle",
        "body": "IsPackABundle(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 311"
    },
    "全局.ChangeToGhostPhysics:UNKNOWN": {
        "prefix": "ChangeToGhostPhysics",
        "body": "ChangeToGhostPhysics(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 496"
    },
    "全局.IsOceanTile:UNKNOWN": {
        "prefix": "IsOceanTile",
        "body": "IsOceanTile(${1:tile})",
        "description": " ※参数: \n   (tile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 3"
    },
    "全局.RunInEnvironment:UNKNOWN": {
        "prefix": "RunInEnvironment",
        "body": "RunInEnvironment(${1:fn},${2:fnenv})",
        "description": " ※参数: \n   (fn)<>[] \n   (fnenv)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 782"
    },
    "全局.known_assert:UNKNOWN": {
        "prefix": "known_assert",
        "body": "known_assert(${1:condition},${2:key})",
        "description": " ※参数: \n   (condition)<>[] \n   (key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/knownerrors 所在行数: 39"
    },
    "全局.wall_wood_item_clear_fn:UNKNOWN": {
        "prefix": "wall_wood_item_clear_fn",
        "body": "wall_wood_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1852"
    },
    "全局.c_getmaxplayers:UNKNOWN": {
        "prefix": "c_getmaxplayers",
        "body": "c_getmaxplayers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 274"
    },
    "全局.d_removeentitywithnetworkid:UNKNOWN": {
        "prefix": "d_removeentitywithnetworkid",
        "body": "d_removeentitywithnetworkid(${1:networkid},${2:x},${3:y},${4:z})",
        "description": " ※参数: \n   (networkid)<>[] \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1524"
    },
    "全局.MakeSnowCovered:UNKNOWN": {
        "prefix": "MakeSnowCovered",
        "body": "MakeSnowCovered(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 714"
    },
    "全局.c_maintainall:UNKNOWN": {
        "prefix": "c_maintainall",
        "body": "c_maintainall(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1150"
    },
    "全局.ArrayUnion:UNKNOWN": {
        "prefix": "ArrayUnion",
        "body": "ArrayUnion(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 351"
    },
    "全局.d_timeddebugprefab:UNKNOWN": {
        "prefix": "d_timeddebugprefab",
        "body": "d_timeddebugprefab(${1:x},${2:y},${3:z},${4:lifetime},${5:prefab})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (lifetime)<>[] \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3604"
    },
    "全局.GetFiveRadius:UNKNOWN": {
        "prefix": "GetFiveRadius",
        "body": "GetFiveRadius(${1:x},${2:z},${3:prefab})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/regrowthutil 所在行数: 9"
    },
    "全局.GetFestivalEventServerName:UNKNOWN": {
        "prefix": "GetFestivalEventServerName",
        "body": "GetFestivalEventServerName(${1:festival},${2:season})",
        "description": " ※参数: \n   (festival)<>[] \n   (season)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1047"
    },
    "全局.MakeFlyingGiantCharacterPhysics:UNKNOWN": {
        "prefix": "MakeFlyingGiantCharacterPhysics",
        "body": "MakeFlyingGiantCharacterPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 454"
    },
    "全局.Shard_OnDiceRollRequest:UNKNOWN": {
        "prefix": "Shard_OnDiceRollRequest",
        "body": "Shard_OnDiceRollRequest(${1:user_id})",
        "description": " ※参数: \n   (user_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 174"
    },
    "全局.WakeTask:UNKNOWN": {
        "prefix": "WakeTask",
        "body": "WakeTask(${1:task})",
        "description": " ※参数: \n   (task)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 376"
    },
    "全局.ChangeToGiantCharacterPhysics:UNKNOWN": {
        "prefix": "ChangeToGiantCharacterPhysics",
        "body": "ChangeToGiantCharacterPhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 522"
    },
    "全局.MakeWaterObstaclePhysics:UNKNOWN": {
        "prefix": "MakeWaterObstaclePhysics",
        "body": "MakeWaterObstaclePhysics(${1:inst},${2:rad},${3:height},${4:restitution})",
        "description": " ※参数: \n   (inst)<>[] \n   (rad)<>[] \n   (height)<>[] \n   (restitution)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 601"
    },
    "全局.GetHasResourceRenewal:UNKNOWN": {
        "prefix": "GetHasResourceRenewal",
        "body": "GetHasResourceRenewal(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 286"
    },
    "全局.JoinServer:UNKNOWN": {
        "prefix": "JoinServer",
        "body": "JoinServer(${1:server_listing},${2:optional_password_override})",
        "description": " ※参数: \n   (server_listing)<>[] \n   (optional_password_override)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 495"
    },
    "全局.ChangeToWaterObstaclePhysics:UNKNOWN": {
        "prefix": "ChangeToWaterObstaclePhysics",
        "body": "ChangeToWaterObstaclePhysics(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 555"
    },
    "全局.Dbg:UNKNOWN": {
        "prefix": "Dbg",
        "body": "Dbg(${1:thing},${2:level},${3:...})",
        "description": " ※参数: \n   (thing)<>[] \n   (level)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 316"
    },
    "全局.MakeHauntablePanicAndIgnite:UNKNOWN": {
        "prefix": "MakeHauntablePanicAndIgnite",
        "body": "MakeHauntablePanicAndIgnite(${1:inst},${2:panictime},${3:panicchance},${4:ignitechance},${5:cooldown},${6:panic_haunt_value},${7:ignite_haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (panictime)<>[] \n   (panicchance)<>[] \n   (ignitechance)<>[] \n   (cooldown)<>[] \n   (panic_haunt_value)<>[] \n   (ignite_haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1141"
    },
    "全局.shuffledKeys:UNKNOWN": {
        "prefix": "shuffledKeys",
        "body": "shuffledKeys(${1:dict})",
        "description": " ※参数: \n   (dict)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 869"
    },
    "全局.c_searchprefabs:UNKNOWN": {
        "prefix": "c_searchprefabs",
        "body": "c_searchprefabs(${1:str})",
        "description": " ※参数: \n   (str)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1065"
    },
    "全局.d_waxplant:UNKNOWN": {
        "prefix": "d_waxplant",
        "body": "d_waxplant(${1:plant})",
        "description": " ※参数: \n   (plant)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3360"
    },
    "全局.reviver_init_fn:UNKNOWN": {
        "prefix": "reviver_init_fn",
        "body": "reviver_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2061"
    },
    "全局.ProfileStatsSetField:UNKNOWN": {
        "prefix": "ProfileStatsSetField",
        "body": "ProfileStatsSetField(${1:field},${2:value})",
        "description": " ※参数: \n   (field)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 375"
    },
    "全局.MakeMediumFreezableCharacter:UNKNOWN": {
        "prefix": "MakeMediumFreezableCharacter",
        "body": "MakeMediumFreezableCharacter(${1:inst},${2:sym},${3:offset})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 339"
    },
    "全局.c_selectnear:UNKNOWN": {
        "prefix": "c_selectnear",
        "body": "c_selectnear(${1:prefab},${2:rad})",
        "description": " ※参数: \n   (prefab)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 994"
    },
    "全局.GetMaxItemSlots:UNKNOWN": {
        "prefix": "GetMaxItemSlots",
        "body": "GetMaxItemSlots(${1:game_mode})",
        "description": " ※参数: \n   (game_mode)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 311"
    },
    "全局.GetSkinData:UNKNOWN": {
        "prefix": "GetSkinData",
        "body": "GetSkinData(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 589"
    },
    "全局.do_search_subwords:UNKNOWN": {
        "prefix": "do_search_subwords",
        "body": "do_search_subwords(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 611"
    },
    "全局.MakeHauntablePerish:UNKNOWN": {
        "prefix": "MakeHauntablePerish",
        "body": "MakeHauntablePerish(${1:inst},${2:perishpct},${3:chance},${4:cooldown},${5:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (perishpct)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1076"
    },
    "全局.VecUtil_Dot:UNKNOWN": {
        "prefix": "VecUtil_Dot",
        "body": "VecUtil_Dot(${1:p1_x},${2:p1_z},${3:p2_x},${4:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 31"
    },
    "全局.bundle_init_fn:UNKNOWN": {
        "prefix": "bundle_init_fn",
        "body": "bundle_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1275"
    },
    "全局.basic_clear_fn:UNKNOWN": {
        "prefix": "basic_clear_fn",
        "body": "basic_clear_fn(${1:inst},${2:def_build})",
        "description": " ※参数: \n   (inst)<>[] \n   (def_build)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 106"
    },
    "全局.MakeHauntablePanic:UNKNOWN": {
        "prefix": "MakeHauntablePanic",
        "body": "MakeHauntablePanic(${1:inst},${2:panictime},${3:chance},${4:cooldown},${5:haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (panictime)<>[] \n   (chance)<>[] \n   (cooldown)<>[] \n   (haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1121"
    },
    "全局.MakeSmallPerishableCreaturePristine:UNKNOWN": {
        "prefix": "MakeSmallPerishableCreaturePristine",
        "body": "MakeSmallPerishableCreaturePristine(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 772"
    },
    "全局.c_makecrabboat:UNKNOWN": {
        "prefix": "c_makecrabboat",
        "body": "c_makecrabboat(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1509"
    },
    "全局.GetSkilltreeIconAtlas:UNKNOWN": {
        "prefix": "GetSkilltreeIconAtlas",
        "body": "GetSkilltreeIconAtlas(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 786"
    },
    "全局.MakeProjectilePhysics:UNKNOWN": {
        "prefix": "MakeProjectilePhysics",
        "body": "MakeProjectilePhysics(${1:inst},${2:mass},${3:rad})",
        "description": " ※参数: \n   (inst)<>[] \n   (mass)<>[] \n   (rad)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 383"
    },
    "全局.orangestaff_init_fn:UNKNOWN": {
        "prefix": "orangestaff_init_fn",
        "body": "orangestaff_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2283"
    },
    "全局.IfNode:UNKNOWN": {
        "prefix": "IfNode",
        "body": "IfNode(${1:cond},${2:name},${3:node})",
        "description": " ※参数: \n   (cond)<>[] \n   (name)<>[] \n   (node)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/behaviourtree 所在行数: 783"
    },
    "全局.WhileNode:UNKNOWN": {
        "prefix": "WhileNode",
        "body": "WhileNode(${1:cond},${2:name},${3:node})",
        "description": " ※参数: \n   (cond)<>[] \n   (name)<>[] \n   (node)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/behaviourtree 所在行数: 771"
    },
    "全局.AddComponentAction:组件绑定动作": {
        "prefix": "AddComponentAction",
        "body": "AddComponentAction(\"${1:EQUIPPED}\", \"${2:componentname}\", function(inst, doer, target, actions, right)\n \tif right then\n \t\ttable.insert(actions, ACTIONS.xxx)\n \tend\nend)",
        "description": " ※参数: \n   (actiontype)<str>[动作类型] \n   (component)<str>[组件] \n   (fn)<fn>[]\n      {参数:\n         (inst)<>[] \n         (doer)<>[] \n         (pos)<V3>[] \n         (target)<>[] \n         (actions)<>[] \n         (right)<bool>[右键动作] \n      返回:} \n   (modname)<>[] \n ※返回: \n ※说明: 组件绑定动作\n ※贡献者: @lan\n\tSCENE args: inst, doer, actions, right 点击物品栏物品或世界上的物品时执行\n\tUSEITEM args: inst, doer, target, actions, right 拿起某物品放到另一物品上执行\n\tPOINT args: inst, doer, pos, actions, right 对地面执行\n\tEQUIPPED args: inst, doer, target, actions, right 装备某物品后激活,如装备火把点火\n\tINVENTORY args: inst, doer, actions, right 右键物品栏执行\n ※路径: scripts/componentactions 所在行数: 2580"
    },
    "全局.StartStaticThread:UNKNOWN": {
        "prefix": "StartStaticThread",
        "body": "StartStaticThread(${1:fn},${2:id},${3:param})",
        "description": " ※参数: \n   (fn)<>[] \n   (id)<>[] \n   (param)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 397"
    },
    "全局.Shard_SyncWorldSettings:UNKNOWN": {
        "prefix": "Shard_SyncWorldSettings",
        "body": "Shard_SyncWorldSettings(${1:world_id},${2:is_resync})",
        "description": " ※参数: \n   (world_id)<>[] \n   (is_resync)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 24"
    },
    "全局.RunStaticScheduler:UNKNOWN": {
        "prefix": "RunStaticScheduler",
        "body": "RunStaticScheduler(${1:tick})",
        "description": " ※参数: \n   (tick)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 417"
    },
    "全局.FunctionOrValue:UNKNOWN": {
        "prefix": "FunctionOrValue",
        "body": "FunctionOrValue(${1:func_or_val},${2:...})",
        "description": " ※参数: \n   (func_or_val)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1713"
    },
    "全局.RunInSandboxSafe:UNKNOWN": {
        "prefix": "RunInSandboxSafe",
        "body": "RunInSandboxSafe(${1:untrusted_code},${2:error_handler})",
        "description": " ※参数: \n   (untrusted_code)<>[] \n   (error_handler)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 804"
    },
    "全局.RunScheduler:UNKNOWN": {
        "prefix": "RunScheduler",
        "body": "RunScheduler(${1:tick})",
        "description": " ※参数: \n   (tick)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 407"
    },
    "全局.chester_clear_fn:UNKNOWN": {
        "prefix": "chester_clear_fn",
        "body": "chester_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1199"
    },
    "全局.StartThread:UNKNOWN": {
        "prefix": "StartThread",
        "body": "StartThread(${1:fn},${2:id},${3:param})",
        "description": " ※参数: \n   (fn)<>[] \n   (id)<>[] \n   (param)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 387"
    },
    "全局.GetLine:UNKNOWN": {
        "prefix": "GetLine",
        "body": "GetLine(${1:inst},${2:line},${3:modifier},${4:nil_missing})",
        "description": " ※参数: \n   (inst)<>[] \n   (line)<>[] \n   (modifier)<>[] \n   (nil_missing)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 300"
    },
    "全局.fence_item_clear_fn:UNKNOWN": {
        "prefix": "fence_item_clear_fn",
        "body": "fence_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1875"
    },
    "全局.Vec3Util_Scale:UNKNOWN": {
        "prefix": "Vec3Util_Scale",
        "body": "Vec3Util_Scale(${1:p1_x},${2:p1_y},${3:p1_z},${4:scale})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 11"
    },
    "全局.GetAngleFromBoat:UNKNOWN": {
        "prefix": "GetAngleFromBoat",
        "body": "GetAngleFromBoat(${1:boat},${2:x},${3:z})",
        "description": " ※参数: \n   (boat)<>[] \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1510"
    },
    "全局.DoRestart:UNKNOWN": {
        "prefix": "DoRestart",
        "body": "DoRestart(${1:save})",
        "description": " ※参数: \n   (save)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1705"
    },
    "全局.SecondsToTimeString:UNKNOWN": {
        "prefix": "SecondsToTimeString",
        "body": "SecondsToTimeString(${1:total_seconds})",
        "description": " ※参数: \n   (total_seconds)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 54"
    },
    "全局.IsCharacterIngredient:UNKNOWN": {
        "prefix": "IsCharacterIngredient",
        "body": "IsCharacterIngredient(${1:ingredienttype})",
        "description": " ※参数: \n   (ingredienttype)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/recipe 所在行数: 44"
    },
    "全局.WallUpdate:UNKNOWN": {
        "prefix": "WallUpdate",
        "body": "WallUpdate(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 33"
    },
    "全局.RoundToNearest:UNKNOWN": {
        "prefix": "RoundToNearest",
        "body": "RoundToNearest(${1:numToRound},${2:multiple})",
        "description": " ※参数: \n   (numToRound)<>[] \n   (multiple)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 36"
    },
    "全局.c_startinggear:UNKNOWN": {
        "prefix": "c_startinggear",
        "body": "c_startinggear(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1318"
    },
    "全局.Sleep:UNKNOWN": {
        "prefix": "Sleep",
        "body": "Sleep(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 356"
    },
    "全局.circular_index_number:UNKNOWN": {
        "prefix": "circular_index_number",
        "body": "circular_index_number(${1:count},${2:index})",
        "description": " ※参数: \n   (count)<>[] \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1025"
    },
    "全局.Hibernate:UNKNOWN": {
        "prefix": "Hibernate",
        "body": "Hibernate(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 348"
    },
    "全局.d_lavaarena_skip:UNKNOWN": {
        "prefix": "d_lavaarena_skip",
        "body": "d_lavaarena_skip(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 769"
    },
    "全局.IsAny_YearOfThe_EventActive:UNKNOWN": {
        "prefix": "IsAny_YearOfThe_EventActive",
        "body": "IsAny_YearOfThe_EventActive(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 989"
    },
    "全局.Yield:UNKNOWN": {
        "prefix": "Yield",
        "body": "Yield(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 352"
    },
    "全局.KillThreadsWithID:UNKNOWN": {
        "prefix": "KillThreadsWithID",
        "body": "KillThreadsWithID(${1:id})",
        "description": " ※参数: \n   (id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 427"
    },
    "全局.GetPopupIDFromPopupCode:UNKNOWN": {
        "prefix": "GetPopupIDFromPopupCode",
        "body": "GetPopupIDFromPopupCode(${1:popupcode},${2:mod_name})",
        "description": " ※参数: \n   (popupcode)<>[] \n   (mod_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/popupmanager 所在行数: 55"
    },
    "全局.Vec3Util_Dot:UNKNOWN": {
        "prefix": "Vec3Util_Dot",
        "body": "Vec3Util_Dot(${1:p1_x},${2:p1_y},${3:p1_z},${4:p2_x},${5:p2_y},${6:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_y)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 31"
    },
    "全局.FindClosestPlayerInRange:UNKNOWN": {
        "prefix": "FindClosestPlayerInRange",
        "body": "FindClosestPlayerInRange(${1:x},${2:y},${3:z},${4:range},${5:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (range)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 78"
    },
    "全局.decode_scanNumber:UNKNOWN": {
        "prefix": "decode_scanNumber",
        "body": "decode_scanNumber(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 342"
    },
    "全局.GetClosestInstWithTag:UNKNOWN": {
        "prefix": "GetClosestInstWithTag",
        "body": "GetClosestInstWithTag(${1:tag},${2:inst},${3:radius})",
        "description": " ※参数: \n   (tag)<>[] \n   (inst)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 202"
    },
    "全局.GetWorld:UNKNOWN": {
        "prefix": "GetWorld",
        "body": "GetWorld(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 21"
    },
    "全局.ProcessJsonMessage:UNKNOWN": {
        "prefix": "ProcessJsonMessage",
        "body": "ProcessJsonMessage(${1:message})",
        "description": " ※参数: \n   (message)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1246"
    },
    "全局.FindClosestPlayerOnLandInRangeSq:UNKNOWN": {
        "prefix": "FindClosestPlayerOnLandInRangeSq",
        "body": "FindClosestPlayerOnLandInRangeSq(${1:x},${2:y},${3:z},${4:rangesq},${5:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (rangesq)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 91"
    },
    "全局.wall_moonrock_init_fn:UNKNOWN": {
        "prefix": "wall_moonrock_init_fn",
        "body": "wall_moonrock_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1787"
    },
    "全局.modimport:导入指定lua文件中的所有代码": {
        "prefix": "modimport",
        "body": "modimport(${1:modulename})",
        "description": " ※参数: \n   (modulename)<str>[lua文件路径] \n ※返回: \n ※说明: 导入指定lua文件中的所有代码\n ※贡献者: @lan\n ※路径: scripts/mods 所在行数: 332"
    },
    "全局.CanEntitySeeInDark:UNKNOWN": {
        "prefix": "CanEntitySeeInDark",
        "body": "CanEntitySeeInDark(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 459"
    },
    "全局.CalledFrom:UNKNOWN": {
        "prefix": "CalledFrom",
        "body": "CalledFrom(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 16"
    },
    "全局.GetNextRarity:UNKNOWN": {
        "prefix": "GetNextRarity",
        "body": "GetNextRarity(${1:rarity})",
        "description": " ※参数: \n   (rarity)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 95"
    },
    "全局.FindPickupableItem:UNKNOWN": {
        "prefix": "FindPickupableItem",
        "body": "FindPickupableItem(${1:owner},${2:radius},${3:furthestfirst},${4:positionoverride},${5:ignorethese},${6:onlytheseprefabs},${7:allowpickables},${8:worker},${9:extra_filter})",
        "description": " ※参数: \n   (owner)<>[] \n   (radius)<>[] \n   (furthestfirst)<>[] \n   (positionoverride)<>[] \n   (ignorethese)<>[] \n   (onlytheseprefabs)<>[] \n   (allowpickables)<>[] \n   (worker)<>[] \n   (extra_filter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 423"
    },
    "全局.CanEntitySeePoint:UNKNOWN": {
        "prefix": "CanEntitySeePoint",
        "body": "CanEntitySeePoint(${1:inst},${2:x},${3:y},${4:z})",
        "description": " ※参数: \n   (inst)<>[] \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 487"
    },
    "全局.TemporarilyRemovePhysics:UNKNOWN": {
        "prefix": "TemporarilyRemovePhysics",
        "body": "TemporarilyRemovePhysics(${1:obj},${2:time})",
        "description": " ※参数: \n   (obj)<>[] \n   (time)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 513"
    },
    "全局.MakeInventoryFloatable:UNKNOWN": {
        "prefix": "MakeInventoryFloatable",
        "body": "MakeInventoryFloatable(${1:inst},${2:size},${3:offset},${4:scale},${5:swap_bank},${6:float_index},${7:swap_data})",
        "description": " ※参数: \n   (inst)<>[] \n   (size)<>[] \n   (offset)<>[] \n   (scale)<>[] \n   (swap_bank)<>[] \n   (float_index)<>[] \n   (swap_data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1540"
    },
    "全局.GetFrameSymbolForRarity:UNKNOWN": {
        "prefix": "GetFrameSymbolForRarity",
        "body": "GetFrameSymbolForRarity(${1:rarity})",
        "description": " ※参数: \n   (rarity)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 114"
    },
    "全局.SuUsed:UNKNOWN": {
        "prefix": "SuUsed",
        "body": "SuUsed(${1:item},${2:value})",
        "description": " ※参数: \n   (item)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 391"
    },
    "全局.c_find:UNKNOWN": {
        "prefix": "c_find",
        "body": "c_find(${1:prefab},${2:radius},${3:inst})",
        "description": " ※参数: \n   (prefab)<>[] \n   (radius)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 841"
    },
    "全局.SpringGrowthMod:UNKNOWN": {
        "prefix": "SpringGrowthMod",
        "body": "SpringGrowthMod(${1:amount},${2:forced})",
        "description": " ※参数: \n   (amount)<>[] \n   (forced)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 509"
    },
    "全局.ApplyExtraEvent:UNKNOWN": {
        "prefix": "ApplyExtraEvent",
        "body": "ApplyExtraEvent(${1:event})",
        "description": " ※参数: \n   (event)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 596"
    },
    "全局.shuffleArray:UNKNOWN": {
        "prefix": "shuffleArray",
        "body": "shuffleArray(${1:array})",
        "description": " ※参数: \n   (array)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 860"
    },
    "全局.GetRandomInstWithTag:UNKNOWN": {
        "prefix": "GetRandomInstWithTag",
        "body": "GetRandomInstWithTag(${1:tag},${2:inst},${3:radius})",
        "description": " ※参数: \n   (tag)<>[] \n   (inst)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 196"
    },
    "全局.c_knownassert:UNKNOWN": {
        "prefix": "c_knownassert",
        "body": "c_knownassert(${1:key})",
        "description": " ※参数: \n   (key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1276"
    },
    "全局.MergeMaps:UNKNOWN": {
        "prefix": "MergeMaps",
        "body": "MergeMaps(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 393"
    },
    "全局.VecUtil_RotateDir:UNKNOWN": {
        "prefix": "VecUtil_RotateDir",
        "body": "VecUtil_RotateDir(${1:dir_x},${2:dir_z},${3:theta})",
        "description": " ※参数: \n   (dir_x)<>[] \n   (dir_z)<>[] \n   (theta)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 106"
    },
    "全局.dumptable:UNKNOWN": {
        "prefix": "dumptable",
        "body": "dumptable(${1:obj},${2:indent},${3:recurse_levels},${4:visit_table},${5:is_terse})",
        "description": " ※参数: \n   (obj)<>[] \n   (indent)<>[] \n   (recurse_levels)<>[] \n   (visit_table)<>[] \n   (is_terse)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 113"
    },
    "全局.GetSkilltreeIconAtlas_Internal:UNKNOWN": {
        "prefix": "GetSkilltreeIconAtlas_Internal",
        "body": "GetSkilltreeIconAtlas_Internal(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 774"
    },
    "全局.AddGameDebugKey:UNKNOWN": {
        "prefix": "AddGameDebugKey",
        "body": "AddGameDebugKey(${1:key},${2:fn},${3:down})",
        "description": " ※参数: \n   (key)<>[] \n   (fn)<>[] \n   (down)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 83"
    },
    "全局.GetKilledByFromMorgueRow:UNKNOWN": {
        "prefix": "GetKilledByFromMorgueRow",
        "body": "GetKilledByFromMorgueRow(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 108"
    },
    "全局.ReduceAngleRad:UNKNOWN": {
        "prefix": "ReduceAngleRad",
        "body": "ReduceAngleRad(${1:rot})",
        "description": " ※参数: \n   (rot)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 90"
    },
    "全局.mastupgrade_lamp_init_fn:UNKNOWN": {
        "prefix": "mastupgrade_lamp_init_fn",
        "body": "mastupgrade_lamp_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1731"
    },
    "全局.BuildBloomShader:UNKNOWN": {
        "prefix": "BuildBloomShader",
        "body": "BuildBloomShader(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 206"
    },
    "全局.GetSkilltreeBG_Internal:UNKNOWN": {
        "prefix": "GetSkilltreeBG_Internal",
        "body": "GetSkilltreeBG_Internal(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 733"
    },
    "全局.FindSwimmableOffset:UNKNOWN": {
        "prefix": "FindSwimmableOffset",
        "body": "FindSwimmableOffset(${1:position},${2:start_angle},${3:radius},${4:attempts},${5:check_los},${6:ignore_walls},${7:customcheckfn},${8:allow_boats})",
        "description": " ※参数: \n   (position)<>[] \n   (start_angle)<>[] \n   (radius)<>[] \n   (attempts)<>[] \n   (check_los)<>[] \n   (ignore_walls)<>[] \n   (customcheckfn)<>[] \n   (allow_boats)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 308"
    },
    "全局.Update:UNKNOWN": {
        "prefix": "Update",
        "body": "Update(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 224"
    },
    "全局.DeleteCloseEntsWithTag:UNKNOWN": {
        "prefix": "DeleteCloseEntsWithTag",
        "body": "DeleteCloseEntsWithTag(${1:tag},${2:inst},${3:radius})",
        "description": " ※参数: \n   (tag)<>[] \n   (inst)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 208"
    },
    "全局.SpringCombatMod:UNKNOWN": {
        "prefix": "SpringCombatMod",
        "body": "SpringCombatMod(${1:amount},${2:forced})",
        "description": " ※参数: \n   (amount)<>[] \n   (forced)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 506"
    },
    "全局.FindPlayersInRange:UNKNOWN": {
        "prefix": "FindPlayersInRange",
        "body": "FindPlayersInRange(${1:x},${2:y},${3:z},${4:range},${5:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (range)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 124"
    },
    "全局.FindValidPositionByFan:UNKNOWN": {
        "prefix": "FindValidPositionByFan",
        "body": "FindValidPositionByFan(${1:start_angle},${2:radius},${3:attempts},${4:test_fn})",
        "description": " ※参数: \n   (start_angle)<>[] \n   (radius)<>[] \n   (attempts)<>[] \n   (test_fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 255"
    },
    "全局.c_gatherplayers:UNKNOWN": {
        "prefix": "c_gatherplayers",
        "body": "c_gatherplayers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1039"
    },
    "全局.FindClosestPlayerInRangeSq:UNKNOWN": {
        "prefix": "FindClosestPlayerInRangeSq",
        "body": "FindClosestPlayerInRangeSq(${1:x},${2:y},${3:z},${4:rangesq},${5:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (rangesq)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 63"
    },
    "全局.AnimateUIScale:UNKNOWN": {
        "prefix": "AnimateUIScale",
        "body": "AnimateUIScale(${1:item},${2:total_time},${3:start_scale},${4:end_scale})",
        "description": " ※参数: \n   (item)<>[] \n   (total_time)<>[] \n   (start_scale)<>[] \n   (end_scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 216"
    },
    "全局.ocean_trawler_clear_fn:UNKNOWN": {
        "prefix": "ocean_trawler_clear_fn",
        "body": "ocean_trawler_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 281"
    },
    "全局.CanEntitySeeTarget:UNKNOWN": {
        "prefix": "CanEntitySeeTarget",
        "body": "CanEntitySeeTarget(${1:inst},${2:target})",
        "description": " ※参数: \n   (inst)<>[] \n   (target)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 498"
    },
    "全局.FindEntity:UNKNOWN": {
        "prefix": "FindEntity",
        "body": "FindEntity(${1:inst},${2:radius},${3:fn},${4:musttags},${5:canttags},${6:mustoneoftags})",
        "description": " ※参数: \n   (inst)<>[] \n   (radius)<>[] \n   (fn)<>[] \n   (musttags)<>[] \n   (canttags)<>[] \n   (mustoneoftags)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 31"
    },
    "全局.c_spawn:UNKNOWN": {
        "prefix": "c_spawn",
        "body": "c_spawn(${1:prefab},${2:count},${3:dontselect})",
        "description": " ※参数: \n   (prefab)<>[] \n   (count)<>[] \n   (dontselect)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 208"
    },
    "全局.FindNearbyOcean:UNKNOWN": {
        "prefix": "FindNearbyOcean",
        "body": "FindNearbyOcean(${1:position},${2:range})",
        "description": " ※参数: \n   (position)<>[] \n   (range)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 183"
    },
    "全局.FindClosestPlayerToInst:UNKNOWN": {
        "prefix": "FindClosestPlayerToInst",
        "body": "FindClosestPlayerToInst(${1:inst},${2:range},${3:isalive})",
        "description": " ※参数: \n   (inst)<>[] \n   (range)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 86"
    },
    "全局.Networking_Talk:UNKNOWN": {
        "prefix": "Networking_Talk",
        "body": "Networking_Talk(${1:guid},${2:message},${3:duration},${4:text_filter_context},${5:original_author})",
        "description": " ※参数: \n   (guid)<>[] \n   (message)<>[] \n   (duration)<>[] \n   (text_filter_context)<>[] \n   (original_author)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 139"
    },
    "全局.c_announce:UNKNOWN": {
        "prefix": "c_announce",
        "body": "c_announce(${1:msg},${2:interval},${3:category})",
        "description": " ※参数: \n   (msg)<>[] \n   (interval)<>[] \n   (category)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 46"
    },
    "全局.c_speedup:UNKNOWN": {
        "prefix": "c_speedup",
        "body": "c_speedup(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1046"
    },
    "全局.d_hidekitcoons:UNKNOWN": {
        "prefix": "d_hidekitcoons",
        "body": "d_hidekitcoons(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 916"
    },
    "全局.RegisterAllDLC:UNKNOWN": {
        "prefix": "RegisterAllDLC",
        "body": "RegisterAllDLC(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 58"
    },
    "全局.decode_scanWhitespace:UNKNOWN": {
        "prefix": "decode_scanWhitespace",
        "body": "decode_scanWhitespace(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 461"
    },
    "全局.RegisterDLC:UNKNOWN": {
        "prefix": "RegisterDLC",
        "body": "RegisterDLC(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 72"
    },
    "全局.EnableExclusiveDLC:UNKNOWN": {
        "prefix": "EnableExclusiveDLC",
        "body": "EnableExclusiveDLC(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 128"
    },
    "全局.InitDLC:UNKNOWN": {
        "prefix": "InitDLC",
        "body": "InitDLC(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 95"
    },
    "全局.DrawWalkableGrid:UNKNOWN": {
        "prefix": "DrawWalkableGrid",
        "body": "DrawWalkableGrid(${1:graph})",
        "description": " ※参数: \n   (graph)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 154"
    },
    "全局.GetGameModeProperty:UNKNOWN": {
        "prefix": "GetGameModeProperty",
        "body": "GetGameModeProperty(${1:property})",
        "description": " ※参数: \n   (property)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 205"
    },
    "全局.GetCharacterAvatarTextureLocation:UNKNOWN": {
        "prefix": "g+GetCharacterAvatarTextureLocation",
        "body": "GetCharacterAvatarTextureLocation(${1:character})",
        "description": " ※参数: \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 72"
    },
    "全局.GetSelectableCharacterList:UNKNOWN": {
        "prefix": "GetSelectableCharacterList",
        "body": "GetSelectableCharacterList(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 105"
    },
    "全局.GetFEVisibleCharacterList:UNKNOWN": {
        "prefix": "GetFEVisibleCharacterList",
        "body": "GetFEVisibleCharacterList(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 110"
    },
    "全局.DisableAllDLC:UNKNOWN": {
        "prefix": "DisableAllDLC",
        "body": "DisableAllDLC(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 151"
    },
    "全局.GetRandomItemWithIndex:UNKNOWN": {
        "prefix": "GetRandomItemWithIndex",
        "body": "GetRandomItemWithIndex(${1:choices})",
        "description": " ※参数: \n   (choices)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 275"
    },
    "全局.OnFocusGained:UNKNOWN": {
        "prefix": "OnFocusGained",
        "body": "OnFocusGained(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1955"
    },
    "全局.chester_init_fn:UNKNOWN": {
        "prefix": "chester_init_fn",
        "body": "chester_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1193"
    },
    "全局.yellowstaff_init_fn:UNKNOWN": {
        "prefix": "yellowstaff_init_fn",
        "body": "yellowstaff_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2319"
    },
    "全局.SpawnNewPlayerOnServerFromSim:UNKNOWN": {
        "prefix": "SpawnNewPlayerOnServerFromSim",
        "body": "SpawnNewPlayerOnServerFromSim(${1:player_guid},${2:skin_base},${3:clothing_body},${4:clothing_hand},${5:clothing_legs},${6:clothing_feet},${7:starting_item_skins},${8:skillselection})",
        "description": " ※参数: \n   (player_guid)<>[] \n   (skin_base)<>[] \n   (clothing_body)<>[] \n   (clothing_hand)<>[] \n   (clothing_legs)<>[] \n   (clothing_feet)<>[] \n   (starting_item_skins)<>[] \n   (skillselection)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 247"
    },
    "全局.EnableAllMenuDLC:UNKNOWN": {
        "prefix": "EnableAllMenuDLC",
        "body": "EnableAllMenuDLC(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 157"
    },
    "全局.SpawnPrefabFromSim:UNKNOWN": {
        "prefix": "SpawnPrefabFromSim",
        "body": "SpawnPrefabFromSim(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 325"
    },
    "全局.EnableAllDLC:UNKNOWN": {
        "prefix": "EnableAllDLC",
        "body": "EnableAllDLC(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 145"
    },
    "全局.d_spell:UNKNOWN": {
        "prefix": "d_spell",
        "body": "d_spell(${1:spellnum},${2:item})",
        "description": " ※参数: \n   (spellnum)<>[] \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3672"
    },
    "全局.MakeDeployableKitItem:UNKNOWN": {
        "prefix": "MakeDeployableKitItem",
        "body": "MakeDeployableKitItem(${1:name},${2:prefab_to_deploy},${3:bank},${4:build},${5:anim},${6:assets},${7:floatable_data},${8:tags},${9:burnable},${10:deployable_data},${11:stack_size},${12:PostMasterSimfn})",
        "description": " ※参数: \n   (name)<>[] \n   (prefab_to_deploy)<>[] \n   (bank)<>[] \n   (build)<>[] \n   (anim)<>[] \n   (assets)<>[] \n   (floatable_data)<>[] \n   (tags)<>[] \n   (burnable)<>[] \n   (deployable_data)<>[] \n   (stack_size)<>[] \n   (PostMasterSimfn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabutil 所在行数: 71"
    },
    "全局.GetRarityForItem:UNKNOWN": {
        "prefix": "GetRarityForItem",
        "body": "GetRarityForItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 622"
    },
    "全局.LoadKlumpFile:UNKNOWN": {
        "prefix": "LoadKlumpFile",
        "body": "LoadKlumpFile(${1:klump_file},${2:cipher},${3:suppress_print})",
        "description": " ※参数: \n   (klump_file)<>[] \n   (cipher)<>[] \n   (suppress_print)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/klump 所在行数: 47"
    },
    "全局.GetBoxBuildForItem:UNKNOWN": {
        "prefix": "GetBoxBuildForItem",
        "body": "GetBoxBuildForItem(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 478"
    },
    "全局.d_testhashes_prefabs:UNKNOWN": {
        "prefix": "d_testhashes_prefabs",
        "body": "d_testhashes_prefabs(${1:bitswanted})",
        "description": " ※参数: \n   (bitswanted)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3468"
    },
    "全局.AddGlobalClassPostConstruct:UNKNOWN": {
        "prefix": "AddGlobalClassPostConstruct",
        "body": "AddGlobalClassPostConstruct(${1:package},${2:classname},${3:fn})",
        "description": " ※参数: \n   (package)<>[] \n   (classname)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 346"
    },
    "全局.mastupgrade_lightningrod_init_fn:UNKNOWN": {
        "prefix": "mastupgrade_lightningrod_init_fn",
        "body": "mastupgrade_lightningrod_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1754"
    },
    "全局.ShouldDisplayItemInCollection:UNKNOWN": {
        "prefix": "ShouldDisplayItemInCollection",
        "body": "ShouldDisplayItemInCollection(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1340"
    },
    "全局.DoesPackHaveACharacter:UNKNOWN": {
        "prefix": "DoesPackHaveACharacter",
        "body": "DoesPackHaveACharacter(${1:pack_key})",
        "description": " ※参数: \n   (pack_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 540"
    },
    "全局.GetSkinsDataFromClientTableData:UNKNOWN": {
        "prefix": "GetSkinsDataFromClientTableData",
        "body": "GetSkinsDataFromClientTableData(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1494"
    },
    "全局.GetSkinModes:UNKNOWN": {
        "prefix": "GetSkinModes",
        "body": "GetSkinModes(${1:character})",
        "description": " ※参数: \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1806"
    },
    "全局.IsSaleActive:UNKNOWN": {
        "prefix": "IsSaleActive",
        "body": "IsSaleActive(${1:iap_def})",
        "description": " ※参数: \n   (iap_def)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 396"
    },
    "全局.ErodeCB:UNKNOWN": {
        "prefix": "ErodeCB",
        "body": "ErodeCB(${1:inst},${2:erode_time},${3:cb},${4:restore})",
        "description": " ※参数: \n   (inst)<>[] \n   (erode_time)<>[] \n   (cb)<>[] \n   (restore)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 546"
    },
    "全局.setbit:UNKNOWN": {
        "prefix": "setbit",
        "body": "setbit(${1:x},${2:b})",
        "description": " ※参数: \n   (x)<>[] \n   (b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1439"
    },
    "全局.DiffAngleRad:UNKNOWN": {
        "prefix": "DiffAngleRad",
        "body": "DiffAngleRad(${1:rot1},${2:rot2})",
        "description": " ※参数: \n   (rot1)<>[] \n   (rot2)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 100"
    },
    "全局.WillUnravelBreakRestrictedCharacter:UNKNOWN": {
        "prefix": "WillUnravelBreakRestrictedCharacter",
        "body": "WillUnravelBreakRestrictedCharacter(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1194"
    },
    "全局.DumpMem:UNKNOWN": {
        "prefix": "DumpMem",
        "body": "DumpMem(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1428"
    },
    "全局.IsPackBelongingsOnly:UNKNOWN": {
        "prefix": "IsPackBelongingsOnly",
        "body": "IsPackBelongingsOnly(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 435"
    },
    "全局.GetPortalRez:UNKNOWN": {
        "prefix": "GetPortalRez",
        "body": "GetPortalRez(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 294"
    },
    "全局.d_particles:UNKNOWN": {
        "prefix": "d_particles",
        "body": "d_particles(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 145"
    },
    "全局.Shard_IsWorldAvailable:UNKNOWN": {
        "prefix": "Shard_IsWorldAvailable",
        "body": "Shard_IsWorldAvailable(${1:world_id})",
        "description": " ※参数: \n   (world_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 16"
    },
    "全局.IsShopNew:UNKNOWN": {
        "prefix": "IsShopNew",
        "body": "IsShopNew(${1:user_profile})",
        "description": " ※参数: \n   (user_profile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1331"
    },
    "全局.IsPackGiftable:UNKNOWN": {
        "prefix": "IsPackGiftable",
        "body": "IsPackGiftable(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 454"
    },
    "全局.c_sel:UNKNOWN": {
        "prefix": "c_sel",
        "body": "c_sel(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 299"
    },
    "全局.IsRestrictedCharacter:UNKNOWN": {
        "prefix": "IsRestrictedCharacter",
        "body": "IsRestrictedCharacter(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1351"
    },
    "全局.GenerateSpicedFoods:UNKNOWN": {
        "prefix": "GenerateSpicedFoods",
        "body": "GenerateSpicedFoods(${1:foods})",
        "description": " ※参数: \n   (foods)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/spicedfoods 所在行数: 25"
    },
    "全局.IsPrefabSkinned:UNKNOWN": {
        "prefix": "IsPrefabSkinned",
        "body": "IsPrefabSkinned(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1375"
    },
    "全局.d_mapstatistics:UNKNOWN": {
        "prefix": "d_mapstatistics",
        "body": "d_mapstatistics(${1:count_cutoff},${2:item_cutoff},${3:density_cutoff})",
        "description": " ※参数: \n   (count_cutoff)<>[] \n   (item_cutoff)<>[] \n   (density_cutoff)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3490"
    },
    "全局.IsValidBeefaloClothing:UNKNOWN": {
        "prefix": "IsValidBeefaloClothing",
        "body": "IsValidBeefaloClothing(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1428"
    },
    "全局.ValidateItemsLocal:UNKNOWN": {
        "prefix": "ValidateItemsLocal",
        "body": "ValidateItemsLocal(${1:currentcharacter},${2:selected_skins})",
        "description": " ※参数: \n   (currentcharacter)<>[] \n   (selected_skins)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1440"
    },
    "全局.d_tables:UNKNOWN": {
        "prefix": "d_tables",
        "body": "d_tables(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1129"
    },
    "全局.d_stalkersetup:UNKNOWN": {
        "prefix": "d_stalkersetup",
        "body": "d_stalkersetup(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 635"
    },
    "全局.IsDefaultClothing:UNKNOWN": {
        "prefix": "IsDefaultClothing",
        "body": "IsDefaultClothing(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1383"
    },
    "全局.d_spawnallhandequipment_onstands:UNKNOWN": {
        "prefix": "d_spawnallhandequipment_onstands",
        "body": "d_spawnallhandequipment_onstands(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1640"
    },
    "全局.DespawnLeafCanopy:UNKNOWN": {
        "prefix": "DespawnLeafCanopy",
        "body": "DespawnLeafCanopy(${1:id})",
        "description": " ※参数: \n   (id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shadeeffects 所在行数: 24"
    },
    "全局.ZipAndEncodeSaveData:UNKNOWN": {
        "prefix": "ZipAndEncodeSaveData",
        "body": "ZipAndEncodeSaveData(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1694"
    },
    "全局.ChangeTileRenderOrder:UNKNOWN": {
        "prefix": "ChangeTileRenderOrder",
        "body": "ChangeTileRenderOrder(${1:tile_id},${2:target_tile_id},${3:moveafter})",
        "description": " ※参数: \n   (tile_id)<>[] \n   (target_tile_id)<>[] \n   (moveafter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 378"
    },
    "全局.GetRarityModifierForItem:UNKNOWN": {
        "prefix": "GetRarityModifierForItem",
        "body": "GetRarityModifierForItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 616"
    },
    "全局.walkingplank_clear_fn:UNKNOWN": {
        "prefix": "walkingplank_clear_fn",
        "body": "walkingplank_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1666"
    },
    "全局.IsEntityDeadOrGhost:UNKNOWN": {
        "prefix": "IsEntityDeadOrGhost",
        "body": "IsEntityDeadOrGhost(${1:inst},${2:require_health})",
        "description": " ※参数: \n   (inst)<>[] \n   (require_health)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 15"
    },
    "全局.GetMostRecentlySelectedItem:UNKNOWN": {
        "prefix": "GetMostRecentlySelectedItem",
        "body": "GetMostRecentlySelectedItem(${1:user_profile},${2:item_type})",
        "description": " ※参数: \n   (user_profile)<>[] \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1565"
    },
    "全局.IsPackRestrictedDueToOwnership:UNKNOWN": {
        "prefix": "IsPackRestrictedDueToOwnership",
        "body": "IsPackRestrictedDueToOwnership(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 732"
    },
    "全局.MakeSkinDLCPopup:UNKNOWN": {
        "prefix": "MakeSkinDLCPopup",
        "body": "MakeSkinDLCPopup(${1:_cb})",
        "description": " ※参数: \n   (_cb)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1652"
    },
    "全局.CompareItemDataForSortByCount:UNKNOWN": {
        "prefix": "CompareItemDataForSortByCount",
        "body": "CompareItemDataForSortByCount(${1:item_key_a},${2:item_key_b},${3:item_counts})",
        "description": " ※参数: \n   (item_key_a)<>[] \n   (item_key_b)<>[] \n   (item_counts)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1023"
    },
    "全局.Shard_SyncBossDefeated:UNKNOWN": {
        "prefix": "Shard_SyncBossDefeated",
        "body": "Shard_SyncBossDefeated(${1:bossprefab},${2:shardid})",
        "description": " ※参数: \n   (bossprefab)<>[] \n   (shardid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 202"
    },
    "全局.PrintTranslatedStringTableV1:UNKNOWN": {
        "prefix": "PrintTranslatedStringTableV1",
        "body": "PrintTranslatedStringTableV1(${1:base_dta},${2:tbl_dta},${3:lkp_var},${4:file})",
        "description": " ※参数: \n   (base_dta)<>[] \n   (tbl_dta)<>[] \n   (lkp_var)<>[] \n   (file)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/createstringspo_dlc 所在行数: 69"
    },
    "全局.Networking_LeftParty:UNKNOWN": {
        "prefix": "Networking_LeftParty",
        "body": "Networking_LeftParty(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 980"
    },
    "全局.MetaClass:UNKNOWN": {
        "prefix": "MetaClass",
        "body": "MetaClass(${1:base},${2:_ctor})",
        "description": " ※参数: \n   (base)<>[] \n   (_ctor)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/metaclass 所在行数: 128"
    },
    "全局.GetSkinModeFromBuild:UNKNOWN": {
        "prefix": "GetSkinModeFromBuild",
        "body": "GetSkinModeFromBuild(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1899"
    },
    "全局.GetReleaseGroup:UNKNOWN": {
        "prefix": "GetReleaseGroup",
        "body": "GetReleaseGroup(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 464"
    },
    "全局.KillThread:UNKNOWN": {
        "prefix": "KillThread",
        "body": "KillThread(${1:task})",
        "description": " ※参数: \n   (task)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/scheduler 所在行数: 366"
    },
    "全局.GetWeaveableSkinFilter:UNKNOWN": {
        "prefix": "GetWeaveableSkinFilter",
        "body": "GetWeaveableSkinFilter(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1265"
    },
    "全局.PrefabExists:UNKNOWN": {
        "prefix": "PrefabExists",
        "body": "PrefabExists(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 373"
    },
    "全局._IsPackInsideOther:UNKNOWN": {
        "prefix": "_IsPackInsideOther",
        "body": "_IsPackInsideOther(${1:pack_a},${2:pack_b})",
        "description": " ※参数: \n   (pack_a)<>[] \n   (pack_b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 181"
    },
    "全局.abigail_clear_fn:UNKNOWN": {
        "prefix": "abigail_clear_fn",
        "body": "abigail_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1314"
    },
    "全局.c_godmode:UNKNOWN": {
        "prefix": "c_godmode",
        "body": "c_godmode(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 776"
    },
    "全局.mastupgrade_lamp_clear_fn:UNKNOWN": {
        "prefix": "mastupgrade_lamp_clear_fn",
        "body": "mastupgrade_lamp_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1737"
    },
    "全局.GetNewSkinDLCEntitlement:UNKNOWN": {
        "prefix": "GetNewSkinDLCEntitlement",
        "body": "GetNewSkinDLCEntitlement(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1645"
    },
    "全局.glasscutter_clear_fn:UNKNOWN": {
        "prefix": "glasscutter_clear_fn",
        "body": "glasscutter_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2247"
    },
    "全局.LoadPOFile:UNKNOWN": {
        "prefix": "LoadPOFile",
        "body": "LoadPOFile(${1:path},${2:lang})",
        "description": " ※参数: \n   (path)<>[] \n   (lang)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 836"
    },
    "全局.d_waxwellprotector:UNKNOWN": {
        "prefix": "d_waxwellprotector",
        "body": "d_waxwellprotector(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 991"
    },
    "全局.RegisterScrapbookIconAtlas:UNKNOWN": {
        "prefix": "RegisterScrapbookIconAtlas",
        "body": "RegisterScrapbookIconAtlas(${1:atlas},${2:tex})",
        "description": " ※参数: \n   (atlas)<>[] \n   (tex)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 959"
    },
    "全局.IsDefaultSkinOwned:UNKNOWN": {
        "prefix": "IsDefaultSkinOwned",
        "body": "IsDefaultSkinOwned(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1360"
    },
    "全局.GetSkinDescription:UNKNOWN": {
        "prefix": "GetSkinDescription",
        "body": "GetSkinDescription(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 863"
    },
    "全局.dock_woodposts_item_init_fn:UNKNOWN": {
        "prefix": "dock_woodposts_item_init_fn",
        "body": "dock_woodposts_item_init_fn(${1:inst},${2:build_name},${3:anim_bank})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (anim_bank)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2790"
    },
    "全局.c_worldstatedebug:UNKNOWN": {
        "prefix": "c_worldstatedebug",
        "body": "c_worldstatedebug(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 980"
    },
    "全局.SetServerPaused:UNKNOWN": {
        "prefix": "SetServerPaused",
        "body": "SetServerPaused(${1:pause})",
        "description": " ※参数: \n   (pause)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 850"
    },
    "全局.d_spawnequipment_onstand:UNKNOWN": {
        "prefix": "d_spawnequipment_onstand",
        "body": "d_spawnequipment_onstand(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1752"
    },
    "全局.minisign_clear_fn:UNKNOWN": {
        "prefix": "minisign_clear_fn",
        "body": "minisign_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1626"
    },
    "全局.GetSkinName:UNKNOWN": {
        "prefix": "GetSkinName",
        "body": "GetSkinName(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 855"
    },
    "全局.DoesPackHaveItem:UNKNOWN": {
        "prefix": "DoesPackHaveItem",
        "body": "DoesPackHaveItem(${1:pack_key},${2:item_key})",
        "description": " ※参数: \n   (pack_key)<>[] \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 530"
    },
    "全局.GetAffinityFilterForHero:UNKNOWN": {
        "prefix": "GetAffinityFilterForHero",
        "body": "GetAffinityFilterForHero(${1:herocharacter})",
        "description": " ※参数: \n   (herocharacter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1247"
    },
    "全局.c_regenerateshard:UNKNOWN": {
        "prefix": "c_regenerateshard",
        "body": "c_regenerateshard(${1:wipesettings})",
        "description": " ※参数: \n   (wipesettings)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 139"
    },
    "全局.GetRemotePlayerVanityItem:UNKNOWN": {
        "prefix": "GetRemotePlayerVanityItem",
        "body": "GetRemotePlayerVanityItem(${1:active_cosmetics},${2:item_type})",
        "description": " ※参数: \n   (active_cosmetics)<>[] \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1486"
    },
    "全局.VecUtil_LengthSq:UNKNOWN": {
        "prefix": "VecUtil_LengthSq",
        "body": "VecUtil_LengthSq(${1:p1_x},${2:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 15"
    },
    "全局._profiler_hook_wrapper_by_call:UNKNOWN": {
        "prefix": "_profiler_hook_wrapper_by_call",
        "body": "_profiler_hook_wrapper_by_call(${1:action})",
        "description": " ※参数: \n   (action)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/profiler 所在行数: 182"
    },
    "全局.FindVirtualOceanEntity:UNKNOWN": {
        "prefix": "FindVirtualOceanEntity",
        "body": "FindVirtualOceanEntity(${1:x},${2:y},${3:z},${4:r})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (r)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 46"
    },
    "全局.DumpTableXML:UNKNOWN": {
        "prefix": "DumpTableXML",
        "body": "DumpTableXML(${1:t},${2:name})",
        "description": " ※参数: \n   (t)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1"
    },
    "全局.GetSkinUsableOnString:UNKNOWN": {
        "prefix": "GetSkinUsableOnString",
        "body": "GetSkinUsableOnString(${1:item_type},${2:popup_txt})",
        "description": " ※参数: \n   (item_type)<>[] \n   (popup_txt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 646"
    },
    "全局.SendRPCToClient:UNKNOWN": {
        "prefix": "SendRPCToClient",
        "body": "SendRPCToClient(${1:code},${2:...})",
        "description": " ※参数: \n   (code)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1274"
    },
    "全局.GetPackCollection:UNKNOWN": {
        "prefix": "GetPackCollection",
        "body": "GetPackCollection(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 157"
    },
    "全局.GetPlayerPortraitAtlasAndTex:UNKNOWN": {
        "prefix": "GetPlayerPortraitAtlasAndTex",
        "body": "GetPlayerPortraitAtlasAndTex(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1599"
    },
    "全局.LaunchAndClearArea:UNKNOWN": {
        "prefix": "LaunchAndClearArea",
        "body": "LaunchAndClearArea(${1:inst},${2:radius},${3:launch_basespeed},${4:launch_speedmult},${5:launch_startheight},${6:launch_startradius})",
        "description": " ※参数: \n   (inst)<>[] \n   (radius)<>[] \n   (launch_basespeed)<>[] \n   (launch_speedmult)<>[] \n   (launch_startheight)<>[] \n   (launch_startradius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/physics 所在行数: 135"
    },
    "全局.dtable:UNKNOWN": {
        "prefix": "dtable",
        "body": "dtable(${1:tab},${2:depth})",
        "description": " ※参数: \n   (tab)<>[] \n   (depth)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 384"
    },
    "全局.BuildDistortShader:UNKNOWN": {
        "prefix": "BuildDistortShader",
        "body": "BuildDistortShader(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 220"
    },
    "全局.GetItemCollectionName:UNKNOWN": {
        "prefix": "GetItemCollectionName",
        "body": "GetItemCollectionName(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1127"
    },
    "全局.icebox_clear_fn:UNKNOWN": {
        "prefix": "icebox_clear_fn",
        "body": "icebox_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2707"
    },
    "全局.CheckForUpsellTimeout:UNKNOWN": {
        "prefix": "CheckForUpsellTimeout",
        "body": "CheckForUpsellTimeout(${1:dt})",
        "description": " ※参数: \n   (dt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 39"
    },
    "全局.DefaultExtinguishCorpseFn:UNKNOWN": {
        "prefix": "DefaultExtinguishCorpseFn",
        "body": "DefaultExtinguishCorpseFn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 137"
    },
    "全局.SpawnPrefab:UNKNOWN": {
        "prefix": "SpawnPrefab",
        "body": "SpawnPrefab(${1:name},${2:skin},${3:skin_id},${4:creator})",
        "description": " ※参数: \n   (name)<>[] \n   (skin)<>[] \n   (skin_id)<>[] \n   (creator)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 377"
    },
    "全局.mastupgrade_lightningrod_top_clear_fn:UNKNOWN": {
        "prefix": "mastupgrade_lightningrod_top_clear_fn",
        "body": "mastupgrade_lightningrod_top_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1769"
    },
    "全局.CompareItemDataForSortByRarity:UNKNOWN": {
        "prefix": "CompareItemDataForSortByRarity",
        "body": "CompareItemDataForSortByRarity(${1:item_key_a},${2:item_key_b})",
        "description": " ※参数: \n   (item_key_a)<>[] \n   (item_key_b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1009"
    },
    "全局.DisplayInventoryFailedPopup:UNKNOWN": {
        "prefix": "DisplayInventoryFailedPopup",
        "body": "DisplayInventoryFailedPopup(${1:screen})",
        "description": " ※参数: \n   (screen)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1725"
    },
    "全局.resurrectionstatue_init_fn:UNKNOWN": {
        "prefix": "resurrectionstatue_init_fn",
        "body": "resurrectionstatue_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2820"
    },
    "全局.GetOceanDepthAtPosition:UNKNOWN": {
        "prefix": "GetOceanDepthAtPosition",
        "body": "GetOceanDepthAtPosition(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 11"
    },
    "全局.DataBundleFileHashes:UNKNOWN": {
        "prefix": "DataBundleFileHashes",
        "body": "DataBundleFileHashes(${1:calculatedhashes})",
        "description": " ※参数: \n   (calculatedhashes)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2323"
    },
    "全局.c_counttagged:UNKNOWN": {
        "prefix": "c_counttagged",
        "body": "c_counttagged(${1:tag},${2:noprint})",
        "description": " ※参数: \n   (tag)<>[] \n   (noprint)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 901"
    },
    "全局.IsValidClothing:UNKNOWN": {
        "prefix": "IsValidClothing",
        "body": "IsValidClothing(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1424"
    },
    "全局.SpawnSaveRecord:UNKNOWN": {
        "prefix": "SpawnSaveRecord",
        "body": "SpawnSaveRecord(${1:saved},${2:newents})",
        "description": " ※参数: \n   (saved)<>[] \n   (newents)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 412"
    },
    "全局.debugstack:UNKNOWN": {
        "prefix": "debugstack",
        "body": "debugstack(${1:start},${2:top},${3:bottom})",
        "description": " ※参数: \n   (start)<>[] \n   (top)<>[] \n   (bottom)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 40"
    },
    "全局.IsDailyGiftItemPending:UNKNOWN": {
        "prefix": "IsDailyGiftItemPending",
        "body": "IsDailyGiftItemPending(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1618"
    },
    "全局.CalculateShopHash:UNKNOWN": {
        "prefix": "CalculateShopHash",
        "body": "CalculateShopHash(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1318"
    },
    "全局.ValidatePreviewItems:UNKNOWN": {
        "prefix": "ValidatePreviewItems",
        "body": "ValidatePreviewItems(${1:currentcharacter},${2:preview_skins},${3:filter})",
        "description": " ※参数: \n   (currentcharacter)<>[] \n   (preview_skins)<>[] \n   (filter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1432"
    },
    "全局.fence_item_init_fn:UNKNOWN": {
        "prefix": "fence_item_init_fn",
        "body": "fence_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1870"
    },
    "全局.c_forcecrash:UNKNOWN": {
        "prefix": "c_forcecrash",
        "body": "c_forcecrash(${1:unique})",
        "description": " ※参数: \n   (unique)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1263"
    },
    "全局.GetPortraitNameForItem:UNKNOWN": {
        "prefix": "GetPortraitNameForItem",
        "body": "GetPortraitNameForItem(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 147"
    },
    "全局.MakeMediumBurnableCharacter:UNKNOWN": {
        "prefix": "MakeMediumBurnableCharacter",
        "body": "MakeMediumBurnableCharacter(${1:inst},${2:sym},${3:offset})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 253"
    },
    "全局.IsRecipeValid:UNKNOWN": {
        "prefix": "IsRecipeValid",
        "body": "IsRecipeValid(${1:recname})",
        "description": " ※参数: \n   (recname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/recipe 所在行数: 189"
    },
    "全局.RegisterPrefabs:UNKNOWN": {
        "prefix": "RegisterPrefabs",
        "body": "RegisterPrefabs(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 133"
    },
    "全局.c_makeinvisible:UNKNOWN": {
        "prefix": "c_makeinvisible",
        "body": "c_makeinvisible(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 984"
    },
    "全局.GetPackGiftDLCID:UNKNOWN": {
        "prefix": "GetPackGiftDLCID",
        "body": "GetPackGiftDLCID(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 459"
    },
    "全局.GetStaticTick:UNKNOWN": {
        "prefix": "GetStaticTick",
        "body": "GetStaticTick(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 171"
    },
    "全局.GetColorForItem:UNKNOWN": {
        "prefix": "GetColorForItem",
        "body": "GetColorForItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 600"
    },
    "全局.GetInventorySkinsList:UNKNOWN": {
        "prefix": "GetInventorySkinsList",
        "body": "GetInventorySkinsList(${1:do_sort})",
        "description": " ※参数: \n   (do_sort)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1056"
    },
    "全局.IsDefaultCharacterSkin:UNKNOWN": {
        "prefix": "IsDefaultCharacterSkin",
        "body": "IsDefaultCharacterSkin(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1379"
    },
    "全局.IsItemIsReward:UNKNOWN": {
        "prefix": "IsItemIsReward",
        "body": "IsItemIsReward(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1154"
    },
    "全局.c_setmightiness:UNKNOWN": {
        "prefix": "c_setmightiness",
        "body": "c_setmightiness(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 420"
    },
    "全局.Networking_KickAnnouncement:UNKNOWN": {
        "prefix": "Networking_KickAnnouncement",
        "body": "Networking_KickAnnouncement(${1:name},${2:colour})",
        "description": " ※参数: \n   (name)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 99"
    },
    "全局.c_speedmult:UNKNOWN": {
        "prefix": "c_speedmult",
        "body": "c_speedmult(${1:multiplier})",
        "description": " ※参数: \n   (multiplier)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 952"
    },
    "全局.bernie_big_init_fn:UNKNOWN": {
        "prefix": "bernie_big_init_fn",
        "body": "bernie_big_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2015"
    },
    "全局.GetBigPortraitAnimForItem:UNKNOWN": {
        "prefix": "GetBigPortraitAnimForItem",
        "body": "GetBigPortraitAnimForItem(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 135"
    },
    "全局.GetProfileFlairAtlasAndTex:UNKNOWN": {
        "prefix": "GetProfileFlairAtlasAndTex",
        "body": "GetProfileFlairAtlasAndTex(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1588"
    },
    "全局.CreateRepeatedSoundVolumeReduction:UNKNOWN": {
        "prefix": "CreateRepeatedSoundVolumeReduction",
        "body": "CreateRepeatedSoundVolumeReduction(${1:repeat_time},${2:lowered_volume_percent})",
        "description": " ※参数: \n   (repeat_time)<>[] \n   (lowered_volume_percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2221"
    },
    "全局.MakeSmallBurnableCorpse:UNKNOWN": {
        "prefix": "MakeSmallBurnableCorpse",
        "body": "MakeSmallBurnableCorpse(${1:inst},${2:time},${3:sym},${4:offset},${5:scale})",
        "description": " ※参数: \n   (inst)<>[] \n   (time)<>[] \n   (sym)<>[] \n   (offset)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 279"
    },
    "全局.d_clothing_clear:UNKNOWN": {
        "prefix": "d_clothing_clear",
        "body": "d_clothing_clear(${1:type})",
        "description": " ※参数: \n   (type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 603"
    },
    "全局.GetCharacterSkinBases:UNKNOWN": {
        "prefix": "GetCharacterSkinBases",
        "body": "GetCharacterSkinBases(${1:hero})",
        "description": " ※参数: \n   (hero)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1396"
    },
    "全局.IsUserCommerceBuyAllowedOnItem:UNKNOWN": {
        "prefix": "IsUserCommerceBuyAllowedOnItem",
        "body": "IsUserCommerceBuyAllowedOnItem(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 754"
    },
    "全局.d_decodedata:UNKNOWN": {
        "prefix": "d_decodedata",
        "body": "d_decodedata(${1:path})",
        "description": " ※参数: \n   (path)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 206"
    },
    "全局.AddNewSkinDLCEntitlement:UNKNOWN": {
        "prefix": "AddNewSkinDLCEntitlement",
        "body": "AddNewSkinDLCEntitlement(${1:entitlement})",
        "description": " ※参数: \n   (entitlement)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1639"
    },
    "全局.Vec3Util_Lerp:UNKNOWN": {
        "prefix": "Vec3Util_Lerp",
        "body": "Vec3Util_Lerp(${1:p1_x},${2:p1_y},${3:p1_z},${4:p2_x},${5:p2_y},${6:p2_z},${7:percent})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_y)<>[] \n   (p2_z)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 35"
    },
    "全局.Networking_JoinAnnouncement:UNKNOWN": {
        "prefix": "Networking_JoinAnnouncement",
        "body": "Networking_JoinAnnouncement(${1:name},${2:colour})",
        "description": " ※参数: \n   (name)<>[] \n   (colour)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 91"
    },
    "全局.WillUnravelBreakEnsemble:UNKNOWN": {
        "prefix": "WillUnravelBreakEnsemble",
        "body": "WillUnravelBreakEnsemble(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1178"
    },
    "全局.GetActionFailString:UNKNOWN": {
        "prefix": "GetActionFailString",
        "body": "GetActionFailString(${1:inst},${2:action},${3:reason})",
        "description": " ※参数: \n   (inst)<>[] \n   (action)<>[] \n   (reason)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 434"
    },
    "全局.GetPrevOwnedSkin:UNKNOWN": {
        "prefix": "GetPrevOwnedSkin",
        "body": "GetPrevOwnedSkin(${1:prefab},${2:cur_skin})",
        "description": " ※参数: \n   (prefab)<>[] \n   (cur_skin)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1542"
    },
    "全局.HasHeirloomItem:UNKNOWN": {
        "prefix": "HasHeirloomItem",
        "body": "HasHeirloomItem(${1:herocharacter})",
        "description": " ※参数: \n   (herocharacter)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1205"
    },
    "全局.InGamePlay:UNKNOWN": {
        "prefix": "InGamePlay",
        "body": "InGamePlay(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1660"
    },
    "全局.IsDefaultSkin:UNKNOWN": {
        "prefix": "IsDefaultSkin",
        "body": "IsDefaultSkin(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1371"
    },
    "全局.DoesPackHaveSkinsForCharacter:UNKNOWN": {
        "prefix": "DoesPackHaveSkinsForCharacter",
        "body": "DoesPackHaveSkinsForCharacter(${1:pack_key},${2:character})",
        "description": " ※参数: \n   (pack_key)<>[] \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 550"
    },
    "全局.CompareItemDataForSortByRelease:UNKNOWN": {
        "prefix": "CompareItemDataForSortByRelease",
        "body": "CompareItemDataForSortByRelease(${1:item_key_a},${2:item_key_b})",
        "description": " ※参数: \n   (item_key_a)<>[] \n   (item_key_b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 981"
    },
    "全局.HaveMultipleViewports:UNKNOWN": {
        "prefix": "HaveMultipleViewports",
        "body": "HaveMultipleViewports(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/splitscreenutils_pc 所在行数: 29"
    },
    "全局.Create2DTriEmitter:UNKNOWN": {
        "prefix": "Create2DTriEmitter",
        "body": "Create2DTriEmitter(${1:tris},${2:scale})",
        "description": " ※参数: \n   (tris)<>[] \n   (scale)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 200"
    },
    "全局.HandleModRPC:UNKNOWN": {
        "prefix": "HandleModRPC",
        "body": "HandleModRPC(${1:sender},${2:tick},${3:namespace},${4:code},${5:data})",
        "description": " ※参数: \n   (sender)<>[] \n   (tick)<>[] \n   (namespace)<>[] \n   (code)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1523"
    },
    "全局.IsNumberEven:UNKNOWN": {
        "prefix": "IsNumberEven",
        "body": "IsNumberEven(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 50"
    },
    "全局.Shard_UpdateMasterSessionId:UNKNOWN": {
        "prefix": "Shard_UpdateMasterSessionId",
        "body": "Shard_UpdateMasterSessionId(${1:session_id})",
        "description": " ※参数: \n   (session_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 131"
    },
    "全局.c_showradius:UNKNOWN": {
        "prefix": "c_showradius",
        "body": "c_showradius(${1:radius},${2:parent})",
        "description": " ※参数: \n   (radius)<>[] \n   (parent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 2017"
    },
    "全局.TintBackground:UNKNOWN": {
        "prefix": "TintBackground",
        "body": "TintBackground(${1:bg})",
        "description": " ※参数: \n   (bg)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1926"
    },
    "全局.hotswap:UNKNOWN": {
        "prefix": "hotswap",
        "body": "hotswap(${1:modname})",
        "description": " ※参数: \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/reload 所在行数: 27"
    },
    "全局.RoundBiasedDown:UNKNOWN": {
        "prefix": "RoundBiasedDown",
        "body": "RoundBiasedDown(${1:num},${2:idp})",
        "description": " ※参数: \n   (num)<>[] \n   (idp)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 30"
    },
    "全局.RemovePhysicsColliders:UNKNOWN": {
        "prefix": "RemovePhysicsColliders",
        "body": "RemovePhysicsColliders(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 683"
    },
    "全局.GetMinimapAtlas:UNKNOWN": {
        "prefix": "GetMinimapAtlas",
        "body": "GetMinimapAtlas(${1:imagename})",
        "description": " ※参数: \n   (imagename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 661"
    },
    "全局.FindRandomPointOnShoreFromOcean:UNKNOWN": {
        "prefix": "FindRandomPointOnShoreFromOcean",
        "body": "FindRandomPointOnShoreFromOcean(${1:x},${2:y},${3:z},${4:excludeclosest})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (excludeclosest)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 108"
    },
    "全局.Remap:UNKNOWN": {
        "prefix": "Remap",
        "body": "Remap(${1:i},${2:a},${3:b},${4:x},${5:y})",
        "description": " ※参数: \n   (i)<>[] \n   (a)<>[] \n   (b)<>[] \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 19"
    },
    "全局.GetSineVal:UNKNOWN": {
        "prefix": "GetSineVal",
        "body": "GetSineVal(${1:mod},${2:abs},${3:inst})",
        "description": " ※参数: \n   (mod)<>[] \n   (abs)<>[] \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 3"
    },
    "全局.CalculateFiveRadius:UNKNOWN": {
        "prefix": "CalculateFiveRadius",
        "body": "CalculateFiveRadius(${1:density})",
        "description": " ※参数: \n   (density)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/regrowthutil 所在行数: 2"
    },
    "全局.ReduceAngle:UNKNOWN": {
        "prefix": "ReduceAngle",
        "body": "ReduceAngle(${1:rot})",
        "description": " ※参数: \n   (rot)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 76"
    },
    "全局.Lerp:UNKNOWN": {
        "prefix": "Lerp",
        "body": "Lerp(${1:a},${2:b},${3:t})",
        "description": " ※参数: \n   (a)<>[] \n   (b)<>[] \n   (t)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 14"
    },
    "全局.RequestShutdown:UNKNOWN": {
        "prefix": "RequestShutdown",
        "body": "RequestShutdown(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1513"
    },
    "全局.CompareReleaseGroup:UNKNOWN": {
        "prefix": "CompareReleaseGroup",
        "body": "CompareReleaseGroup(${1:item_key_a},${2:item_key_b})",
        "description": " ※参数: \n   (item_key_a)<>[] \n   (item_key_b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 82"
    },
    "全局.SortAndEnableShaders:UNKNOWN": {
        "prefix": "SortAndEnableShaders",
        "body": "SortAndEnableShaders(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 262"
    },
    "全局.FindSafeSpawnLocation:UNKNOWN": {
        "prefix": "FindSafeSpawnLocation",
        "body": "FindSafeSpawnLocation(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 157"
    },
    "全局.ddump:UNKNOWN": {
        "prefix": "ddump",
        "body": "ddump(${1:obj},${2:indent},${3:recurse_levels},${4:root})",
        "description": " ※参数: \n   (obj)<>[] \n   (indent)<>[] \n   (recurse_levels)<>[] \n   (root)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 356"
    },
    "全局.GetActiveFestivalEventAchievementStrings:UNKNOWN": {
        "prefix": "GetActiveFestivalEventAchievementStrings",
        "body": "GetActiveFestivalEventAchievementStrings(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1060"
    },
    "全局.d_allheavy:UNKNOWN": {
        "prefix": "d_allheavy",
        "body": "d_allheavy(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 97"
    },
    "全局.ExecuteConsoleCommand:UNKNOWN": {
        "prefix": "ExecuteConsoleCommand",
        "body": "ExecuteConsoleCommand(${1:fnstr},${2:guid},${3:x},${4:z})",
        "description": " ※参数: \n   (fnstr)<>[] \n   (guid)<>[] \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2093"
    },
    "全局.debugstack_oneline:UNKNOWN": {
        "prefix": "debugstack_oneline",
        "body": "debugstack_oneline(${1:linenum})",
        "description": " ※参数: \n   (linenum)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 71"
    },
    "全局.printsel:UNKNOWN": {
        "prefix": "printsel",
        "body": "printsel(${1:inst},${2:...})",
        "description": " ※参数: \n   (inst)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 34"
    },
    "全局.d_ratracers:UNKNOWN": {
        "prefix": "d_ratracers",
        "body": "d_ratracers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1187"
    },
    "全局.OnMouseMove:UNKNOWN": {
        "prefix": "OnMouseMove",
        "body": "OnMouseMove(${1:x},${2:y})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 441"
    },
    "全局.dock_woodposts_init_fn:UNKNOWN": {
        "prefix": "dock_woodposts_init_fn",
        "body": "dock_woodposts_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2781"
    },
    "全局.OnInputKey:UNKNOWN": {
        "prefix": "OnInputKey",
        "body": "OnInputKey(${1:key},${2:is_up})",
        "description": " ※参数: \n   (key)<>[] \n   (is_up)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 445"
    },
    "全局.mushroom_farm_init_fn:UNKNOWN": {
        "prefix": "mushroom_farm_init_fn",
        "body": "mushroom_farm_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2774"
    },
    "全局.GetProfilerSave:UNKNOWN": {
        "prefix": "GetProfilerSave",
        "body": "GetProfilerSave(${1:results})",
        "description": " ※参数: \n   (results)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/perfutil 所在行数: 35"
    },
    "全局.ResolveCommandStringProperty:UNKNOWN": {
        "prefix": "ResolveCommandStringProperty",
        "body": "ResolveCommandStringProperty(${1:command},${2:property},${3:default})",
        "description": " ※参数: \n   (command)<>[] \n   (property)<>[] \n   (default)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 99"
    },
    "全局.minisign_drawn_clear_fn:UNKNOWN": {
        "prefix": "minisign_drawn_clear_fn",
        "body": "minisign_drawn_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1609"
    },
    "全局.dock_woodposts_item_clear_fn:UNKNOWN": {
        "prefix": "dock_woodposts_item_clear_fn",
        "body": "dock_woodposts_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2798"
    },
    "全局.bugnet_clear_fn:UNKNOWN": {
        "prefix": "bugnet_clear_fn",
        "body": "bugnet_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1330"
    },
    "全局.AddPrintLogger:UNKNOWN": {
        "prefix": "AddPrintLogger",
        "body": "AddPrintLogger(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugprint 所在行数: 5"
    },
    "全局.ProcessString:UNKNOWN": {
        "prefix": "ProcessString",
        "body": "ProcessString(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 246"
    },
    "全局.d_allpillows:UNKNOWN": {
        "prefix": "d_allpillows",
        "body": "d_allpillows(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1732"
    },
    "全局.OnPosition:UNKNOWN": {
        "prefix": "OnPosition",
        "body": "OnPosition(${1:x},${2:y})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 429"
    },
    "全局.OnControl:UNKNOWN": {
        "prefix": "OnControl",
        "body": "OnControl(${1:control},${2:digitalvalue},${3:analogvalue})",
        "description": " ※参数: \n   (control)<>[] \n   (digitalvalue)<>[] \n   (analogvalue)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 433"
    },
    "全局.d_clothing:UNKNOWN": {
        "prefix": "d_clothing",
        "body": "d_clothing(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 600"
    },
    "全局.d_gettiles:UNKNOWN": {
        "prefix": "d_gettiles",
        "body": "d_gettiles(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 1723"
    },
    "全局.OnFloatingTextInputDismissed:UNKNOWN": {
        "prefix": "OnFloatingTextInputDismissed",
        "body": "OnFloatingTextInputDismissed(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 425"
    },
    "全局.CreateStringsPOTv2:UNKNOWN": {
        "prefix": "CreateStringsPOTv2",
        "body": "CreateStringsPOTv2(${1:filename},${2:root},${3:tbl_dta},${4:tbl_lkp})",
        "description": " ※参数: \n   (filename)<>[] \n   (root)<>[] \n   (tbl_dta)<>[] \n   (tbl_lkp)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/createstringspo_dlc 所在行数: 245"
    },
    "全局.RaiseFlyingCreature:UNKNOWN": {
        "prefix": "RaiseFlyingCreature",
        "body": "RaiseFlyingCreature(${1:creature})",
        "description": " ※参数: \n   (creature)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 163"
    },
    "全局._GetSubPacks:UNKNOWN": {
        "prefix": "_GetSubPacks",
        "body": "_GetSubPacks(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 226"
    },
    "全局.OnGesture:UNKNOWN": {
        "prefix": "OnGesture",
        "body": "OnGesture(${1:gesture})",
        "description": " ※参数: \n   (gesture)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 453"
    },
    "全局.SoundTimeEvent:UNKNOWN": {
        "prefix": "SoundTimeEvent",
        "body": "SoundTimeEvent(${1:time},${2:sound_event})",
        "description": " ※参数: \n   (time)<>[] \n   (sound_event)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stategraph 所在行数: 197"
    },
    "全局.SoundFrameEvent:UNKNOWN": {
        "prefix": "SoundFrameEvent",
        "body": "SoundFrameEvent(${1:frame},${2:sound_event})",
        "description": " ※参数: \n   (frame)<>[] \n   (sound_event)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stategraph 所在行数: 203"
    },
    "全局.Shard_SyncMermKingPauldron:UNKNOWN": {
        "prefix": "Shard_SyncMermKingPauldron",
        "body": "Shard_SyncMermKingPauldron(${1:exists},${2:shardid})",
        "description": " ※参数: \n   (exists)<>[] \n   (shardid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 258"
    },
    "全局.d_ratracer:UNKNOWN": {
        "prefix": "d_ratracer",
        "body": "d_ratracer(${1:speed},${2:stamina},${3:direction},${4:reaction})",
        "description": " ※参数: \n   (speed)<>[] \n   (stamina)<>[] \n   (direction)<>[] \n   (reaction)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1175"
    },
    "全局.d_spawnallhats:UNKNOWN": {
        "prefix": "d_spawnallhats",
        "body": "d_spawnallhats(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1570"
    },
    "全局.ProxyClass:UNKNOWN": {
        "prefix": "ProxyClass",
        "body": "ProxyClass(${1:class},${2:ctor})",
        "description": " ※参数: \n   (class)<>[] \n   (ctor)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/entityscriptproxy 所在行数: 15"
    },
    "全局.HandleClassInstanceTracking:UNKNOWN": {
        "prefix": "HandleClassInstanceTracking",
        "body": "HandleClassInstanceTracking(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/class 所在行数: 222"
    },
    "全局.d_structuresTXT:UNKNOWN": {
        "prefix": "d_structuresTXT",
        "body": "d_structuresTXT(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1939"
    },
    "全局.ReloadedClass:UNKNOWN": {
        "prefix": "ReloadedClass",
        "body": "ReloadedClass(${1:mt})",
        "description": " ※参数: \n   (mt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/class 所在行数: 216"
    },
    "全局.GetSpecialEventSkinTag:UNKNOWN": {
        "prefix": "GetSpecialEventSkinTag",
        "body": "GetSpecialEventSkinTag(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1001"
    },
    "全局.MergeKeyValueList:UNKNOWN": {
        "prefix": "MergeKeyValueList",
        "body": "MergeKeyValueList(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 445"
    },
    "全局.SerializeWorldSession:UNKNOWN": {
        "prefix": "SerializeWorldSession",
        "body": "SerializeWorldSession(${1:data},${2:session_identifier},${3:callback},${4:metadataStr})",
        "description": " ※参数: \n   (data)<>[] \n   (session_identifier)<>[] \n   (callback)<>[] \n   (metadataStr)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 325"
    },
    "全局.Class:UNKNOWN": {
        "prefix": "Class",
        "body": "Class(${1:base},${2:_ctor},${3:props})",
        "description": " ※参数: \n   (base)<>[] \n   (_ctor)<>[] \n   (props)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/class 所在行数: 83"
    },
    "全局.ProfileStatsSet:UNKNOWN": {
        "prefix": "ProfileStatsSet",
        "body": "ProfileStatsSet(${1:item},${2:value})",
        "description": " ※参数: \n   (item)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 349"
    },
    "全局.makereadonly:UNKNOWN": {
        "prefix": "makereadonly",
        "body": "makereadonly(${1:t},${2:k})",
        "description": " ※参数: \n   (t)<>[] \n   (k)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/class 所在行数: 51"
    },
    "全局.c_removeallwithtags:UNKNOWN": {
        "prefix": "c_removeallwithtags",
        "body": "c_removeallwithtags(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1187"
    },
    "全局.addsetter:UNKNOWN": {
        "prefix": "addsetter",
        "body": "addsetter(${1:t},${2:k},${3:fn})",
        "description": " ※参数: \n   (t)<>[] \n   (k)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/class 所在行数: 63"
    },
    "全局.DoDebugMouse:UNKNOWN": {
        "prefix": "DoDebugMouse",
        "body": "DoDebugMouse(${1:button},${2:down},${3:x},${4:y})",
        "description": " ※参数: \n   (button)<>[] \n   (down)<>[] \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 1692"
    },
    "全局.d_addemotekeys:UNKNOWN": {
        "prefix": "d_addemotekeys",
        "body": "d_addemotekeys(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 1705"
    },
    "全局.DoDebugKey:UNKNOWN": {
        "prefix": "DoDebugKey",
        "body": "DoDebugKey(${1:key},${2:down})",
        "description": " ※参数: \n   (key)<>[] \n   (down)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 72"
    },
    "全局.AddGlobalDebugKey:UNKNOWN": {
        "prefix": "AddGlobalDebugKey",
        "body": "AddGlobalDebugKey(${1:key},${2:fn},${3:down})",
        "description": " ※参数: \n   (key)<>[] \n   (fn)<>[] \n   (down)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugkeys 所在行数: 89"
    },
    "全局.FindClosestPlayer:UNKNOWN": {
        "prefix": "FindClosestPlayer",
        "body": "FindClosestPlayer(${1:x},${2:y},${3:z},${4:isalive})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n   (z)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 82"
    },
    "全局.Shard_UpdatePortalState:UNKNOWN": {
        "prefix": "Shard_UpdatePortalState",
        "body": "Shard_UpdatePortalState(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 114"
    },
    "全局.GetRandomItem:UNKNOWN": {
        "prefix": "GetRandomItem",
        "body": "GetRandomItem(${1:choices})",
        "description": " ※参数: \n   (choices)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 253"
    },
    "全局.c_record:UNKNOWN": {
        "prefix": "c_record",
        "body": "c_record(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1997"
    },
    "全局.PickSome:UNKNOWN": {
        "prefix": "PickSome",
        "body": "PickSome(${1:num},${2:choices})",
        "description": " ※参数: \n   (num)<>[] \n   (choices)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 295"
    },
    "全局.DistPointToSegmentXYSq:UNKNOWN": {
        "prefix": "DistPointToSegmentXYSq",
        "body": "DistPointToSegmentXYSq(${1:p},${2:v1},${3:v2})",
        "description": " ※参数: \n   (p)<>[] \n   (v1)<>[] \n   (v2)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1599"
    },
    "全局.CreateStringsPOTv1:UNKNOWN": {
        "prefix": "CreateStringsPOTv1",
        "body": "CreateStringsPOTv1(${1:filename},${2:root},${3:tbl_dta},${4:tbl_lkp})",
        "description": " ※参数: \n   (filename)<>[] \n   (root)<>[] \n   (tbl_dta)<>[] \n   (tbl_lkp)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/createstringspo_dlc 所在行数: 229"
    },
    "全局.c_mermthrone:UNKNOWN": {
        "prefix": "c_mermthrone",
        "body": "c_mermthrone(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 88"
    },
    "全局.nightsword_clear_fn:UNKNOWN": {
        "prefix": "nightsword_clear_fn",
        "body": "nightsword_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2230"
    },
    "全局.softresolvefilepath:UNKNOWN": {
        "prefix": "softresolvefilepath",
        "body": "softresolvefilepath(${1:filepath},${2:force_path_search},${3:search_first_path})",
        "description": " ※参数: \n   (filepath)<>[] \n   (force_path_search)<>[] \n   (search_first_path)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 628"
    },
    "全局.dumpinternal:UNKNOWN": {
        "prefix": "dumpinternal",
        "body": "dumpinternal(${1:t},${2:outstr},${3:indent})",
        "description": " ※参数: \n   (t)<>[] \n   (outstr)<>[] \n   (indent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 3"
    },
    "全局.SpawnLeafCanopy:UNKNOWN": {
        "prefix": "SpawnLeafCanopy",
        "body": "SpawnLeafCanopy(${1:x},${2:z})",
        "description": " ※参数: \n   (x)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shadeeffects 所在行数: 20"
    },
    "全局.GetSpawnMode:UNKNOWN": {
        "prefix": "GetSpawnMode",
        "body": "GetSpawnMode(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 282"
    },
    "全局.GetMemoizedFilePaths:UNKNOWN": {
        "prefix": "GetMemoizedFilePaths",
        "body": "GetMemoizedFilePaths(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 559"
    },
    "全局.wall_wood_init_fn:UNKNOWN": {
        "prefix": "wall_wood_init_fn",
        "body": "wall_wood_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1857"
    },
    "全局.DefaultBurntStructureFn:UNKNOWN": {
        "prefix": "DefaultBurntStructureFn",
        "body": "DefaultBurntStructureFn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 51"
    },
    "全局.ControllerPlacer_Boat_SpotFinder_Internal:UNKNOWN": {
        "prefix": "ControllerPlacer_Boat_SpotFinder_Internal",
        "body": "ControllerPlacer_Boat_SpotFinder_Internal(${1:placer},${2:player},${3:ox},${4:oy},${5:oz})",
        "description": " ※参数: \n   (placer)<>[] \n   (player)<>[] \n   (ox)<>[] \n   (oy)<>[] \n   (oz)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1864"
    },
    "全局.bundle_clear_fn:UNKNOWN": {
        "prefix": "bundle_clear_fn",
        "body": "bundle_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1281"
    },
    "全局.IsWithinAngle:UNKNOWN": {
        "prefix": "IsWithinAngle",
        "body": "IsWithinAngle(${1:position},${2:forward},${3:width},${4:testPos})",
        "description": " ※参数: \n   (position)<>[] \n   (forward)<>[] \n   (width)<>[] \n   (testPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1450"
    },
    "全局.c_getnumplayers:UNKNOWN": {
        "prefix": "c_getnumplayers",
        "body": "c_getnumplayers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 270"
    },
    "全局.FlattenTree:UNKNOWN": {
        "prefix": "FlattenTree",
        "body": "FlattenTree(${1:tree},${2:unique})",
        "description": " ※参数: \n   (tree)<>[] \n   (unique)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 509"
    },
    "全局.ScrubClass:UNKNOWN": {
        "prefix": "ScrubClass",
        "body": "ScrubClass(${1:cls},${2:inh})",
        "description": " ※参数: \n   (cls)<>[] \n   (inh)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/reload 所在行数: 94"
    },
    "全局.IsGameInstance:UNKNOWN": {
        "prefix": "IsGameInstance",
        "body": "IsGameInstance(${1:instance_id})",
        "description": " ※参数: \n   (instance_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/splitscreenutils_pc 所在行数: 21"
    },
    "全局.d_plant:UNKNOWN": {
        "prefix": "d_plant",
        "body": "d_plant(${1:plant},${2:num_wide},${3:grow_stage},${4:spacing})",
        "description": " ※参数: \n   (plant)<>[] \n   (num_wide)<>[] \n   (grow_stage)<>[] \n   (spacing)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1373"
    },
    "全局.ProfileStatsAddItemChunk:UNKNOWN": {
        "prefix": "ProfileStatsAddItemChunk",
        "body": "ProfileStatsAddItemChunk(${1:item},${2:chunk})",
        "description": " ※参数: \n   (item)<>[] \n   (chunk)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 337"
    },
    "全局.GetPurchaseDisplayForItem:UNKNOWN": {
        "prefix": "GetPurchaseDisplayForItem",
        "body": "GetPurchaseDisplayForItem(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 469"
    },
    "全局.d_setup_placeholders:UNKNOWN": {
        "prefix": "d_setup_placeholders",
        "body": "d_setup_placeholders(${1:reuse},${2:out_file_name})",
        "description": " ※参数: \n   (reuse)<>[] \n   (out_file_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1237"
    },
    "全局.CreatePrefabSkin:UNKNOWN": {
        "prefix": "CreatePrefabSkin",
        "body": "CreatePrefabSkin(${1:name},${2:info})",
        "description": " ※参数: \n   (name)<>[] \n   (info)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2829"
    },
    "全局.UpsellShowing:UNKNOWN": {
        "prefix": "UpsellShowing",
        "body": "UpsellShowing(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/upsell 所在行数: 19"
    },
    "全局.AddRecipeCard:UNKNOWN": {
        "prefix": "AddRecipeCard",
        "body": "AddRecipeCard(${1:cooker},${2:recipe})",
        "description": " ※参数: \n   (cooker)<>[] \n   (recipe)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/cooking 所在行数: 33"
    },
    "全局.Vec3Util_LengthSq:UNKNOWN": {
        "prefix": "Vec3Util_LengthSq",
        "body": "Vec3Util_LengthSq(${1:p1_x},${2:p1_y},${3:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 15"
    },
    "全局.IsSkinDLCEntitlementReceived:UNKNOWN": {
        "prefix": "IsSkinDLCEntitlementReceived",
        "body": "IsSkinDLCEntitlementReceived(${1:entitlement})",
        "description": " ※参数: \n   (entitlement)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1630"
    },
    "全局.VecUtil_Slerp:UNKNOWN": {
        "prefix": "VecUtil_Slerp",
        "body": "VecUtil_Slerp(${1:p1_x},${2:p1_z},${3:p2_x},${4:p2_z},${5:percent})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_z)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 80"
    },
    "全局.critter_lamb_clear_fn:UNKNOWN": {
        "prefix": "critter_lamb_clear_fn",
        "body": "critter_lamb_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1561"
    },
    "全局.dumptablequiet:UNKNOWN": {
        "prefix": "dumptablequiet",
        "body": "dumptablequiet(${1:obj},${2:indent},${3:recurse_levels},${4:visit_table})",
        "description": " ※参数: \n   (obj)<>[] \n   (indent)<>[] \n   (recurse_levels)<>[] \n   (visit_table)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugtools 所在行数: 110"
    },
    "全局.c_armour:UNKNOWN": {
        "prefix": "c_armour",
        "body": "c_armour(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 837"
    },
    "全局.telebase_clear_fn:UNKNOWN": {
        "prefix": "telebase_clear_fn",
        "body": "telebase_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2737"
    },
    "全局.UnitRand:UNKNOWN": {
        "prefix": "UnitRand",
        "body": "UnitRand(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 101"
    },
    "全局.SetUsesPrefix:UNKNOWN": {
        "prefix": "SetUsesPrefix",
        "body": "SetUsesPrefix(${1:item},${2:usePrefix})",
        "description": " ※参数: \n   (item)<>[] \n   (usePrefix)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport_strings 所在行数: 70"
    },
    "全局.decode:UNKNOWN": {
        "prefix": "decode",
        "body": "decode(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 222"
    },
    "全局.wall_moonrock_item_clear_fn:UNKNOWN": {
        "prefix": "wall_moonrock_item_clear_fn",
        "body": "wall_moonrock_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1782"
    },
    "全局.CanProbablyReachTargetFromShore:UNKNOWN": {
        "prefix": "CanProbablyReachTargetFromShore",
        "body": "CanProbablyReachTargetFromShore(${1:inst},${2:target},${3:max_distance})",
        "description": " ※参数: \n   (inst)<>[] \n   (target)<>[] \n   (max_distance)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 221"
    },
    "全局.c_settemperature:UNKNOWN": {
        "prefix": "c_settemperature",
        "body": "c_settemperature(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 455"
    },
    "全局.decode_scanComment:UNKNOWN": {
        "prefix": "decode_scanComment",
        "body": "decode_scanComment(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 302"
    },
    "全局.escape_lua_pattern:UNKNOWN": {
        "prefix": "escape_lua_pattern",
        "body": "escape_lua_pattern(${1:s})",
        "description": " ※参数: \n   (s)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugprint 所在行数: 31"
    },
    "全局.d_checkmissingscrapbookentries:UNKNOWN": {
        "prefix": "d_checkmissingscrapbookentries",
        "body": "d_checkmissingscrapbookentries(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3384"
    },
    "全局.FindLandBetweenPoints:UNKNOWN": {
        "prefix": "FindLandBetweenPoints",
        "body": "FindLandBetweenPoints(${1:p0x},${2:p0y},${3:p1x},${4:p1y})",
        "description": " ※参数: \n   (p0x)<>[] \n   (p0y)<>[] \n   (p1x)<>[] \n   (p1y)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 78"
    },
    "全局.RecordEventAchievementProgressForAllPlayers:UNKNOWN": {
        "prefix": "RecordEventAchievementProgressForAllPlayers",
        "body": "RecordEventAchievementProgressForAllPlayers(${1:achievement},${2:data})",
        "description": " ※参数: \n   (achievement)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 83"
    },
    "全局.steeringwheel_item_init_fn:UNKNOWN": {
        "prefix": "steeringwheel_item_init_fn",
        "body": "steeringwheel_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1674"
    },
    "全局.d_spawnlayout:UNKNOWN": {
        "prefix": "d_spawnlayout",
        "body": "d_spawnlayout(${1:name},${2:offset})",
        "description": " ※参数: \n   (name)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1065"
    },
    "全局.PlayFootstep:UNKNOWN": {
        "prefix": "PlayFootstep",
        "body": "PlayFootstep(${1:inst},${2:volume},${3:ispredicted})",
        "description": " ※参数: \n   (inst)<>[] \n   (volume)<>[] \n   (ispredicted)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldtiledefs 所在行数: 81"
    },
    "全局.MonkeyPatchClasses:UNKNOWN": {
        "prefix": "MonkeyPatchClasses",
        "body": "MonkeyPatchClasses(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/reload 所在行数: 133"
    },
    "全局.EraseFiles:UNKNOWN": {
        "prefix": "EraseFiles",
        "body": "EraseFiles(${1:cb},${2:files})",
        "description": " ※参数: \n   (cb)<>[] \n   (files)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/fileutil 所在行数: 1"
    },
    "全局.GetBuildForItem:UNKNOWN": {
        "prefix": "GetBuildForItem",
        "body": "GetBuildForItem(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 125"
    },
    "全局.c_makeboat:UNKNOWN": {
        "prefix": "c_makeboat",
        "body": "c_makeboat(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1442"
    },
    "全局.AwardPlayerAchievement:UNKNOWN": {
        "prefix": "AwardPlayerAchievement",
        "body": "AwardPlayerAchievement(${1:name},${2:player})",
        "description": " ※参数: \n   (name)<>[] \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 283"
    },
    "全局.GetClosestNode:UNKNOWN": {
        "prefix": "GetClosestNode",
        "body": "GetClosestNode(${1:x},${2:y})",
        "description": " ※参数: \n   (x)<>[] \n   (y)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 12"
    },
    "全局.LookupTileInfo:UNKNOWN": {
        "prefix": "LookupTileInfo",
        "body": "LookupTileInfo(${1:tile})",
        "description": " ※参数: \n   (tile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldtiledefs 所在行数: 71"
    },
    "全局.basic_init_fn:UNKNOWN": {
        "prefix": "basic_init_fn",
        "body": "basic_init_fn(${1:inst},${2:build_name},${3:def_build},${4:filter_fn})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (def_build)<>[] \n   (filter_fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 82"
    },
    "全局.portablecookpot_clear_fn:UNKNOWN": {
        "prefix": "portablecookpot_clear_fn",
        "body": "portablecookpot_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1365"
    },
    "全局.d_erasescrapbookentrydata:UNKNOWN": {
        "prefix": "d_erasescrapbookentrydata",
        "body": "d_erasescrapbookentrydata(${1:entry})",
        "description": " ※参数: \n   (entry)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3348"
    },
    "全局.DecayCharlieResidueAndGoOnCooldownIfItExists:UNKNOWN": {
        "prefix": "DecayCharlieResidueAndGoOnCooldownIfItExists",
        "body": "DecayCharlieResidueAndGoOnCooldownIfItExists(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 93"
    },
    "全局.IsItemInAnyPack:UNKNOWN": {
        "prefix": "IsItemInAnyPack",
        "body": "IsItemInAnyPack(${1:item_key})",
        "description": " ※参数: \n   (item_key)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 282"
    },
    "全局.GetNullFilter:UNKNOWN": {
        "prefix": "GetNullFilter",
        "body": "GetNullFilter(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1240"
    },
    "全局.c_sounddebugui:UNKNOWN": {
        "prefix": "c_sounddebugui",
        "body": "c_sounddebugui(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1342"
    },
    "全局.c_sethunger:UNKNOWN": {
        "prefix": "c_sethunger",
        "body": "c_sethunger(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 412"
    },
    "全局.researchlab4_init_fn:UNKNOWN": {
        "prefix": "researchlab4_init_fn",
        "body": "researchlab4_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2037"
    },
    "全局.GetAllActiveEvents:UNKNOWN": {
        "prefix": "GetAllActiveEvents",
        "body": "GetAllActiveEvents(${1:special_event},${2:extra_events})",
        "description": " ※参数: \n   (special_event)<>[] \n   (extra_events)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 975"
    },
    "全局.UnloadFonts:UNKNOWN": {
        "prefix": "UnloadFonts",
        "body": "UnloadFonts(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1287"
    },
    "全局.c_maintainsanity:UNKNOWN": {
        "prefix": "c_maintainsanity",
        "body": "c_maintainsanity(${1:player},${2:percent})",
        "description": " ※参数: \n   (player)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1109"
    },
    "全局.GetActiveSpecialEventCount:UNKNOWN": {
        "prefix": "GetActiveSpecialEventCount",
        "body": "GetActiveSpecialEventCount(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 964"
    },
    "全局.UpdateServerWorldGenDataString:UNKNOWN": {
        "prefix": "UpdateServerWorldGenDataString",
        "body": "UpdateServerWorldGenDataString(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 781"
    },
    "全局.GetEnabledServerModsConfigData:UNKNOWN": {
        "prefix": "GetEnabledServerModsConfigData",
        "body": "GetEnabledServerModsConfigData(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 158"
    },
    "全局.d_moonplant:UNKNOWN": {
        "prefix": "d_moonplant",
        "body": "d_moonplant(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1785"
    },
    "全局.ShouldIgnoreResolve:UNKNOWN": {
        "prefix": "ShouldIgnoreResolve",
        "body": "ShouldIgnoreResolve(${1:filename},${2:assettype})",
        "description": " ※参数: \n   (filename)<>[] \n   (assettype)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 69"
    },
    "全局.GetBoxPopupLayoutDetails:UNKNOWN": {
        "prefix": "GetBoxPopupLayoutDetails",
        "body": "GetBoxPopupLayoutDetails(${1:num_item_types})",
        "description": " ※参数: \n   (num_item_types)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1918"
    },
    "全局.MapHideAll:UNKNOWN": {
        "prefix": "MapHideAll",
        "body": "MapHideAll(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 150"
    },
    "全局.trophyscale_fish_init_fn:UNKNOWN": {
        "prefix": "trophyscale_fish_init_fn",
        "body": "trophyscale_fish_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2806"
    },
    "全局.d_domestication:UNKNOWN": {
        "prefix": "d_domestication",
        "body": "d_domestication(${1:domestication},${2:obedience})",
        "description": " ※参数: \n   (domestication)<>[] \n   (obedience)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 419"
    },
    "全局.c_simphase:UNKNOWN": {
        "prefix": "c_simphase",
        "body": "c_simphase(${1:phase})",
        "description": " ※参数: \n   (phase)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 884"
    },
    "全局.ForceAssetReset:UNKNOWN": {
        "prefix": "ForceAssetReset",
        "body": "ForceAssetReset(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1484"
    },
    "全局.VecUtil_Add:UNKNOWN": {
        "prefix": "VecUtil_Add",
        "body": "VecUtil_Add(${1:p1_x},${2:p1_z},${3:p2_x},${4:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 3"
    },
    "全局.wall_stone_item_init_fn:UNKNOWN": {
        "prefix": "wall_stone_item_init_fn",
        "body": "wall_stone_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1824"
    },
    "全局.Shard_ReceiveVote:UNKNOWN": {
        "prefix": "Shard_ReceiveVote",
        "body": "Shard_ReceiveVote(${1:selection},${2:user_id})",
        "description": " ※参数: \n   (selection)<>[] \n   (user_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 161"
    },
    "全局.bernie_inactive_init_fn:UNKNOWN": {
        "prefix": "bernie_inactive_init_fn",
        "body": "bernie_inactive_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1993"
    },
    "全局.cookpot_clear_fn:UNKNOWN": {
        "prefix": "cookpot_clear_fn",
        "body": "cookpot_clear_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1345"
    },
    "全局.DumpComponent:UNKNOWN": {
        "prefix": "DumpComponent",
        "body": "DumpComponent(${1:comp})",
        "description": " ※参数: \n   (comp)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debughelpers 所在行数: 5"
    },
    "全局.RemoveCustomizeGroup:UNKNOWN": {
        "prefix": "RemoveCustomizeGroup",
        "body": "RemoveCustomizeGroup(${1:category},${2:name})",
        "description": " ※参数: \n   (category)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 217"
    },
    "全局.ReportAction:UNKNOWN": {
        "prefix": "ReportAction",
        "body": "ReportAction(${1:userid},${2:items},${3:item_counts},${4:users},${5:cb})",
        "description": " ※参数: \n   (userid)<>[] \n   (items)<>[] \n   (item_counts)<>[] \n   (users)<>[] \n   (cb)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 329"
    },
    "全局.c_countprefabs:UNKNOWN": {
        "prefix": "c_countprefabs",
        "body": "c_countprefabs(${1:prefab},${2:noprint})",
        "description": " ※参数: \n   (prefab)<>[] \n   (noprint)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 888"
    },
    "全局.d_reportevent:UNKNOWN": {
        "prefix": "d_reportevent",
        "body": "d_reportevent(${1:other_ku})",
        "description": " ※参数: \n   (other_ku)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 847"
    },
    "全局.d_wintersfeast:UNKNOWN": {
        "prefix": "d_wintersfeast",
        "body": "d_wintersfeast(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 727"
    },
    "全局.ApplyFilters:UNKNOWN": {
        "prefix": "ApplyFilters",
        "body": "ApplyFilters(${1:full_skins_list},${2:filters})",
        "description": " ※参数: \n   (full_skins_list)<>[] \n   (filters)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsfiltersutils 所在行数: 67"
    },
    "全局.AddPopup:UNKNOWN": {
        "prefix": "AddPopup",
        "body": "AddPopup(${1:id})",
        "description": " ※参数: \n   (id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 483"
    },
    "全局.premiumwateringcan_clear_fn:UNKNOWN": {
        "prefix": "premiumwateringcan_clear_fn",
        "body": "premiumwateringcan_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2770"
    },
    "全局.WorldSettings_Pickable_PreLoad:UNKNOWN": {
        "prefix": "g+WorldSettings_Pickable_PreLoad",
        "body": "WorldSettings_Pickable_PreLoad(${1:inst},${2:data},${3:maxregentime})",
        "description": " ※参数: \n   (inst)<>[] \n   (data)<>[] \n   (maxregentime)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 241"
    },
    "全局.GetWanderAwayPoint:UNKNOWN": {
        "prefix": "GetWanderAwayPoint",
        "body": "GetWanderAwayPoint(${1:pt})",
        "description": " ※参数: \n   (pt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/giantutils 所在行数: 5"
    },
    "全局.GetFestivalEventSeasons:UNKNOWN": {
        "prefix": "GetFestivalEventSeasons",
        "body": "GetFestivalEventSeasons(${1:festival})",
        "description": " ※参数: \n   (festival)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1032"
    },
    "全局.isbadnumber:UNKNOWN": {
        "prefix": "isbadnumber",
        "body": "isbadnumber(${1:x})",
        "description": " ※参数: \n   (x)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 677"
    },
    "全局.LoadScript:UNKNOWN": {
        "prefix": "LoadScript",
        "body": "LoadScript(${1:filename})",
        "description": " ※参数: \n   (filename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 182"
    },
    "全局.c_autoteleportplayers:UNKNOWN": {
        "prefix": "c_autoteleportplayers",
        "body": "c_autoteleportplayers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1641"
    },
    "全局.ValidateRecipeSkinRequest:UNKNOWN": {
        "prefix": "ValidateRecipeSkinRequest",
        "body": "ValidateRecipeSkinRequest(${1:user_id},${2:prefab_name},${3:skin})",
        "description": " ※参数: \n   (user_id)<>[] \n   (prefab_name)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 173"
    },
    "全局.pet_init_fn:UNKNOWN": {
        "prefix": "pet_init_fn",
        "body": "pet_init_fn(${1:inst},${2:build_name},${3:default_build})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (default_build)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1511"
    },
    "全局.Networking_BanMetricsEvent:UNKNOWN": {
        "prefix": "Networking_BanMetricsEvent",
        "body": "Networking_BanMetricsEvent(${1:caller},${2:target})",
        "description": " ※参数: \n   (caller)<>[] \n   (target)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 112"
    },
    "全局.DownloadMods:UNKNOWN": {
        "prefix": "DownloadMods",
        "body": "DownloadMods(${1:server_listing})",
        "description": " ※参数: \n   (server_listing)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 344"
    },
    "全局.LoadFonts:UNKNOWN": {
        "prefix": "LoadFonts",
        "body": "LoadFonts(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1272"
    },
    "全局.lureplant_clear_fn:UNKNOWN": {
        "prefix": "lureplant_clear_fn",
        "body": "lureplant_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1053"
    },
    "全局.SetConsoleAutopaused:UNKNOWN": {
        "prefix": "SetConsoleAutopaused",
        "body": "SetConsoleAutopaused(${1:autopause})",
        "description": " ※参数: \n   (autopause)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 879"
    },
    "全局.GetShardModRPC:UNKNOWN": {
        "prefix": "GetShardModRPC",
        "body": "GetShardModRPC(${1:namespace},${2:name})",
        "description": " ※参数: \n   (namespace)<>[] \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 914"
    },
    "全局.IsTechIngredient:UNKNOWN": {
        "prefix": "IsTechIngredient",
        "body": "IsTechIngredient(${1:ingredienttype})",
        "description": " ※参数: \n   (ingredienttype)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/recipe 所在行数: 55"
    },
    "全局.GetTimeRealSeconds:UNKNOWN": {
        "prefix": "GetTimeRealSeconds",
        "body": "GetTimeRealSeconds(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 559"
    },
    "全局.GetTick:UNKNOWN": {
        "prefix": "GetTick",
        "body": "GetTick(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 167"
    },
    "全局.ConstructAdjectivedName:UNKNOWN": {
        "prefix": "ConstructAdjectivedName",
        "body": "ConstructAdjectivedName(${1:inst},${2:name},${3:adjective})",
        "description": " ※参数: \n   (inst)<>[] \n   (name)<>[] \n   (adjective)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport_strings 所在行数: 77"
    },
    "全局.WorldResetFromSim:UNKNOWN": {
        "prefix": "WorldResetFromSim",
        "body": "WorldResetFromSim(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 719"
    },
    "全局.IsTableEmpty:UNKNOWN": {
        "prefix": "IsTableEmpty",
        "body": "IsTableEmpty(${1:t})",
        "description": " ※参数: \n   (t)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 962"
    },
    "全局.DoWorldOverseerShutdown:UNKNOWN": {
        "prefix": "DoWorldOverseerShutdown",
        "body": "DoWorldOverseerShutdown(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1532"
    },
    "全局.GetEnabledModNamesDetailed:UNKNOWN": {
        "prefix": "GetEnabledModNamesDetailed",
        "body": "GetEnabledModNamesDetailed(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mods 所在行数: 101"
    },
    "全局.Networking_Announcement_GetDisplayName:UNKNOWN": {
        "prefix": "Networking_Announcement_GetDisplayName",
        "body": "Networking_Announcement_GetDisplayName(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 87"
    },
    "全局.ExtendedArray:UNKNOWN": {
        "prefix": "ExtendedArray",
        "body": "ExtendedArray(${1:orig},${2:addition},${3:mult})",
        "description": " ※参数: \n   (orig)<>[] \n   (addition)<>[] \n   (mult)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 485"
    },
    "全局.sorted_pairs:UNKNOWN": {
        "prefix": "sorted_pairs",
        "body": "sorted_pairs(${1:t},${2:fn})",
        "description": " ※参数: \n   (t)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1764"
    },
    "全局.mastupgrade_lightningrod_item_init_fn:UNKNOWN": {
        "prefix": "mastupgrade_lightningrod_item_init_fn",
        "body": "mastupgrade_lightningrod_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1744"
    },
    "全局.fence_gate_item_clear_fn:UNKNOWN": {
        "prefix": "fence_gate_item_clear_fn",
        "body": "fence_gate_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1898"
    },
    "全局.c_despawn:UNKNOWN": {
        "prefix": "c_despawn",
        "body": "c_despawn(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 243"
    },
    "全局.minisign_item_clear_fn:UNKNOWN": {
        "prefix": "minisign_item_clear_fn",
        "body": "minisign_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1595"
    },
    "全局.OnPushPopupDialog:UNKNOWN": {
        "prefix": "OnPushPopupDialog",
        "body": "OnPushPopupDialog(${1:message})",
        "description": " ※参数: \n   (message)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1750"
    },
    "全局.Shutdown:UNKNOWN": {
        "prefix": "Shutdown",
        "body": "Shutdown(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1538"
    },
    "全局.DisplayAntiAddictionNotification:UNKNOWN": {
        "prefix": "DisplayAntiAddictionNotification",
        "body": "DisplayAntiAddictionNotification(${1:notification})",
        "description": " ※参数: \n   (notification)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2242"
    },
    "全局.GetWorldTileMap:UNKNOWN": {
        "prefix": "GetWorldTileMap",
        "body": "GetWorldTileMap(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 724"
    },
    "全局.WorldSettings_ChildSpawner_SpawnPeriod:UNKNOWN": {
        "prefix": "g+WorldSettings_ChildSpawner_SpawnPeriod",
        "body": "WorldSettings_ChildSpawner_SpawnPeriod(${1:inst},${2:spawnperiod},${3:enabled})",
        "description": " ※参数: \n   (inst)<>[] \n   (spawnperiod)<>[] \n   (enabled)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 87"
    },
    "全局.OnAccountEvent:UNKNOWN": {
        "prefix": "OnAccountEvent",
        "body": "OnAccountEvent(${1:success},${2:event_code},${3:custom_message})",
        "description": " ※参数: \n   (success)<>[] \n   (event_code)<>[] \n   (custom_message)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1918"
    },
    "全局.ToggleOnCharacterCollisions:UNKNOWN": {
        "prefix": "ToggleOnCharacterCollisions",
        "body": "ToggleOnCharacterCollisions(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1422"
    },
    "全局.VecUtil_Normalize:UNKNOWN": {
        "prefix": "VecUtil_Normalize",
        "body": "VecUtil_Normalize(${1:p1_x},${2:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 50"
    },
    "全局.orangestaff_clear_fn:UNKNOWN": {
        "prefix": "orangestaff_clear_fn",
        "body": "orangestaff_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2308"
    },
    "全局.boat_grass_clear_fn:UNKNOWN": {
        "prefix": "boat_grass_clear_fn",
        "body": "boat_grass_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 241"
    },
    "全局.VecUtil_Sub:UNKNOWN": {
        "prefix": "VecUtil_Sub",
        "body": "VecUtil_Sub(${1:p1_x},${2:p1_z},${3:p2_x},${4:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 7"
    },
    "全局.c_setwereness:UNKNOWN": {
        "prefix": "c_setwereness",
        "body": "c_setwereness(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 434"
    },
    "全局.walkingplank_grass_init_fn:UNKNOWN": {
        "prefix": "walkingplank_grass_init_fn",
        "body": "walkingplank_grass_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 246"
    },
    "全局.CreateRingEmitter:UNKNOWN": {
        "prefix": "CreateRingEmitter",
        "body": "CreateRingEmitter(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 125"
    },
    "全局.bernie_active_init_fn:UNKNOWN": {
        "prefix": "bernie_active_init_fn",
        "body": "bernie_active_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2005"
    },
    "全局.ModUnloadFrontEndAssets:UNKNOWN": {
        "prefix": "ModUnloadFrontEndAssets",
        "body": "ModUnloadFrontEndAssets(${1:modname})",
        "description": " ※参数: \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 184"
    },
    "全局.WorldSettings_Spawner_PreLoad:UNKNOWN": {
        "prefix": "g+WorldSettings_Spawner_PreLoad",
        "body": "WorldSettings_Spawner_PreLoad(${1:inst},${2:data},${3:maxstartdelay})",
        "description": " ※参数: \n   (inst)<>[] \n   (data)<>[] \n   (maxstartdelay)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 182"
    },
    "全局.RegisterPrefabsImpl:UNKNOWN": {
        "prefix": "RegisterPrefabsImpl",
        "body": "RegisterPrefabsImpl(${1:prefab},${2:resolve_fn})",
        "description": " ※参数: \n   (prefab)<>[] \n   (resolve_fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 103"
    },
    "全局.campfire_clear_fn:UNKNOWN": {
        "prefix": "campfire_clear_fn",
        "body": "campfire_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1467"
    },
    "全局.VecUtil_Lerp:UNKNOWN": {
        "prefix": "VecUtil_Lerp",
        "body": "VecUtil_Lerp(${1:p1_x},${2:p1_z},${3:p2_x},${4:p2_z},${5:percent})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_z)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 35"
    },
    "全局.RunInSandboxSafeCatchInfiniteLoops:UNKNOWN": {
        "prefix": "RunInSandboxSafeCatchInfiniteLoops",
        "body": "RunInSandboxSafeCatchInfiniteLoops(${1:untrusted_code},${2:error_handler})",
        "description": " ※参数: \n   (untrusted_code)<>[] \n   (error_handler)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 813"
    },
    "全局.wall_stone_item_clear_fn:UNKNOWN": {
        "prefix": "wall_stone_item_clear_fn",
        "body": "wall_stone_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1829"
    },
    "全局.minisign_init_fn:UNKNOWN": {
        "prefix": "minisign_init_fn",
        "body": "minisign_init_fn(${1:inst},${2:build_name},${3:anim_bank})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (anim_bank)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1615"
    },
    "全局.ResetControllersAndQuitGame:UNKNOWN": {
        "prefix": "ResetControllersAndQuitGame",
        "body": "ResetControllersAndQuitGame(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 2062"
    },
    "全局.d_fish:UNKNOWN": {
        "prefix": "d_fish",
        "body": "d_fish(${1:swim},${2:r},${3:g},${4:b})",
        "description": " ※参数: \n   (swim)<>[] \n   (r)<>[] \n   (g)<>[] \n   (b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1310"
    },
    "全局.IsKlumpLoaded:UNKNOWN": {
        "prefix": "IsKlumpLoaded",
        "body": "IsKlumpLoaded(${1:klump_file})",
        "description": " ※参数: \n   (klump_file)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/klump 所在行数: 69"
    },
    "全局.mastupgrade_lightningrod_clear_fn:UNKNOWN": {
        "prefix": "mastupgrade_lightningrod_clear_fn",
        "body": "mastupgrade_lightningrod_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1760"
    },
    "全局.SerializeUserSession:UNKNOWN": {
        "prefix": "SerializeUserSession",
        "body": "SerializeUserSession(${1:player},${2:isnewspawn})",
        "description": " ※参数: \n   (player)<>[] \n   (isnewspawn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 300"
    },
    "全局.ModReloadFrontEndAssets:UNKNOWN": {
        "prefix": "ModReloadFrontEndAssets",
        "body": "ModReloadFrontEndAssets(${1:assets},${2:modname})",
        "description": " ※参数: \n   (assets)<>[] \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 198"
    },
    "全局.CreateDiscEmitter:UNKNOWN": {
        "prefix": "CreateDiscEmitter",
        "body": "CreateDiscEmitter(${1:radius})",
        "description": " ※参数: \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 105"
    },
    "全局.MakeSmallPerishableCreature:UNKNOWN": {
        "prefix": "MakeSmallPerishableCreature",
        "body": "MakeSmallPerishableCreature(${1:inst},${2:starvetime},${3:oninventory},${4:ondropped})",
        "description": " ※参数: \n   (inst)<>[] \n   (starvetime)<>[] \n   (oninventory)<>[] \n   (ondropped)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 776"
    },
    "全局.VecUtil_NormalAndLength:UNKNOWN": {
        "prefix": "VecUtil_NormalAndLength",
        "body": "VecUtil_NormalAndLength(${1:p1_x},${2:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 57"
    },
    "全局.mastupgrade_lightningrod_item_clear_fn:UNKNOWN": {
        "prefix": "mastupgrade_lightningrod_item_clear_fn",
        "body": "mastupgrade_lightningrod_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1749"
    },
    "全局.BuildModShaders:UNKNOWN": {
        "prefix": "BuildModShaders",
        "body": "BuildModShaders(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/postprocesseffects 所在行数: 254"
    },
    "全局.bundlewrap_init_fn:UNKNOWN": {
        "prefix": "bundlewrap_init_fn",
        "body": "bundlewrap_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1258"
    },
    "全局.SetSkinDLCEntitlementReceived:UNKNOWN": {
        "prefix": "SetSkinDLCEntitlementReceived",
        "body": "SetSkinDLCEntitlementReceived(${1:entitlement})",
        "description": " ※参数: \n   (entitlement)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1633"
    },
    "全局.ReplacePrefab:UNKNOWN": {
        "prefix": "ReplacePrefab",
        "body": "ReplacePrefab(${1:original_inst},${2:name},${3:skin},${4:skin_id},${5:creator})",
        "description": " ※参数: \n   (original_inst)<>[] \n   (name)<>[] \n   (skin)<>[] \n   (skin_id)<>[] \n   (creator)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 387"
    },
    "全局.c_setminhealth:UNKNOWN": {
        "prefix": "c_setminhealth",
        "body": "c_setminhealth(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 396"
    },
    "全局.CraftMonkeySpeech:UNKNOWN": {
        "prefix": "CraftMonkeySpeech",
        "body": "CraftMonkeySpeech(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 147"
    },
    "全局.bushhat_init_fn:UNKNOWN": {
        "prefix": "bushhat_init_fn",
        "body": "bushhat_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 997"
    },
    "全局.newProfiler:UNKNOWN": {
        "prefix": "newProfiler",
        "body": "newProfiler(${1:variant},${2:sampledelay})",
        "description": " ※参数: \n   (variant)<>[] \n   (sampledelay)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/profiler 所在行数: 116"
    },
    "全局.d_potions:UNKNOWN": {
        "prefix": "d_potions",
        "body": "d_potions(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 683"
    },
    "全局.ProfileStatsAddToField:UNKNOWN": {
        "prefix": "ProfileStatsAddToField",
        "body": "ProfileStatsAddToField(${1:field},${2:value})",
        "description": " ※参数: \n   (field)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 361"
    },
    "全局.ConsoleWorldEntityUnderMouse:UNKNOWN": {
        "prefix": "ConsoleWorldEntityUnderMouse",
        "body": "ConsoleWorldEntityUnderMouse(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 10"
    },
    "全局.c_dumpworldstate:UNKNOWN": {
        "prefix": "c_dumpworldstate",
        "body": "c_dumpworldstate(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 972"
    },
    "全局.c_emptyworld:UNKNOWN": {
        "prefix": "c_emptyworld",
        "body": "c_emptyworld(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1201"
    },
    "全局.distsq:UNKNOWN": {
        "prefix": "distsq",
        "body": "distsq(${1:v1},${2:v2},${3:v3},${4:v4})",
        "description": " ※参数: \n   (v1)<>[] \n   (v2)<>[] \n   (v3)<>[] \n   (v4)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 536"
    },
    "全局.DeactivateWorld:UNKNOWN": {
        "prefix": "DeactivateWorld",
        "body": "DeactivateWorld(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 740"
    },
    "全局.SpawnSecondInstance:UNKNOWN": {
        "prefix": "SpawnSecondInstance",
        "body": "SpawnSecondInstance(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 12"
    },
    "全局.c_countallprefabs:UNKNOWN": {
        "prefix": "c_countallprefabs",
        "body": "c_countallprefabs(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 914"
    },
    "全局.resurrectionstatue_clear_fn:UNKNOWN": {
        "prefix": "resurrectionstatue_clear_fn",
        "body": "resurrectionstatue_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2823"
    },
    "全局.ClientDisconnected:UNKNOWN": {
        "prefix": "ClientDisconnected",
        "body": "ClientDisconnected(${1:userid})",
        "description": " ※参数: \n   (userid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 948"
    },
    "全局.AddCharacterRecipe:UNKNOWN": {
        "prefix": "AddCharacterRecipe",
        "body": "AddCharacterRecipe(${1:name},${2:ingredients},${3:tech},${4:config},${5:extra_filters})",
        "description": " ※参数: \n   (name)<>[] \n   (ingredients)<>[] \n   (tech)<>[] \n   (config)<>[] \n   (extra_filters)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 758"
    },
    "全局.c_remote:UNKNOWN": {
        "prefix": "c_remote",
        "body": "c_remote(${1:fnstr})",
        "description": " ※参数: \n   (fnstr)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 201"
    },
    "全局.Vec3Util_Add:UNKNOWN": {
        "prefix": "Vec3Util_Add",
        "body": "Vec3Util_Add(${1:p1_x},${2:p1_y},${3:p1_z},${4:p2_x},${5:p2_y},${6:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_y)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 3"
    },
    "全局.d_allshells:UNKNOWN": {
        "prefix": "d_allshells",
        "body": "d_allshells(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1294"
    },
    "全局.AddLocation:UNKNOWN": {
        "prefix": "AddLocation",
        "body": "AddLocation(${1:arg1},${2:...})",
        "description": " ※参数: \n   (arg1)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 283"
    },
    "全局.c_repeatlastcommand:UNKNOWN": {
        "prefix": "c_repeatlastcommand",
        "body": "c_repeatlastcommand(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1413"
    },
    "全局.MakeSnowCoveredPristine:UNKNOWN": {
        "prefix": "MakeSnowCoveredPristine",
        "body": "MakeSnowCoveredPristine(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 707"
    },
    "全局.ValidateItemsInProfile:UNKNOWN": {
        "prefix": "ValidateItemsInProfile",
        "body": "ValidateItemsInProfile(${1:user_profile})",
        "description": " ※参数: \n   (user_profile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1456"
    },
    "全局.CalcDiminishingReturns:UNKNOWN": {
        "prefix": "CalcDiminishingReturns",
        "body": "CalcDiminishingReturns(${1:current},${2:basedelta})",
        "description": " ※参数: \n   (current)<>[] \n   (basedelta)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1587"
    },
    "全局.optnumber:UNKNOWN": {
        "prefix": "optnumber",
        "body": "optnumber(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 10"
    },
    "全局.d_allpillows_onstands:UNKNOWN": {
        "prefix": "d_allpillows_onstands",
        "body": "d_allpillows_onstands(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1742"
    },
    "全局.GetCircleEdgeSnapTransform:UNKNOWN": {
        "prefix": "GetCircleEdgeSnapTransform",
        "body": "GetCircleEdgeSnapTransform(${1:segments},${2:radius},${3:base_pt},${4:pt},${5:angle})",
        "description": " ※参数: \n   (segments)<>[] \n   (radius)<>[] \n   (base_pt)<>[] \n   (pt)<>[] \n   (angle)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1469"
    },
    "全局.moderror:UNKNOWN": {
        "prefix": "moderror",
        "body": "moderror(${1:message},${2:level})",
        "description": " ※参数: \n   (message)<>[] \n   (level)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 105"
    },
    "全局.ArrayIntersection:UNKNOWN": {
        "prefix": "ArrayIntersection",
        "body": "ArrayIntersection(${1:...})",
        "description": " ※参数: \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 364"
    },
    "全局.GetRandomWithVariance:UNKNOWN": {
        "prefix": "GetRandomWithVariance",
        "body": "GetRandomWithVariance(${1:baseval},${2:randomval})",
        "description": " ※参数: \n   (baseval)<>[] \n   (randomval)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 528"
    },
    "全局.DiffAngle:UNKNOWN": {
        "prefix": "DiffAngle",
        "body": "DiffAngle(${1:rot1},${2:rot2})",
        "description": " ※参数: \n   (rot1)<>[] \n   (rot2)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mathutil 所在行数: 86"
    },
    "全局.c_printtextureinfo:UNKNOWN": {
        "prefix": "c_printtextureinfo",
        "body": "c_printtextureinfo(${1:filename})",
        "description": " ※参数: \n   (filename)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 880"
    },
    "全局.GetProfilerMetaData:UNKNOWN": {
        "prefix": "GetProfilerMetaData",
        "body": "GetProfilerMetaData(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/perfutil 所在行数: 104"
    },
    "全局.c_regenerateworld:UNKNOWN": {
        "prefix": "c_regenerateworld",
        "body": "c_regenerateworld(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 155"
    },
    "全局.IsLandTile:UNKNOWN": {
        "prefix": "IsLandTile",
        "body": "IsLandTile(${1:tile})",
        "description": " ※参数: \n   (tile)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 7"
    },
    "全局.c_listallplayers:UNKNOWN": {
        "prefix": "c_listallplayers",
        "body": "c_listallplayers(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 291"
    },
    "全局.GetDefaultServerData:UNKNOWN": {
        "prefix": "GetDefaultServerData",
        "body": "GetDefaultServerData(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 814"
    },
    "全局.GetCharacterTitle:UNKNOWN": {
        "prefix": "GetCharacterTitle",
        "body": "GetCharacterTitle(${1:character},${2:skin})",
        "description": " ※参数: \n   (character)<>[] \n   (skin)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 96"
    },
    "全局.c_setsanity:UNKNOWN": {
        "prefix": "c_setsanity",
        "body": "c_setsanity(${1:n})",
        "description": " ※参数: \n   (n)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 404"
    },
    "全局.c_allbooks:UNKNOWN": {
        "prefix": "c_allbooks",
        "body": "c_allbooks(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 97"
    },
    "全局.WorldSettings_Timer_PreLoad:UNKNOWN": {
        "prefix": "g+WorldSettings_Timer_PreLoad",
        "body": "WorldSettings_Timer_PreLoad(${1:inst},${2:data},${3:timername},${4:maxtimeleft})",
        "description": " ※参数: \n   (inst)<>[] \n   (data)<>[] \n   (timername)<>[] \n   (maxtimeleft)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 132"
    },
    "全局.Networking_RollbackMetricsEvent:UNKNOWN": {
        "prefix": "Networking_RollbackMetricsEvent",
        "body": "Networking_RollbackMetricsEvent(${1:caller})",
        "description": " ※参数: \n   (caller)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 115"
    },
    "全局.HandleShardModRPC:UNKNOWN": {
        "prefix": "HandleShardModRPC",
        "body": "HandleShardModRPC(${1:sender},${2:tick},${3:namespace},${4:code},${5:data})",
        "description": " ※参数: \n   (sender)<>[] \n   (tick)<>[] \n   (namespace)<>[] \n   (code)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1570"
    },
    "全局.IsDLCInstalled:UNKNOWN": {
        "prefix": "IsDLCInstalled",
        "body": "IsDLCInstalled(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 141"
    },
    "全局.c_reset:UNKNOWN": {
        "prefix": "c_reset",
        "body": "c_reset(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 123"
    },
    "全局.MakeSmallObstaclePhysics:UNKNOWN": {
        "prefix": "MakeSmallObstaclePhysics",
        "body": "MakeSmallObstaclePhysics(${1:inst},${2:rad},${3:height})",
        "description": " ※参数: \n   (inst)<>[] \n   (rad)<>[] \n   (height)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 619"
    },
    "全局.Shard_StopVote:UNKNOWN": {
        "prefix": "Shard_StopVote",
        "body": "Shard_StopVote(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 155"
    },
    "全局.VecUtil_Dist:UNKNOWN": {
        "prefix": "VecUtil_Dist",
        "body": "VecUtil_Dist(${1:p1_x},${2:p1_z},${3:p2_x},${4:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 27"
    },
    "全局.IsUserCommerceBuyRestrictedDueToOwnership:UNKNOWN": {
        "prefix": "IsUserCommerceBuyRestrictedDueToOwnership",
        "body": "IsUserCommerceBuyRestrictedDueToOwnership(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 722"
    },
    "全局.d_ground:UNKNOWN": {
        "prefix": "d_ground",
        "body": "d_ground(${1:ground},${2:pt})",
        "description": " ※参数: \n   (ground)<>[] \n   (pt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 874"
    },
    "全局.IsItemId:UNKNOWN": {
        "prefix": "IsItemId",
        "body": "IsItemId(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 575"
    },
    "全局.PreventCharacterCollisionsWithPlacedObjects:UNKNOWN": {
        "prefix": "PreventCharacterCollisionsWithPlacedObjects",
        "body": "PreventCharacterCollisionsWithPlacedObjects(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 1494"
    },
    "全局.GetOwnedItemCounts:UNKNOWN": {
        "prefix": "GetOwnedItemCounts",
        "body": "GetOwnedItemCounts(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1086"
    },
    "全局.SendRPCToShard:UNKNOWN": {
        "prefix": "SendRPCToShard",
        "body": "SendRPCToShard(${1:code},${2:...})",
        "description": " ※参数: \n   (code)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1284"
    },
    "全局.HandleRPC:UNKNOWN": {
        "prefix": "HandleRPC",
        "body": "HandleRPC(${1:sender},${2:tick},${3:code},${4:data})",
        "description": " ※参数: \n   (sender)<>[] \n   (tick)<>[] \n   (code)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1302"
    },
    "全局.resolvefilepath:UNKNOWN": {
        "prefix": "resolvefilepath",
        "body": "resolvefilepath(${1:filepath},${2:force_path_search},${3:search_first_path})",
        "description": " ※参数: \n   (filepath)<>[] \n   (force_path_search)<>[] \n   (search_first_path)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 619"
    },
    "全局.IsEntityDead:UNKNOWN": {
        "prefix": "IsEntityDead",
        "body": "IsEntityDead(${1:inst},${2:require_health})",
        "description": " ※参数: \n   (inst)<>[] \n   (require_health)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 7"
    },
    "全局.optuint:UNKNOWN": {
        "prefix": "optuint",
        "body": "optuint(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 11"
    },
    "全局.SaveAndShutdown:UNKNOWN": {
        "prefix": "SaveAndShutdown",
        "body": "SaveAndShutdown(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2204"
    },
    "全局.GetStaticTime:UNKNOWN": {
        "prefix": "GetStaticTime",
        "body": "GetStaticTime(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldgen_main 所在行数: 163"
    },
    "全局.c_list:UNKNOWN": {
        "prefix": "c_list",
        "body": "c_list(${1:prefab})",
        "description": " ※参数: \n   (prefab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 622"
    },
    "全局.Networking_SystemMessage:UNKNOWN": {
        "prefix": "Networking_SystemMessage",
        "body": "Networking_SystemMessage(${1:message})",
        "description": " ※参数: \n   (message)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 47"
    },
    "全局.c_netstats:UNKNOWN": {
        "prefix": "c_netstats",
        "body": "c_netstats(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1216"
    },
    "全局.c_setrotation:UNKNOWN": {
        "prefix": "c_setrotation",
        "body": "c_setrotation(${1:angle})",
        "description": " ※参数: \n   (angle)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1965"
    },
    "全局.AwardFrontendAchievement:UNKNOWN": {
        "prefix": "AwardFrontendAchievement",
        "body": "AwardFrontendAchievement(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 277"
    },
    "全局.StartDedicatedServer:UNKNOWN": {
        "prefix": "StartDedicatedServer",
        "body": "StartDedicatedServer(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 846"
    },
    "全局.glommerflower_init_fn:UNKNOWN": {
        "prefix": "glommerflower_init_fn",
        "body": "glommerflower_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1236"
    },
    "全局.GetGhostEnabled:UNKNOWN": {
        "prefix": "GetGhostEnabled",
        "body": "GetGhostEnabled(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 290"
    },
    "全局.BuildTagsStringCommon:UNKNOWN": {
        "prefix": "BuildTagsStringCommon",
        "body": "BuildTagsStringCommon(${1:tagsTable})",
        "description": " ※参数: \n   (tagsTable)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2158"
    },
    "全局.boat_init_fn:UNKNOWN": {
        "prefix": "boat_init_fn",
        "body": "boat_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1646"
    },
    "全局.anchor_item_clear_fn:UNKNOWN": {
        "prefix": "anchor_item_clear_fn",
        "body": "anchor_item_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1703"
    },
    "全局.TrackedAssert:UNKNOWN": {
        "prefix": "TrackedAssert",
        "body": "TrackedAssert(${1:tracking_data},${2:function_ptr},${3:function_data})",
        "description": " ※参数: \n   (tracking_data)<>[] \n   (function_ptr)<>[] \n   (function_data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 886"
    },
    "全局.OnTwitchChatStatusUpdate:UNKNOWN": {
        "prefix": "OnTwitchChatStatusUpdate",
        "body": "OnTwitchChatStatusUpdate(${1:status})",
        "description": " ※参数: \n   (status)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 165"
    },
    "全局.OnFocusLost:UNKNOWN": {
        "prefix": "OnFocusLost",
        "body": "OnFocusLost(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1944"
    },
    "全局.ResumeExistingUserSession:UNKNOWN": {
        "prefix": "ResumeExistingUserSession",
        "body": "ResumeExistingUserSession(${1:data},${2:guid})",
        "description": " ※参数: \n   (data)<>[] \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2038"
    },
    "全局.MakeAllPrefixes:UNKNOWN": {
        "prefix": "MakeAllPrefixes",
        "body": "MakeAllPrefixes(${1:fn})",
        "description": " ※参数: \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport_strings 所在行数: 59"
    },
    "全局.wall_stone_init_fn:UNKNOWN": {
        "prefix": "wall_stone_init_fn",
        "body": "wall_stone_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1834"
    },
    "全局.perdling_init_fn:UNKNOWN": {
        "prefix": "perdling_init_fn",
        "body": "perdling_init_fn(${1:inst},${2:build_name},${3:default_build},${4:hungry_sound})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (default_build)<>[] \n   (hungry_sound)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1519"
    },
    "全局.weighted_random_choice:UNKNOWN": {
        "prefix": "weighted_random_choice",
        "body": "weighted_random_choice(${1:choices})",
        "description": " ※参数: \n   (choices)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 708"
    },
    "全局.CreateBoxEmitter:UNKNOWN": {
        "prefix": "CreateBoxEmitter",
        "body": "CreateBoxEmitter(${1:x_min},${2:y_min},${3:z_min},${4:x_max},${5:y_max},${6:z_max})",
        "description": " ※参数: \n   (x_min)<>[] \n   (y_min)<>[] \n   (z_min)<>[] \n   (x_max)<>[] \n   (y_max)<>[] \n   (z_max)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/emitters 所在行数: 159"
    },
    "全局.GetFlattenedSparse:UNKNOWN": {
        "prefix": "GetFlattenedSparse",
        "body": "GetFlattenedSparse(${1:tab})",
        "description": " ※参数: \n   (tab)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 217"
    },
    "全局.SuUsedAdd:UNKNOWN": {
        "prefix": "SuUsedAdd",
        "body": "SuUsedAdd(${1:item},${2:value})",
        "description": " ※参数: \n   (item)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 401"
    },
    "全局.Shard_GetConnectedShards:UNKNOWN": {
        "prefix": "Shard_GetConnectedShards",
        "body": "Shard_GetConnectedShards(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 125"
    },
    "全局.BeginDataBundleFileHashes:UNKNOWN": {
        "prefix": "BeginDataBundleFileHashes",
        "body": "BeginDataBundleFileHashes(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2317"
    },
    "全局.Print:UNKNOWN": {
        "prefix": "Print",
        "body": "Print(${1:msg_verbosity},${2:...})",
        "description": " ※参数: \n   (msg_verbosity)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 48"
    },
    "全局.ModUnloadPreloadAssets:UNKNOWN": {
        "prefix": "ModUnloadPreloadAssets",
        "body": "ModUnloadPreloadAssets(${1:modname})",
        "description": " ※参数: \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 217"
    },
    "全局.glommerflower_clear_fn:UNKNOWN": {
        "prefix": "glommerflower_clear_fn",
        "body": "glommerflower_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1243"
    },
    "全局.IsDLCEnabled:UNKNOWN": {
        "prefix": "IsDLCEnabled",
        "body": "IsDLCEnabled(${1:index})",
        "description": " ※参数: \n   (index)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport 所在行数: 137"
    },
    "全局.encode:UNKNOWN": {
        "prefix": "encode",
        "body": "encode(${1:v})",
        "description": " ※参数: \n   (v)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 97"
    },
    "全局.SetAutopaused:UNKNOWN": {
        "prefix": "SetAutopaused",
        "body": "SetAutopaused(${1:autopause})",
        "description": " ※参数: \n   (autopause)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 863"
    },
    "全局.UserToClientID:UNKNOWN": {
        "prefix": "UserToClientID",
        "body": "UserToClientID(${1:input})",
        "description": " ※参数: \n   (input)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 647"
    },
    "全局.d_prizepouch:UNKNOWN": {
        "prefix": "d_prizepouch",
        "body": "d_prizepouch(${1:prefab},${2:nugget_count})",
        "description": " ※参数: \n   (prefab)<>[] \n   (nugget_count)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3615"
    },
    "全局.c_debugshards:UNKNOWN": {
        "prefix": "c_debugshards",
        "body": "c_debugshards(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1362"
    },
    "全局.WorldSettings_ChildSpawner_RegenPeriod:UNKNOWN": {
        "prefix": "g+WorldSettings_ChildSpawner_RegenPeriod",
        "body": "WorldSettings_ChildSpawner_RegenPeriod(${1:inst},${2:regenperiod},${3:enabled})",
        "description": " ※参数: \n   (inst)<>[] \n   (regenperiod)<>[] \n   (enabled)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettingsutil 所在行数: 106"
    },
    "全局.CraftGiberish:UNKNOWN": {
        "prefix": "CraftGiberish",
        "body": "CraftGiberish(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 112"
    },
    "全局.metapairs:UNKNOWN": {
        "prefix": "metapairs",
        "body": "metapairs(${1:t},${2:...})",
        "description": " ※参数: \n   (t)<>[] \n   (...)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1668"
    },
    "全局.c_cancelmaintaintasks:UNKNOWN": {
        "prefix": "c_cancelmaintaintasks",
        "body": "c_cancelmaintaintasks(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1161"
    },
    "全局.RegisterFriendsManager:UNKNOWN": {
        "prefix": "RegisterFriendsManager",
        "body": "RegisterFriendsManager(${1:widg})",
        "description": " ※参数: \n   (widg)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 961"
    },
    "全局.fence_clear_fn:UNKNOWN": {
        "prefix": "fence_clear_fn",
        "body": "fence_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1886"
    },
    "全局.metarawget:UNKNOWN": {
        "prefix": "metarawget",
        "body": "metarawget(${1:t},${2:k})",
        "description": " ※参数: \n   (t)<>[] \n   (k)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1685"
    },
    "全局.IsInFrontEnd:UNKNOWN": {
        "prefix": "IsInFrontEnd",
        "body": "IsInFrontEnd(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2217"
    },
    "全局.GetEventIconForItem:UNKNOWN": {
        "prefix": "GetEventIconForItem",
        "body": "GetEventIconForItem(${1:item})",
        "description": " ※参数: \n   (item)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 633"
    },
    "全局.OnPhysicsWake:UNKNOWN": {
        "prefix": "OnPhysicsWake",
        "body": "OnPhysicsWake(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 705"
    },
    "全局.SetSimPause:UNKNOWN": {
        "prefix": "SetSimPause",
        "body": "SetSimPause(${1:val})",
        "description": " ※参数: \n   (val)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 846"
    },
    "全局.ChangeToObstaclePhysics:UNKNOWN": {
        "prefix": "ChangeToObstaclePhysics",
        "body": "ChangeToObstaclePhysics(${1:inst},${2:rad},${3:height})",
        "description": " ※参数: \n   (inst)<>[] \n   (rad)<>[] \n   (height)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 540"
    },
    "全局.GetMysteryBoxItemID:UNKNOWN": {
        "prefix": "GetMysteryBoxItemID",
        "body": "GetMysteryBoxItemID(${1:item_type})",
        "description": " ※参数: \n   (item_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/skinsutils 所在行数: 1305"
    },
    "全局.OnControlMapped:UNKNOWN": {
        "prefix": "OnControlMapped",
        "body": "OnControlMapped(${1:deviceId},${2:controlId},${3:inputId},${4:hasChanged})",
        "description": " ※参数: \n   (deviceId)<>[] \n   (controlId)<>[] \n   (inputId)<>[] \n   (hasChanged)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/input 所在行数: 457"
    },
    "全局.cross:UNKNOWN": {
        "prefix": "cross",
        "body": "cross(${1:o},${2:a},${3:b})",
        "description": " ※参数: \n   (o)<>[] \n   (a)<>[] \n   (b)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/maputil 所在行数: 42"
    },
    "全局.ExpandWorldFromProfile:UNKNOWN": {
        "prefix": "ExpandWorldFromProfile",
        "body": "ExpandWorldFromProfile(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/perfutil 所在行数: 113"
    },
    "全局.AddReplicableComponent:UNKNOWN": {
        "prefix": "AddReplicableComponent",
        "body": "AddReplicableComponent(${1:name})",
        "description": " ※参数: \n   (name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 852"
    },
    "全局.TrackMem:UNKNOWN": {
        "prefix": "TrackMem",
        "body": "TrackMem(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1422"
    },
    "全局.d_allcustomhidingspots:UNKNOWN": {
        "prefix": "d_allcustomhidingspots",
        "body": "d_allcustomhidingspots(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 937"
    },
    "全局.Networking_SkinAnnouncement:UNKNOWN": {
        "prefix": "Networking_SkinAnnouncement",
        "body": "Networking_SkinAnnouncement(${1:user_name},${2:user_colour},${3:skin_name})",
        "description": " ※参数: \n   (user_name)<>[] \n   (user_colour)<>[] \n   (skin_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 41"
    },
    "全局.Vector3FromTheta:UNKNOWN": {
        "prefix": "Vector3FromTheta",
        "body": "Vector3FromTheta(${1:theta},${2:radius})",
        "description": " ※参数: \n   (theta)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vector3 所在行数: 104"
    },
    "全局.d_sinkhole:UNKNOWN": {
        "prefix": "d_sinkhole",
        "body": "d_sinkhole(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 631"
    },
    "全局.JapaneseOnPS4:UNKNOWN": {
        "prefix": "JapaneseOnPS4",
        "body": "JapaneseOnPS4(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1455"
    },
    "全局.d_wintersfood:UNKNOWN": {
        "prefix": "d_wintersfood",
        "body": "d_wintersfood(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 742"
    },
    "全局.Networking_Announcement:UNKNOWN": {
        "prefix": "Networking_Announcement",
        "body": "Networking_Announcement(${1:message},${2:colour},${3:announce_type})",
        "description": " ※参数: \n   (message)<>[] \n   (colour)<>[] \n   (announce_type)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 31"
    },
    "全局.Networking_SlashCmd:UNKNOWN": {
        "prefix": "Networking_SlashCmd",
        "body": "Networking_SlashCmd(${1:guid},${2:userid},${3:cmd})",
        "description": " ※参数: \n   (guid)<>[] \n   (userid)<>[] \n   (cmd)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 24"
    },
    "全局.bushhat_clear_fn:UNKNOWN": {
        "prefix": "bushhat_clear_fn",
        "body": "bushhat_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1014"
    },
    "全局.d_cycle_clothing:UNKNOWN": {
        "prefix": "d_cycle_clothing",
        "body": "d_cycle_clothing(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 607"
    },
    "全局.MakeSmallBurnableCharacter:UNKNOWN": {
        "prefix": "MakeSmallBurnableCharacter",
        "body": "MakeSmallBurnableCharacter(${1:inst},${2:sym},${3:offset})",
        "description": " ※参数: \n   (inst)<>[] \n   (sym)<>[] \n   (offset)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 240"
    },
    "全局.VecUtil_GetAngleInDegrees:UNKNOWN": {
        "prefix": "VecUtil_GetAngleInDegrees",
        "body": "VecUtil_GetAngleInDegrees(${1:p1_x},${2:p1_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vecutil 所在行数: 64"
    },
    "全局.c_skip:UNKNOWN": {
        "prefix": "c_skip",
        "body": "c_skip(${1:num})",
        "description": " ※参数: \n   (num)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1051"
    },
    "全局.c_maintainhunger:UNKNOWN": {
        "prefix": "c_maintainhunger",
        "body": "c_maintainhunger(${1:player},${2:percent})",
        "description": " ※参数: \n   (player)<>[] \n   (percent)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1119"
    },
    "全局.fence_gate_init_fn:UNKNOWN": {
        "prefix": "fence_gate_init_fn",
        "body": "fence_gate_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1903"
    },
    "全局.wall_moonrock_item_init_fn:UNKNOWN": {
        "prefix": "wall_moonrock_item_init_fn",
        "body": "wall_moonrock_item_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1777"
    },
    "全局.str_seconds:UNKNOWN": {
        "prefix": "str_seconds",
        "body": "str_seconds(${1:time})",
        "description": " ※参数: \n   (time)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stringutil 所在行数: 473"
    },
    "全局.SetDLCEnabled:UNKNOWN": {
        "prefix": "SetDLCEnabled",
        "body": "SetDLCEnabled(${1:tbl})",
        "description": " ※参数: \n   (tbl)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/dlcsupport_worldgen 所在行数: 16"
    },
    "全局.OnTwitchLoginAttempt:UNKNOWN": {
        "prefix": "OnTwitchLoginAttempt",
        "body": "OnTwitchLoginAttempt(${1:success},${2:result})",
        "description": " ※参数: \n   (success)<>[] \n   (result)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 156"
    },
    "全局.d_spawnlist:UNKNOWN": {
        "prefix": "d_spawnlist",
        "body": "d_spawnlist(${1:list},${2:spacing},${3:fn})",
        "description": " ※参数: \n   (list)<>[] \n   (spacing)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3"
    },
    "全局.SetModHUDFocus:UNKNOWN": {
        "prefix": "SetModHUDFocus",
        "body": "SetModHUDFocus(${1:focusid},${2:hasfocus})",
        "description": " ※参数: \n   (focusid)<>[] \n   (hasfocus)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 919"
    },
    "全局.critter_builder_init_fn:UNKNOWN": {
        "prefix": "critter_builder_init_fn",
        "body": "critter_builder_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1507"
    },
    "全局.abigail_flower_clear_fn:UNKNOWN": {
        "prefix": "abigail_flower_clear_fn",
        "body": "abigail_flower_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1302"
    },
    "全局.TintByOceanTile:UNKNOWN": {
        "prefix": "TintByOceanTile",
        "body": "TintByOceanTile(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 228"
    },
    "全局.d_stopmoonstorm:UNKNOWN": {
        "prefix": "d_stopmoonstorm",
        "body": "d_stopmoonstorm(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1427"
    },
    "全局.d_test_skins_announce:UNKNOWN": {
        "prefix": "d_test_skins_announce",
        "body": "d_test_skins_announce(${1:param})",
        "description": " ※参数: \n   (param)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 566"
    },
    "全局.fence_gate_clear_fn:UNKNOWN": {
        "prefix": "fence_gate_clear_fn",
        "body": "fence_gate_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1910"
    },
    "全局.d_spawnallarmor_onstands:UNKNOWN": {
        "prefix": "d_spawnallarmor_onstands",
        "body": "d_spawnallarmor_onstands(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1589"
    },
    "全局.MakeRoseTarget_CreateFuel_IncreasedHorror:UNKNOWN": {
        "prefix": "MakeRoseTarget_CreateFuel_IncreasedHorror",
        "body": "MakeRoseTarget_CreateFuel_IncreasedHorror(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/componentutil 所在行数: 151"
    },
    "全局.UpdateServerTagsString:UNKNOWN": {
        "prefix": "UpdateServerTagsString",
        "body": "UpdateServerTagsString(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 745"
    },
    "全局.c_supergodmode:UNKNOWN": {
        "prefix": "c_supergodmode",
        "body": "c_supergodmode(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 802"
    },
    "全局.decode_scanObject:UNKNOWN": {
        "prefix": "decode_scanObject",
        "body": "decode_scanObject(${1:s},${2:startPos})",
        "description": " ※参数: \n   (s)<>[] \n   (startPos)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/json 所在行数: 365"
    },
    "全局.d_resetskilltree:UNKNOWN": {
        "prefix": "d_resetskilltree",
        "body": "d_resetskilltree(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 310"
    },
    "全局.DestroyEntity:UNKNOWN": {
        "prefix": "DestroyEntity",
        "body": "DestroyEntity(${1:ent},${2:destroyer},${3:kill_all_creatures},${4:remove_entity_as_fallback})",
        "description": " ※参数: \n   (ent)<>[] \n   (destroyer)<>[] \n   (kill_all_creatures)<>[] \n   (remove_entity_as_fallback)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/physics 所在行数: 94"
    },
    "全局.critter_kitten_builder_clear_fn:UNKNOWN": {
        "prefix": "critter_kitten_builder_clear_fn",
        "body": "critter_kitten_builder_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 1557"
    },
    "全局.MakePlacer:UNKNOWN": {
        "prefix": "MakePlacer",
        "body": "MakePlacer(${1:name},${2:bank},${3:build},${4:anim},${5:onground},${6:snap},${7:metersnap},${8:scale},${9:fixedcameraoffset},${10:facing},${11:postinit_fn},${12:offset},${13:onfailedplacement})",
        "description": " ※参数: \n   (name)<>[] \n   (bank)<>[] \n   (build)<>[] \n   (anim)<>[] \n   (onground)<>[] \n   (snap)<>[] \n   (metersnap)<>[] \n   (scale)<>[] \n   (fixedcameraoffset)<>[] \n   (facing)<>[] \n   (postinit_fn)<>[] \n   (offset)<>[] \n   (onfailedplacement)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabutil 所在行数: 1"
    },
    "全局.GetActiveFestivalEventStatsFilePrefix:UNKNOWN": {
        "prefix": "GetActiveFestivalEventStatsFilePrefix",
        "body": "GetActiveFestivalEventStatsFilePrefix(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/constants 所在行数: 1055"
    },
    "全局.SavePersistentString:UNKNOWN": {
        "prefix": "SavePersistentString",
        "body": "SavePersistentString(${1:name},${2:data},${3:encode},${4:callback})",
        "description": " ※参数: \n   (name)<>[] \n   (data)<>[] \n   (encode)<>[] \n   (callback)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 18"
    },
    "全局.ModPreloadAssets:UNKNOWN": {
        "prefix": "ModPreloadAssets",
        "body": "ModPreloadAssets(${1:assets},${2:modname})",
        "description": " ※参数: \n   (assets)<>[] \n   (modname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 231"
    },
    "全局.d_daywalker:UNKNOWN": {
        "prefix": "d_daywalker",
        "body": "d_daywalker(${1:chain})",
        "description": " ※参数: \n   (chain)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 1764"
    },
    "全局.d_portalfx:UNKNOWN": {
        "prefix": "d_portalfx",
        "body": "d_portalfx(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 885"
    },
    "全局.DeleteUserSession:UNKNOWN": {
        "prefix": "DeleteUserSession",
        "body": "DeleteUserSession(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 319"
    },
    "全局.d_walls:UNKNOWN": {
        "prefix": "d_walls",
        "body": "d_walls(${1:width},${2:height})",
        "description": " ※参数: \n   (width)<>[] \n   (height)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 889"
    },
    "全局.d_stopsound:UNKNOWN": {
        "prefix": "d_stopsound",
        "body": "d_stopsound(${1:loopname})",
        "description": " ※参数: \n   (loopname)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 3660"
    },
    "全局.d_lavaarena_speech:UNKNOWN": {
        "prefix": "d_lavaarena_speech",
        "body": "d_lavaarena_speech(${1:dialog},${2:banter_line})",
        "description": " ※参数: \n   (dialog)<>[] \n   (banter_line)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 773"
    },
    "全局.GetTaskTime:UNKNOWN": {
        "prefix": "GetTaskTime",
        "body": "GetTaskTime(${1:task})",
        "description": " ※参数: \n   (task)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 854"
    },
    "全局.c_freecrafting:UNKNOWN": {
        "prefix": "c_freecrafting",
        "body": "c_freecrafting(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 354"
    },
    "全局.HandleShardRPC:UNKNOWN": {
        "prefix": "HandleShardRPC",
        "body": "HandleShardRPC(${1:sender},${2:tick},${3:code},${4:data})",
        "description": " ※参数: \n   (sender)<>[] \n   (tick)<>[] \n   (code)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1342"
    },
    "全局.AddCustomizeItem:UNKNOWN": {
        "prefix": "AddCustomizeItem",
        "body": "AddCustomizeItem(${1:category},${2:group},${3:name},${4:itemsettings})",
        "description": " ※参数: \n   (category)<>[] \n   (group)<>[] \n   (name)<>[] \n   (itemsettings)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 222"
    },
    "全局.AddStategraphState:添加SG的状态API通用函数片段": {
        "prefix": "AddStategraphState",
        "body": "AddStategraphState(\"${1:StateGraph}\", State{\n\tname = ${2:statename},\n \ttags = {},\n \tonenter = function(inst)\n \t\tinst:PerformBufferedAction()\n \tend,\n \ttimeline=\n\t{\n\t\tTimeEvent(1*FRAMES, function(inst) end),\n\t},\n \tonexit = function(inst)\n \t\tinst.sg:GoToState(\"idle\") \n\tend\n})",
        "description": " ※参数: \n   (stategraph)<>[] \n   (state)<>[] \n ※返回: \n ※说明: 添加SG的状态API通用函数片段\n ※贡献者: @月\n ※路径: scripts/modutil 所在行数: 527"
    },
    "全局.WasSuUsed:UNKNOWN": {
        "prefix": "WasSuUsed",
        "body": "WasSuUsed(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/stats 所在行数: 406"
    },
    "全局.d_anim:UNKNOWN": {
        "prefix": "d_anim",
        "body": "d_anim(${1:animname},${2:loop})",
        "description": " ※参数: \n   (animname)<>[] \n   (loop)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 484"
    },
    "全局.d_shadowrift:UNKNOWN": {
        "prefix": "d_shadowrift",
        "body": "d_shadowrift(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 245"
    },
    "全局.d_teststate:UNKNOWN": {
        "prefix": "d_teststate",
        "body": "d_teststate(${1:state})",
        "description": " ※参数: \n   (state)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 480"
    },
    "全局.c_remove:UNKNOWN": {
        "prefix": "c_remove",
        "body": "c_remove(${1:entity})",
        "description": " ※参数: \n   (entity)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 1225"
    },
    "全局.ToVector3:UNKNOWN": {
        "prefix": "ToVector3",
        "body": "ToVector3(${1:obj},${2:y},${3:z})",
        "description": " ※参数: \n   (obj)<>[] \n   (y)<>[] \n   (z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vector3 所在行数: 90"
    },
    "全局.ParseUserSessionData:UNKNOWN": {
        "prefix": "ParseUserSessionData",
        "body": "ParseUserSessionData(${1:data})",
        "description": " ※参数: \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2026"
    },
    "全局.ShowDemoExpiredDialog:UNKNOWN": {
        "prefix": "ShowDemoExpiredDialog",
        "body": "ShowDemoExpiredDialog(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamelogic 所在行数: 1152"
    },
    "全局.GetConsoleOutputList:UNKNOWN": {
        "prefix": "GetConsoleOutputList",
        "body": "GetConsoleOutputList(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugprint 所在行数: 95"
    },
    "全局.OnPhysicsCollision:UNKNOWN": {
        "prefix": "OnPhysicsCollision",
        "body": "OnPhysicsCollision(${1:guid1},${2:guid2},${3:world_position_on_a_x},${4:world_position_on_a_y},${5:world_position_on_a_z},${6:world_position_on_b_x},${7:world_position_on_b_y},${8:world_position_on_b_z},${9:world_normal_on_b_x},${10:world_normal_on_b_y},${11:world_normal_on_b_z},${12:lifetime_in_frames})",
        "description": " ※参数: \n   (guid1)<>[] \n   (guid2)<>[] \n   (world_position_on_a_x)<>[] \n   (world_position_on_a_y)<>[] \n   (world_position_on_a_z)<>[] \n   (world_position_on_b_x)<>[] \n   (world_position_on_b_y)<>[] \n   (world_position_on_b_z)<>[] \n   (world_normal_on_b_x)<>[] \n   (world_normal_on_b_y)<>[] \n   (world_normal_on_b_z)<>[] \n   (lifetime_in_frames)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/physics 所在行数: 4"
    },
    "全局.MakeHauntableLaunchAndSmash:UNKNOWN": {
        "prefix": "MakeHauntableLaunchAndSmash",
        "body": "MakeHauntableLaunchAndSmash(${1:inst},${2:launch_chance},${3:smash_chance},${4:speed},${5:cooldown},${6:launch_haunt_value},${7:smash_haunt_value})",
        "description": " ※参数: \n   (inst)<>[] \n   (launch_chance)<>[] \n   (smash_chance)<>[] \n   (speed)<>[] \n   (cooldown)<>[] \n   (launch_haunt_value)<>[] \n   (smash_haunt_value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/standardcomponents 所在行数: 853"
    },
    "全局.d_print_skin_info:UNKNOWN": {
        "prefix": "d_print_skin_info",
        "body": "d_print_skin_info(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/debugcommands 所在行数: 574"
    },
    "全局.researchlab4_clear_fn:UNKNOWN": {
        "prefix": "researchlab4_clear_fn",
        "body": "researchlab4_clear_fn(${1:inst})",
        "description": " ※参数: \n   (inst)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2048"
    },
    "全局.PlayNIS:UNKNOWN": {
        "prefix": "PlayNIS",
        "body": "PlayNIS(${1:nisname},${2:lines})",
        "description": " ※参数: \n   (nisname)<>[] \n   (lines)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 809"
    },
    "全局.RegisterStaticComponentUpdate:UNKNOWN": {
        "prefix": "RegisterStaticComponentUpdate",
        "body": "RegisterStaticComponentUpdate(${1:classname},${2:fn})",
        "description": " ※参数: \n   (classname)<>[] \n   (fn)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/update 所在行数: 164"
    },
    "全局.OnDynamicCloudSyncDelete:UNKNOWN": {
        "prefix": "OnDynamicCloudSyncDelete",
        "body": "OnDynamicCloudSyncDelete(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 1724"
    },
    "全局.ShouldEntitySink:UNKNOWN": {
        "prefix": "ShouldEntitySink",
        "body": "ShouldEntitySink(${1:entity},${2:entity_sinks_in_water})",
        "description": " ※参数: \n   (entity)<>[] \n   (entity_sinks_in_water)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/ocean_util 所在行数: 174"
    },
    "全局.ReplicateEntity:UNKNOWN": {
        "prefix": "ReplicateEntity",
        "body": "ReplicateEntity(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 784"
    },
    "全局.HandleClientRPC:UNKNOWN": {
        "prefix": "HandleClientRPC",
        "body": "HandleClientRPC(${1:tick},${2:code},${3:data})",
        "description": " ※参数: \n   (tick)<>[] \n   (code)<>[] \n   (data)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networkclientrpc 所在行数: 1332"
    },
    "全局.IsAnyOtherPlayerNearInst:UNKNOWN": {
        "prefix": "IsAnyOtherPlayerNearInst",
        "body": "IsAnyOtherPlayerNearInst(${1:inst},${2:rangesq},${3:isalive})",
        "description": " ※参数: \n   (inst)<>[] \n   (rangesq)<>[] \n   (isalive)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/simutil 所在行数: 143"
    },
    "全局.molehat_init_fn:UNKNOWN": {
        "prefix": "molehat_init_fn",
        "body": "molehat_init_fn(${1:inst},${2:build_name},${3:opentop})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n   (opentop)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2754"
    },
    "全局.GetGameModesSpinnerData:UNKNOWN": {
        "prefix": "GetGameModesSpinnerData",
        "body": "GetGameModesSpinnerData(${1:enabled_mods})",
        "description": " ※参数: \n   (enabled_mods)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/gamemodes 所在行数: 213"
    },
    "全局.heatrock_init_fn:UNKNOWN": {
        "prefix": "heatrock_init_fn",
        "body": "heatrock_init_fn(${1:inst},${2:build_name})",
        "description": " ※参数: \n   (inst)<>[] \n   (build_name)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/prefabskin 所在行数: 2344"
    },
    "全局.NotifyLoadingState:UNKNOWN": {
        "prefix": "NotifyLoadingState",
        "body": "NotifyLoadingState(${1:loading_state},${2:match_results})",
        "description": " ※参数: \n   (loading_state)<>[] \n   (match_results)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 2121"
    },
    "全局.Shard_StartVote:UNKNOWN": {
        "prefix": "Shard_StartVote",
        "body": "Shard_StartVote(${1:command_id},${2:starter_id},${3:target_id})",
        "description": " ※参数: \n   (command_id)<>[] \n   (starter_id)<>[] \n   (target_id)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/shardnetworking 所在行数: 145"
    },
    "全局.SendModRPCToClient:服务器向客户端发RPC": {
        "prefix": "SendModRPCToClient",
        "body": "SendModRPCToClient(MOD_RPC[${1:namespace}][${2:name}])",
        "description": " ※参数: \n   (id_table)<>[MOD_RPC[命名空间][rpcID]] \n   (...)<any>[要传到客户端的数据,不可以是表,可不填] \n ※返回: \n ※说明: 服务器向客户端发RPC\n ※贡献者: @lan\n ※路径: scripts/modutil 所在行数: 892"
    },
    "全局.OverrideTuningVariables:UNKNOWN": {
        "prefix": "OverrideTuningVariables",
        "body": "OverrideTuningVariables(${1:tuning})",
        "description": " ※参数: \n   (tuning)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/worldsettings_overrides 所在行数: 2"
    },
    "全局.SetOvalPortraitTexture:UNKNOWN": {
        "prefix": "g+SetOvalPortraitTexture",
        "body": "SetOvalPortraitTexture(${1:image_widget},${2:character})",
        "description": " ※参数: \n   (image_widget)<>[] \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 31"
    },
    "全局.SetHeroNameTexture_Grey:UNKNOWN": {
        "prefix": "g+SetHeroNameTexture_Grey",
        "body": "SetHeroNameTexture_Grey(${1:image_widget},${2:character})",
        "description": " ※参数: \n   (image_widget)<>[] \n   (character)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/characterutil 所在行数: 42"
    },
    "全局.Vec3Util_Sub:UNKNOWN": {
        "prefix": "Vec3Util_Sub",
        "body": "Vec3Util_Sub(${1:p1_x},${2:p1_y},${3:p1_z},${4:p2_x},${5:p2_y},${6:p2_z})",
        "description": " ※参数: \n   (p1_x)<>[] \n   (p1_y)<>[] \n   (p1_z)<>[] \n   (p2_x)<>[] \n   (p2_y)<>[] \n   (p2_z)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/vec3util 所在行数: 7"
    },
    "全局.GetEntityString:UNKNOWN": {
        "prefix": "GetEntityString",
        "body": "GetEntityString(${1:guid})",
        "description": " ※参数: \n   (guid)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 582"
    },
    "全局.c_armor:UNKNOWN": {
        "prefix": "c_armor",
        "body": "c_armor(${1:player})",
        "description": " ※参数: \n   (player)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/consolecommands 所在行数: 828"
    },
    "全局.UserToClient:UNKNOWN": {
        "prefix": "UserToClient",
        "body": "UserToClient(${1:input})",
        "description": " ※参数: \n   (input)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/usercommands 所在行数: 576"
    },
    "全局.SnapToBoatEdge:UNKNOWN": {
        "prefix": "SnapToBoatEdge",
        "body": "SnapToBoatEdge(${1:inst},${2:boat},${3:override_pt})",
        "description": " ※参数: \n   (inst)<>[] \n   (boat)<>[] \n   (override_pt)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 1486"
    },
    "全局.SubtractMapKeys:UNKNOWN": {
        "prefix": "SubtractMapKeys",
        "body": "SubtractMapKeys(${1:base},${2:subtract})",
        "description": " ※参数: \n   (base)<>[] \n   (subtract)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/util 所在行数: 465"
    },
    "全局.ValidateSpawnPrefabRequest:UNKNOWN": {
        "prefix": "ValidateSpawnPrefabRequest",
        "body": "ValidateSpawnPrefabRequest(${1:user_id},${2:prefab_name},${3:skin_base},${4:clothing_body},${5:clothing_hand},${6:clothing_legs},${7:clothing_feet},${8:allow_seamlessswap_characters})",
        "description": " ※参数: \n   (user_id)<>[] \n   (prefab_name)<>[] \n   (skin_base)<>[] \n   (clothing_body)<>[] \n   (clothing_hand)<>[] \n   (clothing_legs)<>[] \n   (clothing_feet)<>[] \n   (allow_seamlessswap_characters)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 192"
    },
    "全局.AwardRadialAchievement:UNKNOWN": {
        "prefix": "AwardRadialAchievement",
        "body": "AwardRadialAchievement(${1:name},${2:pos},${3:radius})",
        "description": " ※参数: \n   (name)<>[] \n   (pos)<>[] \n   (radius)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/mainfunctions 所在行数: 314"
    },
    "全局.Networking_Say:UNKNOWN": {
        "prefix": "Networking_Say",
        "body": "Networking_Say(${1:guid},${2:userid},${3:name},${4:prefab},${5:message},${6:colour},${7:whisper},${8:isemote},${9:user_vanity})",
        "description": " ※参数: \n   (guid)<>[] \n   (userid)<>[] \n   (name)<>[] \n   (prefab)<>[] \n   (message)<>[] \n   (colour)<>[] \n   (whisper)<>[] \n   (isemote)<>[] \n   (user_vanity)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/networking 所在行数: 53"
    },
    "全局.SetFalloffProperty:UNKNOWN": {
        "prefix": "SetFalloffProperty",
        "body": "SetFalloffProperty(${1:falloff_id},${2:propertyname},${3:value})",
        "description": " ※参数: \n   (falloff_id)<>[] \n   (propertyname)<>[] \n   (value)<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @\n ※路径: scripts/modutil 所在行数: 420"
    },
    "dst-lan:帮助": {
        "prefix": "help",
        "body": "help",
        "description": " ※为避免登github,我后面会将补全提示和更新信息放在这里!\n --------------------\n ※触发/补全\n g+方法名/不常用全局方法查询(常用的可以直接敲出来,不常用的会被丢进g+里)\n com+组件名/不常用组件查询\n 正常触发方法+i/启发模式:提供一些快捷代码块\n  \n contri+components/成为贡献者!(注释模板)\n lan+param/方法形参注释---$param: (param) <type> [desc] {others}\n lan+return/方法返回注释---$return: <type> [desc]\n --------------------\n ※其他/...\n 用户自定义注释/-- @用户名: 注释\n ※Todo\n 收集模组代码,计算api的使用频率,过低的api直接放进不常用方法中\n "
    },
    "成为贡献者:组件": {
        "prefix": "contri+components",
        "body": "[\"${2:方法名}\"] = {\n\tparams = {\n\t\t-- 此处填参数,如果无参数,请留空\n\t\t-- param: 参数名(自动生成) explain: 参数说明(万能的群友们,请帮我注释吧) type: 参数类型\n\t\t-- {param = \"\", explain = \"\", type = \"\"},\n\n\t\t-- 参数为带参函数时\n\t\t-- {param = \"\", explain = \"\", type = \"function\",\n\t\t-- fn_params = {\n\t\t\t-- {param = \"\", explain = \"\", type = \"\"},\n\t\t-- },\n\t\t-- fn_returns = {\n\t\t\t-- {explain = \"\", type = \"\"},\n\t\t-- }\n\t\t$3\n\t},\n\treturns = {\n\t\t-- 此处填返回值,如果无返回值,请留空\n\t\t-- 返回格式 explain: 参数说明(万能的群友们,请帮我注释吧) type: 参数类型\n\t\t-- {explain = \"\", type = \"\"}\n\t\t$4\n\t},\n\ttips = \"$5\", -- 简明扼要的说明方法的用途\n\tauthor = \"$6\", -- 贡献者id (填上您的名字,作为贡献者,你的名字会出现在补全提示中)\n\t-- filepath = \"scripts/components/weapon\", -- 如果你觉得有必要标注出方法的路径和行数就写\n\t-- line = \"所在行数: 200\", -- 如果你觉得有必要标注出方法的路径和行数就写\n\t-- ----------------------------------------------------------------------------------\n\t-- 补全代码块语法: 引号用三反斜杠转义,换行符制表符用双反斜杠转义,tab跳转占位字符用 \\${序号:占位}\n\t-- replace_body = \"\", -- 补全的代码块(这一项会替换掉默认补全,如果不会,请不要写) \n\t-- inspire = { -- 启发模式,启发模式会添加新的项目,不会替换默认补全,用源补全触发前缀+i即可触发\n\t--     tips = \"描述\",\n\t--     body = \"\", -- 补全的代码块\n\t-- },\n\t-- replace_body = \"\" -- 补全的代码块(这一项会替换掉默认补全,如果不会,请不要写) \n},",
        "description": "组件以外的单个方法也可以用此种形式来注释,成为贡献者,让饥荒社区变得更好吧~ 上不去github,也可以直接丢给我"
    },
    "dst-lan:帮助:tree": {
        "prefix": "help+tree",
        "body": "scripts\n├── components-组件\n│   └── ...-所有组件\n├── system_components-系统组件\n│   ├── AnimState-动画\n│   └── Transform-形态\n├── entityscript-实体方法\n├── global_fn_maybe-可能的全局方法\n├── var_name_components-组件名翻译\n└── var_name_custom-饥荒词汇翻译\n",
        "description": "注释项目结构 v0.3.0"
    },
    "Image:widget添加Child": {
        "prefix": "AddChild",
        "body": "AddChild(\"$1\")",
        "description": "widget添加Child"
    },
    "Image:设置可以被透明的最小和最大值": {
        "prefix": "SetAlphaRange",
        "body": "SetAlphaRange(${1:min}, ${2:max})",
        "description": "设置可以被透明的最小和最大值"
    },
    "Image:设定成像": {
        "prefix": "SetTexture",
        "body": "SetTexture(\"images/$1.xml\", \"$2.tex\")",
        "description": "设定成像"
    },
    "Image:设置指针悬停时的图像": {
        "prefix": "SetMouseOverTexture",
        "body": "SetMouseOverTexture(${1:atlas}, ${2:tex})",
        "description": "设置指针悬停时的图像"
    },
    "Image:设置禁用时的图像": {
        "prefix": "SetDisabledTexture",
        "body": "SetDisabledTexture(${1:atlas}, ${2:tex})",
        "description": "设置禁用时的图像"
    },
    "Image:设置图像大小(像素级， 自动缩放大小)": {
        "prefix": "SetSize",
        "body": "SetSize(${1:w}, ${2:h})",
        "description": "设置图像大小(像素级， 自动缩放大小)"
    },
    "Image:获取图像大小比例(像素级)": {
        "prefix": "GetSize",
        "body": "GetSize()",
        "description": "获取图像大小比例(像素级)"
    },
    "Image:按设定像素 / 原始大小比例": {
        "prefix": "ScaleToSize",
        "body": "ScaleToSize(${1:w}, ${2:h})",
        "description": "按设定像素 / 原始大小比例"
    },
    "Image:设置颜色覆盖": {
        "prefix": "SetTint",
        "body": "SetTint(${1:r},${2:g},${3:b},${4:a})",
        "description": "设置颜色覆盖"
    },
    "Image:按比例设置透明度": {
        "prefix": "SetFadeAlpha",
        "body": "SetFadeAlpha(${1:a}, ${2:skipChildren}a)",
        "description": "按比例设置透明度"
    },
    "Image:设置垂直方向中心点": {
        "prefix": "SetVRegPoint",
        "body": "SetVRegPoint(ANCHOR_${1:MIDDLE})",
        "description": "设置垂直方向中心点"
    },
    "Image:设置水平方向中心点": {
        "prefix": "SetHRegPoint",
        "body": "SetHRegPoint(ANCHOR_${1:MIDDLE})",
        "description": "设置水平方向中心点"
    },
    "Image:设置UV采样缩放": {
        "prefix": "SetUVScale",
        "body": "SetUVScale(${1:xScale}, ${2:yScale})",
        "description": "设置UV采样缩放"
    },
    "Image:设置混合模式（0-6）": {
        "prefix": "SetBlendMode",
        "body": "SetBlendMode(BLENDMODE.Additive)",
        "description": "设置混合模式（0-6）"
    },
    "打印输出": {
        "prefix": "print",
        "body": [
            "print('$1')",
            "$0"
        ],
        "description": "在控制台打印信息"
    },
    "定义函数": {
        "prefix": "func",
        "body": [
            "function $1($2)",
            "\t$0",
            "end"
        ],
        "description": "定义一个新函数"
    },
    "For循环": {
        "prefix": "for",
        "body": [
            "for $1 = $2 do",
            "\t$0",
            "end"
        ],
        "description": "创建一个for循环"
    },
    "While循环": {
        "prefix": "while",
        "body": [
            "while $1 do",
            "\t$0",
            "end"
        ],
        "description": "创建一个while循环"
    },
    "If条件": {
        "prefix": "if",
        "body": [
            "if $1 then",
            "\t$0",
            "end"
        ],
        "description": "创建一个if条件语句"
    },
    "创建表": {
        "prefix": "table",
        "body": [
            "local $1 = {",
            "\t$0",
            "}"
        ],
        "description": "初始化一个新的表"
    },
    "遍历表": {
        "prefix": "forpair",
        "body": [
            "for $1, $2 in pairs($3) do",
            "\t$0",
            "end"
        ],
        "description": "遍历表中的元素"
    },
    "索引遍历表": {
        "prefix": "foripair",
        "body": [
            "for $1, $2 in ipairs($3) do",
            "\t$0",
            "end"
        ],
        "description": "按索引遍历表中的元素"
    },
    "局部变量": {
        "prefix": "local",
        "body": [
            "local $1 = $2",
            "$0"
        ],
        "description": "声明一个局部变量"
    },
    "全局变量": {
        "prefix": "global",
        "body": [
            "$1 = $2",
            "$0"
        ],
        "description": "声明一个全局变量"
    },
    "返回值": {
        "prefix": "return",
        "body": [
            "return $1",
            "$0"
        ],
        "description": "从函数返回一个或多个值"
    },
    "单行注释": {
        "prefix": "comment",
        "body": [
            "-- $1",
            "$0"
        ],
        "description": "添加单行注释"
    },
    "多行注释": {
        "prefix": "multiline-comment",
        "body": [
            "--[[",
            "$1",
            "]]",
            "$0"
        ],
        "description": "添加多行注释"
    },
    "异常处理": {
        "prefix": "exception",
        "body": [
            "local status, result = pcall(function()",
            "\t$1",
            "end)",
            "if not status then",
            "\tprint('Error: ' .. result)",
            "\t$0",
            "else",
            "\t$2",
            "end"
        ],
        "description": "捕获并处理异常"
    },
    "创建默认的类": {
        "prefix": "Class1",
        "body": "local ${1:ClassName} = Class(function(self, inst)\n\tself.inst = inst \nend)",
        "description": "添加代码片段 local ClassName = Class(function(self, inst)\n\tself.inst = inst \nend)"
    },
    "创建带有触发属性的类": {
        "prefix": "Class2",
        "body": "local ${1:ClassName} = Class(function(self, inst)\n\tself.inst = inst\nend,\nnil,\n{\n})",
        "description": "local ClassName = Class(function(self, inst)\n\tself.inst = inst\nend,\nnil,\n{\n})"
    },
    "检查全局变量": {
        "prefix": "rawget",
        "body": "if rawget(GLOBAL, \"${1:TheSim}\") then\n\t${0}\nend",
        "description": "不触发任何元方法的情况下 获取 table[index] 的值.判断是否存在全局变量"
    },
    "全局模拟器": {
        "prefix": "TheSim",
        "body": "TheSim",
        "description": "userdata类型,是c层暴露给lua里使用的,游戏系统本身"
    },
    "查找指定范围内实体": {
        "prefix": "TheSim:FindEntities",
        "body": "TheSim:FindEntities(x, y or 0, z, radius or 4, must_have_tags, cant_have_tags, must_have_one_of_tags)",
        "description": "must_have_tags:必须具有全部标签的, cant_have_tags:从结果中排除标签的, must_have_one_of_tags:至少有一个标签的"
    },
    "输入": {
        "prefix": "TheInput",
        "body": "TheInput",
        "description": "(仅客户端的)是集成了各种输入方法的类.与TheInputProxy有关"
    },
    "前端": {
        "prefix": "TheFrontEnd",
        "body": "TheFrontEnd",
        "description": "(仅客户端的)通常在modworldgenmain.lua文件或者Ui文件里"
    },
    "摄像机": {
        "prefix": "TheCamera",
        "body": "TheCamera",
        "description": "(仅客户端的)是游戏中玩家身后的摄像机一般是跟随玩家."
    },
    "当前客户端玩家": {
        "prefix": "ThePlayer",
        "body": "ThePlayer",
        "description": "(仅客户端)是玩家实体的引用,在服务器上值为nil"
    },
    "当前世界": {
        "prefix": "TheWorld",
        "body": "TheWorld",
        "description": "是世界实体的引用,双端都有.每个独立线程都是有一个."
    },
    "全局网络单例": {
        "prefix": "TheNet",
        "body": "TheNet",
        "description": "userdata类型,是与网络相关联的内容"
    },
    "当前分片": {
        "prefix": "TheShard",
        "body": "TheShard",
        "description": "userdata类型,与配置相关,TheShard:IsMaster()判断是否为主世界"
    },
    "常量表": {
        "prefix": "TUNING",
        "body": "TUNING",
        "description": "各类的数值存放在这个表里"
    },
    "字符串集": {
        "prefix": "STRINGS",
        "body": "STRINGS",
        "description": "各类的字符串存放在这个表里"
    },
    "全局表": {
        "prefix": "GLOBAL",
        "body": "GLOBAL",
        "description": "指向饥荒本体环境的全局表"
    },
    "网络变量": {
        "prefix": "net_bool",
        "body": "inst.${1:_xx} = net_bool(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "仅两个值true|false"
    },
    "网络变量_2": {
        "prefix": "net_tinybyte",
        "body": "inst.${1:_xx} = net_tinybyte(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "数值范围是[0..7]"
    },
    "网络变量_3": {
        "prefix": "net_smallbyte",
        "body": "inst.${1:_xx} = net_smallbyte(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "数值范围是[0..63]"
    },
    "网络变量_4": {
        "prefix": "net_byte",
        "body": "inst.${1:_xx} = net_byte(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "数值范围是[0..255]"
    },
    "网络变量_5": {
        "prefix": "net_shortint",
        "body": "inst.${1:_xx} = net_shortint(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "数值范围是[-32767..32767]"
    },
    "网络变量_6": {
        "prefix": "net_ushortint",
        "body": "inst.${1:_xx} = net_ushortint(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "数值范围是[0..65535]"
    },
    "网络变量_7": {
        "prefix": "net_int",
        "body": "inst.${1:_xx} = net_int(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "数值范围是[-2147483647..2147483647]"
    },
    "网络变量_8": {
        "prefix": "net_uint",
        "body": "inst.${1:_xx} = net_uint(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "数值范围是[0..4294967295]"
    },
    "网络变量_9": {
        "prefix": "net_float",
        "body": "inst.${1:_xx} = net_float(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "32位浮点数"
    },
    "网络变量_10": {
        "prefix": "net_hash",
        "body": "inst.${1:_xx} = net_hash(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "可以通过哈希或字符串设置（自动转换为hash），但仅在读取时返回哈希值。网络成本与net_uint相同"
    },
    "网络变量_11": {
        "prefix": "net_string",
        "body": "inst.${1:_xx} = net_string(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "可变长度字符串"
    },
    "网络变量_12": {
        "prefix": "net_entity",
        "body": "inst.${1:_xx} = net_entity(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "实体实例"
    },
    "网络变量_13": {
        "prefix": "net_bytearray",
        "body": "inst.${1:_xx} = net_bytearray(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "最大31,成员8-bit(与net_byte相当)"
    },
    "网络变量_14": {
        "prefix": "net_smallbytearray",
        "body": "inst.${1:_xx} = net_smallbytearray(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "最大31,成员6-bit(与net_smallbyte相当)"
    },
    "网络变量_15": {
        "prefix": "net_ushortarray",
        "body": "inst.${1:_xx} = net_ushortarray(inst.GUID, \"${2:$1}\",\"${3:$1}\")",
        "description": "最大31,成员16-bit(与net_ushortint相当)"
    },
    "添加预制体信息": {
        "prefix": "STRINGS+PREFAB",
        "body": "STRINGS.NAMES.${1:PREFABNAME} = \"${2:$1}\"\nSTRINGS.RECIPE_DESC.${3:$1} = \"${4:$1} 科技栏描述\"\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.${5:$1} = \"${6:$1} 的检查描述\"",
        "description": "设置预制体名称,科技栏描述,检查描述"
    },
    "设置mod环境": {
        "prefix": "GLOBAL+env",
        "body": "GLOBAL.setmetatable(env,{__index=function(t,k) return GLOBAL.rawget(GLOBAL,k) end})",
        "description": "设置在mod环境中可以直接访问本体环境中的全局参数"
    },
    "打印表": {
        "prefix": "dumptable",
        "body": "print(dumptable(${1:table}, 1, 5))",
        "description": "打印表1~5层"
    },
    "添加资源": {
        "prefix": "Asset",
        "body": "Asset(\"$1\",\"$2\"),\n$0",
        "description": "添加资源"
    },
    "三维向量": {
        "prefix": "Vector3",
        "body": "Vector3(${1:0}, ${2:$1}, ${3:$1})",
        "description": "创建三维向量"
    },
    "BufferedAction": {
        "prefix": "BufferedAction",
        "body": "BufferedAction",
        "description": "dst-未定义的"
    },
    "创建缓冲动作": {
        "prefix": "BufferedAction+",
        "body": "local action = BufferedAction(inst, target or nil, ACTIONS.${1:XXX}, invobject or nil, pos or nil, nil, distance or nil)",
        "description": "添加一个缓冲动作代码片段"
    },
    "CreateEntity": {
        "prefix": "CreateEntity",
        "body": "CreateEntity",
        "description": "dst-未定义的"
    },
    "deepcopy": {
        "prefix": "deepcopy",
        "body": "deepcopy",
        "description": "dst-未定义的"
    },
    "SpawnPrefab": {
        "prefix": "SpawnPrefab",
        "body": "SpawnPrefab",
        "description": "dst-未定义的"
    },
    "require": {
        "prefix": "require",
        "body": "require",
        "description": "dst-未定义的"
    },
    "GUID": {
        "prefix": "GUID",
        "body": "GUID",
        "description": "dst-未定义的"
    },
    "HUD": {
        "prefix": "HUD",
        "body": "HUD",
        "description": "dst-未定义的"
    },
    "prefab": {
        "prefix": "prefab",
        "body": "prefab",
        "description": "dst-未定义的"
    },
    "animover": {
        "prefix": "animover",
        "body": "animover",
        "description": "dst-未定义的"
    },
    "idle": {
        "prefix": "idle",
        "body": "idle",
        "description": "dst-未定义的"
    },
    "GoToState": {
        "prefix": "GoToState",
        "body": "GoToState",
        "description": "dst-未定义的"
    },
    "HasStateTag": {
        "prefix": "HasStateTag",
        "body": "HasStateTag",
        "description": "dst-未定义的"
    },
    "Update": {
        "prefix": "Update",
        "body": "Update",
        "description": "dst-未定义的"
    },
    "OnLoad": {
        "prefix": "OnLoad",
        "body": "OnLoad",
        "description": "dst-未定义的"
    },
    "OnSave": {
        "prefix": "OnSave",
        "body": "OnSave",
        "description": "dst-未定义的"
    },
    "GetDebugString": {
        "prefix": "GetDebugString",
        "body": "GetDebugString",
        "description": "dst-未定义的"
    },
    "GetTime": {
        "prefix": "GetTime",
        "body": "GetTime",
        "description": "dst-未定义的"
    },
    "帧": {
        "prefix": "FRAMES",
        "body": "FRAMES",
        "description": "常量,代表一帧"
    },
    "是否参与保存": {
        "prefix": "persists",
        "body": "persists",
        "description": "默认值为true.修改实体属性为false,那么不会被保存下来"
    },
    "不可点击的": {
        "prefix": "NOCLICK",
        "body": "NOCLICK",
        "description": "不可点击的<code>标签</code>"
    },
    "在库存中的": {
        "prefix": "INLIMBO",
        "body": "INLIMBO",
        "description": "在库存中的<code>标签</code>"
    },
    "专饰的": {
        "prefix": "DECOR",
        "body": "DECOR",
        "description": "专饰的<code>标签</code>"
    },
    "不会影响种植和部署": {
        "prefix": "NOBLOCK",
        "body": "NOBLOCK",
        "description": "不会影响种植和部署<code>标签</code>"
    },
    "私密的": {
        "prefix": "CLASSIFIED",
        "body": "CLASSIFIED",
        "description": "私密的<code>标签</code>"
    },
    "建筑物的": {
        "prefix": "structure",
        "body": "structure",
        "description": "建筑物的<code>标签</code>"
    },
    "墙体": {
        "prefix": "wall",
        "body": "wall",
        "description": "墙体<code>标签</code>"
    },
    "发热的": {
        "prefix": "HASHEATER",
        "body": "HASHEATER",
        "description": "发热的<code>标签</code>"
    },
    "特效的": {
        "prefix": "FX",
        "body": "FX",
        "description": "特效的<code>标签</code>"
    },
    "稀有的": {
        "prefix": "irreplaceable",
        "body": "irreplaceable",
        "description": "稀有的<code>标签</code>"
    },
    "Physics:增加对船的冲突碰撞 （不会被撞退）": {
        "prefix": "Physics:CollidesWith",
        "body": "Physics:CollidesWith(${1:COLLISION.OBSTACLES})",
        "description": "增加对船的冲突碰撞 （不会被撞退）"
    },
    "Physics:休眠状态下物理碰撞依旧生效": {
        "prefix": "Physics:SetDontRemoveOnSleep",
        "body": "Physics:SetDontRemoveOnSleep(${1:true})",
        "description": "休眠状态下物理碰撞依旧生效"
    },
    "Physics:关闭所有物理性(物理碰撞机全面暂停)": {
        "prefix": "Physics:SetActive",
        "body": "Physics:SetActive(${1:false})",
        "description": "关闭所有物理性(物理碰撞机全面暂停)"
    },
    "Physics:逻辑判断物理机是否处于工作状态": {
        "prefix": "Physics:IsActive",
        "body": "Physics:IsActive(${1:})",
        "description": "逻辑判断物理机是否处于工作状态"
    },
    "Physics:自由落体速率 0为不掉落，默认1质量": {
        "prefix": "Physics:SetMass",
        "body": "Physics:SetMass(${1:0})",
        "description": "自由落体速率 0为不掉落，默认1质量"
    },
    "Physics:物理范围": {
        "prefix": "Physics:SetSphere",
        "body": "Physics:SetSphere(${1:.5})",
        "description": "物理范围"
    },
    "Physics:设置摩擦": {
        "prefix": "Physics:SetFriction",
        "body": "Physics:SetFriction(${1:.1})",
        "description": "设置摩擦"
    },
    "Physics:设置阻尼 对速度的衰弱": {
        "prefix": "Physics:SetDamping",
        "body": "Physics:SetDamping(${1:0})",
        "description": "设置阻尼 对速度的衰弱"
    },
    "Physics:设置恢复 落地反弹力 反作用力": {
        "prefix": "Physics:SetRestitution",
        "body": "Physics:SetRestitution(${1:.5})",
        "description": "设置恢复 落地反弹力 反作用力"
    },
    "Physics:设置碰撞组": {
        "prefix": "Physics:SetCollisionGroup",
        "body": "Physics:SetCollisionGroup(${1:COLLISION.ITEMS})",
        "description": "设置碰撞组"
    },
    "Physics:清除冲突面": {
        "prefix": "Physics:ClearCollisionMask",
        "body": "Physics:ClearCollisionMask(${1:})",
        "description": "清除冲突面"
    },
    "Physics:物理碰撞体积，碰撞高度": {
        "prefix": "Physics:SetCapsule",
        "body": "Physics:SetCapsule(${1:rad},${2: 1})",
        "description": "物理碰撞体积，碰撞高度"
    },
    "Physics:中空类型的物理性": {
        "prefix": "Physics:SetCylinder",
        "body": "Physics:SetCylinder(${1:.6},${2: 2})",
        "description": "中空类型的物理性"
    },
    "Physics:设置三角形网格": {
        "prefix": "Physics:SetTriangleMesh",
        "body": "Physics:SetTriangleMesh(${1:PLAYER_COLLISION_MESH})",
        "description": "设置三角形网格"
    },
    "Physics:休眠时，物理特性不删除": {
        "prefix": "Physics:SetDontRemoveOnSleep",
        "body": "Physics:SetDontRemoveOnSleep(${1:true})",
        "description": "休眠时，物理特性不删除"
    },
    "Physics:设置碰撞关闭， 设定坐标后再开启碰撞": {
        "prefix": "Physics:SetCollides",
        "body": "Physics:SetCollides(${1:false})",
        "description": "设置碰撞关闭， 设定坐标后再开启碰撞"
    },
    "Physics:将自己约束到目标实体身上": {
        "prefix": "Physics:ConstrainTo",
        "body": "Physics:ConstrainTo(${1:target.entity})",
        "description": "将自己约束到目标实体身上"
    },
    "Physics:获取质量": {
        "prefix": "Physics:GetMass",
        "body": "Physics:GetMass(${1:})",
        "description": "获取质量"
    },
    "Physics:获取物理碰撞范围": {
        "prefix": "Physics:GetRadius",
        "body": "Physics:GetRadius(${1:})",
        "description": "获取物理碰撞范围"
    },
    "Physics:物理传送": {
        "prefix": "Physics:Teleport",
        "body": "Physics:Teleport(${1:x},${2:y},${3:z})",
        "description": "物理传送"
    },
    "Physics:清除转换历史记录": {
        "prefix": "Physics:ClearTransformationHistory",
        "body": "Physics:ClearTransformationHistory(${1:})",
        "description": "清除转换历史记录"
    },
    "Physics:获取速度向量": {
        "prefix": "Physics:GetVelocity",
        "body": "Physics:GetVelocity(${1:})",
        "description": "获取速度向量"
    },
    "Physics:物理运行覆盖": {
        "prefix": "Physics:SetMotorVelOverride",
        "body": "Physics:SetMotorVelOverride(${1:0},${2:0},${3:0})",
        "description": "物理运行覆盖"
    },
    "Physics:清除运行": {
        "prefix": "Physics:ClearMotorVelOverride",
        "body": "Physics:ClearMotorVelOverride(${1:})",
        "description": "清除运行"
    },
    "Physics:设置碰撞回调函数": {
        "prefix": "Physics:SetCollisionCallback",
        "body": "Physics:SetCollisionCallback(${1:OnCollide})",
        "description": "设置碰撞回调函数"
    },
    "Physics:获取当前速度": {
        "prefix": "Physics:GetMotorSpeed",
        "body": "Physics:GetMotorSpeed(${1:})",
        "description": "获取当前速度"
    },
    "Physics:获取当前三个方向上的速度分量": {
        "prefix": "Physics:GetMotorVel",
        "body": "Physics:GetMotorVel(${1:})",
        "description": "获取当前三个方向上的速度分量"
    },
    "syntax.注释:param": {
        "prefix": "lan+param",
        "body": "---\\$param: (${1:param}) <${2:type}> [${3:desc}] {${4:others}}",
        "description": "规范注释"
    },
    "syntax.注释:return": {
        "prefix": "lan+return",
        "body": "---\\$return: <${1:type}> [${2:desc}]",
        "description": "规范注释"
    },
    "AnimState:SetSymbolExchange:把通道2放到通道1前": {
        "prefix": "AnimState:SetSymbolExchange",
        "body": "AnimState:SetSymbolExchange(${2:symbol2},${1:symbol1})",
        "description": " ※参数: \n   (symbol2)<str>[通道2] \n   (symbol1)<str>[通道1] \n ※返回: \n ※说明: 把通道2放到通道1前\n ※贡献者: @Runar"
    },
    "AnimState:SetClientSideBuildOverrideFlag:UNKNOWN": {
        "prefix": "AnimState:SetClientSideBuildOverrideFlag",
        "body": "AnimState:SetClientSideBuildOverrideFlag(${2:flag},${1:name})",
        "description": " ※参数: \n   (flag)<bool>[] \n   (name)<str>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetLightOverride:UNKNOWN": {
        "prefix": "AnimState:SetLightOverride",
        "body": "AnimState:SetLightOverride(${1:num})",
        "description": " ※参数: \n   (num)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetSymbolLightOverride:UNKNOWN": {
        "prefix": "AnimState:SetSymbolLightOverride",
        "body": "AnimState:SetSymbolLightOverride(${2:override},${1:symbol})",
        "description": " ※参数: \n   (override)<num>[] \n   (symbol)<str>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetSymbolBloom:UNKNOWN": {
        "prefix": "AnimState:SetSymbolBloom",
        "body": "AnimState:SetSymbolBloom(${1:name})",
        "description": " ※参数: \n   (name)<str>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:ClearSymbolBloom:清除通道泛光": {
        "prefix": "AnimState:ClearSymbolBloom",
        "body": "AnimState:ClearSymbolBloom(${1:symbol})",
        "description": " ※参数: \n   (symbol)<str>[通道名] \n ※返回: \n ※说明: 清除通道泛光\n ※贡献者: @Runar"
    },
    "AnimState:OverrideMultColour:覆盖叠乘的颜色": {
        "prefix": "AnimState:OverrideMultColour",
        "body": "AnimState:OverrideMultColour(${4:a},${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (a)<num>[不透明度(0~1)] \n   (r)<num>[红色通道(0~1)] \n   (g)<num>[绿色通道(0~1)] \n   (b)<num>[蓝色通道(0~1)] \n ※返回: \n ※说明: 覆盖叠乘的颜色\n ※贡献者: @Runar"
    },
    "AnimState:SetPercent:动画播放百分比，固定帧，不会动（动画名，百分比）": {
        "prefix": "AnimState:SetPercent",
        "body": "AnimState:SetPercent(${2:percent},${1:animname})",
        "description": " ※参数: \n   (percent)<num>[] \n   (animname)<str>[] \n ※返回: \n ※说明: 动画播放百分比，固定帧，不会动（动画名，百分比）\n ※贡献者: @"
    },
    "AnimState:OverrideSkinSymbol:覆盖皮肤通道，与OverrideSymbol用法一致": {
        "prefix": "AnimState:OverrideSkinSymbol",
        "body": "AnimState:OverrideSkinSymbol(${1:oldsymbol},${2:skin_build},${3:newsymbol})",
        "description": " ※参数: \n   (oldsymbol)<str>[通道名] \n   (skin_build)<str>[覆盖通道所在的build] \n   (newsymbol)<str>[覆盖通道] \n ※返回: \n ※说明: 覆盖皮肤通道，与OverrideSymbol用法一致\n ※贡献者: @Runar"
    },
    "AnimState:SetLayer:UNKNOWN": {
        "prefix": "AnimState:SetLayer",
        "body": "AnimState:SetLayer(${1:const})",
        "description": " ※参数: \n   (const)<any>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetBrightness:UNKNOWN": {
        "prefix": "AnimState:GetBrightness",
        "body": "AnimState:GetBrightness()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetBank:Spriter 里动画的父级节点的名字": {
        "prefix": "AnimState:SetBank",
        "body": "AnimState:SetBank(${1:name})",
        "description": " ※参数: \n   (name)<str>[动画父节点名] \n ※返回: \n ※说明: Spriter 里动画的父级节点的名字\n ※贡献者: @Runar"
    },
    "AnimState:GetSymbolPosition:获取通道的位置坐标，四个参数，第一个是通道名，后面三个是x,y,z坐标的偏移量": {
        "prefix": "AnimState:GetSymbolPosition",
        "body": "AnimState:GetSymbolPosition(${4:offset_z},${1:symbolname},${2:offset_x},${3:offset_y})",
        "description": " ※参数: \n   (offset_z)<num>[偏移量z] \n   (symbolname)<str>[通道名] \n   (offset_x)<num>[偏移量x] \n   (offset_y)<num>[偏移量y] \n ※返回: \n ※说明: 获取通道的位置坐标，四个参数，第一个是通道名，后面三个是x,y,z坐标的偏移量\n ※贡献者: @Runar"
    },
    "AnimState:ClearSymbolExchanges:清除所有覆盖通道": {
        "prefix": "AnimState:ClearSymbolExchanges",
        "body": "AnimState:ClearSymbolExchanges()",
        "description": " ※参数: \n ※返回: \n ※说明: 清除所有覆盖通道\n ※贡献者: @Runar"
    },
    "AnimState:SetInheritsSortKey:UNKNOWN": {
        "prefix": "AnimState:SetInheritsSortKey",
        "body": "AnimState:SetInheritsSortKey(${1:bool})",
        "description": " ※参数: \n   (bool)<bool>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:ClearDefaultEffectHandle:清除默认效果句柄": {
        "prefix": "AnimState:ClearDefaultEffectHandle",
        "body": "AnimState:ClearDefaultEffectHandle()",
        "description": " ※参数: \n ※返回: \n ※说明: 清除默认效果句柄\n ※贡献者: @Runar"
    },
    "AnimState:PushAnimation:推动画到播放列表里，与PlayAnimation不同的是，PlayAnimation执行后动画会立即执行，但PushAnimation执行后会等当前动画执行完，然后再播放Push的动画": {
        "prefix": "AnimState:PushAnimation",
        "body": "AnimState:PushAnimation(${2:loop},${1:animname})",
        "description": " ※参数: \n   (loop)<bool|nil>[] \n   (animname)<str>[] \n ※返回: \n ※说明: 推动画到播放列表里，与PlayAnimation不同的是，PlayAnimation执行后动画会立即执行，但PushAnimation执行后会等当前动画执行完，然后再播放Push的动画\n ※贡献者: @"
    },
    "AnimState:ClearOverrideBuild:清除覆盖的build": {
        "prefix": "AnimState:ClearOverrideBuild",
        "body": "AnimState:ClearOverrideBuild()",
        "description": " ※参数: \n ※返回: \n ※说明: 清除覆盖的build\n ※贡献者: @Runar"
    },
    "AnimState:SetClientsideBuildOverride:替换客户端显示的build": {
        "prefix": "AnimState:SetClientsideBuildOverride",
        "body": "AnimState:SetClientsideBuildOverride(${1:state},${2:build},${3:overridebuild})",
        "description": " ※参数: \n   (state)<str>[] \n   (build)<str>[] \n   (overridebuild)<str>[] \n ※返回: \n ※说明: 替换客户端显示的build\n ※贡献者: @"
    },
    "AnimState:SetBuild:buildname 就是 scml 文件的名字": {
        "prefix": "AnimState:SetBuild",
        "body": "AnimState:SetBuild(${1:buildname})",
        "description": " ※参数: \n   (buildname)<str>[build名] \n ※返回: \n ※说明: buildname 就是 scml 文件的名字\n ※贡献者: @Runar"
    },
    "AnimState:SetSymbolBrightness:UNKNOWN": {
        "prefix": "AnimState:SetSymbolBrightness",
        "body": "AnimState:SetSymbolBrightness(${2:brightness},${1:symbol})",
        "description": " ※参数: \n   (brightness)<num>[] \n   (symbol)<str>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetCurrentAnimationNumFrames:获取当前动画的总帧数": {
        "prefix": "AnimState:GetCurrentAnimationNumFrames",
        "body": "AnimState:GetCurrentAnimationNumFrames()",
        "description": " ※参数: \n ※返回: <num>[总帧数] \n ※说明: 获取当前动画的总帧数\n ※贡献者: @lan"
    },
    "AnimState:GetSymbolHSB:UNKNOWN": {
        "prefix": "AnimState:GetSymbolHSB",
        "body": "AnimState:GetSymbolHSB()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetBuild:获取build名": {
        "prefix": "AnimState:GetBuild",
        "body": "AnimState:GetBuild()",
        "description": " ※参数: \n ※返回: <str>[build名] \n ※说明: 获取build名\n ※贡献者: @Runar"
    },
    "AnimState:PlayAnimation:播放动画，animname：动画名，loop：是否循环播放，默认是 false": {
        "prefix": "AnimState:PlayAnimation",
        "body": "AnimState:PlayAnimation(${2:loop},${1:animname})",
        "description": " ※参数: \n   (loop)<bool|nil>[] \n   (animname)<str>[] \n ※返回: \n ※说明: 播放动画，animname：动画名，loop：是否循环播放，默认是 false\n ※贡献者: @"
    },
    "AnimState:AssignItemSkins:重新分配物品的外观": {
        "prefix": "AnimState:AssignItemSkins",
        "body": "AnimState:AssignItemSkins(${1:userid},${2:body},${3:hand},${4:legs},${5:feet})",
        "description": " ※参数: \n   (userid)<any>[] \n   (body)<any>[] \n   (hand)<any>[] \n   (legs)<any>[] \n   (feet)<any>[] \n ※返回: \n ※说明: 重新分配物品的外观\n ※贡献者: @"
    },
    "AnimState:AddOverrideBuild:添加新build": {
        "prefix": "AnimState:AddOverrideBuild",
        "body": "AnimState:AddOverrideBuild(${1:buildname})",
        "description": " ※参数: \n   (buildname)<str>[build名] \n ※返回: \n ※说明: 添加新build\n ※贡献者: @Runar"
    },
    "AnimState:UsePointFiltering:UNKNOWN": {
        "prefix": "AnimState:UsePointFiltering",
        "body": "AnimState:UsePointFiltering(${1:bool})",
        "description": " ※参数: \n   (bool)<bool>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetMultColour:获取叠乘的颜色，返回r,g,b,a": {
        "prefix": "AnimState:GetMultColour",
        "body": "AnimState:GetMultColour()",
        "description": " ※参数: \n ※返回: <num>[不透明度(0~1)] <num>[红色通道(0~1)] <num>[绿色通道(0~1)] <num>[蓝色通道(0~1)] \n ※说明: 获取叠乘的颜色，返回r,g,b,a\n ※贡献者: @Runar"
    },
    "AnimState:SetDepthBias:UNKNOWN": {
        "prefix": "AnimState:SetDepthBias",
        "body": "AnimState:SetDepthBias()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetCurrentBankName:": {
        "prefix": "AnimState:GetCurrentBankName",
        "body": "AnimState:GetCurrentBankName()",
        "description": " ※参数: \n ※返回: \n ※说明: \n ※贡献者: @lan 开发者注释:该方法在开发环境以外使用可能会出错"
    },
    "AnimState:SetBloomEffectHandle:设置泛光效果句柄": {
        "prefix": "AnimState:SetBloomEffectHandle",
        "body": "AnimState:SetBloomEffectHandle(${1:path})",
        "description": " ※参数: \n   (path)<str>[句柄文件相对根目录的完整路径] \n ※返回: \n ※说明: 设置泛光效果句柄\n ※贡献者: @Runar"
    },
    "AnimState:OverrideShade:UNKNOWN": {
        "prefix": "AnimState:OverrideShade",
        "body": "AnimState:OverrideShade(${1:num})",
        "description": " ※参数: \n   (num)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:UseColourCube:UNKNOWN": {
        "prefix": "AnimState:UseColourCube",
        "body": "AnimState:UseColourCube(${1:bool})",
        "description": " ※参数: \n   (bool)<bool>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:ShowSymbol:显示通道，与HideSymbol对应": {
        "prefix": "AnimState:ShowSymbol",
        "body": "AnimState:ShowSymbol(${1:symbolname})",
        "description": " ※参数: \n   (symbolname)<str>[通道名] \n ※返回: \n ※说明: 显示通道，与HideSymbol对应\n ※贡献者: @Runar"
    },
    "AnimState:Show:显示图层(Layer)": {
        "prefix": "AnimState:Show",
        "body": "AnimState:Show(${1:layername})",
        "description": " ※参数: \n   (layername)<str>[图层名] \n ※返回: \n ※说明: 显示图层(Layer)\n ※贡献者: @Runar"
    },
    "AnimState:SetWorldSpaceAmbientLightPos:UNKNOWN": {
        "prefix": "AnimState:SetWorldSpaceAmbientLightPos",
        "body": "AnimState:SetWorldSpaceAmbientLightPos(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<num>[] \n   (y)<num>[] \n   (z)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetUILightParams:UNKNOWN": {
        "prefix": "AnimState:SetUILightParams",
        "body": "AnimState:SetUILightParams(${4:param4},${1:param1},${2:param2},${3:param3})",
        "description": " ※参数: \n   (param4)<num>[] \n   (param1)<num>[] \n   (param2)<num>[] \n   (param3)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:Resume:恢复暂停的动画，无参": {
        "prefix": "AnimState:Resume",
        "body": "AnimState:Resume()",
        "description": " ※参数: \n ※返回: \n ※说明: 恢复暂停的动画，无参\n ※贡献者: @Runar"
    },
    "AnimState:IsSymbolOverridden:通道是否被覆盖": {
        "prefix": "AnimState:IsSymbolOverridden",
        "body": "AnimState:IsSymbolOverridden()",
        "description": " ※参数: \n ※返回: <bool>[是否被覆盖] \n ※说明: 通道是否被覆盖\n ※贡献者: @Runar"
    },
    "AnimState:SetDeltaTimeMultiplier:动画播放速度（速度倍数）": {
        "prefix": "AnimState:SetDeltaTimeMultiplier",
        "body": "AnimState:SetDeltaTimeMultiplier(${1:speed})",
        "description": " ※参数: \n   (speed)<num>[倍率] \n ※返回: \n ※说明: 动画播放速度（速度倍数）\n ※贡献者: @Runar"
    },
    "AnimState:SetDepthWriteEnabled:UNKNOWN": {
        "prefix": "AnimState:SetDepthWriteEnabled",
        "body": "AnimState:SetDepthWriteEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetOceanBlendParams:UNKNOWN": {
        "prefix": "AnimState:SetOceanBlendParams",
        "body": "AnimState:SetOceanBlendParams(${1:num})",
        "description": " ※参数: \n   (num)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetScale:贴图缩放": {
        "prefix": "AnimState:SetScale",
        "body": "AnimState:SetScale(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<num>[] \n   (y)<num>[] \n   (z)<num>[] \n ※返回: \n ※说明: 贴图缩放\n ※贡献者: @"
    },
    "AnimState:GetAddColour:获取叠加的颜色，返回r,g,b,a": {
        "prefix": "AnimState:GetAddColour",
        "body": "AnimState:GetAddColour()",
        "description": " ※参数: \n ※返回: <num>[不透明度(0~1)] <num>[红色通道(0~1)] <num>[绿色通道(0~1)] <num>[蓝色通道(0~1)] \n ※说明: 获取叠加的颜色，返回r,g,b,a\n ※贡献者: @Runar"
    },
    "AnimState:GetCurrentAnimationFrame:获取当前动画帧数": {
        "prefix": "AnimState:GetCurrentAnimationFrame",
        "body": "AnimState:GetCurrentAnimationFrame()",
        "description": " ※参数: \n ※返回: <num>[时间(帧)] \n ※说明: 获取当前动画帧数\n ※贡献者: @Runar"
    },
    "AnimState:SetSymbolHue:UNKNOWN": {
        "prefix": "AnimState:SetSymbolHue",
        "body": "AnimState:SetSymbolHue(${2:hue},${1:symbol})",
        "description": " ※参数: \n   (hue)<num>[] \n   (symbol)<str>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:OverrideItemSkinSymbol:参数是5个，用法与OverrideSymbol类似，最后一个参数不知道什么意思": {
        "prefix": "AnimState:OverrideItemSkinSymbol",
        "body": "AnimState:OverrideItemSkinSymbol(${1:oldsymbol},${2:skin_build},${3:newsymbol},${4:guid},${5:abc})",
        "description": " ※参数: \n   (oldsymbol)<str>[] \n   (skin_build)<str>[] \n   (newsymbol)<str>[] \n   (guid)<any>[] \n   (abc)<any>[] \n ※返回: \n ※说明: 参数是5个，用法与OverrideSymbol类似，最后一个参数不知道什么意思\n ※贡献者: @"
    },
    "AnimState:SetHue:UNKNOWN": {
        "prefix": "AnimState:SetHue",
        "body": "AnimState:SetHue(${1:hue})",
        "description": " ※参数: \n   (hue)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetDefaultEffectHandle:设置默认效果句柄": {
        "prefix": "AnimState:SetDefaultEffectHandle",
        "body": "AnimState:SetDefaultEffectHandle(${1:path})",
        "description": " ※参数: \n   (path)<str>[相对根目录的完整路径] \n ※返回: \n ※说明: 设置默认效果句柄\n ※贡献者: @Runar"
    },
    "AnimState:SetSortOrder:UNKNOWN": {
        "prefix": "AnimState:SetSortOrder",
        "body": "AnimState:SetSortOrder(${1:order})",
        "description": " ※参数: \n   (order)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:OverrideHue:UNKNOWN": {
        "prefix": "AnimState:OverrideHue",
        "body": "AnimState:OverrideHue()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetHistoryData:UNKNOWN": {
        "prefix": "AnimState:GetHistoryData",
        "body": "AnimState:GetHistoryData()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetCurrentFacing:获取当前动画的朝向，返回0，1，2，3，分别代表什么方向就需要进游戏测试了": {
        "prefix": "AnimState:GetCurrentFacing",
        "body": "AnimState:GetCurrentFacing()",
        "description": " ※参数: \n ※返回: <num>[朝向的值] \n ※说明: 获取当前动画的朝向，返回0，1，2，3，分别代表什么方向就需要进游戏测试了\n ※贡献者: @Runar"
    },
    "AnimState:MakeFacingDirty:UNKNOWN": {
        "prefix": "AnimState:MakeFacingDirty",
        "body": "AnimState:MakeFacingDirty()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetSortWorldOffset:UNKNOWN": {
        "prefix": "AnimState:SetSortWorldOffset",
        "body": "AnimState:SetSortWorldOffset(${1:param1},${2:param2},${3:param3})",
        "description": " ※参数: \n   (param1)<num>[] \n   (param2)<num>[] \n   (param3)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetMultColour:颜色叠乘，受原图颜色影响": {
        "prefix": "AnimState:SetMultColour",
        "body": "AnimState:SetMultColour(${4:a},${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (a)<num>[不透明度(0~1)] \n   (r)<num>[红色通道(0~1)] \n   (g)<num>[绿色通道(0~1)] \n   (b)<num>[蓝色通道(0~1)] \n ※返回: \n ※说明: 颜色叠乘，受原图颜色影响\n ※贡献者: @Runar"
    },
    "AnimState:GetSymbolAddColour:获取通道叠加的颜色，返回r,g,b,a": {
        "prefix": "AnimState:GetSymbolAddColour",
        "body": "AnimState:GetSymbolAddColour()",
        "description": " ※参数: \n ※返回: <num>[不透明度(0~1)] <num>[红色通道(0~1)] <num>[绿色通道(0~1)] <num>[蓝色通道(0~1)] \n ※说明: 获取通道叠加的颜色，返回r,g,b,a\n ※贡献者: @Runar"
    },
    "AnimState:SetSkin:UNKNOWN": {
        "prefix": "AnimState:SetSkin",
        "body": "AnimState:SetSkin()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:AnimDone:判断动画是否播放完": {
        "prefix": "AnimState:AnimDone",
        "body": "AnimState:AnimDone()",
        "description": " ※参数: \n ※返回: <bool>[动画是否结束播放] \n ※说明: 判断动画是否播放完\n ※贡献者: @Runar"
    },
    "AnimState:IsCurrentAnimation:当前动画是否为给出名动画": {
        "prefix": "AnimState:IsCurrentAnimation",
        "body": "AnimState:IsCurrentAnimation(${1:animname})",
        "description": " ※参数: \n   (animname)<str>[动画名] \n ※返回: <bool>[是否为该动画] \n ※说明: 当前动画是否为给出名动画\n ※贡献者: @Runar"
    },
    "AnimState:SetTime:设置当前动画从第几秒开始播放（秒）": {
        "prefix": "AnimState:SetTime",
        "body": "AnimState:SetTime(${1:time})",
        "description": " ※参数: \n   (time)<num>[时间(秒)] \n ※返回: \n ※说明: 设置当前动画从第几秒开始播放（秒）\n ※贡献者: @Runar"
    },
    "AnimState:SetRayTestOnBB:UNKNOWN": {
        "prefix": "AnimState:SetRayTestOnBB",
        "body": "AnimState:SetRayTestOnBB(${1:bool})",
        "description": " ※参数: \n   (bool)<bool>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetVisualBB:获取可视化边界": {
        "prefix": "AnimState:GetVisualBB",
        "body": "AnimState:GetVisualBB()",
        "description": " ※参数: \n ※返回: <num>[bby2] <num>[bbx1] <num>[bby1] <num>[bbx2] \n ※说明: 获取可视化边界\n ※贡献者: @lan (bbx1-bbx2)取绝对值是宽,y是高"
    },
    "AnimState:GetVisualBB:获取可视化边界+i": {
        "prefix": "AnimState:GetVisualBB+i",
        "body": "AnimState:\nlocal anim_w,anim_h = (function(ent)\n\tlocal bbx1,bby1,bbx2,bby2 = ent.AnimState:GetVisualBB()\n\treturn math.abs(bbx1-bbx2),math.abs(bby1-bby2)\nend)(${1:ent})",
        "description": " ※参数: \n ※返回: <num>[bby2] <num>[bbx1] <num>[bby1] <num>[bbx2] \n ※说明: 获取可视化边界\n ※贡献者: @lan (bbx1-bbx2)取绝对值是宽,y是高\n ※启发模式: 返回某实体的动画的宽高"
    },
    "AnimState:BuildHasSymbol:当前build下是否有对应通道": {
        "prefix": "AnimState:BuildHasSymbol",
        "body": "AnimState:BuildHasSymbol(${1:symbolname})",
        "description": " ※参数: \n   (symbolname)<str>[通道名] \n ※返回: <bool>[是否有给定通道] \n ※说明: 当前build下是否有对应通道\n ※贡献者: @Runar"
    },
    "AnimState:SetSymbolSaturation:设置通道饱和度": {
        "prefix": "AnimState:SetSymbolSaturation",
        "body": "AnimState:SetSymbolSaturation(${2:saturation},${1:symbol})",
        "description": " ※参数: \n   (saturation)<num>[饱和度] \n   (symbol)<str>[通道名] \n ※返回: \n ※说明: 设置通道饱和度\n ※贡献者: @Runar"
    },
    "AnimState:SetMultiSymbolExchange:把symbol1放到symbol2前": {
        "prefix": "AnimState:SetMultiSymbolExchange",
        "body": "AnimState:SetMultiSymbolExchange(${2:symbol2},${1:symbol1})",
        "description": " ※参数: \n   (symbol2)<str>[] \n   (symbol1)<str>[] \n ※返回: \n ※说明: 把symbol1放到symbol2前\n ※贡献者: @"
    },
    "AnimState:Hide:隐藏图层(Layer)": {
        "prefix": "AnimState:Hide",
        "body": "AnimState:Hide(${1:layername})",
        "description": " ※参数: \n   (layername)<str>[图层名] \n ※返回: \n ※说明: 隐藏图层(Layer)\n ※贡献者: @Runar"
    },
    "AnimState:SetManualBB:UNKNOWN": {
        "prefix": "AnimState:SetManualBB",
        "body": "AnimState:SetManualBB()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetSymbolAddColour:设置通道叠加颜色": {
        "prefix": "AnimState:SetSymbolAddColour",
        "body": "AnimState:SetSymbolAddColour(${4:a},${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (a)<num>[不透明度(0~1)] \n   (r)<num>[红色通道(0~1)] \n   (g)<num>[绿色通道(0~1)] \n   (b)<num>[蓝色通道(0~1)] \n ※返回: \n ※说明: 设置通道叠加颜色\n ※贡献者: @Runar"
    },
    "AnimState:SetHighlightColour:设置高光色彩": {
        "prefix": "AnimState:SetHighlightColour",
        "body": "AnimState:SetHighlightColour(${4:a},${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (a)<num>[] \n   (r)<num>[] \n   (g)<num>[] \n   (b)<num>[] \n ※返回: \n ※说明: 设置高光色彩\n ※贡献者: @"
    },
    "AnimState:SetHaunted:让物品产生闪烁效果": {
        "prefix": "AnimState:SetHaunted",
        "body": "AnimState:SetHaunted(${1:bool})",
        "description": " ※参数: \n   (bool)<bool>[] \n ※返回: \n ※说明: 让物品产生闪烁效果\n ※贡献者: @"
    },
    "AnimState:SetAddColour:颜色叠加，几乎不受原图颜色影响，参数 0-1": {
        "prefix": "AnimState:SetAddColour",
        "body": "AnimState:SetAddColour(${4:a},${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (a)<num>[不透明度(0~1)] \n   (r)<num>[红色通道(0~1)] \n   (g)<num>[绿色通道(0~1)] \n   (b)<num>[蓝色通道(0~1)] \n ※返回: \n ※说明: 颜色叠加，几乎不受原图颜色影响，参数 0-1\n ※贡献者: @Runar"
    },
    "AnimState:SetFinalOffset:UNKNOWN": {
        "prefix": "AnimState:SetFinalOffset",
        "body": "AnimState:SetFinalOffset(${1:param})",
        "description": " ※参数: \n   (param)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetSortOrder:UNKNOWN": {
        "prefix": "AnimState:GetSortOrder",
        "body": "AnimState:GetSortOrder()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetFloatParams:UNKNOWN": {
        "prefix": "AnimState:SetFloatParams",
        "body": "AnimState:SetFloatParams(${1:param1},${2:param2},${3:param3})",
        "description": " ※参数: \n   (param1)<num>[] \n   (param2)<num>[] \n   (param3)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetSymbolMultColour:获取通道叠乘的颜色，返回r,g,b,a": {
        "prefix": "AnimState:GetSymbolMultColour",
        "body": "AnimState:GetSymbolMultColour()",
        "description": " ※参数: \n ※返回: <num>[不透明度(0~1)] <num>[红色通道(0~1)] <num>[绿色通道(0~1)] <num>[蓝色通道(0~1)] \n ※说明: 获取通道叠乘的颜色，返回r,g,b,a\n ※贡献者: @Runar"
    },
    "AnimState:GetLayer:UNKNOWN": {
        "prefix": "AnimState:GetLayer",
        "body": "AnimState:GetLayer()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:OverrideBrightness:UNKNOWN": {
        "prefix": "AnimState:OverrideBrightness",
        "body": "AnimState:OverrideBrightness()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:Pause:暂停动画，无参": {
        "prefix": "AnimState:Pause",
        "body": "AnimState:Pause()",
        "description": " ※参数: \n ※返回: \n ※说明: 暂停动画，无参\n ※贡献者: @Runar"
    },
    "AnimState:SetHatOffset:UNKNOWN": {
        "prefix": "AnimState:SetHatOffset",
        "body": "AnimState:SetHatOffset(${2:param2},${1:param1})",
        "description": " ※参数: \n   (param2)<num>[] \n   (param1)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetSaturation:UNKNOWN": {
        "prefix": "AnimState:GetSaturation",
        "body": "AnimState:GetSaturation()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetSkinBuild:获取当前皮肤的build": {
        "prefix": "AnimState:GetSkinBuild",
        "body": "AnimState:GetSkinBuild()",
        "description": " ※参数: \n ※返回: <str>[皮肤当前的build] \n ※说明: 获取当前皮肤的build\n ※贡献者: @Runar"
    },
    "AnimState:GetInheritsSortKey:UNKNOWN": {
        "prefix": "AnimState:GetInheritsSortKey",
        "body": "AnimState:GetInheritsSortKey()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetDepthTestEnabled:UNKNOWN": {
        "prefix": "AnimState:SetDepthTestEnabled",
        "body": "AnimState:SetDepthTestEnabled()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:UseHeadHatExchange:UNKNOWN": {
        "prefix": "AnimState:UseHeadHatExchange",
        "body": "AnimState:UseHeadHatExchange()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetSaturation:UNKNOWN": {
        "prefix": "AnimState:SetSaturation",
        "body": "AnimState:SetSaturation(${1:saturation})",
        "description": " ※参数: \n   (saturation)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetSymbolOverride:获取覆盖通道名": {
        "prefix": "AnimState:GetSymbolOverride",
        "body": "AnimState:GetSymbolOverride(${1:symbolname})",
        "description": " ※参数: \n   (symbolname)<str>[通道名] \n ※返回: <str>[覆盖通道名] \n ※说明: 获取覆盖通道名\n ※贡献者: @Runar"
    },
    "AnimState:GetBankHash:UNKNOWN": {
        "prefix": "AnimState:GetBankHash",
        "body": "AnimState:GetBankHash()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:ClearOverrideSymbol:清除覆盖的通道": {
        "prefix": "AnimState:ClearOverrideSymbol",
        "body": "AnimState:ClearOverrideSymbol(${1:symbolname})",
        "description": " ※参数: \n   (symbolname)<str>[通道名] \n ※返回: \n ※说明: 清除覆盖的通道\n ※贡献者: @Runar"
    },
    "AnimState:SetBrightness:UNKNOWN": {
        "prefix": "AnimState:SetBrightness",
        "body": "AnimState:SetBrightness(${1:num})",
        "description": " ※参数: \n   (num)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetHue:UNKNOWN": {
        "prefix": "AnimState:GetHue",
        "body": "AnimState:GetHue()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:SetBankAndPlayAnimation:看名字能猜到是 SetBank()与PlayAnimation()两个方法的结合": {
        "prefix": "AnimState:SetBankAndPlayAnimation",
        "body": "AnimState:SetBankAndPlayAnimation(${2:animname},${1:bankname})",
        "description": " ※参数: \n   (animname)<str>[动画名] \n   (bankname)<str>[动画父节点名] \n ※返回: \n ※说明: 看名字能猜到是 SetBank()与PlayAnimation()两个方法的结合\n ※贡献者: @Runar"
    },
    "AnimState:FastForward:UNKNOWN": {
        "prefix": "AnimState:FastForward",
        "body": "AnimState:FastForward(${1:dt})",
        "description": " ※参数: \n   (dt)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:OverrideSaturation:UNKNOWN": {
        "prefix": "AnimState:OverrideSaturation",
        "body": "AnimState:OverrideSaturation()",
        "description": " ※参数: \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:HideSymbol:隐藏通道": {
        "prefix": "AnimState:HideSymbol",
        "body": "AnimState:HideSymbol(${1:symbolname})",
        "description": " ※参数: \n   (symbolname)<str>[通道名] \n ※返回: \n ※说明: 隐藏通道\n ※贡献者: @Runar"
    },
    "AnimState:SetOrientation:设置动画的方向，参数从constants.lua里取ANIM_ORIENTATION": {
        "prefix": "AnimState:SetOrientation",
        "body": "AnimState:SetOrientation(${1:ANIM_ORIENTATION})",
        "description": " ※参数: \n   (ANIM_ORIENTATION)<num>[动画朝向] \n ※返回: \n ※说明: 设置动画的方向，参数从constants.lua里取ANIM_ORIENTATION\n ※贡献者: @Runar"
    },
    "AnimState:CompareSymbolBuilds:比较默认通道defaultsymbol是否是symbol通道，一般用来自定义idle动画": {
        "prefix": "AnimState:CompareSymbolBuilds",
        "body": "AnimState:CompareSymbolBuilds(${2:symbol},${1:defaultsymbol})",
        "description": " ※参数: \n   (symbol)<str>[通道名] \n   (defaultsymbol)<str>[通道名] \n ※返回: <bool>[] \n ※说明: 比较默认通道defaultsymbol是否是symbol通道，一般用来自定义idle动画\n ※贡献者: @"
    },
    "AnimState:SetFrame:设置动画到第多少帧": {
        "prefix": "AnimState:SetFrame",
        "body": "AnimState:SetFrame(${1:frame})",
        "description": " ※参数: \n   (frame)<num>[第多少帧] \n ※返回: \n ※说明: 设置动画到第多少帧\n ※贡献者: @lan"
    },
    "AnimState:GetCurrentAnimationTime:获取当前动画播放的时间，GetCurrentAnimationLength获取的是动画的总长度，GetCurrentAnimationTime获取的是动画当前播放的时间（我猜的）": {
        "prefix": "AnimState:GetCurrentAnimationTime",
        "body": "AnimState:GetCurrentAnimationTime()",
        "description": " ※参数: \n ※返回: <num>[] \n ※说明: 获取当前动画播放的时间，GetCurrentAnimationLength获取的是动画的总长度，GetCurrentAnimationTime获取的是动画当前播放的时间（我猜的）\n ※贡献者: @"
    },
    "AnimState:ClearBloomEffectHandle:清除泛光效果句柄": {
        "prefix": "AnimState:ClearBloomEffectHandle",
        "body": "AnimState:ClearBloomEffectHandle()",
        "description": " ※参数: \n ※返回: \n ※说明: 清除泛光效果句柄\n ※贡献者: @Runar"
    },
    "AnimState:ClearAllOverrideSymbols:清除所有覆盖通道": {
        "prefix": "AnimState:ClearAllOverrideSymbols",
        "body": "AnimState:ClearAllOverrideSymbols()",
        "description": " ※参数: \n ※返回: \n ※说明: 清除所有覆盖通道\n ※贡献者: @Runar"
    },
    "AnimState:SetErosionParams:UNKNOWN": {
        "prefix": "AnimState:SetErosionParams",
        "body": "AnimState:SetErosionParams(${1:param1},${2:param2},${3:param3})",
        "description": " ※参数: \n   (param1)<num>[] \n   (param2)<num>[] \n   (param3)<num>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "AnimState:GetCurrentAnimationLength:动画总长度，单位：秒，1 帧是 1/30 秒，0.33333 秒": {
        "prefix": "AnimState:GetCurrentAnimationLength",
        "body": "AnimState:GetCurrentAnimationLength()",
        "description": " ※参数: \n ※返回: <num>[时间(秒)] \n ※说明: 动画总长度，单位：秒，1 帧是 1/30 秒，0.33333 秒\n ※贡献者: @Runar"
    },
    "AnimState:SetSymbolMultColour:设置通道叠乘颜色": {
        "prefix": "AnimState:SetSymbolMultColour",
        "body": "AnimState:SetSymbolMultColour(${4:a},${1:r},${2:g},${3:b})",
        "description": " ※参数: \n   (a)<num>[不透明度(0~1)] \n   (r)<num>[红色通道(0~1)] \n   (g)<num>[绿色通道(0~1)] \n   (b)<num>[蓝色通道(0~1)] \n ※返回: \n ※说明: 设置通道叠乘颜色\n ※贡献者: @Runar"
    },
    "AnimState:OverrideSymbol:覆盖旧通道": {
        "prefix": "AnimState:OverrideSymbol",
        "body": "AnimState:OverrideSymbol(${1:oldsymbol},${2:newbuild},${3:newsymbol})",
        "description": " ※参数: \n   (oldsymbol)<str>[通道名] \n   (newbuild)<str>[覆盖通道所在的build] \n   (newsymbol)<str>[覆盖通道] \n ※返回: \n ※说明: 覆盖旧通道\n ※贡献者: @Runar"
    },
    "AnimState:AnimateWhilePaused:暂停时是否也播放动画": {
        "prefix": "AnimState:AnimateWhilePaused",
        "body": "AnimState:AnimateWhilePaused(${1:bool})",
        "description": " ※参数: \n   (bool)<bool>[是否播放动画] \n ※返回: \n ※说明: 暂停时是否也播放动画\n ※贡献者: @Runar"
    },
    "Transform:SetInterpolateRotation:UNKNOWN": {
        "prefix": "Transform:SetInterpolateRotation",
        "body": "Transform:SetInterpolateRotation(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetIsOnPlatform:UNKNOWN": {
        "prefix": "Transform:SetIsOnPlatform",
        "body": "Transform:SetIsOnPlatform(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:GetRotation:获取实体面向角度": {
        "prefix": "Transform:GetRotation",
        "body": "Transform:GetRotation()",
        "description": " ※参数: \n ※返回: <num>[角度制角度] \n ※说明: 获取实体面向角度\n ※贡献者: @lan 有正负 逆时针为正 0-180"
    },
    "Transform:ClearPredictedFacingModel:UNKNOWN": {
        "prefix": "Transform:ClearPredictedFacingModel",
        "body": "Transform:ClearPredictedFacingModel(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetFourFaced:设置4面向": {
        "prefix": "Transform:SetFourFaced",
        "body": "Transform:SetFourFaced()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置4面向\n ※贡献者: @lan"
    },
    "Transform:GetHistoryData:UNKNOWN": {
        "prefix": "Transform:GetHistoryData",
        "body": "Transform:GetHistoryData(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetPredictedSixFaced:UNKNOWN": {
        "prefix": "Transform:SetPredictedSixFaced",
        "body": "Transform:SetPredictedSixFaced(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:UpdateTransform:UNKNOWN": {
        "prefix": "Transform:UpdateTransform",
        "body": "Transform:UpdateTransform(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetRotation:设置旋转角度": {
        "prefix": "Transform:SetRotation",
        "body": "Transform:SetRotation(${1:angle})",
        "description": " ※参数: \n   (angle)<num>[角度制角度] \n ※返回: \n ※说明: 设置旋转角度\n ※贡献者: @lan 有正负 逆时针为正 0-180"
    },
    "Transform:SetSixFaced:设置6面向": {
        "prefix": "Transform:SetSixFaced",
        "body": "Transform:SetSixFaced()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置6面向\n ※贡献者: @lan"
    },
    "Transform:SetScale:按比例缩放": {
        "prefix": "Transform:SetScale",
        "body": "Transform:SetScale(${1:x_scale},${2:y_scale},${3:z_scale})",
        "description": " ※参数: \n   (x_scale)<num>[] \n   (y_scale)<num>[] \n   (z_scale)<num>[] \n ※返回: \n ※说明: 按比例缩放\n ※贡献者: @lan"
    },
    "Transform:SetPredictedNoFaced:UNKNOWN": {
        "prefix": "Transform:SetPredictedNoFaced",
        "body": "Transform:SetPredictedNoFaced(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:OffsetPosition:UNKNOWN": {
        "prefix": "Transform:OffsetPosition",
        "body": "Transform:OffsetPosition(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetPredictedEightFaced:UNKNOWN": {
        "prefix": "Transform:SetPredictedEightFaced",
        "body": "Transform:SetPredictedEightFaced(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetTwoFaced:设置2面向": {
        "prefix": "Transform:SetTwoFaced",
        "body": "Transform:SetTwoFaced()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置2面向\n ※贡献者: @lan"
    },
    "Transform:GetWorldPosition:获取实体的世界坐标": {
        "prefix": "Transform:GetWorldPosition",
        "body": "Transform:GetWorldPosition()",
        "description": " ※参数: \n ※返回: <num>[x] <num>[y] <num>[z] \n ※说明: 获取实体的世界坐标\n ※贡献者: @lan"
    },
    "Transform:SetPredictedFourFaced:UNKNOWN": {
        "prefix": "Transform:SetPredictedFourFaced",
        "body": "Transform:SetPredictedFourFaced(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetPredictedTwoFaced:UNKNOWN": {
        "prefix": "Transform:SetPredictedTwoFaced",
        "body": "Transform:SetPredictedTwoFaced(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:GetPredictionPosition:UNKNOWN": {
        "prefix": "Transform:GetPredictionPosition",
        "body": "Transform:GetPredictionPosition(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetPosition:设置实体坐标": {
        "prefix": "Transform:SetPosition",
        "body": "Transform:SetPosition(${1:x},${2:y},${3:z})",
        "description": " ※参数: \n   (x)<num>[] \n   (y)<num>[] \n   (z)<num>[] \n ※返回: \n ※说明: 设置实体坐标\n ※贡献者: @lan"
    },
    "Transform:SetEightFaced:设置8面向": {
        "prefix": "Transform:SetEightFaced",
        "body": "Transform:SetEightFaced()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置8面向\n ※贡献者: @lan"
    },
    "Transform:SetFromProxy:UNKNOWN": {
        "prefix": "Transform:SetFromProxy",
        "body": "Transform:SetFromProxy(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:GetLocalPosition:UNKNOWN": {
        "prefix": "Transform:GetLocalPosition",
        "body": "Transform:GetLocalPosition(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:GetFacing:UNKNOWN": {
        "prefix": "Transform:GetFacing",
        "body": "Transform:GetFacing(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:GetScale:获取缩放比": {
        "prefix": "Transform:GetScale",
        "body": "Transform:GetScale()",
        "description": " ※参数: \n ※返回: <num>[x_scale] <num>[y_scale] <num>[z_scale] \n ※说明: 获取缩放比\n ※贡献者: @lan"
    },
    "Transform:GetFacingRotation:UNKNOWN": {
        "prefix": "Transform:GetFacingRotation",
        "body": "Transform:GetFacingRotation(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:LoadRotation:UNKNOWN": {
        "prefix": "Transform:LoadRotation",
        "body": "Transform:LoadRotation(${1:})",
        "description": " ※参数: \n   ()<>[] \n ※返回: \n ※说明: UNKNOWN\n ※贡献者: @"
    },
    "Transform:SetNoFaced:设置无面向": {
        "prefix": "Transform:SetNoFaced",
        "body": "Transform:SetNoFaced()",
        "description": " ※参数: \n ※返回: \n ※说明: 设置无面向\n ※贡献者: @lan"
    },
    "组件:components.shadowdominance": {
        "prefix": "components.shadowdominance",
        "body": "components.shadowdominance",
        "description": ""
    },
    "组件:components.kramped": {
        "prefix": "components.kramped",
        "body": "components.kramped",
        "description": ""
    },
    "组件:components.cyclable": {
        "prefix": "components.cyclable",
        "body": "components.cyclable",
        "description": ""
    },
    "组件:components.worldmigrator": {
        "prefix": "components.worldmigrator",
        "body": "components.worldmigrator",
        "description": ""
    },
    "组件:components.walkableplatform": {
        "prefix": "components.walkableplatform",
        "body": "components.walkableplatform",
        "description": ""
    },
    "组件:components.hauntable": {
        "prefix": "components.hauntable",
        "body": "components.hauntable",
        "description": ""
    },
    "组件:components.shardstate": {
        "prefix": "components.shardstate",
        "body": "components.shardstate",
        "description": ""
    },
    "组件:components.mood": {
        "prefix": "components.mood",
        "body": "components.mood",
        "description": ""
    },
    "组件:components.builder_replica": {
        "prefix": "components.builder_replica",
        "body": "components.builder_replica",
        "description": ""
    },
    "组件:components.fillable": {
        "prefix": "components.fillable",
        "body": "components.fillable",
        "description": ""
    },
    "组件:components.lightningblocker": {
        "prefix": "components.lightningblocker",
        "body": "components.lightningblocker",
        "description": ""
    },
    "组件:components.retrofitcavemap_anr": {
        "prefix": "components.retrofitcavemap_anr",
        "body": "components.retrofitcavemap_anr",
        "description": ""
    },
    "组件:components.aoeweapon_base": {
        "prefix": "components.aoeweapon_base",
        "body": "components.aoeweapon_base",
        "description": ""
    },
    "组件:components.oar": {
        "prefix": "components.oar",
        "body": "components.oar",
        "description": ""
    },
    "组件:components.freezable": {
        "prefix": "components.freezable",
        "body": "components.freezable",
        "description": ""
    },
    "组件:components.plantresearchable": {
        "prefix": "components.plantresearchable",
        "body": "components.plantresearchable",
        "description": ""
    },
    "组件:components.decay": {
        "prefix": "components.decay",
        "body": "components.decay",
        "description": ""
    },
    "组件:components.autosaver": {
        "prefix": "components.autosaver",
        "body": "components.autosaver",
        "description": ""
    },
    "组件:components.platformhopdelay": {
        "prefix": "components.platformhopdelay",
        "body": "components.platformhopdelay",
        "description": ""
    },
    "组件:components.inventoryitemmoisture": {
        "prefix": "components.inventoryitemmoisture",
        "body": "components.inventoryitemmoisture",
        "description": ""
    },
    "组件:components.playertargetindicator": {
        "prefix": "components.playertargetindicator",
        "body": "components.playertargetindicator",
        "description": ""
    },
    "组件:components.ruinsshadelingspawner": {
        "prefix": "components.ruinsshadelingspawner",
        "body": "components.ruinsshadelingspawner",
        "description": ""
    },
    "组件:components.craftingstation": {
        "prefix": "components.craftingstation",
        "body": "components.craftingstation",
        "description": ""
    },
    "组件:components.maprecorder": {
        "prefix": "components.maprecorder",
        "body": "components.maprecorder",
        "description": ""
    },
    "组件:components.batteryuser": {
        "prefix": "components.batteryuser",
        "body": "components.batteryuser",
        "description": ""
    },
    "组件:components.boatringdata": {
        "prefix": "components.boatringdata",
        "body": "components.boatringdata",
        "description": ""
    },
    "组件:components.acidlevel": {
        "prefix": "components.acidlevel",
        "body": "components.acidlevel",
        "description": ""
    },
    "组件:components.itemaffinity": {
        "prefix": "components.itemaffinity",
        "body": "components.itemaffinity",
        "description": ""
    },
    "组件:components.curseditem": {
        "prefix": "components.curseditem",
        "body": "components.curseditem",
        "description": ""
    },
    "组件:components.distancefade": {
        "prefix": "components.distancefade",
        "body": "components.distancefade",
        "description": ""
    },
    "组件:components.hounded": {
        "prefix": "components.hounded",
        "body": "components.hounded",
        "description": ""
    },
    "组件:components.yotc_racestats": {
        "prefix": "components.yotc_racestats",
        "body": "components.yotc_racestats",
        "description": ""
    },
    "组件:components.fan": {
        "prefix": "components.fan",
        "body": "components.fan",
        "description": ""
    },
    "组件:components.shaveable": {
        "prefix": "components.shaveable",
        "body": "components.shaveable",
        "description": ""
    },
    "组件:components.treasuremarked": {
        "prefix": "components.treasuremarked",
        "body": "components.treasuremarked",
        "description": ""
    },
    "组件:components.mermkingmanager": {
        "prefix": "components.mermkingmanager",
        "body": "components.mermkingmanager",
        "description": ""
    },
    "组件:components.bathbomb": {
        "prefix": "components.bathbomb",
        "body": "components.bathbomb",
        "description": ""
    },
    "组件:components.shadowthrallmanager": {
        "prefix": "components.shadowthrallmanager",
        "body": "components.shadowthrallmanager",
        "description": ""
    },
    "组件:components.teleporter": {
        "prefix": "components.teleporter",
        "body": "components.teleporter",
        "description": ""
    },
    "组件:components.lunarhailmanager": {
        "prefix": "components.lunarhailmanager",
        "body": "components.lunarhailmanager",
        "description": ""
    },
    "组件:components.occupiable": {
        "prefix": "components.occupiable",
        "body": "components.occupiable",
        "description": ""
    },
    "组件:components.caveweather": {
        "prefix": "components.caveweather",
        "body": "components.caveweather",
        "description": ""
    },
    "组件:components.farmplanttendable": {
        "prefix": "components.farmplanttendable",
        "body": "components.farmplanttendable",
        "description": ""
    },
    "组件:components.debuffable": {
        "prefix": "components.debuffable",
        "body": "components.debuffable",
        "description": ""
    },
    "组件:components.mightygym": {
        "prefix": "components.mightygym",
        "body": "components.mightygym",
        "description": ""
    },
    "组件:components.minigame_spectator": {
        "prefix": "components.minigame_spectator",
        "body": "components.minigame_spectator",
        "description": ""
    },
    "组件:components.weapon武器": {
        "prefix": "components.weapon",
        "body": "components.weapon",
        "description": "武器"
    },
    "组件:components.skeletonsweeper": {
        "prefix": "components.skeletonsweeper",
        "body": "components.skeletonsweeper",
        "description": ""
    },
    "组件:components.drawingtool": {
        "prefix": "components.drawingtool",
        "body": "components.drawingtool",
        "description": ""
    },
    "组件:components.dockmanager": {
        "prefix": "components.dockmanager",
        "body": "components.dockmanager",
        "description": ""
    },
    "组件:components.meteorshower": {
        "prefix": "components.meteorshower",
        "body": "components.meteorshower",
        "description": ""
    },
    "组件:components.stageactingprop": {
        "prefix": "components.stageactingprop",
        "body": "components.stageactingprop",
        "description": ""
    },
    "组件:components.combat": {
        "prefix": "components.combat",
        "body": "components.combat",
        "description": ""
    },
    "组件:components.shadowcreaturespawner": {
        "prefix": "components.shadowcreaturespawner",
        "body": "components.shadowcreaturespawner",
        "description": ""
    },
    "组件:components.singable": {
        "prefix": "components.singable",
        "body": "components.singable",
        "description": ""
    },
    "组件:components.farmplantstress": {
        "prefix": "components.farmplantstress",
        "body": "components.farmplantstress",
        "description": ""
    },
    "组件:components.age": {
        "prefix": "components.age",
        "body": "components.age",
        "description": ""
    },
    "组件:components.spidermutator": {
        "prefix": "components.spidermutator",
        "body": "components.spidermutator",
        "description": ""
    },
    "组件:components.floater": {
        "prefix": "components.floater",
        "body": "components.floater",
        "description": ""
    },
    "组件:components.wildfires": {
        "prefix": "components.wildfires",
        "body": "components.wildfires",
        "description": ""
    },
    "组件:components.brushable": {
        "prefix": "components.brushable",
        "body": "components.brushable",
        "description": ""
    },
    "组件:components.worlddeciduoustreeupdater": {
        "prefix": "components.worlddeciduoustreeupdater",
        "body": "components.worlddeciduoustreeupdater",
        "description": ""
    },
    "组件:components.follower": {
        "prefix": "components.follower",
        "body": "components.follower",
        "description": ""
    },
    "组件:components.sewing": {
        "prefix": "components.sewing",
        "body": "components.sewing",
        "description": ""
    },
    "组件:components.recallmark": {
        "prefix": "components.recallmark",
        "body": "components.recallmark",
        "description": ""
    },
    "组件:components.charliecutscene": {
        "prefix": "components.charliecutscene",
        "body": "components.charliecutscene",
        "description": ""
    },
    "组件:components.teamattacker": {
        "prefix": "components.teamattacker",
        "body": "components.teamattacker",
        "description": ""
    },
    "组件:components.inventoryitem": {
        "prefix": "components.inventoryitem",
        "body": "components.inventoryitem",
        "description": ""
    },
    "组件:components.heavyobstaclephysics": {
        "prefix": "components.heavyobstaclephysics",
        "body": "components.heavyobstaclephysics",
        "description": ""
    },
    "组件:components.herd": {
        "prefix": "components.herd",
        "body": "components.herd",
        "description": ""
    },
    "组件:components.reloaditem": {
        "prefix": "components.reloaditem",
        "body": "components.reloaditem",
        "description": ""
    },
    "组件:components.moonaltarlink": {
        "prefix": "components.moonaltarlink",
        "body": "components.moonaltarlink",
        "description": ""
    },
    "组件:components.boatai": {
        "prefix": "components.boatai",
        "body": "components.boatai",
        "description": ""
    },
    "组件:components.catcher": {
        "prefix": "components.catcher",
        "body": "components.catcher",
        "description": ""
    },
    "组件:components.moonstormwatcher": {
        "prefix": "components.moonstormwatcher",
        "body": "components.moonstormwatcher",
        "description": ""
    },
    "组件:components.bloomer": {
        "prefix": "components.bloomer",
        "body": "components.bloomer",
        "description": ""
    },
    "组件:components.attuner": {
        "prefix": "components.attuner",
        "body": "components.attuner",
        "description": ""
    },
    "组件:components.equippable_replica": {
        "prefix": "components.equippable_replica",
        "body": "components.equippable_replica",
        "description": ""
    },
    "组件:components.eater吃...的人": {
        "prefix": "components.eater",
        "body": "components.eater",
        "description": "吃...的人"
    },
    "组件:components.fishingnet": {
        "prefix": "components.fishingnet",
        "body": "components.fishingnet",
        "description": ""
    },
    "组件:components.carefulwalker": {
        "prefix": "components.carefulwalker",
        "body": "components.carefulwalker",
        "description": ""
    },
    "组件:components.healthsyncer": {
        "prefix": "components.healthsyncer",
        "body": "components.healthsyncer",
        "description": ""
    },
    "组件:components.homeseeker": {
        "prefix": "components.homeseeker",
        "body": "components.homeseeker",
        "description": ""
    },
    "组件:components.drawable": {
        "prefix": "components.drawable",
        "body": "components.drawable",
        "description": ""
    },
    "组件:components.hallucinations": {
        "prefix": "components.hallucinations",
        "body": "components.hallucinations",
        "description": ""
    },
    "组件:components.firebug": {
        "prefix": "components.firebug",
        "body": "components.firebug",
        "description": ""
    },
    "组件:components.rider_replica": {
        "prefix": "components.rider_replica",
        "body": "components.rider_replica",
        "description": ""
    },
    "组件:components.colouraddersync": {
        "prefix": "components.colouraddersync",
        "body": "components.colouraddersync",
        "description": ""
    },
    "组件:components.anchor": {
        "prefix": "components.anchor",
        "body": "components.anchor",
        "description": ""
    },
    "组件:components.dumbbelllifter": {
        "prefix": "components.dumbbelllifter",
        "body": "components.dumbbelllifter",
        "description": ""
    },
    "组件:components.hideandseeker": {
        "prefix": "components.hideandseeker",
        "body": "components.hideandseeker",
        "description": ""
    },
    "组件:components.constructionbuilder": {
        "prefix": "components.constructionbuilder",
        "body": "components.constructionbuilder",
        "description": ""
    },
    "组件:components.worldwind": {
        "prefix": "components.worldwind",
        "body": "components.worldwind",
        "description": ""
    },
    "组件:components.book": {
        "prefix": "components.book",
        "body": "components.book",
        "description": ""
    },
    "组件:components.minigame_participator": {
        "prefix": "components.minigame_participator",
        "body": "components.minigame_participator",
        "description": ""
    },
    "组件:components.domesticatable": {
        "prefix": "components.domesticatable",
        "body": "components.domesticatable",
        "description": ""
    },
    "组件:components.boatphysics": {
        "prefix": "components.boatphysics",
        "body": "components.boatphysics",
        "description": ""
    },
    "组件:components.emitter": {
        "prefix": "components.emitter",
        "body": "components.emitter",
        "description": ""
    },
    "组件:components.boatcannonuser": {
        "prefix": "components.boatcannonuser",
        "body": "components.boatcannonuser",
        "description": ""
    },
    "组件:components.forgerepairable": {
        "prefix": "components.forgerepairable",
        "body": "components.forgerepairable",
        "description": ""
    },
    "组件:components.drownable": {
        "prefix": "components.drownable",
        "body": "components.drownable",
        "description": ""
    },
    "组件:components.scrapbookable": {
        "prefix": "components.scrapbookable",
        "body": "components.scrapbookable",
        "description": ""
    },
    "组件:components.maprevealer": {
        "prefix": "components.maprevealer",
        "body": "components.maprevealer",
        "description": ""
    },
    "组件:components.migrationpetowner": {
        "prefix": "components.migrationpetowner",
        "body": "components.migrationpetowner",
        "description": ""
    },
    "组件:components.shard_players": {
        "prefix": "components.shard_players",
        "body": "components.shard_players",
        "description": ""
    },
    "组件:components.attunable": {
        "prefix": "components.attunable",
        "body": "components.attunable",
        "description": ""
    },
    "组件:components.gingerbreadhunter": {
        "prefix": "components.gingerbreadhunter",
        "body": "components.gingerbreadhunter",
        "description": ""
    },
    "组件:components.incinerator": {
        "prefix": "components.incinerator",
        "body": "components.incinerator",
        "description": ""
    },
    "组件:components.experiencecollector": {
        "prefix": "components.experiencecollector",
        "body": "components.experiencecollector",
        "description": ""
    },
    "组件:components.key": {
        "prefix": "components.key",
        "body": "components.key",
        "description": ""
    },
    "组件:components.waxable": {
        "prefix": "components.waxable",
        "body": "components.waxable",
        "description": ""
    },
    "组件:components.dsp": {
        "prefix": "components.dsp",
        "body": "components.dsp",
        "description": ""
    },
    "组件:components.damagetypebonus": {
        "prefix": "components.damagetypebonus",
        "body": "components.damagetypebonus",
        "description": ""
    },
    "组件:components.boattrail": {
        "prefix": "components.boattrail",
        "body": "components.boattrail",
        "description": ""
    },
    "组件:components.custombuildmanager": {
        "prefix": "components.custombuildmanager",
        "body": "components.custombuildmanager",
        "description": ""
    },
    "组件:components.moistureimmunity": {
        "prefix": "components.moistureimmunity",
        "body": "components.moistureimmunity",
        "description": ""
    },
    "组件:components.follower_replica": {
        "prefix": "components.follower_replica",
        "body": "components.follower_replica",
        "description": ""
    },
    "组件:components.moontrader": {
        "prefix": "components.moontrader",
        "body": "components.moontrader",
        "description": ""
    },
    "组件:components.savedrotation": {
        "prefix": "components.savedrotation",
        "body": "components.savedrotation",
        "description": ""
    },
    "组件:components.planardamage": {
        "prefix": "components.planardamage",
        "body": "components.planardamage",
        "description": ""
    },
    "组件:components.cursable": {
        "prefix": "components.cursable",
        "body": "components.cursable",
        "description": ""
    },
    "组件:components.colouradder": {
        "prefix": "components.colouradder",
        "body": "components.colouradder",
        "description": ""
    },
    "组件:components.container容器": {
        "prefix": "components.container",
        "body": "components.container",
        "description": "容器"
    },
    "组件:components.forcecompostable": {
        "prefix": "components.forcecompostable",
        "body": "components.forcecompostable",
        "description": ""
    },
    "组件:components.hunger": {
        "prefix": "components.hunger",
        "body": "components.hunger",
        "description": ""
    },
    "组件:components.playeractionpicker": {
        "prefix": "components.playeractionpicker",
        "body": "components.playeractionpicker",
        "description": ""
    },
    "组件:components.fishingnetvisualizer": {
        "prefix": "components.fishingnetvisualizer",
        "body": "components.fishingnetvisualizer",
        "description": ""
    },
    "组件:components.yotc_raceprizemanager": {
        "prefix": "components.yotc_raceprizemanager",
        "body": "components.yotc_raceprizemanager",
        "description": ""
    },
    "组件:components.damagetracker": {
        "prefix": "components.damagetracker",
        "body": "components.damagetracker",
        "description": ""
    },
    "组件:components.undertile": {
        "prefix": "components.undertile",
        "body": "components.undertile",
        "description": ""
    },
    "组件:components.raindome": {
        "prefix": "components.raindome",
        "body": "components.raindome",
        "description": ""
    },
    "组件:components.plantregistryupdater": {
        "prefix": "components.plantregistryupdater",
        "body": "components.plantregistryupdater",
        "description": ""
    },
    "组件:components.rooted": {
        "prefix": "components.rooted",
        "body": "components.rooted",
        "description": ""
    },
    "组件:components.instrument": {
        "prefix": "components.instrument",
        "body": "components.instrument",
        "description": ""
    },
    "组件:components.grabbable": {
        "prefix": "components.grabbable",
        "body": "components.grabbable",
        "description": ""
    },
    "组件:components.circuitnode": {
        "prefix": "components.circuitnode",
        "body": "components.circuitnode",
        "description": ""
    },
    "组件:components.submersible": {
        "prefix": "components.submersible",
        "body": "components.submersible",
        "description": ""
    },
    "组件:components.sittable": {
        "prefix": "components.sittable",
        "body": "components.sittable",
        "description": ""
    },
    "组件:components.carnivaldecor": {
        "prefix": "components.carnivaldecor",
        "body": "components.carnivaldecor",
        "description": ""
    },
    "组件:components.grottowarmanager": {
        "prefix": "components.grottowarmanager",
        "body": "components.grottowarmanager",
        "description": ""
    },
    "组件:components.cookable可以烤的": {
        "prefix": "components.cookable",
        "body": "components.cookable",
        "description": "可以烤的"
    },
    "组件:components.beard": {
        "prefix": "components.beard",
        "body": "components.beard",
        "description": ""
    },
    "组件:components.unsaddler": {
        "prefix": "components.unsaddler",
        "body": "components.unsaddler",
        "description": ""
    },
    "组件:components.pickable": {
        "prefix": "components.pickable",
        "body": "components.pickable",
        "description": ""
    },
    "组件:components.oceanfishinghook": {
        "prefix": "components.oceanfishinghook",
        "body": "components.oceanfishinghook",
        "description": ""
    },
    "组件:components.remoteteleporter": {
        "prefix": "components.remoteteleporter",
        "body": "components.remoteteleporter",
        "description": ""
    },
    "组件:components.caveins": {
        "prefix": "components.caveins",
        "body": "components.caveins",
        "description": ""
    },
    "组件:components.prototyper": {
        "prefix": "components.prototyper",
        "body": "components.prototyper",
        "description": ""
    },
    "组件:components.rampingspawner": {
        "prefix": "components.rampingspawner",
        "body": "components.rampingspawner",
        "description": ""
    },
    "组件:components.smotherer": {
        "prefix": "components.smotherer",
        "body": "components.smotherer",
        "description": ""
    },
    "组件:components.carnivaldecorranker": {
        "prefix": "components.carnivaldecorranker",
        "body": "components.carnivaldecorranker",
        "description": ""
    },
    "组件:components.embarker": {
        "prefix": "components.embarker",
        "body": "components.embarker",
        "description": ""
    },
    "组件:components.oldager": {
        "prefix": "components.oldager",
        "body": "components.oldager",
        "description": ""
    },
    "组件:components.leader": {
        "prefix": "components.leader",
        "body": "components.leader",
        "description": ""
    },
    "组件:components.bundlemaker": {
        "prefix": "components.bundlemaker",
        "body": "components.bundlemaker",
        "description": ""
    },
    "组件:components.inventory": {
        "prefix": "components.inventory",
        "body": "components.inventory",
        "description": ""
    },
    "组件:components.nis": {
        "prefix": "components.nis",
        "body": "components.nis",
        "description": ""
    },
    "组件:components.container_replica": {
        "prefix": "components.container_replica",
        "body": "components.container_replica",
        "description": ""
    },
    "组件:components.ghostlyelixir": {
        "prefix": "components.ghostlyelixir",
        "body": "components.ghostlyelixir",
        "description": ""
    },
    "组件:components.maxwelltalker": {
        "prefix": "components.maxwelltalker",
        "body": "components.maxwelltalker",
        "description": ""
    },
    "组件:components.furnituredecortaker": {
        "prefix": "components.furnituredecortaker",
        "body": "components.furnituredecortaker",
        "description": ""
    },
    "组件:components.spawner": {
        "prefix": "components.spawner",
        "body": "components.spawner",
        "description": ""
    },
    "组件:components.rechargeable": {
        "prefix": "components.rechargeable",
        "body": "components.rechargeable",
        "description": ""
    },
    "组件:components.area_unlock": {
        "prefix": "components.area_unlock",
        "body": "components.area_unlock",
        "description": ""
    },
    "组件:components.selfstacker": {
        "prefix": "components.selfstacker",
        "body": "components.selfstacker",
        "description": ""
    },
    "组件:components.magiciantool": {
        "prefix": "components.magiciantool",
        "body": "components.magiciantool",
        "description": ""
    },
    "组件:components.fertilizer": {
        "prefix": "components.fertilizer",
        "body": "components.fertilizer",
        "description": ""
    },
    "组件:components.explosiveresist": {
        "prefix": "components.explosiveresist",
        "body": "components.explosiveresist",
        "description": ""
    },
    "组件:components.shard_seasons": {
        "prefix": "components.shard_seasons",
        "body": "components.shard_seasons",
        "description": ""
    },
    "组件:components.spellbook": {
        "prefix": "components.spellbook",
        "body": "components.spellbook",
        "description": ""
    },
    "组件:components.objectspawner": {
        "prefix": "components.objectspawner",
        "body": "components.objectspawner",
        "description": ""
    },
    "组件:components.oceanfishable": {
        "prefix": "components.oceanfishable",
        "body": "components.oceanfishable",
        "description": ""
    },
    "组件:components.wateryprotection": {
        "prefix": "components.wateryprotection",
        "body": "components.wateryprotection",
        "description": ""
    },
    "组件:components.childspawner": {
        "prefix": "components.childspawner",
        "body": "components.childspawner",
        "description": ""
    },
    "组件:components.treegrowthsolution": {
        "prefix": "components.treegrowthsolution",
        "body": "components.treegrowthsolution",
        "description": ""
    },
    "组件:components.mightydumbbell": {
        "prefix": "components.mightydumbbell",
        "body": "components.mightydumbbell",
        "description": ""
    },
    "组件:components.flotsamgenerator": {
        "prefix": "components.flotsamgenerator",
        "body": "components.flotsamgenerator",
        "description": ""
    },
    "组件:components.health": {
        "prefix": "components.health",
        "body": "components.health",
        "description": ""
    },
    "组件:components.wereness": {
        "prefix": "components.wereness",
        "body": "components.wereness",
        "description": ""
    },
    "组件:components.heater": {
        "prefix": "components.heater",
        "body": "components.heater",
        "description": ""
    },
    "组件:components.worldmeteorshower": {
        "prefix": "components.worldmeteorshower",
        "body": "components.worldmeteorshower",
        "description": ""
    },
    "组件:components.deerclopsspawner": {
        "prefix": "components.deerclopsspawner",
        "body": "components.deerclopsspawner",
        "description": ""
    },
    "组件:components.lunarthrall_plantspawner": {
        "prefix": "components.lunarthrall_plantspawner",
        "body": "components.lunarthrall_plantspawner",
        "description": ""
    },
    "组件:components.groundcreep": {
        "prefix": "components.groundcreep",
        "body": "components.groundcreep",
        "description": ""
    },
    "组件:components.brush": {
        "prefix": "components.brush",
        "body": "components.brush",
        "description": ""
    },
    "组件:components.workable": {
        "prefix": "components.workable",
        "body": "components.workable",
        "description": ""
    },
    "组件:components.closeinspector": {
        "prefix": "components.closeinspector",
        "body": "components.closeinspector",
        "description": ""
    },
    "组件:components.constructionsite_replica": {
        "prefix": "components.constructionsite_replica",
        "body": "components.constructionsite_replica",
        "description": ""
    },
    "组件:components.boatracecrew": {
        "prefix": "components.boatracecrew",
        "body": "components.boatracecrew",
        "description": ""
    },
    "组件:components.battleborn": {
        "prefix": "components.battleborn",
        "body": "components.battleborn",
        "description": ""
    },
    "组件:components.hudindicatable": {
        "prefix": "components.hudindicatable",
        "body": "components.hudindicatable",
        "description": ""
    },
    "组件:components.quaker": {
        "prefix": "components.quaker",
        "body": "components.quaker",
        "description": ""
    },
    "组件:components.fencerotator": {
        "prefix": "components.fencerotator",
        "body": "components.fencerotator",
        "description": ""
    },
    "组件:components.quagmire_recipeprices": {
        "prefix": "components.quagmire_recipeprices",
        "body": "components.quagmire_recipeprices",
        "description": ""
    },
    "组件:components.upgrademoduleowner": {
        "prefix": "components.upgrademoduleowner",
        "body": "components.upgrademoduleowner",
        "description": ""
    },
    "组件:components.playerinspectable": {
        "prefix": "components.playerinspectable",
        "body": "components.playerinspectable",
        "description": ""
    },
    "组件:components.edible可食用的": {
        "prefix": "components.edible",
        "body": "components.edible",
        "description": "可食用的"
    },
    "组件:components.boatrotator": {
        "prefix": "components.boatrotator",
        "body": "components.boatrotator",
        "description": ""
    },
    "组件:components.frograin": {
        "prefix": "components.frograin",
        "body": "components.frograin",
        "description": ""
    },
    "组件:components.ocean": {
        "prefix": "components.ocean",
        "body": "components.ocean",
        "description": ""
    },
    "组件:components.deployable可移植的": {
        "prefix": "components.deployable",
        "body": "components.deployable",
        "description": "可移植的"
    },
    "组件:components.lureplantspawner": {
        "prefix": "components.lureplantspawner",
        "body": "components.lureplantspawner",
        "description": ""
    },
    "组件:components.grogginess": {
        "prefix": "components.grogginess",
        "body": "components.grogginess",
        "description": ""
    },
    "组件:components.feasts": {
        "prefix": "components.feasts",
        "body": "components.feasts",
        "description": ""
    },
    "组件:components.unevenground": {
        "prefix": "components.unevenground",
        "body": "components.unevenground",
        "description": ""
    },
    "组件:components.questowner": {
        "prefix": "components.questowner",
        "body": "components.questowner",
        "description": ""
    },
    "组件:components.mine": {
        "prefix": "components.mine",
        "body": "components.mine",
        "description": ""
    },
    "组件:components.storytellingprop": {
        "prefix": "components.storytellingprop",
        "body": "components.storytellingprop",
        "description": ""
    },
    "组件:components.strongman": {
        "prefix": "components.strongman",
        "body": "components.strongman",
        "description": ""
    },
    "组件:components.highlight": {
        "prefix": "components.highlight",
        "body": "components.highlight",
        "description": ""
    },
    "组件:components.debuff": {
        "prefix": "components.debuff",
        "body": "components.debuff",
        "description": ""
    },
    "组件:components.repellent": {
        "prefix": "components.repellent",
        "body": "components.repellent",
        "description": ""
    },
    "组件:components.lavaarenamusic": {
        "prefix": "components.lavaarenamusic",
        "body": "components.lavaarenamusic",
        "description": ""
    },
    "组件:components.worldsettings": {
        "prefix": "components.worldsettings",
        "body": "components.worldsettings",
        "description": ""
    },
    "组件:components.shard_clock": {
        "prefix": "components.shard_clock",
        "body": "components.shard_clock",
        "description": ""
    },
    "组件:components.activatable": {
        "prefix": "components.activatable",
        "body": "components.activatable",
        "description": ""
    },
    "组件:components.oceanicemanager": {
        "prefix": "components.oceanicemanager",
        "body": "components.oceanicemanager",
        "description": ""
    },
    "组件:components.periodicspawner": {
        "prefix": "components.periodicspawner",
        "body": "components.periodicspawner",
        "description": ""
    },
    "组件:components.boatdrifter": {
        "prefix": "components.boatdrifter",
        "body": "components.boatdrifter",
        "description": ""
    },
    "组件:components.grue": {
        "prefix": "components.grue",
        "body": "components.grue",
        "description": ""
    },
    "组件:components.bosstargeter": {
        "prefix": "components.bosstargeter",
        "body": "components.bosstargeter",
        "description": ""
    },
    "组件:components.setbonus": {
        "prefix": "components.setbonus",
        "body": "components.setbonus",
        "description": ""
    },
    "组件:components.focalpoint": {
        "prefix": "components.focalpoint",
        "body": "components.focalpoint",
        "description": ""
    },
    "组件:components.plantable": {
        "prefix": "components.plantable",
        "body": "components.plantable",
        "description": ""
    },
    "组件:components.damagereflect": {
        "prefix": "components.damagereflect",
        "body": "components.damagereflect",
        "description": ""
    },
    "组件:components.steeringwheeluser": {
        "prefix": "components.steeringwheeluser",
        "body": "components.steeringwheeluser",
        "description": ""
    },
    "组件:components.spdamageutil": {
        "prefix": "components.spdamageutil",
        "body": "components.spdamageutil",
        "description": ""
    },
    "组件:components.autoterraformer": {
        "prefix": "components.autoterraformer",
        "body": "components.autoterraformer",
        "description": ""
    },
    "组件:components.gym": {
        "prefix": "components.gym",
        "body": "components.gym",
        "description": ""
    },
    "组件:components.container_proxy": {
        "prefix": "components.container_proxy",
        "body": "components.container_proxy",
        "description": ""
    },
    "组件:components.highlightchild": {
        "prefix": "components.highlightchild",
        "body": "components.highlightchild",
        "description": ""
    },
    "组件:components.groomer": {
        "prefix": "components.groomer",
        "body": "components.groomer",
        "description": ""
    },
    "组件:components.simplemagicgrower": {
        "prefix": "components.simplemagicgrower",
        "body": "components.simplemagicgrower",
        "description": ""
    },
    "组件:components.furnituredecor": {
        "prefix": "components.furnituredecor",
        "body": "components.furnituredecor",
        "description": ""
    },
    "组件:components.worldreset": {
        "prefix": "components.worldreset",
        "body": "components.worldreset",
        "description": ""
    },
    "组件:components.slipperyfeettarget": {
        "prefix": "components.slipperyfeettarget",
        "body": "components.slipperyfeettarget",
        "description": ""
    },
    "组件:components.armor": {
        "prefix": "components.armor",
        "body": "components.armor",
        "description": ""
    },
    "组件:components.farmplantable": {
        "prefix": "components.farmplantable",
        "body": "components.farmplantable",
        "description": ""
    },
    "组件:components.watersource": {
        "prefix": "components.watersource",
        "body": "components.watersource",
        "description": ""
    },
    "组件:components.werebeast": {
        "prefix": "components.werebeast",
        "body": "components.werebeast",
        "description": ""
    },
    "组件:components.stageactor": {
        "prefix": "components.stageactor",
        "body": "components.stageactor",
        "description": ""
    },
    "组件:components.distancetracker": {
        "prefix": "components.distancetracker",
        "body": "components.distancetracker",
        "description": ""
    },
    "组件:components.hideout": {
        "prefix": "components.hideout",
        "body": "components.hideout",
        "description": ""
    },
    "组件:components.archivemanager": {
        "prefix": "components.archivemanager",
        "body": "components.archivemanager",
        "description": ""
    },
    "组件:components.forestdaywalkerspawner": {
        "prefix": "components.forestdaywalkerspawner",
        "body": "components.forestdaywalkerspawner",
        "description": ""
    },
    "组件:components.forgerepair": {
        "prefix": "components.forgerepair",
        "body": "components.forgerepair",
        "description": ""
    },
    "组件:components.burnable": {
        "prefix": "components.burnable",
        "body": "components.burnable",
        "description": ""
    },
    "组件:components.replayproxy": {
        "prefix": "components.replayproxy",
        "body": "components.replayproxy",
        "description": ""
    },
    "组件:components.fuelmaster": {
        "prefix": "components.fuelmaster",
        "body": "components.fuelmaster",
        "description": ""
    },
    "组件:components.stackable_replica": {
        "prefix": "components.stackable_replica",
        "body": "components.stackable_replica",
        "description": ""
    },
    "组件:components.updatelooper": {
        "prefix": "components.updatelooper",
        "body": "components.updatelooper",
        "description": ""
    },
    "组件:components.searchable": {
        "prefix": "components.searchable",
        "body": "components.searchable",
        "description": ""
    },
    "组件:components.sharkboimanagerhelper": {
        "prefix": "components.sharkboimanagerhelper",
        "body": "components.sharkboimanagerhelper",
        "description": ""
    },
    "组件:components.lighter": {
        "prefix": "components.lighter",
        "body": "components.lighter",
        "description": ""
    },
    "组件:components.equippable": {
        "prefix": "components.equippable",
        "body": "components.equippable",
        "description": ""
    },
    "组件:components.expertsailor": {
        "prefix": "components.expertsailor",
        "body": "components.expertsailor",
        "description": ""
    },
    "组件:components.diseaseable": {
        "prefix": "components.diseaseable",
        "body": "components.diseaseable",
        "description": ""
    },
    "组件:components.area_trigger": {
        "prefix": "components.area_trigger",
        "body": "components.area_trigger",
        "description": ""
    },
    "组件:components.minionspawner": {
        "prefix": "components.minionspawner",
        "body": "components.minionspawner",
        "description": ""
    },
    "组件:components.butterflyspawner": {
        "prefix": "components.butterflyspawner",
        "body": "components.butterflyspawner",
        "description": ""
    },
    "组件:components.quagmire_map": {
        "prefix": "components.quagmire_map",
        "body": "components.quagmire_map",
        "description": ""
    },
    "组件:components.moosespawner": {
        "prefix": "components.moosespawner",
        "body": "components.moosespawner",
        "description": ""
    },
    "组件:components.witherable": {
        "prefix": "components.witherable",
        "body": "components.witherable",
        "description": ""
    },
    "组件:components.aoespell": {
        "prefix": "components.aoespell",
        "body": "components.aoespell",
        "description": ""
    },
    "组件:components.kitcoon": {
        "prefix": "components.kitcoon",
        "body": "components.kitcoon",
        "description": ""
    },
    "组件:components.lighttweener": {
        "prefix": "components.lighttweener",
        "body": "components.lighttweener",
        "description": ""
    },
    "组件:components.aoeweapon_lunge": {
        "prefix": "components.aoeweapon_lunge",
        "body": "components.aoeweapon_lunge",
        "description": ""
    },
    "组件:components.nightlightmanager": {
        "prefix": "components.nightlightmanager",
        "body": "components.nightlightmanager",
        "description": ""
    },
    "组件:components.carnivalgameitem": {
        "prefix": "components.carnivalgameitem",
        "body": "components.carnivalgameitem",
        "description": ""
    },
    "组件:components.stunnable": {
        "prefix": "components.stunnable",
        "body": "components.stunnable",
        "description": ""
    },
    "组件:components.farmtiller": {
        "prefix": "components.farmtiller",
        "body": "components.farmtiller",
        "description": ""
    },
    "组件:components.dataanalyzer": {
        "prefix": "components.dataanalyzer",
        "body": "components.dataanalyzer",
        "description": ""
    },
    "组件:components.playbill": {
        "prefix": "components.playbill",
        "body": "components.playbill",
        "description": ""
    },
    "组件:components.bathbombable": {
        "prefix": "components.bathbombable",
        "body": "components.bathbombable",
        "description": ""
    },
    "组件:components.forestpetrification": {
        "prefix": "components.forestpetrification",
        "body": "components.forestpetrification",
        "description": ""
    },
    "组件:components.playercontroller": {
        "prefix": "components.playercontroller",
        "body": "components.playercontroller",
        "description": ""
    },
    "组件:components.weather": {
        "prefix": "components.weather",
        "body": "components.weather",
        "description": ""
    },
    "组件:components.playermetrics": {
        "prefix": "components.playermetrics",
        "body": "components.playermetrics",
        "description": ""
    },
    "组件:components.dryer": {
        "prefix": "components.dryer",
        "body": "components.dryer",
        "description": ""
    },
    "组件:components.acidinfusible": {
        "prefix": "components.acidinfusible",
        "body": "components.acidinfusible",
        "description": ""
    },
    "组件:components.stretcher": {
        "prefix": "components.stretcher",
        "body": "components.stretcher",
        "description": ""
    },
    "组件:components.fishingrod": {
        "prefix": "components.fishingrod",
        "body": "components.fishingrod",
        "description": ""
    },
    "组件:components.boatdrag": {
        "prefix": "components.boatdrag",
        "body": "components.boatdrag",
        "description": ""
    },
    "组件:components.lootdropper": {
        "prefix": "components.lootdropper",
        "body": "components.lootdropper",
        "description": ""
    },
    "组件:components.clock": {
        "prefix": "components.clock",
        "body": "components.clock",
        "description": ""
    },
    "组件:components.inspectable": {
        "prefix": "components.inspectable",
        "body": "components.inspectable",
        "description": ""
    },
    "组件:components.flotationdevice": {
        "prefix": "components.flotationdevice",
        "body": "components.flotationdevice",
        "description": ""
    },
    "组件:components.amorphous": {
        "prefix": "components.amorphous",
        "body": "components.amorphous",
        "description": ""
    },
    "组件:components.herdmember": {
        "prefix": "components.herdmember",
        "body": "components.herdmember",
        "description": ""
    },
    "组件:components.moonstormmanager": {
        "prefix": "components.moonstormmanager",
        "body": "components.moonstormmanager",
        "description": ""
    },
    "组件:components.playervoter": {
        "prefix": "components.playervoter",
        "body": "components.playervoter",
        "description": ""
    },
    "组件:components.carnivalgamefeedable": {
        "prefix": "components.carnivalgamefeedable",
        "body": "components.carnivalgamefeedable",
        "description": ""
    },
    "组件:components.ambientsound": {
        "prefix": "components.ambientsound",
        "body": "components.ambientsound",
        "description": ""
    },
    "组件:components.carnivalhostsummon": {
        "prefix": "components.carnivalhostsummon",
        "body": "components.carnivalhostsummon",
        "description": ""
    },
    "组件:components.carnivalevent": {
        "prefix": "components.carnivalevent",
        "body": "components.carnivalevent",
        "description": ""
    },
    "组件:components.ghostlybond": {
        "prefix": "components.ghostlybond",
        "body": "components.ghostlybond",
        "description": ""
    },
    "组件:components.crittertraits": {
        "prefix": "components.crittertraits",
        "body": "components.crittertraits",
        "description": ""
    },
    "组件:components.amphibiouscreature": {
        "prefix": "components.amphibiouscreature",
        "body": "components.amphibiouscreature",
        "description": ""
    },
    "组件:components.finiteuses": {
        "prefix": "components.finiteuses",
        "body": "components.finiteuses",
        "description": ""
    },
    "组件:components.sisturnregistry": {
        "prefix": "components.sisturnregistry",
        "body": "components.sisturnregistry",
        "description": ""
    },
    "组件:components.boatmagnet": {
        "prefix": "components.boatmagnet",
        "body": "components.boatmagnet",
        "description": ""
    },
    "组件:components.bloomness": {
        "prefix": "components.bloomness",
        "body": "components.bloomness",
        "description": ""
    },
    "组件:components.halloweenmoonmutable": {
        "prefix": "components.halloweenmoonmutable",
        "body": "components.halloweenmoonmutable",
        "description": ""
    },
    "组件:components.stackable": {
        "prefix": "components.stackable",
        "body": "components.stackable",
        "description": ""
    },
    "组件:components.seasons": {
        "prefix": "components.seasons",
        "body": "components.seasons",
        "description": ""
    },
    "组件:components.groundpounder": {
        "prefix": "components.groundpounder",
        "body": "components.groundpounder",
        "description": ""
    },
    "组件:components.mermcandidate": {
        "prefix": "components.mermcandidate",
        "body": "components.mermcandidate",
        "description": ""
    },
    "组件:components.beargerspawner": {
        "prefix": "components.beargerspawner",
        "body": "components.beargerspawner",
        "description": ""
    },
    "组件:components.firefx": {
        "prefix": "components.firefx",
        "body": "components.firefx",
        "description": ""
    },
    "组件:components.shop": {
        "prefix": "components.shop",
        "body": "components.shop",
        "description": ""
    },
    "组件:components.steeringwheel": {
        "prefix": "components.steeringwheel",
        "body": "components.steeringwheel",
        "description": ""
    },
    "组件:components.foodaffinity": {
        "prefix": "components.foodaffinity",
        "body": "components.foodaffinity",
        "description": ""
    },
    "组件:components.aura": {
        "prefix": "components.aura",
        "body": "components.aura",
        "description": ""
    },
    "组件:components.upgrademodule": {
        "prefix": "components.upgrademodule",
        "body": "components.upgrademodule",
        "description": ""
    },
    "组件:components.houndedtarget": {
        "prefix": "components.houndedtarget",
        "body": "components.houndedtarget",
        "description": ""
    },
    "组件:components.moisture": {
        "prefix": "components.moisture",
        "body": "components.moisture",
        "description": ""
    },
    "组件:components.forestresourcespawner": {
        "prefix": "components.forestresourcespawner",
        "body": "components.forestresourcespawner",
        "description": ""
    },
    "组件:components.hudindicatablemanager": {
        "prefix": "components.hudindicatablemanager",
        "body": "components.hudindicatablemanager",
        "description": ""
    },
    "组件:components.preservative": {
        "prefix": "components.preservative",
        "body": "components.preservative",
        "description": ""
    },
    "组件:components.uniqueid": {
        "prefix": "components.uniqueid",
        "body": "components.uniqueid",
        "description": ""
    },
    "组件:components.ghostlyelixirable": {
        "prefix": "components.ghostlyelixirable",
        "body": "components.ghostlyelixirable",
        "description": ""
    },
    "组件:components.petleash": {
        "prefix": "components.petleash",
        "body": "components.petleash",
        "description": ""
    },
    "组件:components.unwrappable": {
        "prefix": "components.unwrappable",
        "body": "components.unwrappable",
        "description": ""
    },
    "组件:components.temperature": {
        "prefix": "components.temperature",
        "body": "components.temperature",
        "description": ""
    },
    "组件:components.dynamicmusic": {
        "prefix": "components.dynamicmusic",
        "body": "components.dynamicmusic",
        "description": ""
    },
    "组件:components.trap": {
        "prefix": "components.trap",
        "body": "components.trap",
        "description": ""
    },
    "组件:components.vase": {
        "prefix": "components.vase",
        "body": "components.vase",
        "description": ""
    },
    "组件:components.locomotor": {
        "prefix": "components.locomotor",
        "body": "components.locomotor",
        "description": ""
    },
    "组件:components.piratespawner": {
        "prefix": "components.piratespawner",
        "body": "components.piratespawner",
        "description": ""
    },
    "组件:components.sharklistener": {
        "prefix": "components.sharklistener",
        "body": "components.sharklistener",
        "description": ""
    },
    "组件:components.constructionbuilderuidata": {
        "prefix": "components.constructionbuilderuidata",
        "body": "components.constructionbuilderuidata",
        "description": ""
    },
    "组件:components.regrowthmanager": {
        "prefix": "components.regrowthmanager",
        "body": "components.regrowthmanager",
        "description": ""
    },
    "组件:components.healthtrigger": {
        "prefix": "components.healthtrigger",
        "body": "components.healthtrigger",
        "description": ""
    },
    "组件:components.yotd_raceprizemanager": {
        "prefix": "components.yotd_raceprizemanager",
        "body": "components.yotd_raceprizemanager",
        "description": ""
    },
    "组件:components.blowinwind": {
        "prefix": "components.blowinwind",
        "body": "components.blowinwind",
        "description": ""
    },
    "组件:components.fader": {
        "prefix": "components.fader",
        "body": "components.fader",
        "description": ""
    },
    "组件:components.yotc_racestart": {
        "prefix": "components.yotc_racestart",
        "body": "components.yotc_racestart",
        "description": ""
    },
    "组件:components.yotc_racecompetitor": {
        "prefix": "components.yotc_racecompetitor",
        "body": "components.yotc_racecompetitor",
        "description": ""
    },
    "组件:components.bedazzlement": {
        "prefix": "components.bedazzlement",
        "body": "components.bedazzlement",
        "description": ""
    },
    "组件:components.shadowhandspawner": {
        "prefix": "components.shadowhandspawner",
        "body": "components.shadowhandspawner",
        "description": ""
    },
    "组件:components.slipperyfeet": {
        "prefix": "components.slipperyfeet",
        "body": "components.slipperyfeet",
        "description": ""
    },
    "组件:components.inspectaclesparticipant": {
        "prefix": "components.inspectaclesparticipant",
        "body": "components.inspectaclesparticipant",
        "description": ""
    },
    "组件:components.klaussackspawner": {
        "prefix": "components.klaussackspawner",
        "body": "components.klaussackspawner",
        "description": ""
    },
    "组件:components.guardian": {
        "prefix": "components.guardian",
        "body": "components.guardian",
        "description": ""
    },
    "组件:components.digester": {
        "prefix": "components.digester",
        "body": "components.digester",
        "description": ""
    },
    "组件:components.friendlevels": {
        "prefix": "components.friendlevels",
        "body": "components.friendlevels",
        "description": ""
    },
    "组件:components.yotb_stager": {
        "prefix": "components.yotb_stager",
        "body": "components.yotb_stager",
        "description": ""
    },
    "组件:components.yotb_stagemanager": {
        "prefix": "components.yotb_stagemanager",
        "body": "components.yotb_stagemanager",
        "description": ""
    },
    "组件:components.yotb_skinunlocker": {
        "prefix": "components.yotb_skinunlocker",
        "body": "components.yotb_skinunlocker",
        "description": ""
    },
    "组件:components.frostybreather": {
        "prefix": "components.frostybreather",
        "body": "components.frostybreather",
        "description": ""
    },
    "组件:components.electricattacks": {
        "prefix": "components.electricattacks",
        "body": "components.electricattacks",
        "description": ""
    },
    "组件:components.yotb_sewer": {
        "prefix": "components.yotb_sewer",
        "body": "components.yotb_sewer",
        "description": ""
    },
    "组件:components.writeable_replica": {
        "prefix": "components.writeable_replica",
        "body": "components.writeable_replica",
        "description": ""
    },
    "组件:components.writeable": {
        "prefix": "components.writeable",
        "body": "components.writeable",
        "description": ""
    },
    "组件:components.quagmire_music": {
        "prefix": "components.quagmire_music",
        "body": "components.quagmire_music",
        "description": ""
    },
    "组件:components.worldtemperature": {
        "prefix": "components.worldtemperature",
        "body": "components.worldtemperature",
        "description": ""
    },
    "组件:components.worldstate": {
        "prefix": "components.worldstate",
        "body": "components.worldstate",
        "description": ""
    },
    "组件:components.bundler": {
        "prefix": "components.bundler",
        "body": "components.bundler",
        "description": ""
    },
    "组件:components.shard_autosaver": {
        "prefix": "components.shard_autosaver",
        "body": "components.shard_autosaver",
        "description": ""
    },
    "组件:components.worldsettingstimer": {
        "prefix": "components.worldsettingstimer",
        "body": "components.worldsettingstimer",
        "description": ""
    },
    "组件:components.lunarriftmutationsmanager": {
        "prefix": "components.lunarriftmutationsmanager",
        "body": "components.lunarriftmutationsmanager",
        "description": ""
    },
    "组件:components.maprevealable": {
        "prefix": "components.maprevealable",
        "body": "components.maprevealable",
        "description": ""
    },
    "组件:components.balloonmaker": {
        "prefix": "components.balloonmaker",
        "body": "components.balloonmaker",
        "description": ""
    },
    "组件:components.deerherdspawner": {
        "prefix": "components.deerherdspawner",
        "body": "components.deerherdspawner",
        "description": ""
    },
    "组件:components.magician": {
        "prefix": "components.magician",
        "body": "components.magician",
        "description": ""
    },
    "组件:components.growable": {
        "prefix": "components.growable",
        "body": "components.growable",
        "description": ""
    },
    "组件:components.worldoverseer": {
        "prefix": "components.worldoverseer",
        "body": "components.worldoverseer",
        "description": ""
    },
    "组件:components.strafer": {
        "prefix": "components.strafer",
        "body": "components.strafer",
        "description": ""
    },
    "组件:components.lavaarenamobtracker": {
        "prefix": "components.lavaarenamobtracker",
        "body": "components.lavaarenamobtracker",
        "description": ""
    },
    "组件:components.recipescanner": {
        "prefix": "components.recipescanner",
        "body": "components.recipescanner",
        "description": ""
    },
    "组件:components.efficientuser": {
        "prefix": "components.efficientuser",
        "body": "components.efficientuser",
        "description": ""
    },
    "组件:components.hull": {
        "prefix": "components.hull",
        "body": "components.hull",
        "description": ""
    },
    "组件:components.named": {
        "prefix": "components.named",
        "body": "components.named",
        "description": ""
    },
    "组件:components.sleepingbaguser": {
        "prefix": "components.sleepingbaguser",
        "body": "components.sleepingbaguser",
        "description": ""
    },
    "组件:components.wisecracker": {
        "prefix": "components.wisecracker",
        "body": "components.wisecracker",
        "description": ""
    },
    "组件:components.miasmawatcher": {
        "prefix": "components.miasmawatcher",
        "body": "components.miasmawatcher",
        "description": ""
    },
    "组件:components.hudindicatorwatcher": {
        "prefix": "components.hudindicatorwatcher",
        "body": "components.hudindicatorwatcher",
        "description": ""
    },
    "组件:components.fishingrod_replica": {
        "prefix": "components.fishingrod_replica",
        "body": "components.fishingrod_replica",
        "description": ""
    },
    "组件:components.wintertreegiftable": {
        "prefix": "components.wintertreegiftable",
        "body": "components.wintertreegiftable",
        "description": ""
    },
    "组件:components.wintersfeasttable": {
        "prefix": "components.wintersfeasttable",
        "body": "components.wintersfeasttable",
        "description": ""
    },
    "组件:components.trader": {
        "prefix": "components.trader",
        "body": "components.trader",
        "description": ""
    },
    "组件:components.winonateleportpadmanager": {
        "prefix": "components.winonateleportpadmanager",
        "body": "components.winonateleportpadmanager",
        "description": ""
    },
    "组件:components.named_replica": {
        "prefix": "components.named_replica",
        "body": "components.named_replica",
        "description": ""
    },
    "组件:components.winchtarget": {
        "prefix": "components.winchtarget",
        "body": "components.winchtarget",
        "description": ""
    },
    "组件:components.summoningitem": {
        "prefix": "components.summoningitem",
        "body": "components.summoningitem",
        "description": ""
    },
    "组件:components.simplebook": {
        "prefix": "components.simplebook",
        "body": "components.simplebook",
        "description": ""
    },
    "组件:components.townportalregistry": {
        "prefix": "components.townportalregistry",
        "body": "components.townportalregistry",
        "description": ""
    },
    "组件:components.saltlicker": {
        "prefix": "components.saltlicker",
        "body": "components.saltlicker",
        "description": ""
    },
    "组件:components.nightmareclock": {
        "prefix": "components.nightmareclock",
        "body": "components.nightmareclock",
        "description": ""
    },
    "组件:components.wereeater": {
        "prefix": "components.wereeater",
        "body": "components.wereeater",
        "description": ""
    },
    "组件:components.weighable": {
        "prefix": "components.weighable",
        "body": "components.weighable",
        "description": ""
    },
    "组件:components.shadowlevel": {
        "prefix": "components.shadowlevel",
        "body": "components.shadowlevel",
        "description": ""
    },
    "组件:components.channelcastable": {
        "prefix": "components.channelcastable",
        "body": "components.channelcastable",
        "description": ""
    },
    "组件:components.occupier": {
        "prefix": "components.occupier",
        "body": "components.occupier",
        "description": ""
    },
    "组件:components.wavemanager": {
        "prefix": "components.wavemanager",
        "body": "components.wavemanager",
        "description": ""
    },
    "组件:components.walkingplankuser": {
        "prefix": "components.walkingplankuser",
        "body": "components.walkingplankuser",
        "description": ""
    },
    "组件:components.targettracker": {
        "prefix": "components.targettracker",
        "body": "components.targettracker",
        "description": ""
    },
    "组件:components.kitcoonden": {
        "prefix": "components.kitcoonden",
        "body": "components.kitcoonden",
        "description": ""
    },
    "组件:components.waterphysics": {
        "prefix": "components.waterphysics",
        "body": "components.waterphysics",
        "description": ""
    },
    "组件:components.wardrobe": {
        "prefix": "components.wardrobe",
        "body": "components.wardrobe",
        "description": ""
    },
    "组件:components.waterproofer": {
        "prefix": "components.waterproofer",
        "body": "components.waterproofer",
        "description": ""
    },
    "组件:components.walkingplank": {
        "prefix": "components.walkingplank",
        "body": "components.walkingplank",
        "description": ""
    },
    "组件:components.lavaarenaeventstate": {
        "prefix": "components.lavaarenaeventstate",
        "body": "components.lavaarenaeventstate",
        "description": ""
    },
    "组件:components.desolationspawner": {
        "prefix": "components.desolationspawner",
        "body": "components.desolationspawner",
        "description": ""
    },
    "组件:components.walkableplatformplayer": {
        "prefix": "components.walkableplatformplayer",
        "body": "components.walkableplatformplayer",
        "description": ""
    },
    "组件:components.revivablecorpse": {
        "prefix": "components.revivablecorpse",
        "body": "components.revivablecorpse",
        "description": ""
    },
    "组件:components.mapspotrevealer": {
        "prefix": "components.mapspotrevealer",
        "body": "components.mapspotrevealer",
        "description": ""
    },
    "组件:components.daywalkerspawner": {
        "prefix": "components.daywalkerspawner",
        "body": "components.daywalkerspawner",
        "description": ""
    },
    "组件:components.birdattractor": {
        "prefix": "components.birdattractor",
        "body": "components.birdattractor",
        "description": ""
    },
    "组件:components.sinkholespawner": {
        "prefix": "components.sinkholespawner",
        "body": "components.sinkholespawner",
        "description": ""
    },
    "组件:components.wagpunk_manager": {
        "prefix": "components.wagpunk_manager",
        "body": "components.wagpunk_manager",
        "description": ""
    },
    "组件:components.deciduoustreeupdater": {
        "prefix": "components.deciduoustreeupdater",
        "body": "components.deciduoustreeupdater",
        "description": ""
    },
    "组件:components.playbill_lecturn": {
        "prefix": "components.playbill_lecturn",
        "body": "components.playbill_lecturn",
        "description": ""
    },
    "组件:components.vinebridgemanager": {
        "prefix": "components.vinebridgemanager",
        "body": "components.vinebridgemanager",
        "description": ""
    },
    "组件:components.murderable": {
        "prefix": "components.murderable",
        "body": "components.murderable",
        "description": ""
    },
    "组件:components.vasedecoration": {
        "prefix": "components.vasedecoration",
        "body": "components.vasedecoration",
        "description": ""
    },
    "组件:components.repairable": {
        "prefix": "components.repairable",
        "body": "components.repairable",
        "description": ""
    },
    "组件:components.vanish_on_sleep": {
        "prefix": "components.vanish_on_sleep",
        "body": "components.vanish_on_sleep",
        "description": ""
    },
    "组件:components.useabletargeteditem": {
        "prefix": "components.useabletargeteditem",
        "body": "components.useabletargeteditem",
        "description": ""
    },
    "组件:components.debugger": {
        "prefix": "components.debugger",
        "body": "components.debugger",
        "description": ""
    },
    "组件:components.upgrader": {
        "prefix": "components.upgrader",
        "body": "components.upgrader",
        "description": ""
    },
    "组件:components.lock": {
        "prefix": "components.lock",
        "body": "components.lock",
        "description": ""
    },
    "组件:components.preserver": {
        "prefix": "components.preserver",
        "body": "components.preserver",
        "description": ""
    },
    "组件:components.roseinspectable": {
        "prefix": "components.roseinspectable",
        "body": "components.roseinspectable",
        "description": ""
    },
    "组件:components.upgrademoduleremover": {
        "prefix": "components.upgrademoduleremover",
        "body": "components.upgrademoduleremover",
        "description": ""
    },
    "组件:components.moonstorms": {
        "prefix": "components.moonstorms",
        "body": "components.moonstorms",
        "description": ""
    },
    "组件:components.upgradeable": {
        "prefix": "components.upgradeable",
        "body": "components.upgradeable",
        "description": ""
    },
    "组件:components.pethealthbar": {
        "prefix": "components.pethealthbar",
        "body": "components.pethealthbar",
        "description": ""
    },
    "组件:components.fueler": {
        "prefix": "components.fueler",
        "body": "components.fueler",
        "description": ""
    },
    "组件:components.penguinspawner": {
        "prefix": "components.penguinspawner",
        "body": "components.penguinspawner",
        "description": ""
    },
    "组件:components.uianim": {
        "prefix": "components.uianim",
        "body": "components.uianim",
        "description": ""
    },
    "组件:components.boatleak": {
        "prefix": "components.boatleak",
        "body": "components.boatleak",
        "description": ""
    },
    "组件:components.fuel是燃料": {
        "prefix": "components.fuel",
        "body": "components.fuel",
        "description": "是燃料"
    },
    "组件:components.trophyscale": {
        "prefix": "components.trophyscale",
        "body": "components.trophyscale",
        "description": ""
    },
    "组件:components.tributable": {
        "prefix": "components.tributable",
        "body": "components.tributable",
        "description": ""
    },
    "组件:components.transparentonsanity": {
        "prefix": "components.transparentonsanity",
        "body": "components.transparentonsanity",
        "description": ""
    },
    "组件:components.transformer": {
        "prefix": "components.transformer",
        "body": "components.transformer",
        "description": ""
    },
    "组件:components.birdspawner": {
        "prefix": "components.birdspawner",
        "body": "components.birdspawner",
        "description": ""
    },
    "组件:components.tradable": {
        "prefix": "components.tradable",
        "body": "components.tradable",
        "description": ""
    },
    "组件:components.batspawner": {
        "prefix": "components.batspawner",
        "body": "components.batspawner",
        "description": ""
    },
    "组件:components.touchstonetracker": {
        "prefix": "components.touchstonetracker",
        "body": "components.touchstonetracker",
        "description": ""
    },
    "组件:components.tool": {
        "prefix": "components.tool",
        "body": "components.tool",
        "description": ""
    },
    "组件:components.shard_worldvoter": {
        "prefix": "components.shard_worldvoter",
        "body": "components.shard_worldvoter",
        "description": ""
    },
    "组件:components.cookiecutterdrill": {
        "prefix": "components.cookiecutterdrill",
        "body": "components.cookiecutterdrill",
        "description": ""
    },
    "组件:components.toggleableitem": {
        "prefix": "components.toggleableitem",
        "body": "components.toggleableitem",
        "description": ""
    },
    "组件:components.despawnfader": {
        "prefix": "components.despawnfader",
        "body": "components.despawnfader",
        "description": ""
    },
    "组件:components.toadstoolspawner": {
        "prefix": "components.toadstoolspawner",
        "body": "components.toadstoolspawner",
        "description": ""
    },
    "组件:components.shard_mermkingwatcher": {
        "prefix": "components.shard_mermkingwatcher",
        "body": "components.shard_mermkingwatcher",
        "description": ""
    },
    "组件:components.timer": {
        "prefix": "components.timer",
        "body": "components.timer",
        "description": ""
    },
    "组件:components.hatchable": {
        "prefix": "components.hatchable",
        "body": "components.hatchable",
        "description": ""
    },
    "组件:components.singingshelltrigger": {
        "prefix": "components.singingshelltrigger",
        "body": "components.singingshelltrigger",
        "description": ""
    },
    "组件:components.groundshadowhandler": {
        "prefix": "components.groundshadowhandler",
        "body": "components.groundshadowhandler",
        "description": ""
    },
    "组件:components.sizetweener": {
        "prefix": "components.sizetweener",
        "body": "components.sizetweener",
        "description": ""
    },
    "组件:components.shadowsubmissive": {
        "prefix": "components.shadowsubmissive",
        "body": "components.shadowsubmissive",
        "description": ""
    },
    "组件:components.foodmemory": {
        "prefix": "components.foodmemory",
        "body": "components.foodmemory",
        "description": ""
    },
    "组件:components.spectatorcorpse": {
        "prefix": "components.spectatorcorpse",
        "body": "components.spectatorcorpse",
        "description": ""
    },
    "组件:components.tackler": {
        "prefix": "components.tackler",
        "body": "components.tackler",
        "description": ""
    },
    "组件:components.teleportedoverride": {
        "prefix": "components.teleportedoverride",
        "body": "components.teleportedoverride",
        "description": ""
    },
    "组件:components.teamleader": {
        "prefix": "components.teamleader",
        "body": "components.teamleader",
        "description": ""
    },
    "组件:components.retrofitforestmap_anr": {
        "prefix": "components.retrofitforestmap_anr",
        "body": "components.retrofitforestmap_anr",
        "description": ""
    },
    "组件:components.colourcube": {
        "prefix": "components.colourcube",
        "body": "components.colourcube",
        "description": ""
    },
    "组件:components.teacher": {
        "prefix": "components.teacher",
        "body": "components.teacher",
        "description": ""
    },
    "组件:components.talker": {
        "prefix": "components.talker",
        "body": "components.talker",
        "description": ""
    },
    "组件:components.skilltreeupdater": {
        "prefix": "components.skilltreeupdater",
        "body": "components.skilltreeupdater",
        "description": ""
    },
    "组件:components.chessunlocks": {
        "prefix": "components.chessunlocks",
        "body": "components.chessunlocks",
        "description": ""
    },
    "组件:components.talkable": {
        "prefix": "components.talkable",
        "body": "components.talkable",
        "description": ""
    },
    "组件:components.prophider": {
        "prefix": "components.prophider",
        "body": "components.prophider",
        "description": ""
    },
    "组件:components.shatterfx": {
        "prefix": "components.shatterfx",
        "body": "components.shatterfx",
        "description": ""
    },
    "组件:components.tacklesketch": {
        "prefix": "components.tacklesketch",
        "body": "components.tacklesketch",
        "description": ""
    },
    "组件:components.temperatureoverrider": {
        "prefix": "components.temperatureoverrider",
        "body": "components.temperatureoverrider",
        "description": ""
    },
    "组件:components.fueled可被补充燃料的": {
        "prefix": "components.fueled",
        "body": "components.fueled",
        "description": "可被补充燃料的"
    },
    "组件:components.symbolswapdata": {
        "prefix": "components.symbolswapdata",
        "body": "components.symbolswapdata",
        "description": ""
    },
    "组件:components.winch": {
        "prefix": "components.winch",
        "body": "components.winch",
        "description": ""
    },
    "组件:components.stuckdetection": {
        "prefix": "components.stuckdetection",
        "body": "components.stuckdetection",
        "description": ""
    },
    "组件:components.worldcharacterselectlobby": {
        "prefix": "components.worldcharacterselectlobby",
        "body": "components.worldcharacterselectlobby",
        "description": ""
    },
    "组件:components.canopylightrays": {
        "prefix": "components.canopylightrays",
        "body": "components.canopylightrays",
        "description": ""
    },
    "组件:components.storyteller": {
        "prefix": "components.storyteller",
        "body": "components.storyteller",
        "description": ""
    },
    "组件:components.stormwatcher": {
        "prefix": "components.stormwatcher",
        "body": "components.stormwatcher",
        "description": ""
    },
    "组件:components.stewer": {
        "prefix": "components.stewer",
        "body": "components.stewer",
        "description": ""
    },
    "组件:components.spellbookcooldowns": {
        "prefix": "components.spellbookcooldowns",
        "body": "components.spellbookcooldowns",
        "description": ""
    },
    "组件:components.squidspawner": {
        "prefix": "components.squidspawner",
        "body": "components.squidspawner",
        "description": ""
    },
    "组件:components.squadmember": {
        "prefix": "components.squadmember",
        "body": "components.squadmember",
        "description": ""
    },
    "组件:components.entitytracker": {
        "prefix": "components.entitytracker",
        "body": "components.entitytracker",
        "description": ""
    },
    "组件:components.oceanfishingrod_replica": {
        "prefix": "components.oceanfishingrod_replica",
        "body": "components.oceanfishingrod_replica",
        "description": ""
    },
    "组件:components.spellcaster": {
        "prefix": "components.spellcaster",
        "body": "components.spellcaster",
        "description": ""
    },
    "组件:components.staffsanity": {
        "prefix": "components.staffsanity",
        "body": "components.staffsanity",
        "description": ""
    },
    "组件:components.roseinspectableuser": {
        "prefix": "components.roseinspectableuser",
        "body": "components.roseinspectableuser",
        "description": ""
    },
    "组件:components.map": {
        "prefix": "components.map",
        "body": "components.map",
        "description": ""
    },
    "组件:components.crop": {
        "prefix": "components.crop",
        "body": "components.crop",
        "description": ""
    },
    "组件:components.cooker": {
        "prefix": "components.cooker",
        "body": "components.cooker",
        "description": ""
    },
    "组件:components.canopyshadows": {
        "prefix": "components.canopyshadows",
        "body": "components.canopyshadows",
        "description": ""
    },
    "组件:components.specialeventsetup": {
        "prefix": "components.specialeventsetup",
        "body": "components.specialeventsetup",
        "description": ""
    },
    "组件:components.spawnfader": {
        "prefix": "components.spawnfader",
        "body": "components.spawnfader",
        "description": ""
    },
    "组件:components.disappears": {
        "prefix": "components.disappears",
        "body": "components.disappears",
        "description": ""
    },
    "组件:components.souleater": {
        "prefix": "components.souleater",
        "body": "components.souleater",
        "description": ""
    },
    "组件:components.soul": {
        "prefix": "components.soul",
        "body": "components.soul",
        "description": ""
    },
    "组件:components.incrementalproducer": {
        "prefix": "components.incrementalproducer",
        "body": "components.incrementalproducer",
        "description": ""
    },
    "组件:components.worker": {
        "prefix": "components.worker",
        "body": "components.worker",
        "description": ""
    },
    "组件:components.sandstorms": {
        "prefix": "components.sandstorms",
        "body": "components.sandstorms",
        "description": ""
    },
    "组件:components.aoeweapon_leap": {
        "prefix": "components.aoeweapon_leap",
        "body": "components.aoeweapon_leap",
        "description": ""
    },
    "组件:components.machine": {
        "prefix": "components.machine",
        "body": "components.machine",
        "description": ""
    },
    "组件:components.sleepingbag": {
        "prefix": "components.sleepingbag",
        "body": "components.sleepingbag",
        "description": ""
    },
    "组件:components.shard_sinkholes": {
        "prefix": "components.shard_sinkholes",
        "body": "components.shard_sinkholes",
        "description": ""
    },
    "组件:components.researchpointconverter": {
        "prefix": "components.researchpointconverter",
        "body": "components.researchpointconverter",
        "description": ""
    },
    "组件:components.coach": {
        "prefix": "components.coach",
        "body": "components.coach",
        "description": ""
    },
    "组件:components.reader": {
        "prefix": "components.reader",
        "body": "components.reader",
        "description": ""
    },
    "组件:components.giftreceiver": {
        "prefix": "components.giftreceiver",
        "body": "components.giftreceiver",
        "description": ""
    },
    "组件:components.boattrailmover": {
        "prefix": "components.boattrailmover",
        "body": "components.boattrailmover",
        "description": ""
    },
    "组件:components.terraformer": {
        "prefix": "components.terraformer",
        "body": "components.terraformer",
        "description": ""
    },
    "组件:components.thief": {
        "prefix": "components.thief",
        "body": "components.thief",
        "description": ""
    },
    "组件:components.klaussacklock": {
        "prefix": "components.klaussacklock",
        "body": "components.klaussacklock",
        "description": ""
    },
    "组件:components.singingshellmanager": {
        "prefix": "components.singingshellmanager",
        "body": "components.singingshellmanager",
        "description": ""
    },
    "组件:components.sandstormwatcher": {
        "prefix": "components.sandstormwatcher",
        "body": "components.sandstormwatcher",
        "description": ""
    },
    "组件:components.useableitem": {
        "prefix": "components.useableitem",
        "body": "components.useableitem",
        "description": ""
    },
    "组件:components.sheltered_replica": {
        "prefix": "components.sheltered_replica",
        "body": "components.sheltered_replica",
        "description": ""
    },
    "组件:components.sheltered": {
        "prefix": "components.sheltered",
        "body": "components.sheltered",
        "description": ""
    },
    "组件:components.shelf": {
        "prefix": "components.shelf",
        "body": "components.shelf",
        "description": ""
    },
    "组件:components.boatring": {
        "prefix": "components.boatring",
        "body": "components.boatring",
        "description": ""
    },
    "组件:components.sanityaura": {
        "prefix": "components.sanityaura",
        "body": "components.sanityaura",
        "description": ""
    },
    "组件:components.shedder": {
        "prefix": "components.shedder",
        "body": "components.shedder",
        "description": ""
    },
    "组件:components.shaver": {
        "prefix": "components.shaver",
        "body": "components.shaver",
        "description": ""
    },
    "组件:components.sharkboimanager": {
        "prefix": "components.sharkboimanager",
        "body": "components.sharkboimanager",
        "description": ""
    },
    "组件:components.sleeper": {
        "prefix": "components.sleeper",
        "body": "components.sleeper",
        "description": ""
    },
    "组件:components.shard_daywalkerspawner": {
        "prefix": "components.shard_daywalkerspawner",
        "body": "components.shard_daywalkerspawner",
        "description": ""
    },
    "组件:components.wax": {
        "prefix": "components.wax",
        "body": "components.wax",
        "description": ""
    },
    "组件:components.sentientaxe": {
        "prefix": "components.sentientaxe",
        "body": "components.sentientaxe",
        "description": ""
    },
    "组件:components.seamlessplayerswapper": {
        "prefix": "components.seamlessplayerswapper",
        "body": "components.seamlessplayerswapper",
        "description": ""
    },
    "组件:components.moonstormlightningmanager": {
        "prefix": "components.moonstormlightningmanager",
        "body": "components.moonstormlightningmanager",
        "description": ""
    },
    "组件:components.scenariorunner": {
        "prefix": "components.scenariorunner",
        "body": "components.scenariorunner",
        "description": ""
    },
    "组件:components.playerspawner": {
        "prefix": "components.playerspawner",
        "body": "components.playerspawner",
        "description": ""
    },
    "组件:components.boatpatch": {
        "prefix": "components.boatpatch",
        "body": "components.boatpatch",
        "description": ""
    },
    "组件:components.quagmire_hangriness": {
        "prefix": "components.quagmire_hangriness",
        "body": "components.quagmire_hangriness",
        "description": ""
    },
    "组件:components.scaler": {
        "prefix": "components.scaler",
        "body": "components.scaler",
        "description": ""
    },
    "组件:components.savedscale": {
        "prefix": "components.savedscale",
        "body": "components.savedscale",
        "description": ""
    },
    "组件:components.grower": {
        "prefix": "components.grower",
        "body": "components.grower",
        "description": ""
    },
    "组件:components.sanity_replica": {
        "prefix": "components.sanity_replica",
        "body": "components.sanity_replica",
        "description": ""
    },
    "组件:components.riftspawner": {
        "prefix": "components.riftspawner",
        "body": "components.riftspawner",
        "description": ""
    },
    "组件:components.saddler": {
        "prefix": "components.saddler",
        "body": "components.saddler",
        "description": ""
    },
    "组件:components.acidbatwavemanager": {
        "prefix": "components.acidbatwavemanager",
        "body": "components.acidbatwavemanager",
        "description": ""
    },
    "组件:components.poppable": {
        "prefix": "components.poppable",
        "body": "components.poppable",
        "description": ""
    },
    "组件:components.brightmarespawner": {
        "prefix": "components.brightmarespawner",
        "body": "components.brightmarespawner",
        "description": ""
    },
    "组件:components.spell": {
        "prefix": "components.spell",
        "body": "components.spell",
        "description": ""
    },
    "组件:components.areaaware": {
        "prefix": "components.areaaware",
        "body": "components.areaaware",
        "description": ""
    },
    "组件:components.formationleader": {
        "prefix": "components.formationleader",
        "body": "components.formationleader",
        "description": ""
    },
    "组件:components.fishschool": {
        "prefix": "components.fishschool",
        "body": "components.fishschool",
        "description": ""
    },
    "组件:components.sanity": {
        "prefix": "components.sanity",
        "body": "components.sanity",
        "description": ""
    },
    "组件:components.ambientlighting": {
        "prefix": "components.ambientlighting",
        "body": "components.ambientlighting",
        "description": ""
    },
    "组件:components.inkable": {
        "prefix": "components.inkable",
        "body": "components.inkable",
        "description": ""
    },
    "组件:components.possessedaxe": {
        "prefix": "components.possessedaxe",
        "body": "components.possessedaxe",
        "description": ""
    },
    "组件:components.rideable": {
        "prefix": "components.rideable",
        "body": "components.rideable",
        "description": ""
    },
    "组件:components.reticule": {
        "prefix": "components.reticule",
        "body": "components.reticule",
        "description": ""
    },
    "组件:components.resistance": {
        "prefix": "components.resistance",
        "body": "components.resistance",
        "description": ""
    },
    "组件:components.freezefx": {
        "prefix": "components.freezefx",
        "body": "components.freezefx",
        "description": ""
    },
    "组件:components.raindomewatcher": {
        "prefix": "components.raindomewatcher",
        "body": "components.raindomewatcher",
        "description": ""
    },
    "组件:components.recipestockpile": {
        "prefix": "components.recipestockpile",
        "body": "components.recipestockpile",
        "description": ""
    },
    "组件:components.shard_worldreset": {
        "prefix": "components.shard_worldreset",
        "body": "components.shard_worldreset",
        "description": ""
    },
    "组件:components.rainimmunity": {
        "prefix": "components.rainimmunity",
        "body": "components.rainimmunity",
        "description": ""
    },
    "组件:components.repairer": {
        "prefix": "components.repairer",
        "body": "components.repairer",
        "description": ""
    },
    "组件:components.boatrace_proximitychecker": {
        "prefix": "components.boatrace_proximitychecker",
        "body": "components.boatrace_proximitychecker",
        "description": ""
    },
    "组件:components.quagmire_recipebook": {
        "prefix": "components.quagmire_recipebook",
        "body": "components.quagmire_recipebook",
        "description": ""
    },
    "组件:components.worldvoter": {
        "prefix": "components.worldvoter",
        "body": "components.worldvoter",
        "description": ""
    },
    "组件:components.propagator": {
        "prefix": "components.propagator",
        "body": "components.propagator",
        "description": ""
    },
    "组件:components.projectile": {
        "prefix": "components.projectile",
        "body": "components.projectile",
        "description": ""
    },
    "组件:components.projectedeffects": {
        "prefix": "components.projectedeffects",
        "body": "components.projectedeffects",
        "description": ""
    },
    "组件:components.powerload": {
        "prefix": "components.powerload",
        "body": "components.powerload",
        "description": ""
    },
    "组件:components.rider": {
        "prefix": "components.rider",
        "body": "components.rider",
        "description": ""
    },
    "组件:components.positionalwarp": {
        "prefix": "components.positionalwarp",
        "body": "components.positionalwarp",
        "description": ""
    },
    "组件:components.hideandseekhidingspot": {
        "prefix": "components.hideandseekhidingspot",
        "body": "components.hideandseekhidingspot",
        "description": ""
    },
    "组件:components.portablestructure": {
        "prefix": "components.portablestructure",
        "body": "components.portablestructure",
        "description": ""
    },
    "组件:components.beefalometrics": {
        "prefix": "components.beefalometrics",
        "body": "components.beefalometrics",
        "description": ""
    },
    "组件:components.pollinator": {
        "prefix": "components.pollinator",
        "body": "components.pollinator",
        "description": ""
    },
    "组件:components.pointofinterest": {
        "prefix": "components.pointofinterest",
        "body": "components.pointofinterest",
        "description": ""
    },
    "组件:components.boatmagnetbeacon": {
        "prefix": "components.boatmagnetbeacon",
        "body": "components.boatmagnetbeacon",
        "description": ""
    },
    "组件:components.pocketwatch_dismantler": {
        "prefix": "components.pocketwatch_dismantler",
        "body": "components.pocketwatch_dismantler",
        "description": ""
    },
    "组件:components.pocketwatch": {
        "prefix": "components.pocketwatch",
        "body": "components.pocketwatch",
        "description": ""
    },
    "组件:components.explosive": {
        "prefix": "components.explosive",
        "body": "components.explosive",
        "description": ""
    },
    "组件:components.beaverness": {
        "prefix": "components.beaverness",
        "body": "components.beaverness",
        "description": ""
    },
    "组件:components.lordfruitflytrigger": {
        "prefix": "components.lordfruitflytrigger",
        "body": "components.lordfruitflytrigger",
        "description": ""
    },
    "组件:components.epicscare": {
        "prefix": "components.epicscare",
        "body": "components.epicscare",
        "description": ""
    },
    "组件:components.combat_replica": {
        "prefix": "components.combat_replica",
        "body": "components.combat_replica",
        "description": ""
    },
    "组件:components.playerlightningtarget": {
        "prefix": "components.playerlightningtarget",
        "body": "components.playerlightningtarget",
        "description": ""
    },
    "组件:components.aoetargeting": {
        "prefix": "components.aoetargeting",
        "body": "components.aoetargeting",
        "description": ""
    },
    "组件:components.blinkstaff懒人法杖(橙色法杖)": {
        "prefix": "components.blinkstaff",
        "body": "components.blinkstaff",
        "description": "懒人法杖(橙色法杖)"
    },
    "组件:components.followerherder": {
        "prefix": "components.followerherder",
        "body": "components.followerherder",
        "description": ""
    },
    "组件:components.channelcaster": {
        "prefix": "components.channelcaster",
        "body": "components.channelcaster",
        "description": ""
    },
    "组件:components.boatrace_proximitybeacon": {
        "prefix": "components.boatrace_proximitybeacon",
        "body": "components.boatrace_proximitybeacon",
        "description": ""
    },
    "组件:components.healthbar": {
        "prefix": "components.healthbar",
        "body": "components.healthbar",
        "description": ""
    },
    "组件:components.playeravatardata": {
        "prefix": "components.playeravatardata",
        "body": "components.playeravatardata",
        "description": ""
    },
    "组件:components.constructionplans": {
        "prefix": "components.constructionplans",
        "body": "components.constructionplans",
        "description": ""
    },
    "组件:components.bedazzler": {
        "prefix": "components.bedazzler",
        "body": "components.bedazzler",
        "description": ""
    },
    "组件:components.bait": {
        "prefix": "components.bait",
        "body": "components.bait",
        "description": ""
    },
    "组件:components.inventoryitemholder": {
        "prefix": "components.inventoryitemholder",
        "body": "components.inventoryitemholder",
        "description": ""
    },
    "组件:components.oceancolor": {
        "prefix": "components.oceancolor",
        "body": "components.oceancolor",
        "description": ""
    },
    "组件:components.insulator": {
        "prefix": "components.insulator",
        "body": "components.insulator",
        "description": ""
    },
    "组件:components.health_replica": {
        "prefix": "components.health_replica",
        "body": "components.health_replica",
        "description": ""
    },
    "组件:components.channelable": {
        "prefix": "components.channelable",
        "body": "components.channelable",
        "description": ""
    },
    "组件:components.planarentity": {
        "prefix": "components.planarentity",
        "body": "components.planarentity",
        "description": ""
    },
    "组件:components.planardefense": {
        "prefix": "components.planardefense",
        "body": "components.planardefense",
        "description": ""
    },
    "组件:components.placer": {
        "prefix": "components.placer",
        "body": "components.placer",
        "description": ""
    },
    "组件:components.pinnable": {
        "prefix": "components.pinnable",
        "body": "components.pinnable",
        "description": ""
    },
    "组件:components.heavyobstacleusetarget": {
        "prefix": "components.heavyobstacleusetarget",
        "body": "components.heavyobstacleusetarget",
        "description": ""
    },
    "组件:components.oceanthrowable": {
        "prefix": "components.oceanthrowable",
        "body": "components.oceanthrowable",
        "description": ""
    },
    "组件:components.uniqueprefabids": {
        "prefix": "components.uniqueprefabids",
        "body": "components.uniqueprefabids",
        "description": ""
    },
    "组件:components.perishable": {
        "prefix": "components.perishable",
        "body": "components.perishable",
        "description": ""
    },
    "组件:components.parryweapon": {
        "prefix": "components.parryweapon",
        "body": "components.parryweapon",
        "description": ""
    },
    "组件:components.papereraser": {
        "prefix": "components.papereraser",
        "body": "components.papereraser",
        "description": ""
    },
    "组件:components.oceantrawler": {
        "prefix": "components.oceantrawler",
        "body": "components.oceantrawler",
        "description": ""
    },
    "组件:components.petrifiable": {
        "prefix": "components.petrifiable",
        "body": "components.petrifiable",
        "description": ""
    },
    "组件:components.oceanfishingtackle": {
        "prefix": "components.oceanfishingtackle",
        "body": "components.oceanfishingtackle",
        "description": ""
    },
    "组件:components.spooked": {
        "prefix": "components.spooked",
        "body": "components.spooked",
        "description": ""
    },
    "组件:components.oceanfishingrod": {
        "prefix": "components.oceanfishingrod",
        "body": "components.oceanfishingrod",
        "description": ""
    },
    "组件:components.cookbookupdater": {
        "prefix": "components.cookbookupdater",
        "body": "components.cookbookupdater",
        "description": ""
    },
    "组件:components.oasis": {
        "prefix": "components.oasis",
        "body": "components.oasis",
        "description": ""
    },
    "组件:components.hunter": {
        "prefix": "components.hunter",
        "body": "components.hunter",
        "description": ""
    },
    "组件:components.deerherding": {
        "prefix": "components.deerherding",
        "body": "components.deerherding",
        "description": ""
    },
    "组件:components.nutrients_visual_manager": {
        "prefix": "components.nutrients_visual_manager",
        "body": "components.nutrients_visual_manager",
        "description": ""
    },
    "组件:components.npc_talker": {
        "prefix": "components.npc_talker",
        "body": "components.npc_talker",
        "description": ""
    },
    "组件:components.healer": {
        "prefix": "components.healer",
        "body": "components.healer",
        "description": ""
    },
    "组件:components.schoolspawner": {
        "prefix": "components.schoolspawner",
        "body": "components.schoolspawner",
        "description": ""
    },
    "组件:components.moonrelic": {
        "prefix": "components.moonrelic",
        "body": "components.moonrelic",
        "description": ""
    },
    "组件:components.complexprojectile复杂投射物(抛物线)": {
        "prefix": "components.complexprojectile",
        "body": "components.complexprojectile",
        "description": "复杂投射物(抛物线)"
    },
    "组件:components.moonbeastspawner": {
        "prefix": "components.moonbeastspawner",
        "body": "components.moonbeastspawner",
        "description": ""
    },
    "组件:components.klaussackkey": {
        "prefix": "components.klaussackkey",
        "body": "components.klaussackkey",
        "description": ""
    },
    "组件:components.moonaltarlinktarget": {
        "prefix": "components.moonaltarlinktarget",
        "body": "components.moonaltarlinktarget",
        "description": ""
    },
    "组件:components.halloweenpotionmoon": {
        "prefix": "components.halloweenpotionmoon",
        "body": "components.halloweenpotionmoon",
        "description": ""
    },
    "组件:components.maxlightspawner": {
        "prefix": "components.maxlightspawner",
        "body": "components.maxlightspawner",
        "description": ""
    },
    "组件:components.moisture_replica": {
        "prefix": "components.moisture_replica",
        "body": "components.moisture_replica",
        "description": ""
    },
    "组件:components.minigame": {
        "prefix": "components.minigame",
        "body": "components.minigame",
        "description": ""
    },
    "组件:components.mightiness": {
        "prefix": "components.mightiness",
        "body": "components.mightiness",
        "description": ""
    },
    "组件:components.miasmamanager": {
        "prefix": "components.miasmamanager",
        "body": "components.miasmamanager",
        "description": ""
    },
    "组件:components.messagebottlemanager": {
        "prefix": "components.messagebottlemanager",
        "body": "components.messagebottlemanager",
        "description": ""
    },
    "组件:components.winter_treeseed": {
        "prefix": "components.winter_treeseed",
        "body": "components.winter_treeseed",
        "description": ""
    },
    "组件:components.mast": {
        "prefix": "components.mast",
        "body": "components.mast",
        "description": ""
    },
    "组件:components.boatcrew": {
        "prefix": "components.boatcrew",
        "body": "components.boatcrew",
        "description": ""
    },
    "组件:components.markable_proxy": {
        "prefix": "components.markable_proxy",
        "body": "components.markable_proxy",
        "description": ""
    },
    "组件:components.grouptargeter": {
        "prefix": "components.grouptargeter",
        "body": "components.grouptargeter",
        "description": ""
    },
    "组件:components.markable": {
        "prefix": "components.markable",
        "body": "components.markable",
        "description": ""
    },
    "组件:components.walkableplatformmanager": {
        "prefix": "components.walkableplatformmanager",
        "body": "components.walkableplatformmanager",
        "description": ""
    },
    "组件:components.malbatrossspawner": {
        "prefix": "components.malbatrossspawner",
        "body": "components.malbatrossspawner",
        "description": ""
    },
    "组件:components.appraisable": {
        "prefix": "components.appraisable",
        "body": "components.appraisable",
        "description": ""
    },
    "组件:components.madsciencelab": {
        "prefix": "components.madsciencelab",
        "body": "components.madsciencelab",
        "description": ""
    },
    "组件:components.lunarplant_tentacle_weapon": {
        "prefix": "components.lunarplant_tentacle_weapon",
        "body": "components.lunarplant_tentacle_weapon",
        "description": ""
    },
    "组件:components.knownlocations": {
        "prefix": "components.knownlocations",
        "body": "components.knownlocations",
        "description": ""
    },
    "组件:components.klaussackloot": {
        "prefix": "components.klaussackloot",
        "body": "components.klaussackloot",
        "description": ""
    },
    "组件:components.itemweigher": {
        "prefix": "components.itemweigher",
        "body": "components.itemweigher",
        "description": ""
    },
    "组件:components.commander": {
        "prefix": "components.commander",
        "body": "components.commander",
        "description": ""
    },
    "组件:components.inventoryitem_replica": {
        "prefix": "components.inventoryitem_replica",
        "body": "components.inventoryitem_replica",
        "description": ""
    },
    "组件:components.plantregrowth": {
        "prefix": "components.plantregrowth",
        "body": "components.plantregrowth",
        "description": ""
    },
    "组件:components.hunger_replica": {
        "prefix": "components.hunger_replica",
        "body": "components.hunger_replica",
        "description": ""
    },
    "组件:components.hullhealth": {
        "prefix": "components.hullhealth",
        "body": "components.hullhealth",
        "description": ""
    },
    "组件:components.workmultiplier": {
        "prefix": "components.workmultiplier",
        "body": "components.workmultiplier",
        "description": ""
    },
    "组件:components.hitcher": {
        "prefix": "components.hitcher",
        "body": "components.hitcher",
        "description": ""
    },
    "组件:components.hitchable": {
        "prefix": "components.hitchable",
        "body": "components.hitchable",
        "description": ""
    },
    "组件:components.hideandseekhider": {
        "prefix": "components.hideandseekhider",
        "body": "components.hideandseekhider",
        "description": ""
    },
    "组件:components.deployhelper": {
        "prefix": "components.deployhelper",
        "body": "components.deployhelper",
        "description": ""
    },
    "组件:components.firedetector": {
        "prefix": "components.firedetector",
        "body": "components.firedetector",
        "description": ""
    },
    "组件:components.harvestable": {
        "prefix": "components.harvestable",
        "body": "components.harvestable",
        "description": ""
    },
    "组件:components.grottowaterfallsoundcontroller": {
        "prefix": "components.grottowaterfallsoundcontroller",
        "body": "components.grottowaterfallsoundcontroller",
        "description": ""
    },
    "组件:components.skinner_beefalo": {
        "prefix": "components.skinner_beefalo",
        "body": "components.skinner_beefalo",
        "description": ""
    },
    "组件:components.formationfollower": {
        "prefix": "components.formationfollower",
        "body": "components.formationfollower",
        "description": ""
    },
    "组件:components.playerhearing": {
        "prefix": "components.playerhearing",
        "body": "components.playerhearing",
        "description": ""
    },
    "组件:components.maxhealer": {
        "prefix": "components.maxhealer",
        "body": "components.maxhealer",
        "description": ""
    },
    "组件:components.fishable": {
        "prefix": "components.fishable",
        "body": "components.fishable",
        "description": ""
    },
    "组件:components.hideandseekgame": {
        "prefix": "components.hideandseekgame",
        "body": "components.hideandseekgame",
        "description": ""
    },
    "组件:components.fertilizerresearchable": {
        "prefix": "components.fertilizerresearchable",
        "body": "components.fertilizerresearchable",
        "description": ""
    },
    "组件:components.builder": {
        "prefix": "components.builder",
        "body": "components.builder",
        "description": ""
    },
    "组件:components.fertilizable": {
        "prefix": "components.fertilizable",
        "body": "components.fertilizable",
        "description": ""
    },
    "组件:components.farmsoildrinker": {
        "prefix": "components.farmsoildrinker",
        "body": "components.farmsoildrinker",
        "description": ""
    },
    "组件:components.colourtweener": {
        "prefix": "components.colourtweener",
        "body": "components.colourtweener",
        "description": ""
    },
    "组件:components.farming_manager": {
        "prefix": "components.farming_manager",
        "body": "components.farming_manager",
        "description": ""
    },
    "组件:components.playervision": {
        "prefix": "components.playervision",
        "body": "components.playervision",
        "description": ""
    },
    "组件:components.erasablepaper": {
        "prefix": "components.erasablepaper",
        "body": "components.erasablepaper",
        "description": ""
    },
    "组件:components.playerprox": {
        "prefix": "components.playerprox",
        "body": "components.playerprox",
        "description": ""
    },
    "组件:components.dryable": {
        "prefix": "components.dryable",
        "body": "components.dryable",
        "description": ""
    },
    "组件:components.boatcannon": {
        "prefix": "components.boatcannon",
        "body": "components.boatcannon",
        "description": ""
    },
    "组件:components.discoverable": {
        "prefix": "components.discoverable",
        "body": "components.discoverable",
        "description": ""
    },
    "组件:components.battery": {
        "prefix": "components.battery",
        "body": "components.battery",
        "description": ""
    },
    "组件:components.singinginspiration": {
        "prefix": "components.singinginspiration",
        "body": "components.singinginspiration",
        "description": ""
    },
    "组件:components.damagetyperesist": {
        "prefix": "components.damagetyperesist",
        "body": "components.damagetyperesist",
        "description": ""
    },
    "组件:components.crewmember": {
        "prefix": "components.crewmember",
        "body": "components.crewmember",
        "description": ""
    },
    "组件:components.crabkingspawner": {
        "prefix": "components.crabkingspawner",
        "body": "components.crabkingspawner",
        "description": ""
    },
    "组件:components.cooldown": {
        "prefix": "components.cooldown",
        "body": "components.cooldown",
        "description": ""
    },
    "组件:components.constructionsite": {
        "prefix": "components.constructionsite",
        "body": "components.constructionsite",
        "description": ""
    },
    "组件:components.inventory_replica": {
        "prefix": "components.inventory_replica",
        "body": "components.inventory_replica",
        "description": ""
    },
    "组件:components.compostingbin": {
        "prefix": "components.compostingbin",
        "body": "components.compostingbin",
        "description": ""
    },
    "组件:components.cattoy": {
        "prefix": "components.cattoy",
        "body": "components.cattoy",
        "description": ""
    },
    "组件:components.circler": {
        "prefix": "components.circler",
        "body": "components.circler",
        "description": ""
    },
    "组件:components.carnivalgameshooter": {
        "prefix": "components.carnivalgameshooter",
        "body": "components.carnivalgameshooter",
        "description": ""
    },
    "组件:components.skinner": {
        "prefix": "components.skinner",
        "body": "components.skinner",
        "description": ""
    },
    "组件:shadowdominance": {
        "prefix": "shadowdominance",
        "body": "shadowdominance",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:kramped": {
        "prefix": "kramped",
        "body": "kramped",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cyclable": {
        "prefix": "cyclable",
        "body": "cyclable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldmigrator": {
        "prefix": "worldmigrator",
        "body": "worldmigrator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:walkableplatform": {
        "prefix": "walkableplatform",
        "body": "walkableplatform",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hauntable": {
        "prefix": "hauntable",
        "body": "hauntable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shardstate": {
        "prefix": "shardstate",
        "body": "shardstate",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mood": {
        "prefix": "mood",
        "body": "mood",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:builder_replica": {
        "prefix": "builder_replica",
        "body": "builder_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fillable": {
        "prefix": "fillable",
        "body": "fillable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lightningblocker": {
        "prefix": "lightningblocker",
        "body": "lightningblocker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:retrofitcavemap_anr": {
        "prefix": "retrofitcavemap_anr",
        "body": "retrofitcavemap_anr",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:aoeweapon_base": {
        "prefix": "aoeweapon_base",
        "body": "aoeweapon_base",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oar": {
        "prefix": "oar",
        "body": "oar",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:freezable": {
        "prefix": "freezable",
        "body": "freezable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:plantresearchable": {
        "prefix": "plantresearchable",
        "body": "plantresearchable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:decay": {
        "prefix": "decay",
        "body": "decay",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:autosaver": {
        "prefix": "autosaver",
        "body": "autosaver",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:platformhopdelay": {
        "prefix": "platformhopdelay",
        "body": "platformhopdelay",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inventoryitemmoisture": {
        "prefix": "inventoryitemmoisture",
        "body": "inventoryitemmoisture",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playertargetindicator": {
        "prefix": "playertargetindicator",
        "body": "playertargetindicator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:ruinsshadelingspawner": {
        "prefix": "ruinsshadelingspawner",
        "body": "ruinsshadelingspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:craftingstation": {
        "prefix": "craftingstation",
        "body": "craftingstation",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:maprecorder": {
        "prefix": "maprecorder",
        "body": "maprecorder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:batteryuser": {
        "prefix": "batteryuser",
        "body": "batteryuser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatringdata": {
        "prefix": "boatringdata",
        "body": "boatringdata",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:acidlevel": {
        "prefix": "acidlevel",
        "body": "acidlevel",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:itemaffinity": {
        "prefix": "itemaffinity",
        "body": "itemaffinity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:curseditem": {
        "prefix": "curseditem",
        "body": "curseditem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:distancefade": {
        "prefix": "distancefade",
        "body": "distancefade",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hounded": {
        "prefix": "hounded",
        "body": "hounded",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotc_racestats": {
        "prefix": "yotc_racestats",
        "body": "yotc_racestats",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fan": {
        "prefix": "fan",
        "body": "fan",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shaveable": {
        "prefix": "shaveable",
        "body": "shaveable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:treasuremarked": {
        "prefix": "treasuremarked",
        "body": "treasuremarked",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mermkingmanager": {
        "prefix": "mermkingmanager",
        "body": "mermkingmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bathbomb": {
        "prefix": "bathbomb",
        "body": "bathbomb",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shadowthrallmanager": {
        "prefix": "shadowthrallmanager",
        "body": "shadowthrallmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:teleporter": {
        "prefix": "teleporter",
        "body": "teleporter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lunarhailmanager": {
        "prefix": "lunarhailmanager",
        "body": "lunarhailmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:occupiable": {
        "prefix": "occupiable",
        "body": "occupiable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:caveweather": {
        "prefix": "caveweather",
        "body": "caveweather",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:farmplanttendable": {
        "prefix": "farmplanttendable",
        "body": "farmplanttendable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:debuffable": {
        "prefix": "debuffable",
        "body": "debuffable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mightygym": {
        "prefix": "mightygym",
        "body": "mightygym",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:minigame_spectator": {
        "prefix": "minigame_spectator",
        "body": "minigame_spectator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:weapon": {
        "prefix": "weapon",
        "body": "weapon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:skeletonsweeper": {
        "prefix": "skeletonsweeper",
        "body": "skeletonsweeper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:drawingtool": {
        "prefix": "drawingtool",
        "body": "drawingtool",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:dockmanager": {
        "prefix": "dockmanager",
        "body": "dockmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:meteorshower": {
        "prefix": "meteorshower",
        "body": "meteorshower",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stageactingprop": {
        "prefix": "stageactingprop",
        "body": "stageactingprop",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:combat": {
        "prefix": "combat",
        "body": "combat",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shadowcreaturespawner": {
        "prefix": "shadowcreaturespawner",
        "body": "shadowcreaturespawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:singable": {
        "prefix": "singable",
        "body": "singable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:farmplantstress": {
        "prefix": "farmplantstress",
        "body": "farmplantstress",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:age": {
        "prefix": "age",
        "body": "age",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spidermutator": {
        "prefix": "spidermutator",
        "body": "spidermutator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:floater": {
        "prefix": "floater",
        "body": "floater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wildfires": {
        "prefix": "wildfires",
        "body": "wildfires",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:brushable": {
        "prefix": "brushable",
        "body": "brushable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worlddeciduoustreeupdater": {
        "prefix": "worlddeciduoustreeupdater",
        "body": "worlddeciduoustreeupdater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:follower": {
        "prefix": "follower",
        "body": "follower",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sewing": {
        "prefix": "sewing",
        "body": "sewing",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:recallmark": {
        "prefix": "recallmark",
        "body": "recallmark",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:charliecutscene": {
        "prefix": "charliecutscene",
        "body": "charliecutscene",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:teamattacker": {
        "prefix": "teamattacker",
        "body": "teamattacker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inventoryitem": {
        "prefix": "inventoryitem",
        "body": "inventoryitem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:heavyobstaclephysics": {
        "prefix": "heavyobstaclephysics",
        "body": "heavyobstaclephysics",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:herd": {
        "prefix": "herd",
        "body": "herd",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:reloaditem": {
        "prefix": "reloaditem",
        "body": "reloaditem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonaltarlink": {
        "prefix": "moonaltarlink",
        "body": "moonaltarlink",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatai": {
        "prefix": "boatai",
        "body": "boatai",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:catcher": {
        "prefix": "catcher",
        "body": "catcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonstormwatcher": {
        "prefix": "moonstormwatcher",
        "body": "moonstormwatcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bloomer": {
        "prefix": "bloomer",
        "body": "bloomer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:attuner": {
        "prefix": "attuner",
        "body": "attuner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:equippable_replica": {
        "prefix": "equippable_replica",
        "body": "equippable_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:eater": {
        "prefix": "eater",
        "body": "eater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fishingnet": {
        "prefix": "fishingnet",
        "body": "fishingnet",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carefulwalker": {
        "prefix": "carefulwalker",
        "body": "carefulwalker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:healthsyncer": {
        "prefix": "healthsyncer",
        "body": "healthsyncer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:homeseeker": {
        "prefix": "homeseeker",
        "body": "homeseeker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:drawable": {
        "prefix": "drawable",
        "body": "drawable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hallucinations": {
        "prefix": "hallucinations",
        "body": "hallucinations",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:firebug": {
        "prefix": "firebug",
        "body": "firebug",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:rider_replica": {
        "prefix": "rider_replica",
        "body": "rider_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:colouraddersync": {
        "prefix": "colouraddersync",
        "body": "colouraddersync",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:anchor": {
        "prefix": "anchor",
        "body": "anchor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:dumbbelllifter": {
        "prefix": "dumbbelllifter",
        "body": "dumbbelllifter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hideandseeker": {
        "prefix": "hideandseeker",
        "body": "hideandseeker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:constructionbuilder": {
        "prefix": "constructionbuilder",
        "body": "constructionbuilder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldwind": {
        "prefix": "worldwind",
        "body": "worldwind",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:book": {
        "prefix": "book",
        "body": "book",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:minigame_participator": {
        "prefix": "minigame_participator",
        "body": "minigame_participator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:domesticatable": {
        "prefix": "domesticatable",
        "body": "domesticatable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatphysics": {
        "prefix": "boatphysics",
        "body": "boatphysics",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:emitter": {
        "prefix": "emitter",
        "body": "emitter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatcannonuser": {
        "prefix": "boatcannonuser",
        "body": "boatcannonuser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:forgerepairable": {
        "prefix": "forgerepairable",
        "body": "forgerepairable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:drownable": {
        "prefix": "drownable",
        "body": "drownable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:scrapbookable": {
        "prefix": "scrapbookable",
        "body": "scrapbookable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:maprevealer": {
        "prefix": "maprevealer",
        "body": "maprevealer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:migrationpetowner": {
        "prefix": "migrationpetowner",
        "body": "migrationpetowner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_players": {
        "prefix": "shard_players",
        "body": "shard_players",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:attunable": {
        "prefix": "attunable",
        "body": "attunable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:gingerbreadhunter": {
        "prefix": "gingerbreadhunter",
        "body": "gingerbreadhunter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:incinerator": {
        "prefix": "incinerator",
        "body": "incinerator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:experiencecollector": {
        "prefix": "experiencecollector",
        "body": "experiencecollector",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:key": {
        "prefix": "key",
        "body": "key",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:waxable": {
        "prefix": "waxable",
        "body": "waxable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:dsp": {
        "prefix": "dsp",
        "body": "dsp",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:damagetypebonus": {
        "prefix": "damagetypebonus",
        "body": "damagetypebonus",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boattrail": {
        "prefix": "boattrail",
        "body": "boattrail",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:custombuildmanager": {
        "prefix": "custombuildmanager",
        "body": "custombuildmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moistureimmunity": {
        "prefix": "moistureimmunity",
        "body": "moistureimmunity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:follower_replica": {
        "prefix": "follower_replica",
        "body": "follower_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moontrader": {
        "prefix": "moontrader",
        "body": "moontrader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:savedrotation": {
        "prefix": "savedrotation",
        "body": "savedrotation",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:planardamage": {
        "prefix": "planardamage",
        "body": "planardamage",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cursable": {
        "prefix": "cursable",
        "body": "cursable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:colouradder": {
        "prefix": "colouradder",
        "body": "colouradder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:container": {
        "prefix": "container",
        "body": "container",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:forcecompostable": {
        "prefix": "forcecompostable",
        "body": "forcecompostable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hunger": {
        "prefix": "hunger",
        "body": "hunger",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playeractionpicker": {
        "prefix": "playeractionpicker",
        "body": "playeractionpicker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fishingnetvisualizer": {
        "prefix": "fishingnetvisualizer",
        "body": "fishingnetvisualizer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotc_raceprizemanager": {
        "prefix": "yotc_raceprizemanager",
        "body": "yotc_raceprizemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:damagetracker": {
        "prefix": "damagetracker",
        "body": "damagetracker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:undertile": {
        "prefix": "undertile",
        "body": "undertile",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:raindome": {
        "prefix": "raindome",
        "body": "raindome",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:plantregistryupdater": {
        "prefix": "plantregistryupdater",
        "body": "plantregistryupdater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:rooted": {
        "prefix": "rooted",
        "body": "rooted",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:instrument": {
        "prefix": "instrument",
        "body": "instrument",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:grabbable": {
        "prefix": "grabbable",
        "body": "grabbable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:circuitnode": {
        "prefix": "circuitnode",
        "body": "circuitnode",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:submersible": {
        "prefix": "submersible",
        "body": "submersible",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sittable": {
        "prefix": "sittable",
        "body": "sittable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carnivaldecor": {
        "prefix": "carnivaldecor",
        "body": "carnivaldecor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:grottowarmanager": {
        "prefix": "grottowarmanager",
        "body": "grottowarmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cookable": {
        "prefix": "cookable",
        "body": "cookable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:beard": {
        "prefix": "beard",
        "body": "beard",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:unsaddler": {
        "prefix": "unsaddler",
        "body": "unsaddler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:pickable": {
        "prefix": "pickable",
        "body": "pickable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceanfishinghook": {
        "prefix": "oceanfishinghook",
        "body": "oceanfishinghook",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:remoteteleporter": {
        "prefix": "remoteteleporter",
        "body": "remoteteleporter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:caveins": {
        "prefix": "caveins",
        "body": "caveins",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:prototyper": {
        "prefix": "prototyper",
        "body": "prototyper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:rampingspawner": {
        "prefix": "rampingspawner",
        "body": "rampingspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:smotherer": {
        "prefix": "smotherer",
        "body": "smotherer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carnivaldecorranker": {
        "prefix": "carnivaldecorranker",
        "body": "carnivaldecorranker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:embarker": {
        "prefix": "embarker",
        "body": "embarker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oldager": {
        "prefix": "oldager",
        "body": "oldager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:leader": {
        "prefix": "leader",
        "body": "leader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bundlemaker": {
        "prefix": "bundlemaker",
        "body": "bundlemaker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inventory": {
        "prefix": "inventory",
        "body": "inventory",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:nis": {
        "prefix": "nis",
        "body": "nis",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:container_replica": {
        "prefix": "container_replica",
        "body": "container_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:ghostlyelixir": {
        "prefix": "ghostlyelixir",
        "body": "ghostlyelixir",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:maxwelltalker": {
        "prefix": "maxwelltalker",
        "body": "maxwelltalker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:furnituredecortaker": {
        "prefix": "furnituredecortaker",
        "body": "furnituredecortaker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spawner": {
        "prefix": "spawner",
        "body": "spawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:rechargeable": {
        "prefix": "rechargeable",
        "body": "rechargeable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:area_unlock": {
        "prefix": "area_unlock",
        "body": "area_unlock",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:selfstacker": {
        "prefix": "selfstacker",
        "body": "selfstacker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:magiciantool": {
        "prefix": "magiciantool",
        "body": "magiciantool",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fertilizer": {
        "prefix": "fertilizer",
        "body": "fertilizer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:explosiveresist": {
        "prefix": "explosiveresist",
        "body": "explosiveresist",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_seasons": {
        "prefix": "shard_seasons",
        "body": "shard_seasons",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spellbook": {
        "prefix": "spellbook",
        "body": "spellbook",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:objectspawner": {
        "prefix": "objectspawner",
        "body": "objectspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceanfishable": {
        "prefix": "oceanfishable",
        "body": "oceanfishable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wateryprotection": {
        "prefix": "wateryprotection",
        "body": "wateryprotection",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:childspawner": {
        "prefix": "childspawner",
        "body": "childspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:treegrowthsolution": {
        "prefix": "treegrowthsolution",
        "body": "treegrowthsolution",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mightydumbbell": {
        "prefix": "mightydumbbell",
        "body": "mightydumbbell",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:flotsamgenerator": {
        "prefix": "flotsamgenerator",
        "body": "flotsamgenerator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:health": {
        "prefix": "health",
        "body": "health",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wereness": {
        "prefix": "wereness",
        "body": "wereness",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:heater": {
        "prefix": "heater",
        "body": "heater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldmeteorshower": {
        "prefix": "worldmeteorshower",
        "body": "worldmeteorshower",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:deerclopsspawner": {
        "prefix": "deerclopsspawner",
        "body": "deerclopsspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lunarthrall_plantspawner": {
        "prefix": "lunarthrall_plantspawner",
        "body": "lunarthrall_plantspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:groundcreep": {
        "prefix": "groundcreep",
        "body": "groundcreep",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:brush": {
        "prefix": "brush",
        "body": "brush",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:workable": {
        "prefix": "workable",
        "body": "workable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:closeinspector": {
        "prefix": "closeinspector",
        "body": "closeinspector",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:constructionsite_replica": {
        "prefix": "constructionsite_replica",
        "body": "constructionsite_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatracecrew": {
        "prefix": "boatracecrew",
        "body": "boatracecrew",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:battleborn": {
        "prefix": "battleborn",
        "body": "battleborn",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hudindicatable": {
        "prefix": "hudindicatable",
        "body": "hudindicatable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:quaker": {
        "prefix": "quaker",
        "body": "quaker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fencerotator": {
        "prefix": "fencerotator",
        "body": "fencerotator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:quagmire_recipeprices": {
        "prefix": "quagmire_recipeprices",
        "body": "quagmire_recipeprices",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:upgrademoduleowner": {
        "prefix": "upgrademoduleowner",
        "body": "upgrademoduleowner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playerinspectable": {
        "prefix": "playerinspectable",
        "body": "playerinspectable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:edible": {
        "prefix": "edible",
        "body": "edible",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatrotator": {
        "prefix": "boatrotator",
        "body": "boatrotator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:frograin": {
        "prefix": "frograin",
        "body": "frograin",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:ocean": {
        "prefix": "ocean",
        "body": "ocean",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:deployable": {
        "prefix": "deployable",
        "body": "deployable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lureplantspawner": {
        "prefix": "lureplantspawner",
        "body": "lureplantspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:grogginess": {
        "prefix": "grogginess",
        "body": "grogginess",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:feasts": {
        "prefix": "feasts",
        "body": "feasts",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:unevenground": {
        "prefix": "unevenground",
        "body": "unevenground",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:questowner": {
        "prefix": "questowner",
        "body": "questowner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mine": {
        "prefix": "mine",
        "body": "mine",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:storytellingprop": {
        "prefix": "storytellingprop",
        "body": "storytellingprop",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:strongman": {
        "prefix": "strongman",
        "body": "strongman",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:highlight": {
        "prefix": "highlight",
        "body": "highlight",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:debuff": {
        "prefix": "debuff",
        "body": "debuff",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:repellent": {
        "prefix": "repellent",
        "body": "repellent",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lavaarenamusic": {
        "prefix": "lavaarenamusic",
        "body": "lavaarenamusic",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldsettings": {
        "prefix": "worldsettings",
        "body": "worldsettings",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_clock": {
        "prefix": "shard_clock",
        "body": "shard_clock",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:activatable": {
        "prefix": "activatable",
        "body": "activatable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceanicemanager": {
        "prefix": "oceanicemanager",
        "body": "oceanicemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:periodicspawner": {
        "prefix": "periodicspawner",
        "body": "periodicspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatdrifter": {
        "prefix": "boatdrifter",
        "body": "boatdrifter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:grue": {
        "prefix": "grue",
        "body": "grue",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bosstargeter": {
        "prefix": "bosstargeter",
        "body": "bosstargeter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:setbonus": {
        "prefix": "setbonus",
        "body": "setbonus",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:focalpoint": {
        "prefix": "focalpoint",
        "body": "focalpoint",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:plantable": {
        "prefix": "plantable",
        "body": "plantable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:damagereflect": {
        "prefix": "damagereflect",
        "body": "damagereflect",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:steeringwheeluser": {
        "prefix": "steeringwheeluser",
        "body": "steeringwheeluser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spdamageutil": {
        "prefix": "spdamageutil",
        "body": "spdamageutil",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:autoterraformer": {
        "prefix": "autoterraformer",
        "body": "autoterraformer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:gym": {
        "prefix": "gym",
        "body": "gym",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:container_proxy": {
        "prefix": "container_proxy",
        "body": "container_proxy",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:highlightchild": {
        "prefix": "highlightchild",
        "body": "highlightchild",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:groomer": {
        "prefix": "groomer",
        "body": "groomer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:simplemagicgrower": {
        "prefix": "simplemagicgrower",
        "body": "simplemagicgrower",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:furnituredecor": {
        "prefix": "furnituredecor",
        "body": "furnituredecor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldreset": {
        "prefix": "worldreset",
        "body": "worldreset",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:slipperyfeettarget": {
        "prefix": "slipperyfeettarget",
        "body": "slipperyfeettarget",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:armor": {
        "prefix": "armor",
        "body": "armor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:farmplantable": {
        "prefix": "farmplantable",
        "body": "farmplantable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:watersource": {
        "prefix": "watersource",
        "body": "watersource",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:werebeast": {
        "prefix": "werebeast",
        "body": "werebeast",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stageactor": {
        "prefix": "stageactor",
        "body": "stageactor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:distancetracker": {
        "prefix": "distancetracker",
        "body": "distancetracker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hideout": {
        "prefix": "hideout",
        "body": "hideout",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:archivemanager": {
        "prefix": "archivemanager",
        "body": "archivemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:forestdaywalkerspawner": {
        "prefix": "forestdaywalkerspawner",
        "body": "forestdaywalkerspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:forgerepair": {
        "prefix": "forgerepair",
        "body": "forgerepair",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:burnable": {
        "prefix": "burnable",
        "body": "burnable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:replayproxy": {
        "prefix": "replayproxy",
        "body": "replayproxy",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fuelmaster": {
        "prefix": "fuelmaster",
        "body": "fuelmaster",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stackable_replica": {
        "prefix": "stackable_replica",
        "body": "stackable_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:updatelooper": {
        "prefix": "updatelooper",
        "body": "updatelooper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:searchable": {
        "prefix": "searchable",
        "body": "searchable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sharkboimanagerhelper": {
        "prefix": "sharkboimanagerhelper",
        "body": "sharkboimanagerhelper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lighter": {
        "prefix": "lighter",
        "body": "lighter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:equippable": {
        "prefix": "equippable",
        "body": "equippable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:expertsailor": {
        "prefix": "expertsailor",
        "body": "expertsailor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:diseaseable": {
        "prefix": "diseaseable",
        "body": "diseaseable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:area_trigger": {
        "prefix": "area_trigger",
        "body": "area_trigger",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:minionspawner": {
        "prefix": "minionspawner",
        "body": "minionspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:butterflyspawner": {
        "prefix": "butterflyspawner",
        "body": "butterflyspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:quagmire_map": {
        "prefix": "quagmire_map",
        "body": "quagmire_map",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moosespawner": {
        "prefix": "moosespawner",
        "body": "moosespawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:witherable": {
        "prefix": "witherable",
        "body": "witherable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:aoespell": {
        "prefix": "aoespell",
        "body": "aoespell",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:kitcoon": {
        "prefix": "kitcoon",
        "body": "kitcoon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lighttweener": {
        "prefix": "lighttweener",
        "body": "lighttweener",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:aoeweapon_lunge": {
        "prefix": "aoeweapon_lunge",
        "body": "aoeweapon_lunge",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:nightlightmanager": {
        "prefix": "nightlightmanager",
        "body": "nightlightmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carnivalgameitem": {
        "prefix": "carnivalgameitem",
        "body": "carnivalgameitem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stunnable": {
        "prefix": "stunnable",
        "body": "stunnable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:farmtiller": {
        "prefix": "farmtiller",
        "body": "farmtiller",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:dataanalyzer": {
        "prefix": "dataanalyzer",
        "body": "dataanalyzer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playbill": {
        "prefix": "playbill",
        "body": "playbill",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bathbombable": {
        "prefix": "bathbombable",
        "body": "bathbombable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:forestpetrification": {
        "prefix": "forestpetrification",
        "body": "forestpetrification",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playercontroller": {
        "prefix": "playercontroller",
        "body": "playercontroller",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:weather": {
        "prefix": "weather",
        "body": "weather",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playermetrics": {
        "prefix": "playermetrics",
        "body": "playermetrics",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:dryer": {
        "prefix": "dryer",
        "body": "dryer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:acidinfusible": {
        "prefix": "acidinfusible",
        "body": "acidinfusible",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stretcher": {
        "prefix": "stretcher",
        "body": "stretcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fishingrod": {
        "prefix": "fishingrod",
        "body": "fishingrod",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatdrag": {
        "prefix": "boatdrag",
        "body": "boatdrag",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lootdropper": {
        "prefix": "lootdropper",
        "body": "lootdropper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:clock": {
        "prefix": "clock",
        "body": "clock",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inspectable": {
        "prefix": "inspectable",
        "body": "inspectable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:flotationdevice": {
        "prefix": "flotationdevice",
        "body": "flotationdevice",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:amorphous": {
        "prefix": "amorphous",
        "body": "amorphous",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:herdmember": {
        "prefix": "herdmember",
        "body": "herdmember",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonstormmanager": {
        "prefix": "moonstormmanager",
        "body": "moonstormmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playervoter": {
        "prefix": "playervoter",
        "body": "playervoter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carnivalgamefeedable": {
        "prefix": "carnivalgamefeedable",
        "body": "carnivalgamefeedable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:ambientsound": {
        "prefix": "ambientsound",
        "body": "ambientsound",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carnivalhostsummon": {
        "prefix": "carnivalhostsummon",
        "body": "carnivalhostsummon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carnivalevent": {
        "prefix": "carnivalevent",
        "body": "carnivalevent",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:ghostlybond": {
        "prefix": "ghostlybond",
        "body": "ghostlybond",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:crittertraits": {
        "prefix": "crittertraits",
        "body": "crittertraits",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:amphibiouscreature": {
        "prefix": "amphibiouscreature",
        "body": "amphibiouscreature",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:finiteuses": {
        "prefix": "finiteuses",
        "body": "finiteuses",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sisturnregistry": {
        "prefix": "sisturnregistry",
        "body": "sisturnregistry",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatmagnet": {
        "prefix": "boatmagnet",
        "body": "boatmagnet",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bloomness": {
        "prefix": "bloomness",
        "body": "bloomness",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:halloweenmoonmutable": {
        "prefix": "halloweenmoonmutable",
        "body": "halloweenmoonmutable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stackable": {
        "prefix": "stackable",
        "body": "stackable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:seasons": {
        "prefix": "seasons",
        "body": "seasons",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:groundpounder": {
        "prefix": "groundpounder",
        "body": "groundpounder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mermcandidate": {
        "prefix": "mermcandidate",
        "body": "mermcandidate",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:beargerspawner": {
        "prefix": "beargerspawner",
        "body": "beargerspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:firefx": {
        "prefix": "firefx",
        "body": "firefx",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shop": {
        "prefix": "shop",
        "body": "shop",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:steeringwheel": {
        "prefix": "steeringwheel",
        "body": "steeringwheel",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:foodaffinity": {
        "prefix": "foodaffinity",
        "body": "foodaffinity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:aura": {
        "prefix": "aura",
        "body": "aura",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:upgrademodule": {
        "prefix": "upgrademodule",
        "body": "upgrademodule",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:houndedtarget": {
        "prefix": "houndedtarget",
        "body": "houndedtarget",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moisture": {
        "prefix": "moisture",
        "body": "moisture",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:forestresourcespawner": {
        "prefix": "forestresourcespawner",
        "body": "forestresourcespawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hudindicatablemanager": {
        "prefix": "hudindicatablemanager",
        "body": "hudindicatablemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:preservative": {
        "prefix": "preservative",
        "body": "preservative",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:uniqueid": {
        "prefix": "uniqueid",
        "body": "uniqueid",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:ghostlyelixirable": {
        "prefix": "ghostlyelixirable",
        "body": "ghostlyelixirable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:petleash": {
        "prefix": "petleash",
        "body": "petleash",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:unwrappable": {
        "prefix": "unwrappable",
        "body": "unwrappable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:temperature": {
        "prefix": "temperature",
        "body": "temperature",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:dynamicmusic": {
        "prefix": "dynamicmusic",
        "body": "dynamicmusic",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:trap": {
        "prefix": "trap",
        "body": "trap",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:vase": {
        "prefix": "vase",
        "body": "vase",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:locomotor": {
        "prefix": "locomotor",
        "body": "locomotor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:piratespawner": {
        "prefix": "piratespawner",
        "body": "piratespawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sharklistener": {
        "prefix": "sharklistener",
        "body": "sharklistener",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:constructionbuilderuidata": {
        "prefix": "constructionbuilderuidata",
        "body": "constructionbuilderuidata",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:regrowthmanager": {
        "prefix": "regrowthmanager",
        "body": "regrowthmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:healthtrigger": {
        "prefix": "healthtrigger",
        "body": "healthtrigger",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotd_raceprizemanager": {
        "prefix": "yotd_raceprizemanager",
        "body": "yotd_raceprizemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:blowinwind": {
        "prefix": "blowinwind",
        "body": "blowinwind",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fader": {
        "prefix": "fader",
        "body": "fader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotc_racestart": {
        "prefix": "yotc_racestart",
        "body": "yotc_racestart",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotc_racecompetitor": {
        "prefix": "yotc_racecompetitor",
        "body": "yotc_racecompetitor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bedazzlement": {
        "prefix": "bedazzlement",
        "body": "bedazzlement",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shadowhandspawner": {
        "prefix": "shadowhandspawner",
        "body": "shadowhandspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:slipperyfeet": {
        "prefix": "slipperyfeet",
        "body": "slipperyfeet",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inspectaclesparticipant": {
        "prefix": "inspectaclesparticipant",
        "body": "inspectaclesparticipant",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:klaussackspawner": {
        "prefix": "klaussackspawner",
        "body": "klaussackspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:guardian": {
        "prefix": "guardian",
        "body": "guardian",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:digester": {
        "prefix": "digester",
        "body": "digester",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:friendlevels": {
        "prefix": "friendlevels",
        "body": "friendlevels",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotb_stager": {
        "prefix": "yotb_stager",
        "body": "yotb_stager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotb_stagemanager": {
        "prefix": "yotb_stagemanager",
        "body": "yotb_stagemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotb_skinunlocker": {
        "prefix": "yotb_skinunlocker",
        "body": "yotb_skinunlocker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:frostybreather": {
        "prefix": "frostybreather",
        "body": "frostybreather",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:electricattacks": {
        "prefix": "electricattacks",
        "body": "electricattacks",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:yotb_sewer": {
        "prefix": "yotb_sewer",
        "body": "yotb_sewer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:writeable_replica": {
        "prefix": "writeable_replica",
        "body": "writeable_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:writeable": {
        "prefix": "writeable",
        "body": "writeable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:quagmire_music": {
        "prefix": "quagmire_music",
        "body": "quagmire_music",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldtemperature": {
        "prefix": "worldtemperature",
        "body": "worldtemperature",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldstate": {
        "prefix": "worldstate",
        "body": "worldstate",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bundler": {
        "prefix": "bundler",
        "body": "bundler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_autosaver": {
        "prefix": "shard_autosaver",
        "body": "shard_autosaver",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldsettingstimer": {
        "prefix": "worldsettingstimer",
        "body": "worldsettingstimer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lunarriftmutationsmanager": {
        "prefix": "lunarriftmutationsmanager",
        "body": "lunarriftmutationsmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:maprevealable": {
        "prefix": "maprevealable",
        "body": "maprevealable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:balloonmaker": {
        "prefix": "balloonmaker",
        "body": "balloonmaker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:deerherdspawner": {
        "prefix": "deerherdspawner",
        "body": "deerherdspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:magician": {
        "prefix": "magician",
        "body": "magician",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:growable": {
        "prefix": "growable",
        "body": "growable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldoverseer": {
        "prefix": "worldoverseer",
        "body": "worldoverseer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:strafer": {
        "prefix": "strafer",
        "body": "strafer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lavaarenamobtracker": {
        "prefix": "lavaarenamobtracker",
        "body": "lavaarenamobtracker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:recipescanner": {
        "prefix": "recipescanner",
        "body": "recipescanner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:efficientuser": {
        "prefix": "efficientuser",
        "body": "efficientuser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hull": {
        "prefix": "hull",
        "body": "hull",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:named": {
        "prefix": "named",
        "body": "named",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sleepingbaguser": {
        "prefix": "sleepingbaguser",
        "body": "sleepingbaguser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wisecracker": {
        "prefix": "wisecracker",
        "body": "wisecracker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:miasmawatcher": {
        "prefix": "miasmawatcher",
        "body": "miasmawatcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hudindicatorwatcher": {
        "prefix": "hudindicatorwatcher",
        "body": "hudindicatorwatcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fishingrod_replica": {
        "prefix": "fishingrod_replica",
        "body": "fishingrod_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wintertreegiftable": {
        "prefix": "wintertreegiftable",
        "body": "wintertreegiftable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wintersfeasttable": {
        "prefix": "wintersfeasttable",
        "body": "wintersfeasttable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:trader": {
        "prefix": "trader",
        "body": "trader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:winonateleportpadmanager": {
        "prefix": "winonateleportpadmanager",
        "body": "winonateleportpadmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:named_replica": {
        "prefix": "named_replica",
        "body": "named_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:winchtarget": {
        "prefix": "winchtarget",
        "body": "winchtarget",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:summoningitem": {
        "prefix": "summoningitem",
        "body": "summoningitem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:simplebook": {
        "prefix": "simplebook",
        "body": "simplebook",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:townportalregistry": {
        "prefix": "townportalregistry",
        "body": "townportalregistry",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:saltlicker": {
        "prefix": "saltlicker",
        "body": "saltlicker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:nightmareclock": {
        "prefix": "nightmareclock",
        "body": "nightmareclock",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wereeater": {
        "prefix": "wereeater",
        "body": "wereeater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:weighable": {
        "prefix": "weighable",
        "body": "weighable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shadowlevel": {
        "prefix": "shadowlevel",
        "body": "shadowlevel",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:channelcastable": {
        "prefix": "channelcastable",
        "body": "channelcastable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:occupier": {
        "prefix": "occupier",
        "body": "occupier",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wavemanager": {
        "prefix": "wavemanager",
        "body": "wavemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:walkingplankuser": {
        "prefix": "walkingplankuser",
        "body": "walkingplankuser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:targettracker": {
        "prefix": "targettracker",
        "body": "targettracker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:kitcoonden": {
        "prefix": "kitcoonden",
        "body": "kitcoonden",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:waterphysics": {
        "prefix": "waterphysics",
        "body": "waterphysics",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wardrobe": {
        "prefix": "wardrobe",
        "body": "wardrobe",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:waterproofer": {
        "prefix": "waterproofer",
        "body": "waterproofer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:walkingplank": {
        "prefix": "walkingplank",
        "body": "walkingplank",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lavaarenaeventstate": {
        "prefix": "lavaarenaeventstate",
        "body": "lavaarenaeventstate",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:desolationspawner": {
        "prefix": "desolationspawner",
        "body": "desolationspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:walkableplatformplayer": {
        "prefix": "walkableplatformplayer",
        "body": "walkableplatformplayer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:revivablecorpse": {
        "prefix": "revivablecorpse",
        "body": "revivablecorpse",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mapspotrevealer": {
        "prefix": "mapspotrevealer",
        "body": "mapspotrevealer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:daywalkerspawner": {
        "prefix": "daywalkerspawner",
        "body": "daywalkerspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:birdattractor": {
        "prefix": "birdattractor",
        "body": "birdattractor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sinkholespawner": {
        "prefix": "sinkholespawner",
        "body": "sinkholespawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wagpunk_manager": {
        "prefix": "wagpunk_manager",
        "body": "wagpunk_manager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:deciduoustreeupdater": {
        "prefix": "deciduoustreeupdater",
        "body": "deciduoustreeupdater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playbill_lecturn": {
        "prefix": "playbill_lecturn",
        "body": "playbill_lecturn",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:vinebridgemanager": {
        "prefix": "vinebridgemanager",
        "body": "vinebridgemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:murderable": {
        "prefix": "murderable",
        "body": "murderable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:vasedecoration": {
        "prefix": "vasedecoration",
        "body": "vasedecoration",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:repairable": {
        "prefix": "repairable",
        "body": "repairable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:vanish_on_sleep": {
        "prefix": "vanish_on_sleep",
        "body": "vanish_on_sleep",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:useabletargeteditem": {
        "prefix": "useabletargeteditem",
        "body": "useabletargeteditem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:debugger": {
        "prefix": "debugger",
        "body": "debugger",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:upgrader": {
        "prefix": "upgrader",
        "body": "upgrader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lock": {
        "prefix": "lock",
        "body": "lock",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:preserver": {
        "prefix": "preserver",
        "body": "preserver",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:roseinspectable": {
        "prefix": "roseinspectable",
        "body": "roseinspectable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:upgrademoduleremover": {
        "prefix": "upgrademoduleremover",
        "body": "upgrademoduleremover",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonstorms": {
        "prefix": "moonstorms",
        "body": "moonstorms",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:upgradeable": {
        "prefix": "upgradeable",
        "body": "upgradeable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:pethealthbar": {
        "prefix": "pethealthbar",
        "body": "pethealthbar",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fueler": {
        "prefix": "fueler",
        "body": "fueler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:penguinspawner": {
        "prefix": "penguinspawner",
        "body": "penguinspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:uianim": {
        "prefix": "uianim",
        "body": "uianim",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatleak": {
        "prefix": "boatleak",
        "body": "boatleak",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fuel": {
        "prefix": "fuel",
        "body": "fuel",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:trophyscale": {
        "prefix": "trophyscale",
        "body": "trophyscale",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:tributable": {
        "prefix": "tributable",
        "body": "tributable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:transparentonsanity": {
        "prefix": "transparentonsanity",
        "body": "transparentonsanity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:transformer": {
        "prefix": "transformer",
        "body": "transformer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:birdspawner": {
        "prefix": "birdspawner",
        "body": "birdspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:tradable": {
        "prefix": "tradable",
        "body": "tradable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:batspawner": {
        "prefix": "batspawner",
        "body": "batspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:touchstonetracker": {
        "prefix": "touchstonetracker",
        "body": "touchstonetracker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:tool": {
        "prefix": "tool",
        "body": "tool",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_worldvoter": {
        "prefix": "shard_worldvoter",
        "body": "shard_worldvoter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cookiecutterdrill": {
        "prefix": "cookiecutterdrill",
        "body": "cookiecutterdrill",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:toggleableitem": {
        "prefix": "toggleableitem",
        "body": "toggleableitem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:despawnfader": {
        "prefix": "despawnfader",
        "body": "despawnfader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:toadstoolspawner": {
        "prefix": "toadstoolspawner",
        "body": "toadstoolspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_mermkingwatcher": {
        "prefix": "shard_mermkingwatcher",
        "body": "shard_mermkingwatcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:timer": {
        "prefix": "timer",
        "body": "timer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hatchable": {
        "prefix": "hatchable",
        "body": "hatchable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:singingshelltrigger": {
        "prefix": "singingshelltrigger",
        "body": "singingshelltrigger",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:groundshadowhandler": {
        "prefix": "groundshadowhandler",
        "body": "groundshadowhandler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sizetweener": {
        "prefix": "sizetweener",
        "body": "sizetweener",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shadowsubmissive": {
        "prefix": "shadowsubmissive",
        "body": "shadowsubmissive",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:foodmemory": {
        "prefix": "foodmemory",
        "body": "foodmemory",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spectatorcorpse": {
        "prefix": "spectatorcorpse",
        "body": "spectatorcorpse",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:tackler": {
        "prefix": "tackler",
        "body": "tackler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:teleportedoverride": {
        "prefix": "teleportedoverride",
        "body": "teleportedoverride",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:teamleader": {
        "prefix": "teamleader",
        "body": "teamleader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:retrofitforestmap_anr": {
        "prefix": "retrofitforestmap_anr",
        "body": "retrofitforestmap_anr",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:colourcube": {
        "prefix": "colourcube",
        "body": "colourcube",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:teacher": {
        "prefix": "teacher",
        "body": "teacher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:talker": {
        "prefix": "talker",
        "body": "talker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:skilltreeupdater": {
        "prefix": "skilltreeupdater",
        "body": "skilltreeupdater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:chessunlocks": {
        "prefix": "chessunlocks",
        "body": "chessunlocks",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:talkable": {
        "prefix": "talkable",
        "body": "talkable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:prophider": {
        "prefix": "prophider",
        "body": "prophider",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shatterfx": {
        "prefix": "shatterfx",
        "body": "shatterfx",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:tacklesketch": {
        "prefix": "tacklesketch",
        "body": "tacklesketch",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:temperatureoverrider": {
        "prefix": "temperatureoverrider",
        "body": "temperatureoverrider",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fueled": {
        "prefix": "fueled",
        "body": "fueled",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:symbolswapdata": {
        "prefix": "symbolswapdata",
        "body": "symbolswapdata",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:winch": {
        "prefix": "winch",
        "body": "winch",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stuckdetection": {
        "prefix": "stuckdetection",
        "body": "stuckdetection",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldcharacterselectlobby": {
        "prefix": "worldcharacterselectlobby",
        "body": "worldcharacterselectlobby",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:canopylightrays": {
        "prefix": "canopylightrays",
        "body": "canopylightrays",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:storyteller": {
        "prefix": "storyteller",
        "body": "storyteller",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stormwatcher": {
        "prefix": "stormwatcher",
        "body": "stormwatcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:stewer": {
        "prefix": "stewer",
        "body": "stewer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spellbookcooldowns": {
        "prefix": "spellbookcooldowns",
        "body": "spellbookcooldowns",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:squidspawner": {
        "prefix": "squidspawner",
        "body": "squidspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:squadmember": {
        "prefix": "squadmember",
        "body": "squadmember",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:entitytracker": {
        "prefix": "entitytracker",
        "body": "entitytracker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceanfishingrod_replica": {
        "prefix": "oceanfishingrod_replica",
        "body": "oceanfishingrod_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spellcaster": {
        "prefix": "spellcaster",
        "body": "spellcaster",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:staffsanity": {
        "prefix": "staffsanity",
        "body": "staffsanity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:roseinspectableuser": {
        "prefix": "roseinspectableuser",
        "body": "roseinspectableuser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:map": {
        "prefix": "map",
        "body": "map",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:crop": {
        "prefix": "crop",
        "body": "crop",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cooker": {
        "prefix": "cooker",
        "body": "cooker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:canopyshadows": {
        "prefix": "canopyshadows",
        "body": "canopyshadows",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:specialeventsetup": {
        "prefix": "specialeventsetup",
        "body": "specialeventsetup",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spawnfader": {
        "prefix": "spawnfader",
        "body": "spawnfader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:disappears": {
        "prefix": "disappears",
        "body": "disappears",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:souleater": {
        "prefix": "souleater",
        "body": "souleater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:soul": {
        "prefix": "soul",
        "body": "soul",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:incrementalproducer": {
        "prefix": "incrementalproducer",
        "body": "incrementalproducer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worker": {
        "prefix": "worker",
        "body": "worker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sandstorms": {
        "prefix": "sandstorms",
        "body": "sandstorms",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:aoeweapon_leap": {
        "prefix": "aoeweapon_leap",
        "body": "aoeweapon_leap",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:machine": {
        "prefix": "machine",
        "body": "machine",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sleepingbag": {
        "prefix": "sleepingbag",
        "body": "sleepingbag",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_sinkholes": {
        "prefix": "shard_sinkholes",
        "body": "shard_sinkholes",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:researchpointconverter": {
        "prefix": "researchpointconverter",
        "body": "researchpointconverter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:coach": {
        "prefix": "coach",
        "body": "coach",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:reader": {
        "prefix": "reader",
        "body": "reader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:giftreceiver": {
        "prefix": "giftreceiver",
        "body": "giftreceiver",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boattrailmover": {
        "prefix": "boattrailmover",
        "body": "boattrailmover",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:terraformer": {
        "prefix": "terraformer",
        "body": "terraformer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:thief": {
        "prefix": "thief",
        "body": "thief",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:klaussacklock": {
        "prefix": "klaussacklock",
        "body": "klaussacklock",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:singingshellmanager": {
        "prefix": "singingshellmanager",
        "body": "singingshellmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sandstormwatcher": {
        "prefix": "sandstormwatcher",
        "body": "sandstormwatcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:useableitem": {
        "prefix": "useableitem",
        "body": "useableitem",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sheltered_replica": {
        "prefix": "sheltered_replica",
        "body": "sheltered_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sheltered": {
        "prefix": "sheltered",
        "body": "sheltered",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shelf": {
        "prefix": "shelf",
        "body": "shelf",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatring": {
        "prefix": "boatring",
        "body": "boatring",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sanityaura": {
        "prefix": "sanityaura",
        "body": "sanityaura",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shedder": {
        "prefix": "shedder",
        "body": "shedder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shaver": {
        "prefix": "shaver",
        "body": "shaver",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sharkboimanager": {
        "prefix": "sharkboimanager",
        "body": "sharkboimanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sleeper": {
        "prefix": "sleeper",
        "body": "sleeper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_daywalkerspawner": {
        "prefix": "shard_daywalkerspawner",
        "body": "shard_daywalkerspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:wax": {
        "prefix": "wax",
        "body": "wax",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sentientaxe": {
        "prefix": "sentientaxe",
        "body": "sentientaxe",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:seamlessplayerswapper": {
        "prefix": "seamlessplayerswapper",
        "body": "seamlessplayerswapper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonstormlightningmanager": {
        "prefix": "moonstormlightningmanager",
        "body": "moonstormlightningmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:scenariorunner": {
        "prefix": "scenariorunner",
        "body": "scenariorunner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playerspawner": {
        "prefix": "playerspawner",
        "body": "playerspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatpatch": {
        "prefix": "boatpatch",
        "body": "boatpatch",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:quagmire_hangriness": {
        "prefix": "quagmire_hangriness",
        "body": "quagmire_hangriness",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:scaler": {
        "prefix": "scaler",
        "body": "scaler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:savedscale": {
        "prefix": "savedscale",
        "body": "savedscale",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:grower": {
        "prefix": "grower",
        "body": "grower",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sanity_replica": {
        "prefix": "sanity_replica",
        "body": "sanity_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:riftspawner": {
        "prefix": "riftspawner",
        "body": "riftspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:saddler": {
        "prefix": "saddler",
        "body": "saddler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:acidbatwavemanager": {
        "prefix": "acidbatwavemanager",
        "body": "acidbatwavemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:poppable": {
        "prefix": "poppable",
        "body": "poppable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:brightmarespawner": {
        "prefix": "brightmarespawner",
        "body": "brightmarespawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spell": {
        "prefix": "spell",
        "body": "spell",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:areaaware": {
        "prefix": "areaaware",
        "body": "areaaware",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:formationleader": {
        "prefix": "formationleader",
        "body": "formationleader",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fishschool": {
        "prefix": "fishschool",
        "body": "fishschool",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:sanity": {
        "prefix": "sanity",
        "body": "sanity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:ambientlighting": {
        "prefix": "ambientlighting",
        "body": "ambientlighting",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inkable": {
        "prefix": "inkable",
        "body": "inkable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:possessedaxe": {
        "prefix": "possessedaxe",
        "body": "possessedaxe",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:rideable": {
        "prefix": "rideable",
        "body": "rideable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:reticule": {
        "prefix": "reticule",
        "body": "reticule",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:resistance": {
        "prefix": "resistance",
        "body": "resistance",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:freezefx": {
        "prefix": "freezefx",
        "body": "freezefx",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:raindomewatcher": {
        "prefix": "raindomewatcher",
        "body": "raindomewatcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:recipestockpile": {
        "prefix": "recipestockpile",
        "body": "recipestockpile",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:shard_worldreset": {
        "prefix": "shard_worldreset",
        "body": "shard_worldreset",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:rainimmunity": {
        "prefix": "rainimmunity",
        "body": "rainimmunity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:repairer": {
        "prefix": "repairer",
        "body": "repairer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatrace_proximitychecker": {
        "prefix": "boatrace_proximitychecker",
        "body": "boatrace_proximitychecker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:quagmire_recipebook": {
        "prefix": "quagmire_recipebook",
        "body": "quagmire_recipebook",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:worldvoter": {
        "prefix": "worldvoter",
        "body": "worldvoter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:propagator": {
        "prefix": "propagator",
        "body": "propagator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:projectile": {
        "prefix": "projectile",
        "body": "projectile",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:projectedeffects": {
        "prefix": "projectedeffects",
        "body": "projectedeffects",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:powerload": {
        "prefix": "powerload",
        "body": "powerload",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:rider": {
        "prefix": "rider",
        "body": "rider",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:positionalwarp": {
        "prefix": "positionalwarp",
        "body": "positionalwarp",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hideandseekhidingspot": {
        "prefix": "hideandseekhidingspot",
        "body": "hideandseekhidingspot",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:portablestructure": {
        "prefix": "portablestructure",
        "body": "portablestructure",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:beefalometrics": {
        "prefix": "beefalometrics",
        "body": "beefalometrics",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:pollinator": {
        "prefix": "pollinator",
        "body": "pollinator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:pointofinterest": {
        "prefix": "pointofinterest",
        "body": "pointofinterest",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatmagnetbeacon": {
        "prefix": "boatmagnetbeacon",
        "body": "boatmagnetbeacon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:pocketwatch_dismantler": {
        "prefix": "pocketwatch_dismantler",
        "body": "pocketwatch_dismantler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:pocketwatch": {
        "prefix": "pocketwatch",
        "body": "pocketwatch",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:explosive": {
        "prefix": "explosive",
        "body": "explosive",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:beaverness": {
        "prefix": "beaverness",
        "body": "beaverness",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lordfruitflytrigger": {
        "prefix": "lordfruitflytrigger",
        "body": "lordfruitflytrigger",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:epicscare": {
        "prefix": "epicscare",
        "body": "epicscare",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:combat_replica": {
        "prefix": "combat_replica",
        "body": "combat_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playerlightningtarget": {
        "prefix": "playerlightningtarget",
        "body": "playerlightningtarget",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:aoetargeting": {
        "prefix": "aoetargeting",
        "body": "aoetargeting",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:blinkstaff": {
        "prefix": "blinkstaff",
        "body": "blinkstaff",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:followerherder": {
        "prefix": "followerherder",
        "body": "followerherder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:channelcaster": {
        "prefix": "channelcaster",
        "body": "channelcaster",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatrace_proximitybeacon": {
        "prefix": "boatrace_proximitybeacon",
        "body": "boatrace_proximitybeacon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:healthbar": {
        "prefix": "healthbar",
        "body": "healthbar",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playeravatardata": {
        "prefix": "playeravatardata",
        "body": "playeravatardata",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:constructionplans": {
        "prefix": "constructionplans",
        "body": "constructionplans",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bedazzler": {
        "prefix": "bedazzler",
        "body": "bedazzler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:bait": {
        "prefix": "bait",
        "body": "bait",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inventoryitemholder": {
        "prefix": "inventoryitemholder",
        "body": "inventoryitemholder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceancolor": {
        "prefix": "oceancolor",
        "body": "oceancolor",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:insulator": {
        "prefix": "insulator",
        "body": "insulator",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:health_replica": {
        "prefix": "health_replica",
        "body": "health_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:channelable": {
        "prefix": "channelable",
        "body": "channelable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:planarentity": {
        "prefix": "planarentity",
        "body": "planarentity",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:planardefense": {
        "prefix": "planardefense",
        "body": "planardefense",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:placer": {
        "prefix": "placer",
        "body": "placer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:pinnable": {
        "prefix": "pinnable",
        "body": "pinnable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:heavyobstacleusetarget": {
        "prefix": "heavyobstacleusetarget",
        "body": "heavyobstacleusetarget",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceanthrowable": {
        "prefix": "oceanthrowable",
        "body": "oceanthrowable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:uniqueprefabids": {
        "prefix": "uniqueprefabids",
        "body": "uniqueprefabids",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:perishable": {
        "prefix": "perishable",
        "body": "perishable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:parryweapon": {
        "prefix": "parryweapon",
        "body": "parryweapon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:papereraser": {
        "prefix": "papereraser",
        "body": "papereraser",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceantrawler": {
        "prefix": "oceantrawler",
        "body": "oceantrawler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:petrifiable": {
        "prefix": "petrifiable",
        "body": "petrifiable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceanfishingtackle": {
        "prefix": "oceanfishingtackle",
        "body": "oceanfishingtackle",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:spooked": {
        "prefix": "spooked",
        "body": "spooked",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oceanfishingrod": {
        "prefix": "oceanfishingrod",
        "body": "oceanfishingrod",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cookbookupdater": {
        "prefix": "cookbookupdater",
        "body": "cookbookupdater",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:oasis": {
        "prefix": "oasis",
        "body": "oasis",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hunter": {
        "prefix": "hunter",
        "body": "hunter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:deerherding": {
        "prefix": "deerherding",
        "body": "deerherding",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:nutrients_visual_manager": {
        "prefix": "nutrients_visual_manager",
        "body": "nutrients_visual_manager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:npc_talker": {
        "prefix": "npc_talker",
        "body": "npc_talker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:healer": {
        "prefix": "healer",
        "body": "healer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:schoolspawner": {
        "prefix": "schoolspawner",
        "body": "schoolspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonrelic": {
        "prefix": "moonrelic",
        "body": "moonrelic",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:complexprojectile": {
        "prefix": "complexprojectile",
        "body": "complexprojectile",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonbeastspawner": {
        "prefix": "moonbeastspawner",
        "body": "moonbeastspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:klaussackkey": {
        "prefix": "klaussackkey",
        "body": "klaussackkey",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moonaltarlinktarget": {
        "prefix": "moonaltarlinktarget",
        "body": "moonaltarlinktarget",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:halloweenpotionmoon": {
        "prefix": "halloweenpotionmoon",
        "body": "halloweenpotionmoon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:maxlightspawner": {
        "prefix": "maxlightspawner",
        "body": "maxlightspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:moisture_replica": {
        "prefix": "moisture_replica",
        "body": "moisture_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:minigame": {
        "prefix": "minigame",
        "body": "minigame",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mightiness": {
        "prefix": "mightiness",
        "body": "mightiness",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:miasmamanager": {
        "prefix": "miasmamanager",
        "body": "miasmamanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:messagebottlemanager": {
        "prefix": "messagebottlemanager",
        "body": "messagebottlemanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:winter_treeseed": {
        "prefix": "winter_treeseed",
        "body": "winter_treeseed",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:mast": {
        "prefix": "mast",
        "body": "mast",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatcrew": {
        "prefix": "boatcrew",
        "body": "boatcrew",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:markable_proxy": {
        "prefix": "markable_proxy",
        "body": "markable_proxy",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:grouptargeter": {
        "prefix": "grouptargeter",
        "body": "grouptargeter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:markable": {
        "prefix": "markable",
        "body": "markable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:walkableplatformmanager": {
        "prefix": "walkableplatformmanager",
        "body": "walkableplatformmanager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:malbatrossspawner": {
        "prefix": "malbatrossspawner",
        "body": "malbatrossspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:appraisable": {
        "prefix": "appraisable",
        "body": "appraisable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:madsciencelab": {
        "prefix": "madsciencelab",
        "body": "madsciencelab",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:lunarplant_tentacle_weapon": {
        "prefix": "lunarplant_tentacle_weapon",
        "body": "lunarplant_tentacle_weapon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:knownlocations": {
        "prefix": "knownlocations",
        "body": "knownlocations",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:klaussackloot": {
        "prefix": "klaussackloot",
        "body": "klaussackloot",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:itemweigher": {
        "prefix": "itemweigher",
        "body": "itemweigher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:commander": {
        "prefix": "commander",
        "body": "commander",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inventoryitem_replica": {
        "prefix": "inventoryitem_replica",
        "body": "inventoryitem_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:plantregrowth": {
        "prefix": "plantregrowth",
        "body": "plantregrowth",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hunger_replica": {
        "prefix": "hunger_replica",
        "body": "hunger_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hullhealth": {
        "prefix": "hullhealth",
        "body": "hullhealth",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:workmultiplier": {
        "prefix": "workmultiplier",
        "body": "workmultiplier",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hitcher": {
        "prefix": "hitcher",
        "body": "hitcher",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hitchable": {
        "prefix": "hitchable",
        "body": "hitchable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hideandseekhider": {
        "prefix": "hideandseekhider",
        "body": "hideandseekhider",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:deployhelper": {
        "prefix": "deployhelper",
        "body": "deployhelper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:firedetector": {
        "prefix": "firedetector",
        "body": "firedetector",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:harvestable": {
        "prefix": "harvestable",
        "body": "harvestable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:grottowaterfallsoundcontroller": {
        "prefix": "grottowaterfallsoundcontroller",
        "body": "grottowaterfallsoundcontroller",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:skinner_beefalo": {
        "prefix": "skinner_beefalo",
        "body": "skinner_beefalo",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:formationfollower": {
        "prefix": "formationfollower",
        "body": "formationfollower",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playerhearing": {
        "prefix": "playerhearing",
        "body": "playerhearing",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:maxhealer": {
        "prefix": "maxhealer",
        "body": "maxhealer",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fishable": {
        "prefix": "fishable",
        "body": "fishable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:hideandseekgame": {
        "prefix": "hideandseekgame",
        "body": "hideandseekgame",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fertilizerresearchable": {
        "prefix": "fertilizerresearchable",
        "body": "fertilizerresearchable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:builder": {
        "prefix": "builder",
        "body": "builder",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:fertilizable": {
        "prefix": "fertilizable",
        "body": "fertilizable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:farmsoildrinker": {
        "prefix": "farmsoildrinker",
        "body": "farmsoildrinker",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:colourtweener": {
        "prefix": "colourtweener",
        "body": "colourtweener",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:farming_manager": {
        "prefix": "farming_manager",
        "body": "farming_manager",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playervision": {
        "prefix": "playervision",
        "body": "playervision",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:erasablepaper": {
        "prefix": "erasablepaper",
        "body": "erasablepaper",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:playerprox": {
        "prefix": "playerprox",
        "body": "playerprox",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:dryable": {
        "prefix": "dryable",
        "body": "dryable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:boatcannon": {
        "prefix": "boatcannon",
        "body": "boatcannon",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:discoverable": {
        "prefix": "discoverable",
        "body": "discoverable",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:battery": {
        "prefix": "battery",
        "body": "battery",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:singinginspiration": {
        "prefix": "singinginspiration",
        "body": "singinginspiration",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:damagetyperesist": {
        "prefix": "damagetyperesist",
        "body": "damagetyperesist",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:crewmember": {
        "prefix": "crewmember",
        "body": "crewmember",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:crabkingspawner": {
        "prefix": "crabkingspawner",
        "body": "crabkingspawner",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cooldown": {
        "prefix": "cooldown",
        "body": "cooldown",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:constructionsite": {
        "prefix": "constructionsite",
        "body": "constructionsite",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:inventory_replica": {
        "prefix": "inventory_replica",
        "body": "inventory_replica",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:compostingbin": {
        "prefix": "compostingbin",
        "body": "compostingbin",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:cattoy": {
        "prefix": "cattoy",
        "body": "cattoy",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:circler": {
        "prefix": "circler",
        "body": "circler",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:carnivalgameshooter": {
        "prefix": "carnivalgameshooter",
        "body": "carnivalgameshooter",
        "description": " ※说明: \n ※贡献者: "
    },
    "组件:skinner": {
        "prefix": "skinner",
        "body": "skinner",
        "description": " ※说明: \n ※贡献者: "
    },
    "var:components组件": {
        "prefix": "components",
        "body": "components",
        "description": " ※说明: 组件\n ※贡献者: lan"
    },
    "var:MiniMap小地图(系统组件)": {
        "prefix": "MiniMap",
        "body": "MiniMap",
        "description": " ※说明: 小地图(系统组件)\n ※贡献者: lan"
    },
    "var:attacker攻击者": {
        "prefix": "attacker",
        "body": "attacker",
        "description": " ※说明: 攻击者\n ※贡献者: lan"
    },
    "var:target目标": {
        "prefix": "target",
        "body": "target",
        "description": " ※说明: 目标\n ※贡献者: lan"
    },
    "var:Light光源(系统组件)": {
        "prefix": "Light",
        "body": "Light",
        "description": " ※说明: 光源(系统组件)\n ※贡献者: lan"
    },
    "var:Transform体型(系统组件)": {
        "prefix": "Transform",
        "body": "Transform",
        "description": " ※说明: 体型(系统组件)\n ※贡献者: lan"
    },
    "var:SoundEmitter声音发射器(系统组件)": {
        "prefix": "SoundEmitter",
        "body": "SoundEmitter",
        "description": " ※说明: 声音发射器(系统组件)\n ※贡献者: lan"
    },
    "var:Physics物理性(系统组件)": {
        "prefix": "Physics",
        "body": "Physics",
        "description": " ※说明: 物理性(系统组件)\n ※贡献者: lan"
    },
    "var:Network网络(系统组件)": {
        "prefix": "Network",
        "body": "Network",
        "description": " ※说明: 网络(系统组件)\n ※贡献者: lan"
    }
}